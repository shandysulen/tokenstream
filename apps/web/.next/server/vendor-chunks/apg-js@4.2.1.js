/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/apg-js@4.2.1";
exports.ids = ["vendor-chunks/apg-js@4.2.1"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/api.js":
/*!************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/api.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module is Application Programming Interface (API) for **APG** - the ABNF Parser Generator.\n//\n// *Note on teminology.*\n// APG is a parser generator.\n// However, it really only generates a \"grammar object\" (see below) from the defining SABNF grammar.\n// The generated parser is incomplete at this stage.\n// Remaining, it is the job of the user to develop the generated parser from the grammar object and the **APG** Library (**apg-lib**).\n//\n// The following terminology my help clear up any confusion between the idea of a \"generated parser\" versus a \"generated grammar object\".\n\n// - The generating parser: **APG** is an **APG** parser (yes, there is a circular dependence between **apg-api** and **apg-lib**). We'll call it the generating parser.\n// - The target parser: **APG**'s goal is to generate a parser. We'll call it the target parser.\n// - The target grammar: this is the (ASCII) SABNF grammar defining the target parser.\n// - The target grammar object: **APG** parses the SABNF grammar and generates the JavaScript source for a target grammar object constructor function\n// and/or an actual grammar object.\n// - The final target parser: The user then develops the final target parser using the generated target grammar\n// object and the **APG** parsing library, **apg-lib**.\n// Throws execeptions on fatal errors.\n//\n// src: the input SABNF grammar<br>\n// may be one of:\n// - Buffer of bytes\n// - JavaScript string\n// - Array of integer character codes\nmodule.exports = function api(src) {\n  const { Buffer } = __webpack_require__(/*! buffer */ \"buffer\");\n  const thisFileName = 'api.js: ';\n  const thisObject = this;\n\n  /* PRIVATE PROPERTIES */\n  const apglib = __webpack_require__(/*! ../apg-lib/node-exports */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/node-exports.js\");\n  const converter = __webpack_require__(/*! ../apg-conv-api/converter */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-conv-api/converter.js\");\n  const scanner = __webpack_require__(/*! ./scanner */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/scanner.js\");\n  const parser = new (__webpack_require__(/*! ./parser */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/parser.js\"))();\n  const { attributes, showAttributes, showAttributeErrors, showRuleDependencies } = __webpack_require__(/*! ./attributes */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/attributes.js\");\n  const showRules = __webpack_require__(/*! ./show-rules */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/show-rules.js\");\n\n  /* PRIVATE MEMBERS (FUNCTIONS) */\n  /* Convert a phrase (array of character codes) to HTML. */\n  const abnfToHtml = function abnfToHtml(chars, beg, len) {\n    const NORMAL = 0;\n    const CONTROL = 1;\n    const INVALID = 2;\n    const CONTROL_BEG = `<span class=\"${apglib.style.CLASS_CTRLCHAR}\">`;\n    const CONTROL_END = '</span>';\n    const INVALID_BEG = `<span class=\"${apglib.style.CLASS_NOMATCH}\">`;\n    const INVALID_END = '</span>';\n    let end;\n    let html = '';\n    const TRUE = true;\n    while (TRUE) {\n      if (!Array.isArray(chars) || chars.length === 0) {\n        break;\n      }\n      if (typeof beg !== 'number') {\n        throw new Error('abnfToHtml: beg must be type number');\n      }\n      if (beg >= chars.length) {\n        break;\n      }\n      if (typeof len !== 'number' || beg + len >= chars.length) {\n        end = chars.length;\n      } else {\n        end = beg + len;\n      }\n      let state = NORMAL;\n      for (let i = beg; i < end; i += 1) {\n        const ch = chars[i];\n        if (ch >= 32 && ch <= 126) {\n          /* normal - printable ASCII characters */\n          if (state === CONTROL) {\n            html += CONTROL_END;\n            state = NORMAL;\n          } else if (state === INVALID) {\n            html += INVALID_END;\n            state = NORMAL;\n          }\n          /* handle reserved HTML entity characters */\n          switch (ch) {\n            case 32:\n              html += '&nbsp;';\n              break;\n            case 60:\n              html += '&lt;';\n              break;\n            case 62:\n              html += '&gt;';\n              break;\n            case 38:\n              html += '&amp;';\n              break;\n            case 34:\n              html += '&quot;';\n              break;\n            case 39:\n              html += '&#039;';\n              break;\n            case 92:\n              html += '&#092;';\n              break;\n            default:\n              html += String.fromCharCode(ch);\n              break;\n          }\n        } else if (ch === 9 || ch === 10 || ch === 13) {\n          /* control characters */\n          if (state === NORMAL) {\n            html += CONTROL_BEG;\n            state = CONTROL;\n          } else if (state === INVALID) {\n            html += INVALID_END + CONTROL_BEG;\n            state = CONTROL;\n          }\n          if (ch === 9) {\n            html += 'TAB';\n          }\n          if (ch === 10) {\n            html += 'LF';\n          }\n          if (ch === 13) {\n            html += 'CR';\n          }\n        } else {\n          /* invalid characters */\n          if (state === NORMAL) {\n            html += INVALID_BEG;\n            state = INVALID;\n          } else if (state === CONTROL) {\n            html += CONTROL_END + INVALID_BEG;\n            state = INVALID;\n          }\n          /* display character as hexadecimal value */\n          html += `\\\\x${apglib.utils.charToHex(ch)}`;\n        }\n      }\n      if (state === INVALID) {\n        html += INVALID_END;\n      }\n      if (state === CONTROL) {\n        html += CONTROL_END;\n      }\n      break;\n    }\n    return html;\n  };\n  /* Convert a phrase (array of character codes) to ASCII text. */\n  const abnfToAscii = function abnfToAscii(chars, beg, len) {\n    let str = '';\n    for (let i = beg; i < beg + len; i += 1) {\n      const ch = chars[i];\n      if (ch >= 32 && ch <= 126) {\n        str += String.fromCharCode(ch);\n      } else {\n        switch (ch) {\n          case 9:\n            str += '\\\\t';\n            break;\n          case 10:\n            str += '\\\\n';\n            break;\n          case 13:\n            str += '\\\\r';\n            break;\n          default:\n            str += '\\\\unknown';\n            break;\n        }\n      }\n    }\n    return str;\n  };\n  /* translate lines (SABNF grammar) to ASCII text */\n  const linesToAscii = function linesToAscii(lines) {\n    let str = 'Annotated Input Grammar';\n    lines.forEach((val) => {\n      str += '\\n';\n      str += `line no: ${val.lineNo}`;\n      str += ` : char index: ${val.beginChar}`;\n      str += ` : length: ${val.length}`;\n      str += ` : abnf: ${abnfToAscii(thisObject.chars, val.beginChar, val.length)}`;\n    });\n    str += '\\n';\n    return str;\n  };\n  /* translate lines (SABNF grammar) to HTML */\n  const linesToHtml = function linesToHtml(lines) {\n    let html = '';\n    html += `<table class=\"${apglib.style.CLASS_GRAMMAR}\">\\n`;\n    const title = 'Annotated Input Grammar';\n    html += `<caption>${title}</caption>\\n`;\n    html += '<tr>';\n    html += '<th>line<br>no.</th><th>first<br>char</th><th><br>length</th><th><br>text</th>';\n    html += '</tr>\\n';\n    lines.forEach((val) => {\n      html += '<tr>';\n      html += `<td>${val.lineNo}`;\n      html += `</td><td>${val.beginChar}`;\n      html += `</td><td>${val.length}`;\n      html += `</td><td>${abnfToHtml(thisObject.chars, val.beginChar, val.length)}`;\n      html += '</td>';\n      html += '</tr>\\n';\n    });\n\n    html += '</table>\\n';\n    return html;\n  };\n  /* Format the error messages to HTML, for page display. */\n  const errorsToHtml = function errorsToHtml(errors, lines, chars, title) {\n    const [style] = apglib;\n    let html = '';\n    const errorArrow = `<span class=\"${style.CLASS_NOMATCH}\">&raquo;</span>`;\n    html += `<p><table class=\"${style.CLASS_GRAMMAR}\">\\n`;\n    if (title && typeof title === 'string') {\n      html += `<caption>${title}</caption>\\n`;\n    }\n    html += '<tr><th>line<br>no.</th><th>line<br>offset</th><th>error<br>offset</th><th><br>text</th></tr>\\n';\n    errors.forEach((val) => {\n      let line;\n      let relchar;\n      let beg;\n      let end;\n      let text;\n      let prefix = '';\n      let suffix = '';\n      if (lines.length === 0) {\n        text = errorArrow;\n        relchar = 0;\n      } else {\n        line = lines[val.line];\n        beg = line.beginChar;\n        if (val.char > beg) {\n          prefix = abnfToHtml(chars, beg, val.char - beg);\n        }\n        beg = val.char;\n        end = line.beginChar + line.length;\n        if (beg < end) {\n          suffix = abnfToHtml(chars, beg, end - beg);\n        }\n        text = prefix + errorArrow + suffix;\n        relchar = val.char - line.beginChar;\n        html += '<tr>';\n        html += `<td>${val.line}</td><td>${line.beginChar}</td><td>${relchar}</td><td>${text}</td>`;\n        html += '</tr>\\n';\n        html += '<tr>';\n        html += `<td colspan=\"3\"></td><td>&uarr;:&nbsp;${apglib.utils.stringToAsciiHtml(val.msg)}</td>`;\n        html += '</tr>\\n';\n      }\n    });\n    html += '</table></p>\\n';\n    return html;\n  };\n  /* Display an array of errors in ASCII text */\n  const errorsToAscii = function errorsToAscii(errors, lines, chars) {\n    let str;\n    let line;\n    let beg;\n    let len;\n    str = '';\n    errors.forEach((error) => {\n      line = lines[error.line];\n      str += `${line.lineNo}: `;\n      str += `${line.beginChar}: `;\n      str += `${error.char - line.beginChar}: `;\n      beg = line.beginChar;\n      len = error.char - line.beginChar;\n      str += abnfToAscii(chars, beg, len);\n      str += ' >> ';\n      beg = error.char;\n      len = line.beginChar + line.length - error.char;\n      str += abnfToAscii(chars, beg, len);\n      str += '\\n';\n      str += `${line.lineNo}: `;\n      str += `${line.beginChar}: `;\n      str += `${error.char - line.beginChar}: `;\n      str += 'error: ';\n      str += error.msg;\n      str += '\\n';\n    });\n    return str;\n  };\n  let isScanned = false;\n  let isParsed = false;\n  let isTranslated = false;\n  let haveAttributes = false;\n  let attributeErrors = 0;\n  let lineMap;\n\n  /* PUBLIC PROPERTIES */\n  // The input SABNF grammar as a JavaScript string.\n  // this.sabnf;\n  // The input SABNF grammar as an array of character codes.\n  // this.chars;\n  // An array of line objects, defining each line of the input SABNF grammar\n  // - lineNo : the zero-based line number\n  // - beginChar : offset (into `this.chars`) of the first character in the line\n  // - length : the number of characters in the line\n  // - textLength : the number of characters of text in the line, excluding the line ending characters\n  // - endType : \"CRLF\", \"LF\", \"CR\" or \"none\" if the last line has no line ending characters\n  // - invalidChars : `true` if the line contains invalid characters, `false` otherwise\n  // this.lines;\n  // An array of rule names and data.\n  // - name : the rule name\n  // - lower : the rule name in lower case\n  // - index : the index of the rule (ordered by appearance in SABNF grammar)\n  // - isBkr : `true` if this rule has been back referenced, `false` otherwise\n  // - opcodes : array of opcodes for this rule\n  // - attrs : the rule attributes\n  // - ctrl : system data\n  // this.rules;\n  // An array of UDT names and data.\n  // this.udts;\n  // An array of errors, if any.\n  // - line : the line number containing the error\n  // - char : the character offset of the error\n  // - msg : the error message\n  this.errors = [];\n\n  /* CONSTRUCTOR */\n  if (Buffer.isBuffer(src)) {\n    this.chars = converter.decode('BINARY', src);\n  } else if (Array.isArray(src)) {\n    this.chars = src.slice();\n  } else if (typeof src === 'string') {\n    this.chars = converter.decode('STRING', src);\n  } else {\n    throw new Error(`${thisFileName}input source is not a string, byte Buffer or character array`);\n  }\n  this.sabnf = converter.encode('STRING', this.chars);\n\n  /* PUBLIC MEMBERS (FUNCTIONS) */\n  // Scan the input SABNF grammar for invalid characters and catalog the lines via `this.lines`.\n  // - strict : (optional) if `true`, all lines, including the last must end with CRLF (\\r\\n),\n  // if `false` (in any JavaScript sense) then line endings may be any mix of CRLF, LF, CR, or end-of-file.\n  // - trace (*) : (optional) a parser trace object, which will trace the parser that does the scan\n  this.scan = function scan(strict, trace) {\n    this.lines = scanner(this.chars, this.errors, strict, trace);\n    isScanned = true;\n  };\n  // Parse the input SABNF grammar for correct syntax.\n  // - strict : (optional) if `true`, the input grammar must be strict ABNF, conforming to [RFC 5234](https://tools.ietf.org/html/rfc5234)\n  // and [RFC 7405](https://tools.ietf.org/html/rfc7405). No superset features allowed.\n  // - trace (\\*) : (optional) a parser trace object, which will trace the syntax parser\n  //\n  // <i>(*)NOTE: the trace option was used primarily during development.\n  // Error detection and reporting is now fairly robust and tracing should be unnecessary. Use at your own peril.</i>\n  this.parse = function parse(strict, trace) {\n    if (!isScanned) {\n      throw new Error(`${thisFileName}grammar not scanned`);\n    }\n    parser.syntax(this.chars, this.lines, this.errors, strict, trace);\n    isParsed = true;\n  };\n  // Translate the SABNF grammar syntax into the opcodes that will guide the parser for this grammar.\n  this.translate = function translate() {\n    if (!isParsed) {\n      throw new Error(`${thisFileName}grammar not scanned and parsed`);\n    }\n    const ret = parser.semantic(this.chars, this.lines, this.errors);\n    if (this.errors.length === 0) {\n      this.rules = ret.rules;\n      this.udts = ret.udts;\n      lineMap = ret.lineMap;\n      isTranslated = true;\n    }\n  };\n  // Compute the attributes of each rule.\n  this.attributes = function attrs() {\n    if (!isTranslated) {\n      throw new Error(`${thisFileName}grammar not scanned, parsed and translated`);\n    }\n    attributeErrors = attributes(this.rules, this.udts, lineMap, this.errors);\n    haveAttributes = true;\n    return attributeErrors;\n  };\n  // This function will perform the full suite of steps required to generate a parser grammar object\n  // from the input SABNF grammar.\n  this.generate = function generate(strict) {\n    this.lines = scanner(this.chars, this.errors, strict);\n    if (this.errors.length) {\n      return;\n    }\n    parser.syntax(this.chars, this.lines, this.errors, strict);\n    if (this.errors.length) {\n      return;\n    }\n    const ret = parser.semantic(this.chars, this.lines, this.errors);\n    if (this.errors.length) {\n      return;\n    }\n    this.rules = ret.rules;\n    this.udts = ret.udts;\n    lineMap = ret.lineMap;\n\n    attributeErrors = attributes(this.rules, this.udts, lineMap, this.errors);\n    haveAttributes = true;\n  };\n  // Display the rules.\n  // Must scan, parse and translate before calling this function, otherwise there are no rules to display.\n  // - order\n  //      - \"index\" or \"i\", index order (default)\n  //      - \"alpha\" or \"a\", alphabetical order\n  //      - none of above, index order (default)\n  this.displayRules = function displayRules(order = 'index') {\n    if (!isTranslated) {\n      throw new Error(`${thisFileName}grammar not scanned, parsed and translated`);\n    }\n    return showRules(this.rules, this.udts, order);\n  };\n  // Display the rule dependencies.\n  // Must scan, parse, translate and compute attributes before calling this function.\n  // Otherwise the rule dependencies are not known.\n  // - order\n  //      - \"index\" or \"i\", index order (default)\n  //      - \"alpha\" or \"a\", alphabetical order\n  //      - \"type\" or \"t\", ordered by type (alphabetical within each type/group)\n  //      - none of above, index order (default)\n  this.displayRuleDependencies = function displayRuleDependencies(order = 'index') {\n    if (!haveAttributes) {\n      throw new Error(`${thisFileName}no attributes - must be preceeded by call to attributes()`);\n    }\n    return showRuleDependencies(order);\n  };\n  // Display the attributes.\n  // Must scan, parse, translate and compute attributes before calling this function.\n  // - order\n  //      - \"index\" or \"i\", index order (default)\n  //      - \"alpha\" or \"a\", alphabetical order\n  //      - \"type\" or \"t\", ordered by type (alphabetical within each type/group)\n  //      - none of above, type order (default)\n  this.displayAttributes = function displayAttributes(order = 'index') {\n    if (!haveAttributes) {\n      throw new Error(`${thisFileName}no attributes - must be preceeded by call to attributes()`);\n    }\n    if (attributeErrors) {\n      showAttributeErrors(order);\n    }\n    return showAttributes(order);\n  };\n  this.displayAttributeErrors = function displayAttributeErrors() {\n    if (!haveAttributes) {\n      throw new Error(`${thisFileName}no attributes - must be preceeded by call to attributes()`);\n    }\n    return showAttributeErrors();\n  };\n  // Returns a parser grammar object constructor function as a JavaScript string.\n  // This object can then be used to construct a parser.\n  this.toSource = function toSource(name) {\n    if (!haveAttributes) {\n      throw new Error(`${thisFileName}can't generate parser source - must be preceeded by call to attributes()`);\n    }\n    if (attributeErrors) {\n      throw new Error(`${thisFileName}can't generate parser source - attributes have ${attributeErrors} errors`);\n    }\n    return parser.generateSource(this.chars, this.lines, this.rules, this.udts, name);\n  };\n  // Returns a parser grammar object.\n  // This grammar object may be used by the application to construct a parser.\n  this.toObject = function toObject() {\n    if (!haveAttributes) {\n      throw new Error(`${thisFileName}can't generate parser source - must be preceeded by call to attributes()`);\n    }\n    if (attributeErrors) {\n      throw new Error(`${thisFileName}can't generate parser source - attributes have ${attributeErrors} errors`);\n    }\n    return parser.generateObject(this.sabnf, this.rules, this.udts);\n  };\n  // Display errors in text format, suitable for `console.log()`.\n  this.errorsToAscii = function errorsToAsciiFunc() {\n    return errorsToAscii(this.errors, this.lines, this.chars);\n  };\n  // Display errors in HTML format, suitable for web page display.\n  // (`apg-lib.css` required for proper styling)\n  this.errorsToHtml = function errorsToHtmlFunc(title) {\n    return errorsToHtml(this.errors, this.lines, this.chars, title);\n  };\n  // Generate an annotated the SABNF grammar display in text format.\n  this.linesToAscii = function linesToAsciiFunc() {\n    return linesToAscii(this.lines);\n  };\n  // Generate an annotated the SABNF grammar display in HTML format.\n  // (`apg-lib.css` required for proper styling)\n  this.linesToHtml = function linesToHtmlFunc() {\n    return linesToHtml(this.lines);\n  };\n  // This function was only used by apg.html which has been abandoned.\n  /*\n    this.getAttributesObject = function () {\n        return null;\n    };\n    */\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/api.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/attributes.js":
/*!*******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/attributes.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint-disable class-methods-use-this */\n/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// Attributes Validation\n//\n// It is well known that recursive-descent parsers will fail if a rule is left recursive.\n// Besides left recursion, there are a couple of other fatal attributes that need to be disclosed as well.\n// There are several non-fatal attributes that are of interest also.\n// This module will determine six different attributes listed here with simple examples.\n//\n// **fatal attributes**<br>\n// left recursion<br>\n// S = S \"x\" / \"y\"\n//\n// cyclic<br>\n// S = S\n//\n// infinite<br>\n// S = \"y\" S\n//\n// **non-fatal attributes** (but nice to know)<br>\n// nested recursion<br>\n// S = \"a\" S \"b\" / \"y\"\n//\n// right recursion<br>\n// S = \"x\" S / \"y\"\n//\n// empty string<br>\n// S = \"x\" S / \"\"\n//\n// Note that these are “aggregate” attributes, in that if the attribute is true it only means that it can be true,\n// not that it will always be true for every input string.\n// In the simple examples above the attributes may be obvious and definite – always true or false.\n// However, for a large grammar with possibly hundreds of rules and parse tree branches,\n// it can be obscure which branches lead to which attributes.\n// Furthermore, different input strings will lead the parser down different branches.\n// One input string may parse perfectly while another will hit a left-recursive branch and bottom out the call stack.\n//\n// It is for this reason that the APG parser generator computes these attributes.\n// When using the API the attributes call is optional but generating a parser without checking the attributes - proceed at your own peril.\n//\n// Additionally, the attribute phase will identify rule dependencies and mutually-recursive groups. For example,\n//\n// S = \"a\" A \"b\" / \"y\"<br>\n// A = \"x\"\n//\n// S is dependent on A but A is not dependent on S.\n//\n// S = \"a\" A \"b\" / \"c\"<br>\n// A = \"x\" S \"y\" / \"z\"\n//\n// S and A are dependent on one another and are mutually recursive.\nmodule.exports = (function exportAttributes() {\n  const id = __webpack_require__(/*! ../apg-lib/identifiers */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/identifiers.js\");\n  const { ruleAttributes, showAttributes, showAttributeErrors } = __webpack_require__(/*! ./rule-attributes */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/rule-attributes.js\");\n  const { ruleDependencies, showRuleDependencies } = __webpack_require__(/*! ./rule-dependencies */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/rule-dependencies.js\");\n  class State {\n    constructor(rules, udts) {\n      this.rules = rules;\n      this.udts = udts;\n      this.ruleCount = rules.length;\n      this.udtCount = udts.length;\n      this.startRule = 0;\n      this.dependenciesComplete = false;\n      this.attributesComplete = false;\n      this.isMutuallyRecursive = false;\n      this.ruleIndexes = this.indexArray(this.ruleCount);\n      this.ruleAlphaIndexes = this.indexArray(this.ruleCount);\n      this.ruleTypeIndexes = this.indexArray(this.ruleCount);\n      this.udtIndexes = this.indexArray(this.udtCount);\n      this.udtAlphaIndexes = this.indexArray(this.udtCount);\n      this.attrsErrorCount = 0;\n      this.attrs = [];\n      this.attrsErrors = [];\n      this.attrsWorking = [];\n      this.ruleDeps = [];\n      for (let i = 0; i < this.ruleCount; i += 1) {\n        this.attrs.push(this.attrGen(this.rules[i]));\n        this.attrsWorking.push(this.attrGen(this.rules[i]));\n        this.ruleDeps.push(this.rdGen(rules[i], this.ruleCount, this.udtCount));\n      }\n      this.compRulesAlpha = this.compRulesAlpha.bind(this);\n      this.compUdtsAlpha = this.compUdtsAlpha.bind(this);\n      this.compRulesType = this.compRulesType.bind(this);\n      this.compRulesGroup = this.compRulesGroup.bind(this);\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    attrGen(rule) {\n      return {\n        left: false,\n        nested: false,\n        right: false,\n        empty: false,\n        finite: false,\n        cyclic: false,\n        leaf: false,\n        isOpen: false,\n        isComplete: false,\n        rule,\n      };\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    attrInit(attr) {\n      attr.left = false;\n      attr.nested = false;\n      attr.right = false;\n      attr.empty = false;\n      attr.finite = false;\n      attr.cyclic = false;\n      attr.leaf = false;\n      attr.isOpen = false;\n      attr.isComplete = false;\n    }\n\n    attrCopy(dst, src) {\n      dst.left = src.left;\n      dst.nested = src.nested;\n      dst.right = src.right;\n      dst.empty = src.empty;\n      dst.finite = src.finite;\n      dst.cyclic = src.cyclic;\n      dst.leaf = src.leaf;\n      dst.isOpen = src.isOpen;\n      dst.isComplete = src.isComplete;\n      dst.rule = src.rule;\n    }\n\n    rdGen(rule, ruleCount, udtCount) {\n      const ret = {\n        rule,\n        recursiveType: id.ATTR_N,\n        groupNumber: -1,\n        refersTo: this.falseArray(ruleCount),\n        refersToUdt: this.falseArray(udtCount),\n        referencedBy: this.falseArray(ruleCount),\n      };\n      return ret;\n    }\n\n    typeToString(recursiveType) {\n      switch (recursiveType) {\n        case id.ATTR_N:\n          return ' N';\n        case id.ATTR_R:\n          return ' R';\n        case id.ATTR_MR:\n          return 'MR';\n        default:\n          return 'UNKNOWN';\n      }\n    }\n\n    falseArray(length) {\n      const ret = [];\n      if (length > 0) {\n        for (let i = 0; i < length; i += 1) {\n          ret.push(false);\n        }\n      }\n      return ret;\n    }\n\n    falsifyArray(a) {\n      for (let i = 0; i < a.length; i += 1) {\n        a[i] = false;\n      }\n    }\n\n    indexArray(length) {\n      const ret = [];\n      if (length > 0) {\n        for (let i = 0; i < length; i += 1) {\n          ret.push(i);\n        }\n      }\n      return ret;\n    }\n\n    compRulesAlpha(left, right) {\n      if (this.rules[left].lower < this.rules[right].lower) {\n        return -1;\n      }\n      if (this.rules[left].lower > this.rules[right].lower) {\n        return 1;\n      }\n      return 0;\n    }\n\n    compUdtsAlpha(left, right) {\n      if (this.udts[left].lower < this.udts[right].lower) {\n        return -1;\n      }\n      if (this.udts[left].lower > this.udts[right].lower) {\n        return 1;\n      }\n      return 0;\n    }\n\n    compRulesType(left, right) {\n      if (this.ruleDeps[left].recursiveType < this.ruleDeps[right].recursiveType) {\n        return -1;\n      }\n      if (this.ruleDeps[left].recursiveType > this.ruleDeps[right].recursiveType) {\n        return 1;\n      }\n      return 0;\n    }\n\n    compRulesGroup(left, right) {\n      if (this.ruleDeps[left].recursiveType === id.ATTR_MR && this.ruleDeps[right].recursiveType === id.ATTR_MR) {\n        if (this.ruleDeps[left].groupNumber < this.ruleDeps[right].groupNumber) {\n          return -1;\n        }\n        if (this.ruleDeps[left].groupNumber > this.ruleDeps[right].groupNumber) {\n          return 1;\n        }\n      }\n      return 0;\n    }\n  }\n  // eslint-disable-next-line no-unused-vars\n  const attributes = function attributes(rules = [], udts = [], lineMap = [], errors = []) {\n    // let i = 0;\n    // Initialize the state. The state of the computation get passed around to multiple functions in multiple files.\n    const state = new State(rules, udts);\n\n    // Determine all rule dependencies\n    //  - which rules each rule refers to\n    //  - which rules reference each rule\n    ruleDependencies(state);\n\n    // Determine the attributes for each rule.\n    ruleAttributes(state);\n    if (state.attrsErrorCount) {\n      errors.push({ line: 0, char: 0, msg: `${state.attrsErrorCount} attribute errors` });\n    }\n\n    // Return the number of attribute errors to the caller.\n    return state.attrsErrorCount;\n  };\n\n  /* Destructuring assignment - see MDN Web Docs */\n  return { attributes, showAttributes, showAttributeErrors, showRuleDependencies };\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/attributes.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/parser.js":
/*!***************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/parser.js ***!
  \***************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module converts an input SABNF grammar text file into a\n// grammar object that can be used with `apg-lib` in an application parser.\n// **apg** is, in fact itself, an ABNF parser that generates an SABNF parser.\n// It is based on the grammar<br>\n// `./dist/abnf-for-sabnf-grammar.bnf`.<br>\n// In its syntax phase, **apg** analyzes the user's input SABNF grammar for correct syntax, generating an AST as it goes.\n// In its semantic phase, **apg** translates the AST to generate the parser for the input grammar.\nmodule.exports = function exportParser() {\n  const thisFileName = 'parser: ';\n  const ApgLib = __webpack_require__(/*! ../apg-lib/node-exports */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/node-exports.js\");\n  const id = ApgLib.ids;\n  const syn = new (__webpack_require__(/*! ./syntax-callbacks */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/syntax-callbacks.js\"))();\n  const sem = new (__webpack_require__(/*! ./semantic-callbacks */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/semantic-callbacks.js\"))();\n  const sabnfGrammar = new (__webpack_require__(/*! ./sabnf-grammar */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/sabnf-grammar.js\"))();\n  // eslint-disable-next-line new-cap\n  const parser = new ApgLib.parser();\n  // eslint-disable-next-line new-cap\n  parser.ast = new ApgLib.ast();\n  parser.callbacks = syn.callbacks;\n  parser.ast.callbacks = sem.callbacks;\n\n  /* find the line containing the given character index */\n  const findLine = function findLine(lines, charIndex, charLength) {\n    if (charIndex < 0 || charIndex >= charLength) {\n      /* return error if out of range */\n      return -1;\n    }\n    for (let i = 0; i < lines.length; i += 1) {\n      if (charIndex >= lines[i].beginChar && charIndex < lines[i].beginChar + lines[i].length) {\n        return i;\n      }\n    }\n    /* should never reach here */\n    return -1;\n  };\n  const translateIndex = function translateIndex(map, index) {\n    let ret = -1;\n    if (index < map.length) {\n      for (let i = index; i < map.length; i += 1) {\n        if (map[i] !== null) {\n          ret = map[i];\n          break;\n        }\n      }\n    }\n    return ret;\n  };\n  /* helper function when removing redundant opcodes */\n  const reduceOpcodes = function reduceOpcodes(rules) {\n    rules.forEach((rule) => {\n      const opcodes = [];\n      const map = [];\n      let reducedIndex = 0;\n      rule.opcodes.forEach((op) => {\n        if (op.type === id.ALT && op.children.length === 1) {\n          map.push(null);\n        } else if (op.type === id.CAT && op.children.length === 1) {\n          map.push(null);\n        } else if (op.type === id.REP && op.min === 1 && op.max === 1) {\n          map.push(null);\n        } else {\n          map.push(reducedIndex);\n          opcodes.push(op);\n          reducedIndex += 1;\n        }\n      });\n      map.push(reducedIndex);\n      /* translate original opcode indexes to the reduced set. */\n      opcodes.forEach((op) => {\n        if (op.type === id.ALT || op.type === id.CAT) {\n          for (let i = 0; i < op.children.length; i += 1) {\n            op.children[i] = translateIndex(map, op.children[i]);\n          }\n        }\n      });\n      rule.opcodes = opcodes;\n    });\n  };\n  /* Parse the grammar - the syntax phase. */\n  /* SABNF grammar syntax errors are caught and reported here. */\n  this.syntax = function syntax(chars, lines, errors, strict, trace) {\n    if (trace) {\n      if (trace.traceObject !== 'traceObject') {\n        throw new TypeError(`${thisFileName}trace argument is not a trace object`);\n      }\n      parser.trace = trace;\n    }\n    const data = {};\n    data.errors = errors;\n    data.strict = !!strict;\n    data.lines = lines;\n    data.findLine = findLine;\n    data.charsLength = chars.length;\n    data.ruleCount = 0;\n    const result = parser.parse(sabnfGrammar, 'file', chars, data);\n    if (!result.success) {\n      errors.push({\n        line: 0,\n        char: 0,\n        msg: 'syntax analysis of input grammar failed',\n      });\n    }\n  };\n  /* Parse the grammar - the semantic phase, translates the AST. */\n  /* SABNF grammar syntax errors are caught and reported here. */\n  this.semantic = function semantic(chars, lines, errors) {\n    const data = {};\n    data.errors = errors;\n    data.lines = lines;\n    data.findLine = findLine;\n    data.charsLength = chars.length;\n    parser.ast.translate(data);\n    if (errors.length) {\n      return null;\n    }\n    /* Remove unneeded operators. */\n    /* ALT operators with a single alternate */\n    /* CAT operators with a single phrase to concatenate */\n    /* REP(1,1) operators (`1*1RuleName` or `1RuleName` is the same as just `RuleName`.) */\n    reduceOpcodes(data.rules);\n    return {\n      rules: data.rules,\n      udts: data.udts,\n      lineMap: data.rulesLineMap,\n    };\n  };\n  // Generate a grammar constructor function.\n  // An object instantiated from this constructor is used with the `apg-lib` `parser()` function.\n  this.generateSource = function generateSource(chars, lines, rules, udts, name) {\n    let source = '';\n    let i;\n    let bkrname;\n    let bkrlower;\n    let opcodeCount = 0;\n    let charCodeMin = Infinity;\n    let charCodeMax = 0;\n    const ruleNames = [];\n    const udtNames = [];\n    let alt = 0;\n    let cat = 0;\n    let rnm = 0;\n    let udt = 0;\n    let rep = 0;\n    let and = 0;\n    let not = 0;\n    let tls = 0;\n    let tbs = 0;\n    let trg = 0;\n    let bkr = 0;\n    let bka = 0;\n    let bkn = 0;\n    let abg = 0;\n    let aen = 0;\n    rules.forEach((rule) => {\n      ruleNames.push(rule.lower);\n      opcodeCount += rule.opcodes.length;\n      rule.opcodes.forEach((op) => {\n        switch (op.type) {\n          case id.ALT:\n            alt += 1;\n            break;\n          case id.CAT:\n            cat += 1;\n            break;\n          case id.RNM:\n            rnm += 1;\n            break;\n          case id.UDT:\n            udt += 1;\n            break;\n          case id.REP:\n            rep += 1;\n            break;\n          case id.AND:\n            and += 1;\n            break;\n          case id.NOT:\n            not += 1;\n            break;\n          case id.BKA:\n            bka += 1;\n            break;\n          case id.BKN:\n            bkn += 1;\n            break;\n          case id.BKR:\n            bkr += 1;\n            break;\n          case id.ABG:\n            abg += 1;\n            break;\n          case id.AEN:\n            aen += 1;\n            break;\n          case id.TLS:\n            tls += 1;\n            for (i = 0; i < op.string.length; i += 1) {\n              if (op.string[i] < charCodeMin) {\n                charCodeMin = op.string[i];\n              }\n              if (op.string[i] > charCodeMax) {\n                charCodeMax = op.string[i];\n              }\n            }\n            break;\n          case id.TBS:\n            tbs += 1;\n            for (i = 0; i < op.string.length; i += 1) {\n              if (op.string[i] < charCodeMin) {\n                charCodeMin = op.string[i];\n              }\n              if (op.string[i] > charCodeMax) {\n                charCodeMax = op.string[i];\n              }\n            }\n            break;\n          case id.TRG:\n            trg += 1;\n            if (op.min < charCodeMin) {\n              charCodeMin = op.min;\n            }\n            if (op.max > charCodeMax) {\n              charCodeMax = op.max;\n            }\n            break;\n          default:\n            throw new Error('generateSource: unrecognized opcode');\n        }\n      });\n    });\n    ruleNames.sort();\n    if (udts.length > 0) {\n      udts.forEach((udtFunc) => {\n        udtNames.push(udtFunc.lower);\n      });\n      udtNames.sort();\n    }\n    let funcname = 'module.exports';\n    if (name && typeof name === 'string') {\n      funcname = `let ${name}`;\n    }\n    source += '// copyright: Copyright (c) 2023 Lowell D. Thomas, all rights reserved<br>\\n';\n    source += '//   license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)<br>\\n';\n    source += '//\\n';\n    source += '// Generated by apg-js, Version 4.2.1 [apg-js](https://github.com/ldthomas/apg-js)\\n';\n    source += `${funcname} = function grammar(){\\n`;\n    source += '  // ```\\n';\n    source += '  // SUMMARY\\n';\n    source += `  //      rules = ${rules.length}\\n`;\n    source += `  //       udts = ${udts.length}\\n`;\n    source += `  //    opcodes = ${opcodeCount}\\n`;\n    source += '  //        ---   ABNF original opcodes\\n';\n    source += `  //        ALT = ${alt}\\n`;\n    source += `  //        CAT = ${cat}\\n`;\n    source += `  //        REP = ${rep}\\n`;\n    source += `  //        RNM = ${rnm}\\n`;\n    source += `  //        TLS = ${tls}\\n`;\n    source += `  //        TBS = ${tbs}\\n`;\n    source += `  //        TRG = ${trg}\\n`;\n    source += '  //        ---   SABNF superset opcodes\\n';\n    source += `  //        UDT = ${udt}\\n`;\n    source += `  //        AND = ${and}\\n`;\n    source += `  //        NOT = ${not}\\n`;\n    source += `  //        BKA = ${bka}\\n`;\n    source += `  //        BKN = ${bkn}\\n`;\n    source += `  //        BKR = ${bkr}\\n`;\n    source += `  //        ABG = ${abg}\\n`;\n    source += `  //        AEN = ${aen}\\n`;\n    source += '  // characters = [';\n    if (tls + tbs + trg === 0) {\n      source += ' none defined ]';\n    } else {\n      source += `${charCodeMin} - ${charCodeMax}]`;\n    }\n    if (udt > 0) {\n      source += ' + user defined';\n    }\n    source += '\\n';\n    source += '  // ```\\n';\n    source += '  /* OBJECT IDENTIFIER (for internal parser use) */\\n';\n    source += \"  this.grammarObject = 'grammarObject';\\n\";\n    source += '\\n';\n    source += '  /* RULES */\\n';\n    source += '  this.rules = [];\\n';\n    rules.forEach((rule, ii) => {\n      let thisRule = '  this.rules[';\n      thisRule += ii;\n      thisRule += \"] = {name: '\";\n      thisRule += rule.name;\n      thisRule += \"', lower: '\";\n      thisRule += rule.lower;\n      thisRule += \"', index: \";\n      thisRule += rule.index;\n      thisRule += ', isBkr: ';\n      thisRule += rule.isBkr;\n      thisRule += '};\\n';\n      source += thisRule;\n    });\n    source += '\\n';\n    source += '  /* UDTS */\\n';\n    source += '  this.udts = [];\\n';\n    if (udts.length > 0) {\n      udts.forEach((udtFunc, ii) => {\n        let thisUdt = '  this.udts[';\n        thisUdt += ii;\n        thisUdt += \"] = {name: '\";\n        thisUdt += udtFunc.name;\n        thisUdt += \"', lower: '\";\n        thisUdt += udtFunc.lower;\n        thisUdt += \"', index: \";\n        thisUdt += udtFunc.index;\n        thisUdt += ', empty: ';\n        thisUdt += udtFunc.empty;\n        thisUdt += ', isBkr: ';\n        thisUdt += udtFunc.isBkr;\n        thisUdt += '};\\n';\n        source += thisUdt;\n      });\n    }\n    source += '\\n';\n    source += '  /* OPCODES */\\n';\n    rules.forEach((rule, ruleIndex) => {\n      if (ruleIndex > 0) {\n        source += '\\n';\n      }\n      source += `  /* ${rule.name} */\\n`;\n      source += `  this.rules[${ruleIndex}].opcodes = [];\\n`;\n      rule.opcodes.forEach((op, opIndex) => {\n        let prefix;\n        switch (op.type) {\n          case id.ALT:\n            source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${\n              op.type\n            }, children: [${op.children.toString()}]};// ALT\\n`;\n            break;\n          case id.CAT:\n            source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${\n              op.type\n            }, children: [${op.children.toString()}]};// CAT\\n`;\n            break;\n          case id.RNM:\n            source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}, index: ${op.index}};// RNM(${\n              rules[op.index].name\n            })\\n`;\n            break;\n          case id.BKR:\n            if (op.index >= rules.length) {\n              bkrname = udts[op.index - rules.length].name;\n              bkrlower = udts[op.index - rules.length].lower;\n            } else {\n              bkrname = rules[op.index].name;\n              bkrlower = rules[op.index].lower;\n            }\n            prefix = '%i';\n            if (op.bkrCase === id.BKR_MODE_CS) {\n              prefix = '%s';\n            }\n            if (op.bkrMode === id.BKR_MODE_UM) {\n              prefix += '%u';\n            } else {\n              prefix += '%p';\n            }\n            bkrname = prefix + bkrname;\n            source +=\n              `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}, index: ${op.index}, lower: '${bkrlower}'` +\n              `, bkrCase: ${op.bkrCase}, bkrMode: ${op.bkrMode}};// BKR(\\\\${bkrname})\\n`;\n            break;\n          case id.UDT:\n            source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}, empty: ${op.empty}, index: ${\n              op.index\n            }};// UDT(${udts[op.index].name})\\n`;\n            break;\n          case id.REP:\n            source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}, min: ${op.min}, max: ${op.max}};// REP\\n`;\n            break;\n          case id.AND:\n            source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}};// AND\\n`;\n            break;\n          case id.NOT:\n            source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}};// NOT\\n`;\n            break;\n          case id.ABG:\n            source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}};// ABG(%^)\\n`;\n            break;\n          case id.AEN:\n            source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}};// AEN(%$)\\n`;\n            break;\n          case id.BKA:\n            source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}};// BKA\\n`;\n            break;\n          case id.BKN:\n            source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}};// BKN\\n`;\n            break;\n          case id.TLS:\n            source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${\n              op.type\n            }, string: [${op.string.toString()}]};// TLS\\n`;\n            break;\n          case id.TBS:\n            source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${\n              op.type\n            }, string: [${op.string.toString()}]};// TBS\\n`;\n            break;\n          case id.TRG:\n            source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}, min: ${op.min}, max: ${op.max}};// TRG\\n`;\n            break;\n          default:\n            throw new Error('parser.js: ~143: unrecognized opcode');\n        }\n      });\n    });\n    source += '\\n';\n    source += '  // The `toString()` function will display the original grammar file(s) that produced these opcodes.\\n';\n    source += '  this.toString = function toString(){\\n';\n    source += '    let str = \"\";\\n';\n    let str;\n    lines.forEach((line) => {\n      const end = line.beginChar + line.length;\n      str = '';\n      source += '    str += \"';\n      for (let ii = line.beginChar; ii < end; ii += 1) {\n        switch (chars[ii]) {\n          case 9:\n            str = ' ';\n            break;\n          case 10:\n            str = '\\\\n';\n            break;\n          case 13:\n            str = '\\\\r';\n            break;\n          case 34:\n            str = '\\\\\"';\n            break;\n          case 92:\n            str = '\\\\\\\\';\n            break;\n          default:\n            str = String.fromCharCode(chars[ii]);\n            break;\n        }\n        source += str;\n      }\n      source += '\";\\n';\n    });\n    source += '    return str;\\n';\n    source += '  }\\n';\n    source += '}\\n';\n    return source;\n  };\n  // Generate a grammar file object.\n  // Returns the same object as instantiating the constructor function returned by<br>\n  // `this.generateSource()`.<br>\n  this.generateObject = function generateObject(stringArg, rules, udts) {\n    const obj = {};\n    const ruleNames = [];\n    const udtNames = [];\n    const string = stringArg.slice(0);\n    obj.grammarObject = 'grammarObject';\n    rules.forEach((rule) => {\n      ruleNames.push(rule.lower);\n    });\n    ruleNames.sort();\n    if (udts.length > 0) {\n      udts.forEach((udtFunc) => {\n        udtNames.push(udtFunc.lower);\n      });\n      udtNames.sort();\n    }\n    obj.callbacks = [];\n    ruleNames.forEach((name) => {\n      obj.callbacks[name] = false;\n    });\n    if (udts.length > 0) {\n      udtNames.forEach((name) => {\n        obj.callbacks[name] = false;\n      });\n    }\n    obj.rules = rules;\n    obj.udts = udts;\n    obj.toString = function toStringFunc() {\n      return string;\n    };\n    return obj;\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/parser.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/rule-attributes.js":
/*!************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/rule-attributes.js ***!
  \************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module does the heavy lifting for attribute generation.\nmodule.exports = (function exportRuleAttributes() {\n  const id = __webpack_require__(/*! ../apg-lib/identifiers */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/identifiers.js\");\n  const thisFile = 'rule-attributes.js';\n  let state = null;\n  function isEmptyOnly(attr) {\n    if (attr.left || attr.nested || attr.right || attr.cyclic) {\n      return false;\n    }\n    return attr.empty;\n  }\n  function isRecursive(attr) {\n    if (attr.left || attr.nested || attr.right || attr.cyclic) {\n      return true;\n    }\n    return false;\n  }\n  function isCatNested(attrs, count) {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    /* 1. if any child is nested, CAT is nested */\n    for (i = 0; i < count; i += 1) {\n      if (attrs[i].nested) {\n        return true;\n      }\n    }\n    /* 2.) the left-most right recursive child\n               is followed by at least one non-empty child */\n    for (i = 0; i < count; i += 1) {\n      if (attrs[i].right && !attrs[i].leaf) {\n        for (j = i + 1; j < count; j += 1) {\n          if (!isEmptyOnly(attrs[j])) {\n            return true;\n          }\n        }\n      }\n    }\n    /* 3.) the right-most left recursive child\n               is preceded by at least one non-empty child */\n    for (i = count - 1; i >= 0; i -= 1) {\n      if (attrs[i].left && !attrs[i].leaf) {\n        for (j = i - 1; j >= 0; j -= 1) {\n          if (!isEmptyOnly(attrs[j])) {\n            return true;\n          }\n        }\n      }\n    }\n    /* 4. there is at lease one recursive child between\n              the left-most and right-most non-recursive, non-empty children */\n    for (i = 0; i < count; i += 1) {\n      if (!attrs[i].empty && !isRecursive(attrs[i])) {\n        for (j = i + 1; j < count; j += 1) {\n          if (isRecursive(attrs[j])) {\n            for (k = j + 1; k < count; k += 1) {\n              if (!attrs[k].empty && !isRecursive(attrs[k])) {\n                return true;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    /* none of the above */\n    return false;\n  }\n  function isCatCyclic(attrs, count) {\n    /* if all children are cyclic, CAT is cyclic */\n    for (let i = 0; i < count; i += 1) {\n      if (!attrs[i].cyclic) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function isCatLeft(attrs, count) {\n    /* if the left-most non-empty is left, CAT is left */\n    for (let i = 0; i < count; i += 1) {\n      if (attrs[i].left) {\n        return true;\n      }\n      if (!attrs[i].empty) {\n        return false;\n      }\n      /* keep looking */\n    }\n    return false; /* all left-most are empty */\n  }\n  function isCatRight(attrs, count) {\n    /* if the right-most non-empty is right, CAT is right */\n    for (let i = count - 1; i >= 0; i -= 1) {\n      if (attrs[i].right) {\n        return true;\n      }\n      if (!attrs[i].empty) {\n        return false;\n      }\n      /* keep looking */\n    }\n    return false;\n  }\n  function isCatEmpty(attrs, count) {\n    /* if all children are empty, CAT is empty */\n    for (let i = 0; i < count; i += 1) {\n      if (!attrs[i].empty) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function isCatFinite(attrs, count) {\n    /* if all children are finite, CAT is finite */\n    for (let i = 0; i < count; i += 1) {\n      if (!attrs[i].finite) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function cat(stateArg, opcodes, opIndex, iAttr) {\n    let i = 0;\n    const opCat = opcodes[opIndex];\n    const count = opCat.children.length;\n\n    /* generate an empty array of child attributes */\n    const childAttrs = [];\n    for (i = 0; i < count; i += 1) {\n      childAttrs.push(stateArg.attrGen());\n    }\n    for (i = 0; i < count; i += 1) {\n      // eslint-disable-next-line no-use-before-define\n      opEval(stateArg, opcodes, opCat.children[i], childAttrs[i]);\n    }\n    iAttr.left = isCatLeft(childAttrs, count);\n    iAttr.right = isCatRight(childAttrs, count);\n    iAttr.nested = isCatNested(childAttrs, count);\n    iAttr.empty = isCatEmpty(childAttrs, count);\n    iAttr.finite = isCatFinite(childAttrs, count);\n    iAttr.cyclic = isCatCyclic(childAttrs, count);\n  }\n  function alt(stateArg, opcodes, opIndex, iAttr) {\n    let i = 0;\n    const opAlt = opcodes[opIndex];\n    const count = opAlt.children.length;\n\n    /* generate an empty array of child attributes */\n    const childAttrs = [];\n    for (i = 0; i < count; i += 1) {\n      childAttrs.push(stateArg.attrGen());\n    }\n    for (i = 0; i < count; i += 1) {\n      // eslint-disable-next-line no-use-before-define\n      opEval(stateArg, opcodes, opAlt.children[i], childAttrs[i]);\n    }\n\n    /* if any child attribute is true, ALT is true */\n    iAttr.left = false;\n    iAttr.right = false;\n    iAttr.nested = false;\n    iAttr.empty = false;\n    iAttr.finite = false;\n    iAttr.cyclic = false;\n    for (i = 0; i < count; i += 1) {\n      if (childAttrs[i].left) {\n        iAttr.left = true;\n      }\n      if (childAttrs[i].nested) {\n        iAttr.nested = true;\n      }\n      if (childAttrs[i].right) {\n        iAttr.right = true;\n      }\n      if (childAttrs[i].empty) {\n        iAttr.empty = true;\n      }\n      if (childAttrs[i].finite) {\n        iAttr.finite = true;\n      }\n      if (childAttrs[i].cyclic) {\n        iAttr.cyclic = true;\n      }\n    }\n  }\n  function bkr(stateArg, opcodes, opIndex, iAttr) {\n    const opBkr = opcodes[opIndex];\n    if (opBkr.index >= stateArg.ruleCount) {\n      /* use UDT values */\n      iAttr.empty = stateArg.udts[opBkr.index - stateArg.ruleCount].empty;\n      iAttr.finite = true;\n    } else {\n      /* use the empty and finite values from the back referenced rule */\n      // eslint-disable-next-line no-use-before-define\n      ruleAttrsEval(stateArg, opBkr.index, iAttr);\n\n      /* however, this is a terminal node like TLS */\n      iAttr.left = false;\n      iAttr.nested = false;\n      iAttr.right = false;\n      iAttr.cyclic = false;\n    }\n  }\n\n  function opEval(stateArg, opcodes, opIndex, iAttr) {\n    stateArg.attrInit(iAttr);\n    const opi = opcodes[opIndex];\n    switch (opi.type) {\n      case id.ALT:\n        alt(stateArg, opcodes, opIndex, iAttr);\n        break;\n      case id.CAT:\n        cat(stateArg, opcodes, opIndex, iAttr);\n        break;\n      case id.REP:\n        opEval(stateArg, opcodes, opIndex + 1, iAttr);\n        if (opi.min === 0) {\n          iAttr.empty = true;\n          iAttr.finite = true;\n        }\n        break;\n      case id.RNM:\n        // eslint-disable-next-line no-use-before-define\n        ruleAttrsEval(stateArg, opcodes[opIndex].index, iAttr);\n        break;\n      case id.BKR:\n        bkr(stateArg, opcodes, opIndex, iAttr);\n        break;\n      case id.AND:\n      case id.NOT:\n      case id.BKA:\n      case id.BKN:\n        opEval(stateArg, opcodes, opIndex + 1, iAttr);\n        iAttr.empty = true;\n        break;\n      case id.TLS:\n        iAttr.empty = !opcodes[opIndex].string.length;\n        iAttr.finite = true;\n        iAttr.cyclic = false;\n        break;\n      case id.TBS:\n      case id.TRG:\n        iAttr.empty = false;\n        iAttr.finite = true;\n        iAttr.cyclic = false;\n        break;\n      case id.UDT:\n        iAttr.empty = opi.empty;\n        iAttr.finite = true;\n        iAttr.cyclic = false;\n        break;\n      case id.ABG:\n      case id.AEN:\n        iAttr.empty = true;\n        iAttr.finite = true;\n        iAttr.cyclic = false;\n        break;\n      default:\n        throw new Error(`unknown opcode type: ${opi}`);\n    }\n  }\n  // The main logic for handling rules that:\n  //  - have already be evaluated\n  //  - have not been evaluated and is the first occurrence on this branch\n  //  - second occurrence on this branch for the start rule\n  //  - second occurrence on this branch for non-start rules\n  function ruleAttrsEval(stateArg, ruleIndex, iAttr) {\n    const attri = stateArg.attrsWorking[ruleIndex];\n    if (attri.isComplete) {\n      /* just use the completed values */\n      stateArg.attrCopy(iAttr, attri);\n    } else if (!attri.isOpen) {\n      /* open the rule and traverse it */\n      attri.isOpen = true;\n      opEval(stateArg, attri.rule.opcodes, 0, iAttr);\n      /* complete this rule's attributes */\n      attri.left = iAttr.left;\n      attri.right = iAttr.right;\n      attri.nested = iAttr.nested;\n      attri.empty = iAttr.empty;\n      attri.finite = iAttr.finite;\n      attri.cyclic = iAttr.cyclic;\n      attri.leaf = false;\n      attri.isOpen = false;\n      attri.isComplete = true;\n    } else if (ruleIndex === stateArg.startRule) {\n      /* use recursive leaf values */\n      if (ruleIndex === stateArg.startRule) {\n        iAttr.left = true;\n        iAttr.right = true;\n        iAttr.cyclic = true;\n        iAttr.leaf = true;\n      }\n    } else {\n      /* non-start rule terminal leaf */\n      iAttr.finite = true;\n    }\n  }\n  // The main driver for the attribute generation.\n  const ruleAttributes = (stateArg) => {\n    state = stateArg;\n    let i = 0;\n    let j = 0;\n    const iAttr = state.attrGen();\n    for (i = 0; i < state.ruleCount; i += 1) {\n      /* initialize working attributes */\n      for (j = 0; j < state.ruleCount; j += 1) {\n        state.attrInit(state.attrsWorking[j]);\n      }\n      state.startRule = i;\n      ruleAttrsEval(state, i, iAttr);\n\n      /* save off the working attributes for this rule */\n      state.attrCopy(state.attrs[i], state.attrsWorking[i]);\n    }\n    state.attributesComplete = true;\n    let attri = null;\n    for (i = 0; i < state.ruleCount; i += 1) {\n      attri = state.attrs[i];\n      if (attri.left || !attri.finite || attri.cyclic) {\n        const temp = state.attrGen(attri.rule);\n        state.attrCopy(temp, attri);\n        state.attrsErrors.push(temp);\n        state.attrsErrorCount += 1;\n      }\n    }\n  };\n  const truth = (val) => (val ? 't' : 'f');\n  const tError = (val) => (val ? 'e' : 'f');\n  const fError = (val) => (val ? 't' : 'e');\n  const showAttr = (seq, index, attr, dep) => {\n    let str = `${seq}:${index}:`;\n    str += `${tError(attr.left)} `;\n    str += `${truth(attr.nested)} `;\n    str += `${truth(attr.right)} `;\n    str += `${tError(attr.cyclic)} `;\n    str += `${fError(attr.finite)} `;\n    str += `${truth(attr.empty)}:`;\n    str += `${state.typeToString(dep.recursiveType)}:`;\n    str += dep.recursiveType === id.ATTR_MR ? dep.groupNumber : '-';\n    str += `:${attr.rule.name}\\n`;\n    return str;\n  };\n\n  const showLegend = () => {\n    let str = 'LEGEND - t=true, f=false, e=error\\n';\n    str += 'sequence:rule index:left nested right cyclic finite empty:type:group number:rule name\\n';\n    return str;\n  };\n  const showAttributeErrors = () => {\n    let attri = null;\n    let depi = null;\n    let str = '';\n    str += 'RULE ATTRIBUTES WITH ERRORS\\n';\n    str += showLegend();\n    if (state.attrsErrorCount) {\n      for (let i = 0; i < state.attrsErrorCount; i += 1) {\n        attri = state.attrsErrors[i];\n        depi = state.ruleDeps[attri.rule.index];\n        str += showAttr(i, attri.rule.index, attri, depi);\n      }\n    } else {\n      str += '<none>\\n';\n    }\n    return str;\n  };\n\n  const show = (type) => {\n    let i = 0;\n    let ii = 0;\n    let attri = null;\n    let depi = null;\n    let str = '';\n    let { ruleIndexes } = state;\n    // let udtIndexes = state.udtIndexes;\n    if (type === 97) {\n      ruleIndexes = state.ruleAlphaIndexes;\n      // udtIndexes = state.udtAlphaIndexes;\n    } else if (type === 116) {\n      ruleIndexes = state.ruleTypeIndexes;\n      // udtIndexes = state.udtAlphaIndexes;\n    }\n    /* show all attributes */\n    for (i = 0; i < state.ruleCount; i += 1) {\n      ii = ruleIndexes[i];\n      attri = state.attrs[ii];\n      depi = state.ruleDeps[ii];\n      str += showAttr(i, ii, attri, depi);\n    }\n    return str;\n  };\n\n  // Display the rule attributes.\n  // - order\n  //      - \"index\" or \"i\", index order (default)\n  //      - \"alpha\" or \"a\", alphabetical order\n  //      - \"type\" or \"t\", ordered by type (alphabetical within each type/group)\n  //      - none of above, index order (default)\n  const showAttributes = (order = 'index') => {\n    if (!state.attributesComplete) {\n      throw new Error(`${thisFile}:showAttributes: attributes not available`);\n    }\n    let str = '';\n    const leader = 'RULE ATTRIBUTES\\n';\n    if (order.charCodeAt(0) === 97) {\n      str += 'alphabetical by rule name\\n';\n      str += leader;\n      str += showLegend();\n      str += show(97);\n    } else if (order.charCodeAt(0) === 116) {\n      str += 'ordered by rule type\\n';\n      str += leader;\n      str += showLegend();\n      str += show(116);\n    } else {\n      str += 'ordered by rule index\\n';\n      str += leader;\n      str += showLegend();\n      str += show();\n    }\n    return str;\n  };\n\n  /* Destructuring assignment - see MDN Web Docs */\n  return { ruleAttributes, showAttributes, showAttributeErrors };\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/rule-attributes.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/rule-dependencies.js":
/*!**************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/rule-dependencies.js ***!
  \**************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// Determine rule dependencies and types.\n// For each rule, determine which other rules it refers to\n// and which of the other rules refer back to it.\n//\n// Rule types are:\n//  - non-recursive - the rule never refers to itself, even indirectly\n//  - recursive - the rule refers to itself, possibly indirectly\n//  - mutually-recursive - belongs to a group of two or more rules, each of which refers to every other rule in the group, including itself.\nmodule.exports = (() => {\n  const id = __webpack_require__(/*! ../apg-lib/identifiers */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/identifiers.js\");\n  let state = null; /* keep a global reference to the state for the show functions */\n\n  /* scan the opcodes of the indexed rule and discover which rules it references and which rule refer back to it */\n  const scan = (ruleCount, ruleDeps, index, isScanned) => {\n    let i = 0;\n    let j = 0;\n    const rdi = ruleDeps[index];\n    isScanned[index] = true;\n    const op = rdi.rule.opcodes;\n    for (i = 0; i < op.length; i += 1) {\n      const opi = op[i];\n      if (opi.type === id.RNM) {\n        rdi.refersTo[opi.index] = true;\n        if (!isScanned[opi.index]) {\n          scan(ruleCount, ruleDeps, opi.index, isScanned);\n        }\n        for (j = 0; j < ruleCount; j += 1) {\n          if (ruleDeps[opi.index].refersTo[j]) {\n            rdi.refersTo[j] = true;\n          }\n        }\n      } else if (opi.type === id.UDT) {\n        rdi.refersToUdt[opi.index] = true;\n      } else if (opi.type === id.BKR) {\n        if (opi.index < ruleCount) {\n          rdi.refersTo[opi.index] = true;\n          if (!isScanned[opi.index]) {\n            scan(ruleCount, ruleDeps, opi.index, isScanned);\n          }\n        } else {\n          rdi.refersToUdt[ruleCount - opi.index] = true;\n        }\n      }\n    }\n  };\n  // Determine the rule dependencies, types and mutually recursive groups.\n  const ruleDependencies = (stateArg) => {\n    state = stateArg; /* make it global */\n    let i = 0;\n    let j = 0;\n    let groupCount = 0;\n    let rdi = null;\n    let rdj = null;\n    let newGroup = false;\n    state.dependenciesComplete = false;\n\n    /* make a working array of rule scanned markers */\n    const isScanned = state.falseArray(state.ruleCount);\n\n    /* discover the rule dependencies */\n    for (i = 0; i < state.ruleCount; i += 1) {\n      state.falsifyArray(isScanned);\n      scan(state.ruleCount, state.ruleDeps, i, isScanned);\n    }\n    /* discover all rules referencing each rule */\n    for (i = 0; i < state.ruleCount; i += 1) {\n      for (j = 0; j < state.ruleCount; j += 1) {\n        if (i !== j) {\n          if (state.ruleDeps[j].refersTo[i]) {\n            state.ruleDeps[i].referencedBy[j] = true;\n          }\n        }\n      }\n    }\n    /* find the non-recursive and recursive types */\n    for (i = 0; i < state.ruleCount; i += 1) {\n      state.ruleDeps[i].recursiveType = id.ATTR_N;\n      if (state.ruleDeps[i].refersTo[i]) {\n        state.ruleDeps[i].recursiveType = id.ATTR_R;\n      }\n    }\n\n    /* find the mutually-recursive groups, if any */\n    groupCount = -1;\n    for (i = 0; i < state.ruleCount; i += 1) {\n      rdi = state.ruleDeps[i];\n      if (rdi.recursiveType === id.ATTR_R) {\n        newGroup = true;\n        for (j = 0; j < state.ruleCount; j += 1) {\n          if (i !== j) {\n            rdj = state.ruleDeps[j];\n            if (rdj.recursiveType === id.ATTR_R) {\n              if (rdi.refersTo[j] && rdj.refersTo[i]) {\n                if (newGroup) {\n                  groupCount += 1;\n                  rdi.recursiveType = id.ATTR_MR;\n                  rdi.groupNumber = groupCount;\n                  newGroup = false;\n                }\n                rdj.recursiveType = id.ATTR_MR;\n                rdj.groupNumber = groupCount;\n              }\n            }\n          }\n        }\n      }\n    }\n    state.isMutuallyRecursive = groupCount > -1;\n\n    /* sort the rules/UDTS */\n    state.ruleAlphaIndexes.sort(state.compRulesAlpha);\n    state.ruleTypeIndexes.sort(state.compRulesAlpha);\n    state.ruleTypeIndexes.sort(state.compRulesType);\n    if (state.isMutuallyRecursive) {\n      state.ruleTypeIndexes.sort(state.compRulesGroup);\n    }\n    if (state.udtCount) {\n      state.udtAlphaIndexes.sort(state.compUdtsAlpha);\n    }\n\n    state.dependenciesComplete = true;\n  };\n  const show = (type = null) => {\n    let i = 0;\n    let j = 0;\n    let count = 0;\n    let startSeg = 0;\n    const maxRule = state.ruleCount - 1;\n    const maxUdt = state.udtCount - 1;\n    const lineLength = 100;\n    let str = '';\n    let pre = '';\n    const toArrow = '=> ';\n    const byArrow = '<= ';\n    let first = false;\n    let rdi = null;\n    let { ruleIndexes } = state;\n    let { udtIndexes } = state;\n    if (type === 97) {\n      ruleIndexes = state.ruleAlphaIndexes;\n      udtIndexes = state.udtAlphaIndexes;\n    } else if (type === 116) {\n      ruleIndexes = state.ruleTypeIndexes;\n      udtIndexes = state.udtAlphaIndexes;\n    }\n    for (i = 0; i < state.ruleCount; i += 1) {\n      rdi = state.ruleDeps[ruleIndexes[i]];\n      pre = `${ruleIndexes[i]}:${state.typeToString(rdi.recursiveType)}:`;\n      if (state.isMutuallyRecursive) {\n        pre += rdi.groupNumber > -1 ? rdi.groupNumber : '-';\n        pre += ':';\n      }\n      pre += ' ';\n      str += `${pre + state.rules[ruleIndexes[i]].name}\\n`;\n      first = true;\n      count = 0;\n      startSeg = str.length;\n      str += pre;\n      for (j = 0; j < state.ruleCount; j += 1) {\n        if (rdi.refersTo[ruleIndexes[j]]) {\n          if (first) {\n            str += toArrow;\n            first = false;\n            str += state.ruleDeps[ruleIndexes[j]].rule.name;\n          } else {\n            str += `, ${state.ruleDeps[ruleIndexes[j]].rule.name}`;\n          }\n          count += 1;\n        }\n        if (str.length - startSeg > lineLength && j !== maxRule) {\n          str += `\\n${pre}${toArrow}`;\n          startSeg = str.length;\n        }\n      }\n      if (state.udtCount) {\n        for (j = 0; j < state.udtCount; j += 1) {\n          if (rdi.refersToUdt[udtIndexes[j]]) {\n            if (first) {\n              str += toArrow;\n              first = false;\n              str += state.udts[udtIndexes[j]].name;\n            } else {\n              str += `, ${state.udts[udtIndexes[j]].name}`;\n            }\n            count += 1;\n          }\n          if (str.length - startSeg > lineLength && j !== maxUdt) {\n            str += `\\n${pre}${toArrow}`;\n            startSeg = str.length;\n          }\n        }\n      }\n      if (count === 0) {\n        str += '=> <none>\\n';\n      }\n      if (first === false) {\n        str += '\\n';\n      }\n      first = true;\n      count = 0;\n      startSeg = str.length;\n      str += pre;\n      for (j = 0; j < state.ruleCount; j += 1) {\n        if (rdi.referencedBy[ruleIndexes[j]]) {\n          if (first) {\n            str += byArrow;\n            first = false;\n            str += state.ruleDeps[ruleIndexes[j]].rule.name;\n          } else {\n            str += `, ${state.ruleDeps[ruleIndexes[j]].rule.name}`;\n          }\n          count += 1;\n        }\n        if (str.length - startSeg > lineLength && j !== maxRule) {\n          str += `\\n${pre}${toArrow}`;\n          startSeg = str.length;\n        }\n      }\n      if (count === 0) {\n        str += '<= <none>\\n';\n      }\n      if (first === false) {\n        str += '\\n';\n      }\n      str += '\\n';\n    }\n    return str;\n  };\n  // Display the rule dependencies.\n  // - order\n  //      - \"index\" or \"i\", index order (default)\n  //      - \"alpha\" or \"a\", alphabetical order\n  //      - \"type\" or \"t\", ordered by type (alphabetical within each type/group)\n  //      - none of above, index order (default)\n  const showRuleDependencies = (order = 'index') => {\n    let str = 'RULE DEPENDENCIES(index:type:[group number:])\\n';\n    str += '=> refers to rule names\\n';\n    str += '<= referenced by rule names\\n';\n    if (!state.dependenciesComplete) {\n      return str;\n    }\n\n    if (order.charCodeAt(0) === 97) {\n      str += 'alphabetical by rule name\\n';\n      str += show(97);\n    } else if (order.charCodeAt(0) === 116) {\n      str += 'ordered by rule type\\n';\n      str += show(116);\n    } else {\n      str += 'ordered by rule index\\n';\n      str += show(null);\n    }\n    return str;\n  };\n\n  /* Destructuring assignment - see MDN Web Docs */\n  return { ruleDependencies, showRuleDependencies };\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/rule-dependencies.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/sabnf-grammar.js":
/*!**********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/sabnf-grammar.js ***!
  \**********************************************************************************************/
/***/ ((module) => {

eval("// copyright: Copyright (c) 2023 Lowell D. Thomas, all rights reserved<br>\n//   license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)<br>\n//\n// Generated by apg-js, Version 4.2.1 [apg-js](https://github.com/ldthomas/apg-js)\nmodule.exports = function grammar(){\n  // ```\n  // SUMMARY\n  //      rules = 95\n  //       udts = 0\n  //    opcodes = 372\n  //        ---   ABNF original opcodes\n  //        ALT = 43\n  //        CAT = 48\n  //        REP = 34\n  //        RNM = 149\n  //        TLS = 2\n  //        TBS = 61\n  //        TRG = 35\n  //        ---   SABNF superset opcodes\n  //        UDT = 0\n  //        AND = 0\n  //        NOT = 0\n  //        BKA = 0\n  //        BKN = 0\n  //        BKR = 0\n  //        ABG = 0\n  //        AEN = 0\n  // characters = [9 - 126]\n  // ```\n  /* OBJECT IDENTIFIER (for internal parser use) */\n  this.grammarObject = 'grammarObject';\n\n  /* RULES */\n  this.rules = [];\n  this.rules[0] = {name: 'File', lower: 'file', index: 0, isBkr: false};\n  this.rules[1] = {name: 'BlankLine', lower: 'blankline', index: 1, isBkr: false};\n  this.rules[2] = {name: 'Rule', lower: 'rule', index: 2, isBkr: false};\n  this.rules[3] = {name: 'RuleLookup', lower: 'rulelookup', index: 3, isBkr: false};\n  this.rules[4] = {name: 'RuleNameTest', lower: 'rulenametest', index: 4, isBkr: false};\n  this.rules[5] = {name: 'RuleName', lower: 'rulename', index: 5, isBkr: false};\n  this.rules[6] = {name: 'RuleNameError', lower: 'rulenameerror', index: 6, isBkr: false};\n  this.rules[7] = {name: 'DefinedAsTest', lower: 'definedastest', index: 7, isBkr: false};\n  this.rules[8] = {name: 'DefinedAsError', lower: 'definedaserror', index: 8, isBkr: false};\n  this.rules[9] = {name: 'DefinedAs', lower: 'definedas', index: 9, isBkr: false};\n  this.rules[10] = {name: 'Defined', lower: 'defined', index: 10, isBkr: false};\n  this.rules[11] = {name: 'IncAlt', lower: 'incalt', index: 11, isBkr: false};\n  this.rules[12] = {name: 'RuleError', lower: 'ruleerror', index: 12, isBkr: false};\n  this.rules[13] = {name: 'LineEndError', lower: 'lineenderror', index: 13, isBkr: false};\n  this.rules[14] = {name: 'Alternation', lower: 'alternation', index: 14, isBkr: false};\n  this.rules[15] = {name: 'Concatenation', lower: 'concatenation', index: 15, isBkr: false};\n  this.rules[16] = {name: 'Repetition', lower: 'repetition', index: 16, isBkr: false};\n  this.rules[17] = {name: 'Modifier', lower: 'modifier', index: 17, isBkr: false};\n  this.rules[18] = {name: 'Predicate', lower: 'predicate', index: 18, isBkr: false};\n  this.rules[19] = {name: 'BasicElement', lower: 'basicelement', index: 19, isBkr: false};\n  this.rules[20] = {name: 'BasicElementErr', lower: 'basicelementerr', index: 20, isBkr: false};\n  this.rules[21] = {name: 'Group', lower: 'group', index: 21, isBkr: false};\n  this.rules[22] = {name: 'GroupError', lower: 'grouperror', index: 22, isBkr: false};\n  this.rules[23] = {name: 'GroupOpen', lower: 'groupopen', index: 23, isBkr: false};\n  this.rules[24] = {name: 'GroupClose', lower: 'groupclose', index: 24, isBkr: false};\n  this.rules[25] = {name: 'Option', lower: 'option', index: 25, isBkr: false};\n  this.rules[26] = {name: 'OptionError', lower: 'optionerror', index: 26, isBkr: false};\n  this.rules[27] = {name: 'OptionOpen', lower: 'optionopen', index: 27, isBkr: false};\n  this.rules[28] = {name: 'OptionClose', lower: 'optionclose', index: 28, isBkr: false};\n  this.rules[29] = {name: 'RnmOp', lower: 'rnmop', index: 29, isBkr: false};\n  this.rules[30] = {name: 'BkrOp', lower: 'bkrop', index: 30, isBkr: false};\n  this.rules[31] = {name: 'bkrModifier', lower: 'bkrmodifier', index: 31, isBkr: false};\n  this.rules[32] = {name: 'cs', lower: 'cs', index: 32, isBkr: false};\n  this.rules[33] = {name: 'ci', lower: 'ci', index: 33, isBkr: false};\n  this.rules[34] = {name: 'um', lower: 'um', index: 34, isBkr: false};\n  this.rules[35] = {name: 'pm', lower: 'pm', index: 35, isBkr: false};\n  this.rules[36] = {name: 'bkr-name', lower: 'bkr-name', index: 36, isBkr: false};\n  this.rules[37] = {name: 'rname', lower: 'rname', index: 37, isBkr: false};\n  this.rules[38] = {name: 'uname', lower: 'uname', index: 38, isBkr: false};\n  this.rules[39] = {name: 'ename', lower: 'ename', index: 39, isBkr: false};\n  this.rules[40] = {name: 'UdtOp', lower: 'udtop', index: 40, isBkr: false};\n  this.rules[41] = {name: 'udt-non-empty', lower: 'udt-non-empty', index: 41, isBkr: false};\n  this.rules[42] = {name: 'udt-empty', lower: 'udt-empty', index: 42, isBkr: false};\n  this.rules[43] = {name: 'RepOp', lower: 'repop', index: 43, isBkr: false};\n  this.rules[44] = {name: 'AltOp', lower: 'altop', index: 44, isBkr: false};\n  this.rules[45] = {name: 'CatOp', lower: 'catop', index: 45, isBkr: false};\n  this.rules[46] = {name: 'StarOp', lower: 'starop', index: 46, isBkr: false};\n  this.rules[47] = {name: 'AndOp', lower: 'andop', index: 47, isBkr: false};\n  this.rules[48] = {name: 'NotOp', lower: 'notop', index: 48, isBkr: false};\n  this.rules[49] = {name: 'BkaOp', lower: 'bkaop', index: 49, isBkr: false};\n  this.rules[50] = {name: 'BknOp', lower: 'bknop', index: 50, isBkr: false};\n  this.rules[51] = {name: 'AbgOp', lower: 'abgop', index: 51, isBkr: false};\n  this.rules[52] = {name: 'AenOp', lower: 'aenop', index: 52, isBkr: false};\n  this.rules[53] = {name: 'TrgOp', lower: 'trgop', index: 53, isBkr: false};\n  this.rules[54] = {name: 'TbsOp', lower: 'tbsop', index: 54, isBkr: false};\n  this.rules[55] = {name: 'TlsOp', lower: 'tlsop', index: 55, isBkr: false};\n  this.rules[56] = {name: 'TlsCase', lower: 'tlscase', index: 56, isBkr: false};\n  this.rules[57] = {name: 'TlsOpen', lower: 'tlsopen', index: 57, isBkr: false};\n  this.rules[58] = {name: 'TlsClose', lower: 'tlsclose', index: 58, isBkr: false};\n  this.rules[59] = {name: 'TlsString', lower: 'tlsstring', index: 59, isBkr: false};\n  this.rules[60] = {name: 'StringTab', lower: 'stringtab', index: 60, isBkr: false};\n  this.rules[61] = {name: 'ClsOp', lower: 'clsop', index: 61, isBkr: false};\n  this.rules[62] = {name: 'ClsOpen', lower: 'clsopen', index: 62, isBkr: false};\n  this.rules[63] = {name: 'ClsClose', lower: 'clsclose', index: 63, isBkr: false};\n  this.rules[64] = {name: 'ClsString', lower: 'clsstring', index: 64, isBkr: false};\n  this.rules[65] = {name: 'ProsVal', lower: 'prosval', index: 65, isBkr: false};\n  this.rules[66] = {name: 'ProsValOpen', lower: 'prosvalopen', index: 66, isBkr: false};\n  this.rules[67] = {name: 'ProsValString', lower: 'prosvalstring', index: 67, isBkr: false};\n  this.rules[68] = {name: 'ProsValClose', lower: 'prosvalclose', index: 68, isBkr: false};\n  this.rules[69] = {name: 'rep-min', lower: 'rep-min', index: 69, isBkr: false};\n  this.rules[70] = {name: 'rep-min-max', lower: 'rep-min-max', index: 70, isBkr: false};\n  this.rules[71] = {name: 'rep-max', lower: 'rep-max', index: 71, isBkr: false};\n  this.rules[72] = {name: 'rep-num', lower: 'rep-num', index: 72, isBkr: false};\n  this.rules[73] = {name: 'dString', lower: 'dstring', index: 73, isBkr: false};\n  this.rules[74] = {name: 'xString', lower: 'xstring', index: 74, isBkr: false};\n  this.rules[75] = {name: 'bString', lower: 'bstring', index: 75, isBkr: false};\n  this.rules[76] = {name: 'Dec', lower: 'dec', index: 76, isBkr: false};\n  this.rules[77] = {name: 'Hex', lower: 'hex', index: 77, isBkr: false};\n  this.rules[78] = {name: 'Bin', lower: 'bin', index: 78, isBkr: false};\n  this.rules[79] = {name: 'dmin', lower: 'dmin', index: 79, isBkr: false};\n  this.rules[80] = {name: 'dmax', lower: 'dmax', index: 80, isBkr: false};\n  this.rules[81] = {name: 'bmin', lower: 'bmin', index: 81, isBkr: false};\n  this.rules[82] = {name: 'bmax', lower: 'bmax', index: 82, isBkr: false};\n  this.rules[83] = {name: 'xmin', lower: 'xmin', index: 83, isBkr: false};\n  this.rules[84] = {name: 'xmax', lower: 'xmax', index: 84, isBkr: false};\n  this.rules[85] = {name: 'dnum', lower: 'dnum', index: 85, isBkr: false};\n  this.rules[86] = {name: 'bnum', lower: 'bnum', index: 86, isBkr: false};\n  this.rules[87] = {name: 'xnum', lower: 'xnum', index: 87, isBkr: false};\n  this.rules[88] = {name: 'alphanum', lower: 'alphanum', index: 88, isBkr: false};\n  this.rules[89] = {name: 'owsp', lower: 'owsp', index: 89, isBkr: false};\n  this.rules[90] = {name: 'wsp', lower: 'wsp', index: 90, isBkr: false};\n  this.rules[91] = {name: 'space', lower: 'space', index: 91, isBkr: false};\n  this.rules[92] = {name: 'comment', lower: 'comment', index: 92, isBkr: false};\n  this.rules[93] = {name: 'LineEnd', lower: 'lineend', index: 93, isBkr: false};\n  this.rules[94] = {name: 'LineContinue', lower: 'linecontinue', index: 94, isBkr: false};\n\n  /* UDTS */\n  this.udts = [];\n\n  /* OPCODES */\n  /* File */\n  this.rules[0].opcodes = [];\n  this.rules[0].opcodes[0] = {type: 3, min: 0, max: Infinity};// REP\n  this.rules[0].opcodes[1] = {type: 1, children: [2,3,4]};// ALT\n  this.rules[0].opcodes[2] = {type: 4, index: 1};// RNM(BlankLine)\n  this.rules[0].opcodes[3] = {type: 4, index: 2};// RNM(Rule)\n  this.rules[0].opcodes[4] = {type: 4, index: 12};// RNM(RuleError)\n\n  /* BlankLine */\n  this.rules[1].opcodes = [];\n  this.rules[1].opcodes[0] = {type: 2, children: [1,5,7]};// CAT\n  this.rules[1].opcodes[1] = {type: 3, min: 0, max: Infinity};// REP\n  this.rules[1].opcodes[2] = {type: 1, children: [3,4]};// ALT\n  this.rules[1].opcodes[3] = {type: 6, string: [32]};// TBS\n  this.rules[1].opcodes[4] = {type: 6, string: [9]};// TBS\n  this.rules[1].opcodes[5] = {type: 3, min: 0, max: 1};// REP\n  this.rules[1].opcodes[6] = {type: 4, index: 92};// RNM(comment)\n  this.rules[1].opcodes[7] = {type: 4, index: 93};// RNM(LineEnd)\n\n  /* Rule */\n  this.rules[2].opcodes = [];\n  this.rules[2].opcodes[0] = {type: 2, children: [1,2,3,4]};// CAT\n  this.rules[2].opcodes[1] = {type: 4, index: 3};// RNM(RuleLookup)\n  this.rules[2].opcodes[2] = {type: 4, index: 89};// RNM(owsp)\n  this.rules[2].opcodes[3] = {type: 4, index: 14};// RNM(Alternation)\n  this.rules[2].opcodes[4] = {type: 1, children: [5,8]};// ALT\n  this.rules[2].opcodes[5] = {type: 2, children: [6,7]};// CAT\n  this.rules[2].opcodes[6] = {type: 4, index: 89};// RNM(owsp)\n  this.rules[2].opcodes[7] = {type: 4, index: 93};// RNM(LineEnd)\n  this.rules[2].opcodes[8] = {type: 2, children: [9,10]};// CAT\n  this.rules[2].opcodes[9] = {type: 4, index: 13};// RNM(LineEndError)\n  this.rules[2].opcodes[10] = {type: 4, index: 93};// RNM(LineEnd)\n\n  /* RuleLookup */\n  this.rules[3].opcodes = [];\n  this.rules[3].opcodes[0] = {type: 2, children: [1,2,3]};// CAT\n  this.rules[3].opcodes[1] = {type: 4, index: 4};// RNM(RuleNameTest)\n  this.rules[3].opcodes[2] = {type: 4, index: 89};// RNM(owsp)\n  this.rules[3].opcodes[3] = {type: 4, index: 7};// RNM(DefinedAsTest)\n\n  /* RuleNameTest */\n  this.rules[4].opcodes = [];\n  this.rules[4].opcodes[0] = {type: 1, children: [1,2]};// ALT\n  this.rules[4].opcodes[1] = {type: 4, index: 5};// RNM(RuleName)\n  this.rules[4].opcodes[2] = {type: 4, index: 6};// RNM(RuleNameError)\n\n  /* RuleName */\n  this.rules[5].opcodes = [];\n  this.rules[5].opcodes[0] = {type: 4, index: 88};// RNM(alphanum)\n\n  /* RuleNameError */\n  this.rules[6].opcodes = [];\n  this.rules[6].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP\n  this.rules[6].opcodes[1] = {type: 1, children: [2,3]};// ALT\n  this.rules[6].opcodes[2] = {type: 5, min: 33, max: 60};// TRG\n  this.rules[6].opcodes[3] = {type: 5, min: 62, max: 126};// TRG\n\n  /* DefinedAsTest */\n  this.rules[7].opcodes = [];\n  this.rules[7].opcodes[0] = {type: 1, children: [1,2]};// ALT\n  this.rules[7].opcodes[1] = {type: 4, index: 9};// RNM(DefinedAs)\n  this.rules[7].opcodes[2] = {type: 4, index: 8};// RNM(DefinedAsError)\n\n  /* DefinedAsError */\n  this.rules[8].opcodes = [];\n  this.rules[8].opcodes[0] = {type: 3, min: 1, max: 2};// REP\n  this.rules[8].opcodes[1] = {type: 5, min: 33, max: 126};// TRG\n\n  /* DefinedAs */\n  this.rules[9].opcodes = [];\n  this.rules[9].opcodes[0] = {type: 1, children: [1,2]};// ALT\n  this.rules[9].opcodes[1] = {type: 4, index: 11};// RNM(IncAlt)\n  this.rules[9].opcodes[2] = {type: 4, index: 10};// RNM(Defined)\n\n  /* Defined */\n  this.rules[10].opcodes = [];\n  this.rules[10].opcodes[0] = {type: 6, string: [61]};// TBS\n\n  /* IncAlt */\n  this.rules[11].opcodes = [];\n  this.rules[11].opcodes[0] = {type: 6, string: [61,47]};// TBS\n\n  /* RuleError */\n  this.rules[12].opcodes = [];\n  this.rules[12].opcodes[0] = {type: 2, children: [1,6]};// CAT\n  this.rules[12].opcodes[1] = {type: 3, min: 1, max: Infinity};// REP\n  this.rules[12].opcodes[2] = {type: 1, children: [3,4,5]};// ALT\n  this.rules[12].opcodes[3] = {type: 5, min: 32, max: 126};// TRG\n  this.rules[12].opcodes[4] = {type: 6, string: [9]};// TBS\n  this.rules[12].opcodes[5] = {type: 4, index: 94};// RNM(LineContinue)\n  this.rules[12].opcodes[6] = {type: 4, index: 93};// RNM(LineEnd)\n\n  /* LineEndError */\n  this.rules[13].opcodes = [];\n  this.rules[13].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP\n  this.rules[13].opcodes[1] = {type: 1, children: [2,3,4]};// ALT\n  this.rules[13].opcodes[2] = {type: 5, min: 32, max: 126};// TRG\n  this.rules[13].opcodes[3] = {type: 6, string: [9]};// TBS\n  this.rules[13].opcodes[4] = {type: 4, index: 94};// RNM(LineContinue)\n\n  /* Alternation */\n  this.rules[14].opcodes = [];\n  this.rules[14].opcodes[0] = {type: 2, children: [1,2]};// CAT\n  this.rules[14].opcodes[1] = {type: 4, index: 15};// RNM(Concatenation)\n  this.rules[14].opcodes[2] = {type: 3, min: 0, max: Infinity};// REP\n  this.rules[14].opcodes[3] = {type: 2, children: [4,5,6]};// CAT\n  this.rules[14].opcodes[4] = {type: 4, index: 89};// RNM(owsp)\n  this.rules[14].opcodes[5] = {type: 4, index: 44};// RNM(AltOp)\n  this.rules[14].opcodes[6] = {type: 4, index: 15};// RNM(Concatenation)\n\n  /* Concatenation */\n  this.rules[15].opcodes = [];\n  this.rules[15].opcodes[0] = {type: 2, children: [1,2]};// CAT\n  this.rules[15].opcodes[1] = {type: 4, index: 16};// RNM(Repetition)\n  this.rules[15].opcodes[2] = {type: 3, min: 0, max: Infinity};// REP\n  this.rules[15].opcodes[3] = {type: 2, children: [4,5]};// CAT\n  this.rules[15].opcodes[4] = {type: 4, index: 45};// RNM(CatOp)\n  this.rules[15].opcodes[5] = {type: 4, index: 16};// RNM(Repetition)\n\n  /* Repetition */\n  this.rules[16].opcodes = [];\n  this.rules[16].opcodes[0] = {type: 2, children: [1,3]};// CAT\n  this.rules[16].opcodes[1] = {type: 3, min: 0, max: 1};// REP\n  this.rules[16].opcodes[2] = {type: 4, index: 17};// RNM(Modifier)\n  this.rules[16].opcodes[3] = {type: 1, children: [4,5,6,7]};// ALT\n  this.rules[16].opcodes[4] = {type: 4, index: 21};// RNM(Group)\n  this.rules[16].opcodes[5] = {type: 4, index: 25};// RNM(Option)\n  this.rules[16].opcodes[6] = {type: 4, index: 19};// RNM(BasicElement)\n  this.rules[16].opcodes[7] = {type: 4, index: 20};// RNM(BasicElementErr)\n\n  /* Modifier */\n  this.rules[17].opcodes = [];\n  this.rules[17].opcodes[0] = {type: 1, children: [1,5]};// ALT\n  this.rules[17].opcodes[1] = {type: 2, children: [2,3]};// CAT\n  this.rules[17].opcodes[2] = {type: 4, index: 18};// RNM(Predicate)\n  this.rules[17].opcodes[3] = {type: 3, min: 0, max: 1};// REP\n  this.rules[17].opcodes[4] = {type: 4, index: 43};// RNM(RepOp)\n  this.rules[17].opcodes[5] = {type: 4, index: 43};// RNM(RepOp)\n\n  /* Predicate */\n  this.rules[18].opcodes = [];\n  this.rules[18].opcodes[0] = {type: 1, children: [1,2,3,4]};// ALT\n  this.rules[18].opcodes[1] = {type: 4, index: 49};// RNM(BkaOp)\n  this.rules[18].opcodes[2] = {type: 4, index: 50};// RNM(BknOp)\n  this.rules[18].opcodes[3] = {type: 4, index: 47};// RNM(AndOp)\n  this.rules[18].opcodes[4] = {type: 4, index: 48};// RNM(NotOp)\n\n  /* BasicElement */\n  this.rules[19].opcodes = [];\n  this.rules[19].opcodes[0] = {type: 1, children: [1,2,3,4,5,6,7,8,9,10]};// ALT\n  this.rules[19].opcodes[1] = {type: 4, index: 40};// RNM(UdtOp)\n  this.rules[19].opcodes[2] = {type: 4, index: 29};// RNM(RnmOp)\n  this.rules[19].opcodes[3] = {type: 4, index: 53};// RNM(TrgOp)\n  this.rules[19].opcodes[4] = {type: 4, index: 54};// RNM(TbsOp)\n  this.rules[19].opcodes[5] = {type: 4, index: 55};// RNM(TlsOp)\n  this.rules[19].opcodes[6] = {type: 4, index: 61};// RNM(ClsOp)\n  this.rules[19].opcodes[7] = {type: 4, index: 30};// RNM(BkrOp)\n  this.rules[19].opcodes[8] = {type: 4, index: 51};// RNM(AbgOp)\n  this.rules[19].opcodes[9] = {type: 4, index: 52};// RNM(AenOp)\n  this.rules[19].opcodes[10] = {type: 4, index: 65};// RNM(ProsVal)\n\n  /* BasicElementErr */\n  this.rules[20].opcodes = [];\n  this.rules[20].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP\n  this.rules[20].opcodes[1] = {type: 1, children: [2,3,4,5]};// ALT\n  this.rules[20].opcodes[2] = {type: 5, min: 33, max: 40};// TRG\n  this.rules[20].opcodes[3] = {type: 5, min: 42, max: 46};// TRG\n  this.rules[20].opcodes[4] = {type: 5, min: 48, max: 92};// TRG\n  this.rules[20].opcodes[5] = {type: 5, min: 94, max: 126};// TRG\n\n  /* Group */\n  this.rules[21].opcodes = [];\n  this.rules[21].opcodes[0] = {type: 2, children: [1,2,3]};// CAT\n  this.rules[21].opcodes[1] = {type: 4, index: 23};// RNM(GroupOpen)\n  this.rules[21].opcodes[2] = {type: 4, index: 14};// RNM(Alternation)\n  this.rules[21].opcodes[3] = {type: 1, children: [4,5]};// ALT\n  this.rules[21].opcodes[4] = {type: 4, index: 24};// RNM(GroupClose)\n  this.rules[21].opcodes[5] = {type: 4, index: 22};// RNM(GroupError)\n\n  /* GroupError */\n  this.rules[22].opcodes = [];\n  this.rules[22].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP\n  this.rules[22].opcodes[1] = {type: 1, children: [2,3,4,5]};// ALT\n  this.rules[22].opcodes[2] = {type: 5, min: 33, max: 40};// TRG\n  this.rules[22].opcodes[3] = {type: 5, min: 42, max: 46};// TRG\n  this.rules[22].opcodes[4] = {type: 5, min: 48, max: 92};// TRG\n  this.rules[22].opcodes[5] = {type: 5, min: 94, max: 126};// TRG\n\n  /* GroupOpen */\n  this.rules[23].opcodes = [];\n  this.rules[23].opcodes[0] = {type: 2, children: [1,2]};// CAT\n  this.rules[23].opcodes[1] = {type: 6, string: [40]};// TBS\n  this.rules[23].opcodes[2] = {type: 4, index: 89};// RNM(owsp)\n\n  /* GroupClose */\n  this.rules[24].opcodes = [];\n  this.rules[24].opcodes[0] = {type: 2, children: [1,2]};// CAT\n  this.rules[24].opcodes[1] = {type: 4, index: 89};// RNM(owsp)\n  this.rules[24].opcodes[2] = {type: 6, string: [41]};// TBS\n\n  /* Option */\n  this.rules[25].opcodes = [];\n  this.rules[25].opcodes[0] = {type: 2, children: [1,2,3]};// CAT\n  this.rules[25].opcodes[1] = {type: 4, index: 27};// RNM(OptionOpen)\n  this.rules[25].opcodes[2] = {type: 4, index: 14};// RNM(Alternation)\n  this.rules[25].opcodes[3] = {type: 1, children: [4,5]};// ALT\n  this.rules[25].opcodes[4] = {type: 4, index: 28};// RNM(OptionClose)\n  this.rules[25].opcodes[5] = {type: 4, index: 26};// RNM(OptionError)\n\n  /* OptionError */\n  this.rules[26].opcodes = [];\n  this.rules[26].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP\n  this.rules[26].opcodes[1] = {type: 1, children: [2,3,4,5]};// ALT\n  this.rules[26].opcodes[2] = {type: 5, min: 33, max: 40};// TRG\n  this.rules[26].opcodes[3] = {type: 5, min: 42, max: 46};// TRG\n  this.rules[26].opcodes[4] = {type: 5, min: 48, max: 92};// TRG\n  this.rules[26].opcodes[5] = {type: 5, min: 94, max: 126};// TRG\n\n  /* OptionOpen */\n  this.rules[27].opcodes = [];\n  this.rules[27].opcodes[0] = {type: 2, children: [1,2]};// CAT\n  this.rules[27].opcodes[1] = {type: 6, string: [91]};// TBS\n  this.rules[27].opcodes[2] = {type: 4, index: 89};// RNM(owsp)\n\n  /* OptionClose */\n  this.rules[28].opcodes = [];\n  this.rules[28].opcodes[0] = {type: 2, children: [1,2]};// CAT\n  this.rules[28].opcodes[1] = {type: 4, index: 89};// RNM(owsp)\n  this.rules[28].opcodes[2] = {type: 6, string: [93]};// TBS\n\n  /* RnmOp */\n  this.rules[29].opcodes = [];\n  this.rules[29].opcodes[0] = {type: 4, index: 88};// RNM(alphanum)\n\n  /* BkrOp */\n  this.rules[30].opcodes = [];\n  this.rules[30].opcodes[0] = {type: 2, children: [1,2,4]};// CAT\n  this.rules[30].opcodes[1] = {type: 6, string: [92]};// TBS\n  this.rules[30].opcodes[2] = {type: 3, min: 0, max: 1};// REP\n  this.rules[30].opcodes[3] = {type: 4, index: 31};// RNM(bkrModifier)\n  this.rules[30].opcodes[4] = {type: 4, index: 36};// RNM(bkr-name)\n\n  /* bkrModifier */\n  this.rules[31].opcodes = [];\n  this.rules[31].opcodes[0] = {type: 1, children: [1,7,13,19]};// ALT\n  this.rules[31].opcodes[1] = {type: 2, children: [2,3]};// CAT\n  this.rules[31].opcodes[2] = {type: 4, index: 32};// RNM(cs)\n  this.rules[31].opcodes[3] = {type: 3, min: 0, max: 1};// REP\n  this.rules[31].opcodes[4] = {type: 1, children: [5,6]};// ALT\n  this.rules[31].opcodes[5] = {type: 4, index: 34};// RNM(um)\n  this.rules[31].opcodes[6] = {type: 4, index: 35};// RNM(pm)\n  this.rules[31].opcodes[7] = {type: 2, children: [8,9]};// CAT\n  this.rules[31].opcodes[8] = {type: 4, index: 33};// RNM(ci)\n  this.rules[31].opcodes[9] = {type: 3, min: 0, max: 1};// REP\n  this.rules[31].opcodes[10] = {type: 1, children: [11,12]};// ALT\n  this.rules[31].opcodes[11] = {type: 4, index: 34};// RNM(um)\n  this.rules[31].opcodes[12] = {type: 4, index: 35};// RNM(pm)\n  this.rules[31].opcodes[13] = {type: 2, children: [14,15]};// CAT\n  this.rules[31].opcodes[14] = {type: 4, index: 34};// RNM(um)\n  this.rules[31].opcodes[15] = {type: 3, min: 0, max: 1};// REP\n  this.rules[31].opcodes[16] = {type: 1, children: [17,18]};// ALT\n  this.rules[31].opcodes[17] = {type: 4, index: 32};// RNM(cs)\n  this.rules[31].opcodes[18] = {type: 4, index: 33};// RNM(ci)\n  this.rules[31].opcodes[19] = {type: 2, children: [20,21]};// CAT\n  this.rules[31].opcodes[20] = {type: 4, index: 35};// RNM(pm)\n  this.rules[31].opcodes[21] = {type: 3, min: 0, max: 1};// REP\n  this.rules[31].opcodes[22] = {type: 1, children: [23,24]};// ALT\n  this.rules[31].opcodes[23] = {type: 4, index: 32};// RNM(cs)\n  this.rules[31].opcodes[24] = {type: 4, index: 33};// RNM(ci)\n\n  /* cs */\n  this.rules[32].opcodes = [];\n  this.rules[32].opcodes[0] = {type: 6, string: [37,115]};// TBS\n\n  /* ci */\n  this.rules[33].opcodes = [];\n  this.rules[33].opcodes[0] = {type: 6, string: [37,105]};// TBS\n\n  /* um */\n  this.rules[34].opcodes = [];\n  this.rules[34].opcodes[0] = {type: 6, string: [37,117]};// TBS\n\n  /* pm */\n  this.rules[35].opcodes = [];\n  this.rules[35].opcodes[0] = {type: 6, string: [37,112]};// TBS\n\n  /* bkr-name */\n  this.rules[36].opcodes = [];\n  this.rules[36].opcodes[0] = {type: 1, children: [1,2,3]};// ALT\n  this.rules[36].opcodes[1] = {type: 4, index: 38};// RNM(uname)\n  this.rules[36].opcodes[2] = {type: 4, index: 39};// RNM(ename)\n  this.rules[36].opcodes[3] = {type: 4, index: 37};// RNM(rname)\n\n  /* rname */\n  this.rules[37].opcodes = [];\n  this.rules[37].opcodes[0] = {type: 4, index: 88};// RNM(alphanum)\n\n  /* uname */\n  this.rules[38].opcodes = [];\n  this.rules[38].opcodes[0] = {type: 2, children: [1,2]};// CAT\n  this.rules[38].opcodes[1] = {type: 6, string: [117,95]};// TBS\n  this.rules[38].opcodes[2] = {type: 4, index: 88};// RNM(alphanum)\n\n  /* ename */\n  this.rules[39].opcodes = [];\n  this.rules[39].opcodes[0] = {type: 2, children: [1,2]};// CAT\n  this.rules[39].opcodes[1] = {type: 6, string: [101,95]};// TBS\n  this.rules[39].opcodes[2] = {type: 4, index: 88};// RNM(alphanum)\n\n  /* UdtOp */\n  this.rules[40].opcodes = [];\n  this.rules[40].opcodes[0] = {type: 1, children: [1,2]};// ALT\n  this.rules[40].opcodes[1] = {type: 4, index: 42};// RNM(udt-empty)\n  this.rules[40].opcodes[2] = {type: 4, index: 41};// RNM(udt-non-empty)\n\n  /* udt-non-empty */\n  this.rules[41].opcodes = [];\n  this.rules[41].opcodes[0] = {type: 2, children: [1,2]};// CAT\n  this.rules[41].opcodes[1] = {type: 6, string: [117,95]};// TBS\n  this.rules[41].opcodes[2] = {type: 4, index: 88};// RNM(alphanum)\n\n  /* udt-empty */\n  this.rules[42].opcodes = [];\n  this.rules[42].opcodes[0] = {type: 2, children: [1,2]};// CAT\n  this.rules[42].opcodes[1] = {type: 6, string: [101,95]};// TBS\n  this.rules[42].opcodes[2] = {type: 4, index: 88};// RNM(alphanum)\n\n  /* RepOp */\n  this.rules[43].opcodes = [];\n  this.rules[43].opcodes[0] = {type: 1, children: [1,5,8,11,12]};// ALT\n  this.rules[43].opcodes[1] = {type: 2, children: [2,3,4]};// CAT\n  this.rules[43].opcodes[2] = {type: 4, index: 69};// RNM(rep-min)\n  this.rules[43].opcodes[3] = {type: 4, index: 46};// RNM(StarOp)\n  this.rules[43].opcodes[4] = {type: 4, index: 71};// RNM(rep-max)\n  this.rules[43].opcodes[5] = {type: 2, children: [6,7]};// CAT\n  this.rules[43].opcodes[6] = {type: 4, index: 69};// RNM(rep-min)\n  this.rules[43].opcodes[7] = {type: 4, index: 46};// RNM(StarOp)\n  this.rules[43].opcodes[8] = {type: 2, children: [9,10]};// CAT\n  this.rules[43].opcodes[9] = {type: 4, index: 46};// RNM(StarOp)\n  this.rules[43].opcodes[10] = {type: 4, index: 71};// RNM(rep-max)\n  this.rules[43].opcodes[11] = {type: 4, index: 46};// RNM(StarOp)\n  this.rules[43].opcodes[12] = {type: 4, index: 70};// RNM(rep-min-max)\n\n  /* AltOp */\n  this.rules[44].opcodes = [];\n  this.rules[44].opcodes[0] = {type: 2, children: [1,2]};// CAT\n  this.rules[44].opcodes[1] = {type: 6, string: [47]};// TBS\n  this.rules[44].opcodes[2] = {type: 4, index: 89};// RNM(owsp)\n\n  /* CatOp */\n  this.rules[45].opcodes = [];\n  this.rules[45].opcodes[0] = {type: 4, index: 90};// RNM(wsp)\n\n  /* StarOp */\n  this.rules[46].opcodes = [];\n  this.rules[46].opcodes[0] = {type: 6, string: [42]};// TBS\n\n  /* AndOp */\n  this.rules[47].opcodes = [];\n  this.rules[47].opcodes[0] = {type: 6, string: [38]};// TBS\n\n  /* NotOp */\n  this.rules[48].opcodes = [];\n  this.rules[48].opcodes[0] = {type: 6, string: [33]};// TBS\n\n  /* BkaOp */\n  this.rules[49].opcodes = [];\n  this.rules[49].opcodes[0] = {type: 6, string: [38,38]};// TBS\n\n  /* BknOp */\n  this.rules[50].opcodes = [];\n  this.rules[50].opcodes[0] = {type: 6, string: [33,33]};// TBS\n\n  /* AbgOp */\n  this.rules[51].opcodes = [];\n  this.rules[51].opcodes[0] = {type: 6, string: [37,94]};// TBS\n\n  /* AenOp */\n  this.rules[52].opcodes = [];\n  this.rules[52].opcodes[0] = {type: 6, string: [37,36]};// TBS\n\n  /* TrgOp */\n  this.rules[53].opcodes = [];\n  this.rules[53].opcodes[0] = {type: 2, children: [1,2]};// CAT\n  this.rules[53].opcodes[1] = {type: 6, string: [37]};// TBS\n  this.rules[53].opcodes[2] = {type: 1, children: [3,8,13]};// ALT\n  this.rules[53].opcodes[3] = {type: 2, children: [4,5,6,7]};// CAT\n  this.rules[53].opcodes[4] = {type: 4, index: 76};// RNM(Dec)\n  this.rules[53].opcodes[5] = {type: 4, index: 79};// RNM(dmin)\n  this.rules[53].opcodes[6] = {type: 6, string: [45]};// TBS\n  this.rules[53].opcodes[7] = {type: 4, index: 80};// RNM(dmax)\n  this.rules[53].opcodes[8] = {type: 2, children: [9,10,11,12]};// CAT\n  this.rules[53].opcodes[9] = {type: 4, index: 77};// RNM(Hex)\n  this.rules[53].opcodes[10] = {type: 4, index: 83};// RNM(xmin)\n  this.rules[53].opcodes[11] = {type: 6, string: [45]};// TBS\n  this.rules[53].opcodes[12] = {type: 4, index: 84};// RNM(xmax)\n  this.rules[53].opcodes[13] = {type: 2, children: [14,15,16,17]};// CAT\n  this.rules[53].opcodes[14] = {type: 4, index: 78};// RNM(Bin)\n  this.rules[53].opcodes[15] = {type: 4, index: 81};// RNM(bmin)\n  this.rules[53].opcodes[16] = {type: 6, string: [45]};// TBS\n  this.rules[53].opcodes[17] = {type: 4, index: 82};// RNM(bmax)\n\n  /* TbsOp */\n  this.rules[54].opcodes = [];\n  this.rules[54].opcodes[0] = {type: 2, children: [1,2]};// CAT\n  this.rules[54].opcodes[1] = {type: 6, string: [37]};// TBS\n  this.rules[54].opcodes[2] = {type: 1, children: [3,10,17]};// ALT\n  this.rules[54].opcodes[3] = {type: 2, children: [4,5,6]};// CAT\n  this.rules[54].opcodes[4] = {type: 4, index: 76};// RNM(Dec)\n  this.rules[54].opcodes[5] = {type: 4, index: 73};// RNM(dString)\n  this.rules[54].opcodes[6] = {type: 3, min: 0, max: Infinity};// REP\n  this.rules[54].opcodes[7] = {type: 2, children: [8,9]};// CAT\n  this.rules[54].opcodes[8] = {type: 6, string: [46]};// TBS\n  this.rules[54].opcodes[9] = {type: 4, index: 73};// RNM(dString)\n  this.rules[54].opcodes[10] = {type: 2, children: [11,12,13]};// CAT\n  this.rules[54].opcodes[11] = {type: 4, index: 77};// RNM(Hex)\n  this.rules[54].opcodes[12] = {type: 4, index: 74};// RNM(xString)\n  this.rules[54].opcodes[13] = {type: 3, min: 0, max: Infinity};// REP\n  this.rules[54].opcodes[14] = {type: 2, children: [15,16]};// CAT\n  this.rules[54].opcodes[15] = {type: 6, string: [46]};// TBS\n  this.rules[54].opcodes[16] = {type: 4, index: 74};// RNM(xString)\n  this.rules[54].opcodes[17] = {type: 2, children: [18,19,20]};// CAT\n  this.rules[54].opcodes[18] = {type: 4, index: 78};// RNM(Bin)\n  this.rules[54].opcodes[19] = {type: 4, index: 75};// RNM(bString)\n  this.rules[54].opcodes[20] = {type: 3, min: 0, max: Infinity};// REP\n  this.rules[54].opcodes[21] = {type: 2, children: [22,23]};// CAT\n  this.rules[54].opcodes[22] = {type: 6, string: [46]};// TBS\n  this.rules[54].opcodes[23] = {type: 4, index: 75};// RNM(bString)\n\n  /* TlsOp */\n  this.rules[55].opcodes = [];\n  this.rules[55].opcodes[0] = {type: 2, children: [1,2,3,4]};// CAT\n  this.rules[55].opcodes[1] = {type: 4, index: 56};// RNM(TlsCase)\n  this.rules[55].opcodes[2] = {type: 4, index: 57};// RNM(TlsOpen)\n  this.rules[55].opcodes[3] = {type: 4, index: 59};// RNM(TlsString)\n  this.rules[55].opcodes[4] = {type: 4, index: 58};// RNM(TlsClose)\n\n  /* TlsCase */\n  this.rules[56].opcodes = [];\n  this.rules[56].opcodes[0] = {type: 3, min: 0, max: 1};// REP\n  this.rules[56].opcodes[1] = {type: 1, children: [2,3]};// ALT\n  this.rules[56].opcodes[2] = {type: 7, string: [37,105]};// TLS\n  this.rules[56].opcodes[3] = {type: 7, string: [37,115]};// TLS\n\n  /* TlsOpen */\n  this.rules[57].opcodes = [];\n  this.rules[57].opcodes[0] = {type: 6, string: [34]};// TBS\n\n  /* TlsClose */\n  this.rules[58].opcodes = [];\n  this.rules[58].opcodes[0] = {type: 6, string: [34]};// TBS\n\n  /* TlsString */\n  this.rules[59].opcodes = [];\n  this.rules[59].opcodes[0] = {type: 3, min: 0, max: Infinity};// REP\n  this.rules[59].opcodes[1] = {type: 1, children: [2,3,4]};// ALT\n  this.rules[59].opcodes[2] = {type: 5, min: 32, max: 33};// TRG\n  this.rules[59].opcodes[3] = {type: 5, min: 35, max: 126};// TRG\n  this.rules[59].opcodes[4] = {type: 4, index: 60};// RNM(StringTab)\n\n  /* StringTab */\n  this.rules[60].opcodes = [];\n  this.rules[60].opcodes[0] = {type: 6, string: [9]};// TBS\n\n  /* ClsOp */\n  this.rules[61].opcodes = [];\n  this.rules[61].opcodes[0] = {type: 2, children: [1,2,3]};// CAT\n  this.rules[61].opcodes[1] = {type: 4, index: 62};// RNM(ClsOpen)\n  this.rules[61].opcodes[2] = {type: 4, index: 64};// RNM(ClsString)\n  this.rules[61].opcodes[3] = {type: 4, index: 63};// RNM(ClsClose)\n\n  /* ClsOpen */\n  this.rules[62].opcodes = [];\n  this.rules[62].opcodes[0] = {type: 6, string: [39]};// TBS\n\n  /* ClsClose */\n  this.rules[63].opcodes = [];\n  this.rules[63].opcodes[0] = {type: 6, string: [39]};// TBS\n\n  /* ClsString */\n  this.rules[64].opcodes = [];\n  this.rules[64].opcodes[0] = {type: 3, min: 0, max: Infinity};// REP\n  this.rules[64].opcodes[1] = {type: 1, children: [2,3,4]};// ALT\n  this.rules[64].opcodes[2] = {type: 5, min: 32, max: 38};// TRG\n  this.rules[64].opcodes[3] = {type: 5, min: 40, max: 126};// TRG\n  this.rules[64].opcodes[4] = {type: 4, index: 60};// RNM(StringTab)\n\n  /* ProsVal */\n  this.rules[65].opcodes = [];\n  this.rules[65].opcodes[0] = {type: 2, children: [1,2,3]};// CAT\n  this.rules[65].opcodes[1] = {type: 4, index: 66};// RNM(ProsValOpen)\n  this.rules[65].opcodes[2] = {type: 4, index: 67};// RNM(ProsValString)\n  this.rules[65].opcodes[3] = {type: 4, index: 68};// RNM(ProsValClose)\n\n  /* ProsValOpen */\n  this.rules[66].opcodes = [];\n  this.rules[66].opcodes[0] = {type: 6, string: [60]};// TBS\n\n  /* ProsValString */\n  this.rules[67].opcodes = [];\n  this.rules[67].opcodes[0] = {type: 3, min: 0, max: Infinity};// REP\n  this.rules[67].opcodes[1] = {type: 1, children: [2,3,4]};// ALT\n  this.rules[67].opcodes[2] = {type: 5, min: 32, max: 61};// TRG\n  this.rules[67].opcodes[3] = {type: 5, min: 63, max: 126};// TRG\n  this.rules[67].opcodes[4] = {type: 4, index: 60};// RNM(StringTab)\n\n  /* ProsValClose */\n  this.rules[68].opcodes = [];\n  this.rules[68].opcodes[0] = {type: 6, string: [62]};// TBS\n\n  /* rep-min */\n  this.rules[69].opcodes = [];\n  this.rules[69].opcodes[0] = {type: 4, index: 72};// RNM(rep-num)\n\n  /* rep-min-max */\n  this.rules[70].opcodes = [];\n  this.rules[70].opcodes[0] = {type: 4, index: 72};// RNM(rep-num)\n\n  /* rep-max */\n  this.rules[71].opcodes = [];\n  this.rules[71].opcodes[0] = {type: 4, index: 72};// RNM(rep-num)\n\n  /* rep-num */\n  this.rules[72].opcodes = [];\n  this.rules[72].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP\n  this.rules[72].opcodes[1] = {type: 5, min: 48, max: 57};// TRG\n\n  /* dString */\n  this.rules[73].opcodes = [];\n  this.rules[73].opcodes[0] = {type: 4, index: 85};// RNM(dnum)\n\n  /* xString */\n  this.rules[74].opcodes = [];\n  this.rules[74].opcodes[0] = {type: 4, index: 87};// RNM(xnum)\n\n  /* bString */\n  this.rules[75].opcodes = [];\n  this.rules[75].opcodes[0] = {type: 4, index: 86};// RNM(bnum)\n\n  /* Dec */\n  this.rules[76].opcodes = [];\n  this.rules[76].opcodes[0] = {type: 1, children: [1,2]};// ALT\n  this.rules[76].opcodes[1] = {type: 6, string: [68]};// TBS\n  this.rules[76].opcodes[2] = {type: 6, string: [100]};// TBS\n\n  /* Hex */\n  this.rules[77].opcodes = [];\n  this.rules[77].opcodes[0] = {type: 1, children: [1,2]};// ALT\n  this.rules[77].opcodes[1] = {type: 6, string: [88]};// TBS\n  this.rules[77].opcodes[2] = {type: 6, string: [120]};// TBS\n\n  /* Bin */\n  this.rules[78].opcodes = [];\n  this.rules[78].opcodes[0] = {type: 1, children: [1,2]};// ALT\n  this.rules[78].opcodes[1] = {type: 6, string: [66]};// TBS\n  this.rules[78].opcodes[2] = {type: 6, string: [98]};// TBS\n\n  /* dmin */\n  this.rules[79].opcodes = [];\n  this.rules[79].opcodes[0] = {type: 4, index: 85};// RNM(dnum)\n\n  /* dmax */\n  this.rules[80].opcodes = [];\n  this.rules[80].opcodes[0] = {type: 4, index: 85};// RNM(dnum)\n\n  /* bmin */\n  this.rules[81].opcodes = [];\n  this.rules[81].opcodes[0] = {type: 4, index: 86};// RNM(bnum)\n\n  /* bmax */\n  this.rules[82].opcodes = [];\n  this.rules[82].opcodes[0] = {type: 4, index: 86};// RNM(bnum)\n\n  /* xmin */\n  this.rules[83].opcodes = [];\n  this.rules[83].opcodes[0] = {type: 4, index: 87};// RNM(xnum)\n\n  /* xmax */\n  this.rules[84].opcodes = [];\n  this.rules[84].opcodes[0] = {type: 4, index: 87};// RNM(xnum)\n\n  /* dnum */\n  this.rules[85].opcodes = [];\n  this.rules[85].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP\n  this.rules[85].opcodes[1] = {type: 5, min: 48, max: 57};// TRG\n\n  /* bnum */\n  this.rules[86].opcodes = [];\n  this.rules[86].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP\n  this.rules[86].opcodes[1] = {type: 5, min: 48, max: 49};// TRG\n\n  /* xnum */\n  this.rules[87].opcodes = [];\n  this.rules[87].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP\n  this.rules[87].opcodes[1] = {type: 1, children: [2,3,4]};// ALT\n  this.rules[87].opcodes[2] = {type: 5, min: 48, max: 57};// TRG\n  this.rules[87].opcodes[3] = {type: 5, min: 65, max: 70};// TRG\n  this.rules[87].opcodes[4] = {type: 5, min: 97, max: 102};// TRG\n\n  /* alphanum */\n  this.rules[88].opcodes = [];\n  this.rules[88].opcodes[0] = {type: 2, children: [1,4]};// CAT\n  this.rules[88].opcodes[1] = {type: 1, children: [2,3]};// ALT\n  this.rules[88].opcodes[2] = {type: 5, min: 97, max: 122};// TRG\n  this.rules[88].opcodes[3] = {type: 5, min: 65, max: 90};// TRG\n  this.rules[88].opcodes[4] = {type: 3, min: 0, max: Infinity};// REP\n  this.rules[88].opcodes[5] = {type: 1, children: [6,7,8,9]};// ALT\n  this.rules[88].opcodes[6] = {type: 5, min: 97, max: 122};// TRG\n  this.rules[88].opcodes[7] = {type: 5, min: 65, max: 90};// TRG\n  this.rules[88].opcodes[8] = {type: 5, min: 48, max: 57};// TRG\n  this.rules[88].opcodes[9] = {type: 6, string: [45]};// TBS\n\n  /* owsp */\n  this.rules[89].opcodes = [];\n  this.rules[89].opcodes[0] = {type: 3, min: 0, max: Infinity};// REP\n  this.rules[89].opcodes[1] = {type: 4, index: 91};// RNM(space)\n\n  /* wsp */\n  this.rules[90].opcodes = [];\n  this.rules[90].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP\n  this.rules[90].opcodes[1] = {type: 4, index: 91};// RNM(space)\n\n  /* space */\n  this.rules[91].opcodes = [];\n  this.rules[91].opcodes[0] = {type: 1, children: [1,2,3,4]};// ALT\n  this.rules[91].opcodes[1] = {type: 6, string: [32]};// TBS\n  this.rules[91].opcodes[2] = {type: 6, string: [9]};// TBS\n  this.rules[91].opcodes[3] = {type: 4, index: 92};// RNM(comment)\n  this.rules[91].opcodes[4] = {type: 4, index: 94};// RNM(LineContinue)\n\n  /* comment */\n  this.rules[92].opcodes = [];\n  this.rules[92].opcodes[0] = {type: 2, children: [1,2]};// CAT\n  this.rules[92].opcodes[1] = {type: 6, string: [59]};// TBS\n  this.rules[92].opcodes[2] = {type: 3, min: 0, max: Infinity};// REP\n  this.rules[92].opcodes[3] = {type: 1, children: [4,5]};// ALT\n  this.rules[92].opcodes[4] = {type: 5, min: 32, max: 126};// TRG\n  this.rules[92].opcodes[5] = {type: 6, string: [9]};// TBS\n\n  /* LineEnd */\n  this.rules[93].opcodes = [];\n  this.rules[93].opcodes[0] = {type: 1, children: [1,2,3]};// ALT\n  this.rules[93].opcodes[1] = {type: 6, string: [13,10]};// TBS\n  this.rules[93].opcodes[2] = {type: 6, string: [10]};// TBS\n  this.rules[93].opcodes[3] = {type: 6, string: [13]};// TBS\n\n  /* LineContinue */\n  this.rules[94].opcodes = [];\n  this.rules[94].opcodes[0] = {type: 2, children: [1,5]};// CAT\n  this.rules[94].opcodes[1] = {type: 1, children: [2,3,4]};// ALT\n  this.rules[94].opcodes[2] = {type: 6, string: [13,10]};// TBS\n  this.rules[94].opcodes[3] = {type: 6, string: [10]};// TBS\n  this.rules[94].opcodes[4] = {type: 6, string: [13]};// TBS\n  this.rules[94].opcodes[5] = {type: 1, children: [6,7]};// ALT\n  this.rules[94].opcodes[6] = {type: 6, string: [32]};// TBS\n  this.rules[94].opcodes[7] = {type: 6, string: [9]};// TBS\n\n  // The `toString()` function will display the original grammar file(s) that produced these opcodes.\n  this.toString = function toString(){\n    let str = \"\";\n    str += \";\\n\";\n    str += \"; ABNF for JavaScript APG 2.0 SABNF\\n\";\n    str += \"; RFC 5234 with some restrictions and additions.\\n\";\n    str += \"; Updated 11/24/2015 for RFC 7405 case-sensitive literal string notation\\n\";\n    str += \";  - accepts %s\\\"string\\\" as a case-sensitive string\\n\";\n    str += \";  - accepts %i\\\"string\\\" as a case-insensitive string\\n\";\n    str += \";  - accepts \\\"string\\\" as a case-insensitive string\\n\";\n    str += \";\\n\";\n    str += \"; Some restrictions:\\n\";\n    str += \";   1. Rules must begin at first character of each line.\\n\";\n    str += \";      Indentations on first rule and rules thereafter are not allowed.\\n\";\n    str += \";   2. Relaxed line endings. CRLF, LF or CR are accepted as valid line ending.\\n\";\n    str += \";   3. Prose values, i.e. <prose value>, are accepted as valid grammar syntax.\\n\";\n    str += \";      However, a working parser cannot be generated from them.\\n\";\n    str += \";\\n\";\n    str += \"; Super set (SABNF) additions:\\n\";\n    str += \";   1. Look-ahead (syntactic predicate) operators are accepted as element prefixes.\\n\";\n    str += \";      & is the positive look-ahead operator, succeeds and backtracks if the look-ahead phrase is found\\n\";\n    str += \";      ! is the negative look-ahead operator, succeeds and backtracks if the look-ahead phrase is NOT found\\n\";\n    str += \";      e.g. &%d13 or &rule or !(A / B)\\n\";\n    str += \";   2. User-Defined Terminals (UDT) of the form, u_name and e_name are accepted.\\n\";\n    str += \";      'name' is alpha followed by alpha/num/hyphen just like a rule name.\\n\";\n    str += \";      u_name may be used as an element but no rule definition is given.\\n\";\n    str += \";      e.g. rule = A / u_myUdt\\n\";\n    str += \";           A = \\\"a\\\"\\n\";\n    str += \";      would be a valid grammar.\\n\";\n    str += \";   3. Case-sensitive, single-quoted strings are accepted.\\n\";\n    str += \";      e.g. 'abc' would be equivalent to %d97.98.99\\n\";\n    str += \";      (kept for backward compatibility, but superseded by %s\\\"abc\\\")  \\n\";\n    str += \"; New 12/26/2015\\n\";\n    str += \";   4. Look-behind operators are accepted as element prefixes.\\n\";\n    str += \";      && is the positive look-behind operator, succeeds and backtracks if the look-behind phrase is found\\n\";\n    str += \";      !! is the negative look-behind operator, succeeds and backtracks if the look-behind phrase is NOT found\\n\";\n    str += \";      e.g. &&%d13 or &&rule or !!(A / B)\\n\";\n    str += \";   5. Back reference operators, i.e. \\\\rulename, are accepted.\\n\";\n    str += \";      A back reference operator acts like a TLS or TBS terminal except that the phrase it attempts\\n\";\n    str += \";      to match is a phrase previously matched by the rule 'rulename'.\\n\";\n    str += \";      There are two modes of previous phrase matching - the parent-frame mode and the universal mode.\\n\";\n    str += \";      In universal mode, \\\\rulename matches the last match to 'rulename' regardless of where it was found.\\n\";\n    str += \";      In parent-frame mode, \\\\rulename matches only the last match found on the parent's frame or parse tree level.\\n\";\n    str += \";      Back reference modifiers can be used to specify case and mode.\\n\";\n    str += \";      \\\\A defaults to case-insensitive and universal mode, e.g. \\\\A === \\\\%i%uA\\n\";\n    str += \";      Modifiers %i and %s determine case-insensitive and case-sensitive mode, respectively.\\n\";\n    str += \";      Modifiers %u and %p determine universal mode and parent frame mode, respectively.\\n\";\n    str += \";      Case and mode modifiers can appear in any order, e.g. \\\\%s%pA === \\\\%p%sA. \\n\";\n    str += \";   7. String begin anchor, ABG(%^) matches the beginning of the input string location.\\n\";\n    str += \";      Returns EMPTY or NOMATCH. Never consumes any characters.\\n\";\n    str += \";   8. String end anchor, AEN(%$) matches the end of the input string location.\\n\";\n    str += \";      Returns EMPTY or NOMATCH. Never consumes any characters.\\n\";\n    str += \";\\n\";\n    str += \"File            = *(BlankLine / Rule / RuleError)\\n\";\n    str += \"BlankLine       = *(%d32/%d9) [comment] LineEnd\\n\";\n    str += \"Rule            = RuleLookup owsp Alternation ((owsp LineEnd)\\n\";\n    str += \"                / (LineEndError LineEnd))\\n\";\n    str += \"RuleLookup      = RuleNameTest owsp DefinedAsTest\\n\";\n    str += \"RuleNameTest    = RuleName/RuleNameError\\n\";\n    str += \"RuleName        = alphanum\\n\";\n    str += \"RuleNameError   = 1*(%d33-60/%d62-126)\\n\";\n    str += \"DefinedAsTest   = DefinedAs / DefinedAsError\\n\";\n    str += \"DefinedAsError  = 1*2%d33-126\\n\";\n    str += \"DefinedAs       = IncAlt / Defined\\n\";\n    str += \"Defined         = %d61\\n\";\n    str += \"IncAlt          = %d61.47\\n\";\n    str += \"RuleError       = 1*(%d32-126 / %d9  / LineContinue) LineEnd\\n\";\n    str += \"LineEndError    = 1*(%d32-126 / %d9  / LineContinue)\\n\";\n    str += \"Alternation     = Concatenation *(owsp AltOp Concatenation)\\n\";\n    str += \"Concatenation   = Repetition *(CatOp Repetition)\\n\";\n    str += \"Repetition      = [Modifier] (Group / Option / BasicElement / BasicElementErr)\\n\";\n    str += \"Modifier        = (Predicate [RepOp])\\n\";\n    str += \"                / RepOp\\n\";\n    str += \"Predicate       = BkaOp\\n\";\n    str += \"                / BknOp\\n\";\n    str += \"                / AndOp\\n\";\n    str += \"                / NotOp\\n\";\n    str += \"BasicElement    = UdtOp\\n\";\n    str += \"                / RnmOp\\n\";\n    str += \"                / TrgOp\\n\";\n    str += \"                / TbsOp\\n\";\n    str += \"                / TlsOp\\n\";\n    str += \"                / ClsOp\\n\";\n    str += \"                / BkrOp\\n\";\n    str += \"                / AbgOp\\n\";\n    str += \"                / AenOp\\n\";\n    str += \"                / ProsVal\\n\";\n    str += \"BasicElementErr = 1*(%d33-40/%d42-46/%d48-92/%d94-126)\\n\";\n    str += \"Group           = GroupOpen  Alternation (GroupClose / GroupError)\\n\";\n    str += \"GroupError      = 1*(%d33-40/%d42-46/%d48-92/%d94-126) ; same as BasicElementErr\\n\";\n    str += \"GroupOpen       = %d40 owsp\\n\";\n    str += \"GroupClose      = owsp %d41\\n\";\n    str += \"Option          = OptionOpen Alternation (OptionClose / OptionError)\\n\";\n    str += \"OptionError     = 1*(%d33-40/%d42-46/%d48-92/%d94-126) ; same as BasicElementErr\\n\";\n    str += \"OptionOpen      = %d91 owsp\\n\";\n    str += \"OptionClose     = owsp %d93\\n\";\n    str += \"RnmOp           = alphanum\\n\";\n    str += \"BkrOp           = %d92 [bkrModifier] bkr-name\\n\";\n    str += \"bkrModifier     = (cs [um / pm]) / (ci [um / pm]) / (um [cs /ci]) / (pm [cs / ci])\\n\";\n    str += \"cs              = '%s'\\n\";\n    str += \"ci              = '%i'\\n\";\n    str += \"um              = '%u'\\n\";\n    str += \"pm              = '%p'\\n\";\n    str += \"bkr-name        = uname / ename / rname\\n\";\n    str += \"rname           = alphanum\\n\";\n    str += \"uname           = %d117.95 alphanum\\n\";\n    str += \"ename           = %d101.95 alphanum\\n\";\n    str += \"UdtOp           = udt-empty\\n\";\n    str += \"                / udt-non-empty\\n\";\n    str += \"udt-non-empty   = %d117.95 alphanum\\n\";\n    str += \"udt-empty       = %d101.95 alphanum\\n\";\n    str += \"RepOp           = (rep-min StarOp rep-max)\\n\";\n    str += \"                / (rep-min StarOp)\\n\";\n    str += \"                / (StarOp rep-max)\\n\";\n    str += \"                / StarOp\\n\";\n    str += \"                / rep-min-max\\n\";\n    str += \"AltOp           = %d47 owsp\\n\";\n    str += \"CatOp           = wsp\\n\";\n    str += \"StarOp          = %d42\\n\";\n    str += \"AndOp           = %d38\\n\";\n    str += \"NotOp           = %d33\\n\";\n    str += \"BkaOp           = %d38.38\\n\";\n    str += \"BknOp           = %d33.33\\n\";\n    str += \"AbgOp           = %d37.94\\n\";\n    str += \"AenOp           = %d37.36\\n\";\n    str += \"TrgOp           = %d37 ((Dec dmin %d45 dmax) / (Hex xmin %d45 xmax) / (Bin bmin %d45 bmax))\\n\";\n    str += \"TbsOp           = %d37 ((Dec dString *(%d46 dString)) / (Hex xString *(%d46 xString)) / (Bin bString *(%d46 bString)))\\n\";\n    str += \"TlsOp           = TlsCase TlsOpen TlsString TlsClose\\n\";\n    str += \"TlsCase         = [\\\"%i\\\" / \\\"%s\\\"]\\n\";\n    str += \"TlsOpen         = %d34\\n\";\n    str += \"TlsClose        = %d34\\n\";\n    str += \"TlsString       = *(%d32-33/%d35-126/StringTab)\\n\";\n    str += \"StringTab       = %d9\\n\";\n    str += \"ClsOp           = ClsOpen ClsString ClsClose\\n\";\n    str += \"ClsOpen         = %d39\\n\";\n    str += \"ClsClose        = %d39\\n\";\n    str += \"ClsString       = *(%d32-38/%d40-126/StringTab)\\n\";\n    str += \"ProsVal         = ProsValOpen ProsValString ProsValClose\\n\";\n    str += \"ProsValOpen     = %d60\\n\";\n    str += \"ProsValString   = *(%d32-61/%d63-126/StringTab)\\n\";\n    str += \"ProsValClose    = %d62\\n\";\n    str += \"rep-min         = rep-num\\n\";\n    str += \"rep-min-max     = rep-num\\n\";\n    str += \"rep-max         = rep-num\\n\";\n    str += \"rep-num         = 1*(%d48-57)\\n\";\n    str += \"dString         = dnum\\n\";\n    str += \"xString         = xnum\\n\";\n    str += \"bString         = bnum\\n\";\n    str += \"Dec             = (%d68/%d100)\\n\";\n    str += \"Hex             = (%d88/%d120)\\n\";\n    str += \"Bin             = (%d66/%d98)\\n\";\n    str += \"dmin            = dnum\\n\";\n    str += \"dmax            = dnum\\n\";\n    str += \"bmin            = bnum\\n\";\n    str += \"bmax            = bnum\\n\";\n    str += \"xmin            = xnum\\n\";\n    str += \"xmax            = xnum\\n\";\n    str += \"dnum            = 1*(%d48-57)\\n\";\n    str += \"bnum            = 1*%d48-49\\n\";\n    str += \"xnum            = 1*(%d48-57 / %d65-70 / %d97-102)\\n\";\n    str += \";\\n\";\n    str += \"; Basics\\n\";\n    str += \"alphanum        = (%d97-122/%d65-90) *(%d97-122/%d65-90/%d48-57/%d45)\\n\";\n    str += \"owsp            = *space\\n\";\n    str += \"wsp             = 1*space\\n\";\n    str += \"space           = %d32\\n\";\n    str += \"                / %d9\\n\";\n    str += \"                / comment\\n\";\n    str += \"                / LineContinue\\n\";\n    str += \"comment         = %d59 *(%d32-126 / %d9)\\n\";\n    str += \"LineEnd         = %d13.10\\n\";\n    str += \"                / %d10\\n\";\n    str += \"                / %d13\\n\";\n    str += \"LineContinue    = (%d13.10 / %d10 / %d13) (%d32 / %d9)\\n\";\n    return str;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/sabnf-grammar.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/scanner-callbacks.js":
/*!**************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/scanner-callbacks.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// These are the AST translation callback functions used by the scanner\n// to analyze the characters and lines.\nconst ids = __webpack_require__(/*! ../apg-lib/identifiers */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/identifiers.js\");\nconst utils = __webpack_require__(/*! ../apg-lib/utilities */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/utilities.js\");\n\nfunction semLine(state, chars, phraseIndex, phraseCount, data) {\n  if (state === ids.SEM_PRE) {\n    data.endLength = 0;\n    data.textLength = 0;\n    data.invalidCount = 0;\n  } else {\n    data.lines.push({\n      lineNo: data.lines.length,\n      beginChar: phraseIndex,\n      length: phraseCount,\n      textLength: data.textLength,\n      endType: data.endType,\n      invalidChars: data.invalidCount,\n    });\n  }\n  return ids.SEM_OK;\n}\nfunction semLineText(state, chars, phraseIndex, phraseCount, data) {\n  if (state === ids.SEM_PRE) {\n    data.textLength = phraseCount;\n  }\n  return ids.SEM_OK;\n}\nfunction semLastLine(state, chars, phraseIndex, phraseCount, data) {\n  if (state === ids.SEM_PRE) {\n    data.endLength = 0;\n    data.textLength = 0;\n    data.invalidCount = 0;\n  } else if (data.strict) {\n    data.lines.push({\n      lineNo: data.lines.length,\n      beginChar: phraseIndex,\n      length: phraseCount,\n      textLength: phraseCount,\n      endType: 'none',\n      invalidChars: data.invalidCount,\n    });\n    data.errors.push({\n      line: data.lineNo,\n      char: phraseIndex + phraseCount,\n      msg: 'no line end on last line - strict ABNF specifies CRLF(\\\\r\\\\n, \\\\x0D\\\\x0A)',\n    });\n  } else {\n    /* add a line ender */\n    chars.push(10);\n    data.lines.push({\n      lineNo: data.lines.length,\n      beginChar: phraseIndex,\n      length: phraseCount + 1,\n      textLength: phraseCount,\n      endType: 'LF',\n      invalidChars: data.invalidCount,\n    });\n  }\n  return ids.SEM_OK;\n}\nfunction semInvalid(state, chars, phraseIndex, phraseCount, data) {\n  if (state === ids.SEM_PRE) {\n    data.errors.push({\n      line: data.lineNo,\n      char: phraseIndex,\n      msg: `invalid character found '\\\\x${utils.charToHex(chars[phraseIndex])}'`,\n    });\n  }\n  return ids.SEM_OK;\n}\nfunction semEnd(state, chars, phraseIndex, phraseCount, data) {\n  if (state === ids.SEM_POST) {\n    data.lineNo += 1;\n  }\n  return ids.SEM_OK;\n}\nfunction semLF(state, chars, phraseIndex, phraseCount, data) {\n  if (state === ids.SEM_PRE) {\n    data.endType = 'LF';\n    if (data.strict) {\n      data.errors.push({\n        line: data.lineNo,\n        char: phraseIndex,\n        msg: 'line end character LF(\\\\n, \\\\x0A) - strict ABNF specifies CRLF(\\\\r\\\\n, \\\\x0D\\\\x0A)',\n      });\n    }\n  }\n  return ids.SEM_OK;\n}\nfunction semCR(state, chars, phraseIndex, phraseCount, data) {\n  if (state === ids.SEM_PRE) {\n    data.endType = 'CR';\n    if (data.strict) {\n      data.errors.push({\n        line: data.lineNo,\n        char: phraseIndex,\n        msg: 'line end character CR(\\\\r, \\\\x0D) - strict ABNF specifies CRLF(\\\\r\\\\n, \\\\x0D\\\\x0A)',\n      });\n    }\n  }\n  return ids.SEM_OK;\n}\nfunction semCRLF(state, chars, phraseIndex, phraseCount, data) {\n  if (state === ids.SEM_PRE) {\n    data.endType = 'CRLF';\n  }\n  return ids.SEM_OK;\n}\nconst callbacks = [];\ncallbacks.line = semLine;\ncallbacks['line-text'] = semLineText;\ncallbacks['last-line'] = semLastLine;\ncallbacks.invalid = semInvalid;\ncallbacks.end = semEnd;\ncallbacks.lf = semLF;\ncallbacks.cr = semCR;\ncallbacks.crlf = semCRLF;\nexports.callbacks = callbacks;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FwZy1qc0A0LjIuMS9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctYXBpL3NjYW5uZXItY2FsbGJhY2tzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksbUJBQU8sQ0FBQywwSEFBd0I7QUFDNUMsY0FBYyxtQkFBTyxDQUFDLHNIQUFzQjs7QUFFNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxvQ0FBb0M7QUFDOUUsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHRva2Vuc3RyZWFtL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vYXBnLWpzQDQuMi4xL25vZGVfbW9kdWxlcy9hcGctanMvc3JjL2FwZy1hcGkvc2Nhbm5lci1jYWxsYmFja3MuanM/YjM4MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogICBjb3B5cmlnaHQ6IENvcHlyaWdodCAoYykgMjAyMSBMb3dlbGwgRC4gVGhvbWFzLCBhbGwgcmlnaHRzIHJlc2VydmVkXG4gKiAgICAgbGljZW5zZTogQlNELTItQ2xhdXNlIChodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0yLUNsYXVzZSlcbiAqICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG4vLyBUaGVzZSBhcmUgdGhlIEFTVCB0cmFuc2xhdGlvbiBjYWxsYmFjayBmdW5jdGlvbnMgdXNlZCBieSB0aGUgc2Nhbm5lclxuLy8gdG8gYW5hbHl6ZSB0aGUgY2hhcmFjdGVycyBhbmQgbGluZXMuXG5jb25zdCBpZHMgPSByZXF1aXJlKCcuLi9hcGctbGliL2lkZW50aWZpZXJzJyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4uL2FwZy1saWIvdXRpbGl0aWVzJyk7XG5cbmZ1bmN0aW9uIHNlbUxpbmUoc3RhdGUsIGNoYXJzLCBwaHJhc2VJbmRleCwgcGhyYXNlQ291bnQsIGRhdGEpIHtcbiAgaWYgKHN0YXRlID09PSBpZHMuU0VNX1BSRSkge1xuICAgIGRhdGEuZW5kTGVuZ3RoID0gMDtcbiAgICBkYXRhLnRleHRMZW5ndGggPSAwO1xuICAgIGRhdGEuaW52YWxpZENvdW50ID0gMDtcbiAgfSBlbHNlIHtcbiAgICBkYXRhLmxpbmVzLnB1c2goe1xuICAgICAgbGluZU5vOiBkYXRhLmxpbmVzLmxlbmd0aCxcbiAgICAgIGJlZ2luQ2hhcjogcGhyYXNlSW5kZXgsXG4gICAgICBsZW5ndGg6IHBocmFzZUNvdW50LFxuICAgICAgdGV4dExlbmd0aDogZGF0YS50ZXh0TGVuZ3RoLFxuICAgICAgZW5kVHlwZTogZGF0YS5lbmRUeXBlLFxuICAgICAgaW52YWxpZENoYXJzOiBkYXRhLmludmFsaWRDb3VudCxcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gaWRzLlNFTV9PSztcbn1cbmZ1bmN0aW9uIHNlbUxpbmVUZXh0KHN0YXRlLCBjaGFycywgcGhyYXNlSW5kZXgsIHBocmFzZUNvdW50LCBkYXRhKSB7XG4gIGlmIChzdGF0ZSA9PT0gaWRzLlNFTV9QUkUpIHtcbiAgICBkYXRhLnRleHRMZW5ndGggPSBwaHJhc2VDb3VudDtcbiAgfVxuICByZXR1cm4gaWRzLlNFTV9PSztcbn1cbmZ1bmN0aW9uIHNlbUxhc3RMaW5lKHN0YXRlLCBjaGFycywgcGhyYXNlSW5kZXgsIHBocmFzZUNvdW50LCBkYXRhKSB7XG4gIGlmIChzdGF0ZSA9PT0gaWRzLlNFTV9QUkUpIHtcbiAgICBkYXRhLmVuZExlbmd0aCA9IDA7XG4gICAgZGF0YS50ZXh0TGVuZ3RoID0gMDtcbiAgICBkYXRhLmludmFsaWRDb3VudCA9IDA7XG4gIH0gZWxzZSBpZiAoZGF0YS5zdHJpY3QpIHtcbiAgICBkYXRhLmxpbmVzLnB1c2goe1xuICAgICAgbGluZU5vOiBkYXRhLmxpbmVzLmxlbmd0aCxcbiAgICAgIGJlZ2luQ2hhcjogcGhyYXNlSW5kZXgsXG4gICAgICBsZW5ndGg6IHBocmFzZUNvdW50LFxuICAgICAgdGV4dExlbmd0aDogcGhyYXNlQ291bnQsXG4gICAgICBlbmRUeXBlOiAnbm9uZScsXG4gICAgICBpbnZhbGlkQ2hhcnM6IGRhdGEuaW52YWxpZENvdW50LFxuICAgIH0pO1xuICAgIGRhdGEuZXJyb3JzLnB1c2goe1xuICAgICAgbGluZTogZGF0YS5saW5lTm8sXG4gICAgICBjaGFyOiBwaHJhc2VJbmRleCArIHBocmFzZUNvdW50LFxuICAgICAgbXNnOiAnbm8gbGluZSBlbmQgb24gbGFzdCBsaW5lIC0gc3RyaWN0IEFCTkYgc3BlY2lmaWVzIENSTEYoXFxcXHJcXFxcbiwgXFxcXHgwRFxcXFx4MEEpJyxcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICAvKiBhZGQgYSBsaW5lIGVuZGVyICovXG4gICAgY2hhcnMucHVzaCgxMCk7XG4gICAgZGF0YS5saW5lcy5wdXNoKHtcbiAgICAgIGxpbmVObzogZGF0YS5saW5lcy5sZW5ndGgsXG4gICAgICBiZWdpbkNoYXI6IHBocmFzZUluZGV4LFxuICAgICAgbGVuZ3RoOiBwaHJhc2VDb3VudCArIDEsXG4gICAgICB0ZXh0TGVuZ3RoOiBwaHJhc2VDb3VudCxcbiAgICAgIGVuZFR5cGU6ICdMRicsXG4gICAgICBpbnZhbGlkQ2hhcnM6IGRhdGEuaW52YWxpZENvdW50LFxuICAgIH0pO1xuICB9XG4gIHJldHVybiBpZHMuU0VNX09LO1xufVxuZnVuY3Rpb24gc2VtSW52YWxpZChzdGF0ZSwgY2hhcnMsIHBocmFzZUluZGV4LCBwaHJhc2VDb3VudCwgZGF0YSkge1xuICBpZiAoc3RhdGUgPT09IGlkcy5TRU1fUFJFKSB7XG4gICAgZGF0YS5lcnJvcnMucHVzaCh7XG4gICAgICBsaW5lOiBkYXRhLmxpbmVObyxcbiAgICAgIGNoYXI6IHBocmFzZUluZGV4LFxuICAgICAgbXNnOiBgaW52YWxpZCBjaGFyYWN0ZXIgZm91bmQgJ1xcXFx4JHt1dGlscy5jaGFyVG9IZXgoY2hhcnNbcGhyYXNlSW5kZXhdKX0nYCxcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gaWRzLlNFTV9PSztcbn1cbmZ1bmN0aW9uIHNlbUVuZChzdGF0ZSwgY2hhcnMsIHBocmFzZUluZGV4LCBwaHJhc2VDb3VudCwgZGF0YSkge1xuICBpZiAoc3RhdGUgPT09IGlkcy5TRU1fUE9TVCkge1xuICAgIGRhdGEubGluZU5vICs9IDE7XG4gIH1cbiAgcmV0dXJuIGlkcy5TRU1fT0s7XG59XG5mdW5jdGlvbiBzZW1MRihzdGF0ZSwgY2hhcnMsIHBocmFzZUluZGV4LCBwaHJhc2VDb3VudCwgZGF0YSkge1xuICBpZiAoc3RhdGUgPT09IGlkcy5TRU1fUFJFKSB7XG4gICAgZGF0YS5lbmRUeXBlID0gJ0xGJztcbiAgICBpZiAoZGF0YS5zdHJpY3QpIHtcbiAgICAgIGRhdGEuZXJyb3JzLnB1c2goe1xuICAgICAgICBsaW5lOiBkYXRhLmxpbmVObyxcbiAgICAgICAgY2hhcjogcGhyYXNlSW5kZXgsXG4gICAgICAgIG1zZzogJ2xpbmUgZW5kIGNoYXJhY3RlciBMRihcXFxcbiwgXFxcXHgwQSkgLSBzdHJpY3QgQUJORiBzcGVjaWZpZXMgQ1JMRihcXFxcclxcXFxuLCBcXFxceDBEXFxcXHgwQSknLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBpZHMuU0VNX09LO1xufVxuZnVuY3Rpb24gc2VtQ1Ioc3RhdGUsIGNoYXJzLCBwaHJhc2VJbmRleCwgcGhyYXNlQ291bnQsIGRhdGEpIHtcbiAgaWYgKHN0YXRlID09PSBpZHMuU0VNX1BSRSkge1xuICAgIGRhdGEuZW5kVHlwZSA9ICdDUic7XG4gICAgaWYgKGRhdGEuc3RyaWN0KSB7XG4gICAgICBkYXRhLmVycm9ycy5wdXNoKHtcbiAgICAgICAgbGluZTogZGF0YS5saW5lTm8sXG4gICAgICAgIGNoYXI6IHBocmFzZUluZGV4LFxuICAgICAgICBtc2c6ICdsaW5lIGVuZCBjaGFyYWN0ZXIgQ1IoXFxcXHIsIFxcXFx4MEQpIC0gc3RyaWN0IEFCTkYgc3BlY2lmaWVzIENSTEYoXFxcXHJcXFxcbiwgXFxcXHgwRFxcXFx4MEEpJyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaWRzLlNFTV9PSztcbn1cbmZ1bmN0aW9uIHNlbUNSTEYoc3RhdGUsIGNoYXJzLCBwaHJhc2VJbmRleCwgcGhyYXNlQ291bnQsIGRhdGEpIHtcbiAgaWYgKHN0YXRlID09PSBpZHMuU0VNX1BSRSkge1xuICAgIGRhdGEuZW5kVHlwZSA9ICdDUkxGJztcbiAgfVxuICByZXR1cm4gaWRzLlNFTV9PSztcbn1cbmNvbnN0IGNhbGxiYWNrcyA9IFtdO1xuY2FsbGJhY2tzLmxpbmUgPSBzZW1MaW5lO1xuY2FsbGJhY2tzWydsaW5lLXRleHQnXSA9IHNlbUxpbmVUZXh0O1xuY2FsbGJhY2tzWydsYXN0LWxpbmUnXSA9IHNlbUxhc3RMaW5lO1xuY2FsbGJhY2tzLmludmFsaWQgPSBzZW1JbnZhbGlkO1xuY2FsbGJhY2tzLmVuZCA9IHNlbUVuZDtcbmNhbGxiYWNrcy5sZiA9IHNlbUxGO1xuY2FsbGJhY2tzLmNyID0gc2VtQ1I7XG5jYWxsYmFja3MuY3JsZiA9IHNlbUNSTEY7XG5leHBvcnRzLmNhbGxiYWNrcyA9IGNhbGxiYWNrcztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/scanner-callbacks.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/scanner-grammar.js":
/*!************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/scanner-grammar.js ***!
  \************************************************************************************************/
/***/ ((module) => {

eval("// copyright: Copyright (c) 2023 Lowell D. Thomas, all rights reserved<br>\n//   license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)<br>\n//\n// Generated by apg-js, Version 4.2.1 [apg-js](https://github.com/ldthomas/apg-js)\nmodule.exports = function grammar(){\n  // ```\n  // SUMMARY\n  //      rules = 10\n  //       udts = 0\n  //    opcodes = 31\n  //        ---   ABNF original opcodes\n  //        ALT = 5\n  //        CAT = 2\n  //        REP = 4\n  //        RNM = 11\n  //        TLS = 0\n  //        TBS = 4\n  //        TRG = 5\n  //        ---   SABNF superset opcodes\n  //        UDT = 0\n  //        AND = 0\n  //        NOT = 0\n  //        BKA = 0\n  //        BKN = 0\n  //        BKR = 0\n  //        ABG = 0\n  //        AEN = 0\n  // characters = [0 - 4294967295]\n  // ```\n  /* OBJECT IDENTIFIER (for internal parser use) */\n  this.grammarObject = 'grammarObject';\n\n  /* RULES */\n  this.rules = [];\n  this.rules[0] = {name: 'file', lower: 'file', index: 0, isBkr: false};\n  this.rules[1] = {name: 'line', lower: 'line', index: 1, isBkr: false};\n  this.rules[2] = {name: 'line-text', lower: 'line-text', index: 2, isBkr: false};\n  this.rules[3] = {name: 'last-line', lower: 'last-line', index: 3, isBkr: false};\n  this.rules[4] = {name: 'valid', lower: 'valid', index: 4, isBkr: false};\n  this.rules[5] = {name: 'invalid', lower: 'invalid', index: 5, isBkr: false};\n  this.rules[6] = {name: 'end', lower: 'end', index: 6, isBkr: false};\n  this.rules[7] = {name: 'CRLF', lower: 'crlf', index: 7, isBkr: false};\n  this.rules[8] = {name: 'LF', lower: 'lf', index: 8, isBkr: false};\n  this.rules[9] = {name: 'CR', lower: 'cr', index: 9, isBkr: false};\n\n  /* UDTS */\n  this.udts = [];\n\n  /* OPCODES */\n  /* file */\n  this.rules[0].opcodes = [];\n  this.rules[0].opcodes[0] = {type: 2, children: [1,3]};// CAT\n  this.rules[0].opcodes[1] = {type: 3, min: 0, max: Infinity};// REP\n  this.rules[0].opcodes[2] = {type: 4, index: 1};// RNM(line)\n  this.rules[0].opcodes[3] = {type: 3, min: 0, max: 1};// REP\n  this.rules[0].opcodes[4] = {type: 4, index: 3};// RNM(last-line)\n\n  /* line */\n  this.rules[1].opcodes = [];\n  this.rules[1].opcodes[0] = {type: 2, children: [1,2]};// CAT\n  this.rules[1].opcodes[1] = {type: 4, index: 2};// RNM(line-text)\n  this.rules[1].opcodes[2] = {type: 4, index: 6};// RNM(end)\n\n  /* line-text */\n  this.rules[2].opcodes = [];\n  this.rules[2].opcodes[0] = {type: 3, min: 0, max: Infinity};// REP\n  this.rules[2].opcodes[1] = {type: 1, children: [2,3]};// ALT\n  this.rules[2].opcodes[2] = {type: 4, index: 4};// RNM(valid)\n  this.rules[2].opcodes[3] = {type: 4, index: 5};// RNM(invalid)\n\n  /* last-line */\n  this.rules[3].opcodes = [];\n  this.rules[3].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP\n  this.rules[3].opcodes[1] = {type: 1, children: [2,3]};// ALT\n  this.rules[3].opcodes[2] = {type: 4, index: 4};// RNM(valid)\n  this.rules[3].opcodes[3] = {type: 4, index: 5};// RNM(invalid)\n\n  /* valid */\n  this.rules[4].opcodes = [];\n  this.rules[4].opcodes[0] = {type: 1, children: [1,2]};// ALT\n  this.rules[4].opcodes[1] = {type: 5, min: 32, max: 126};// TRG\n  this.rules[4].opcodes[2] = {type: 6, string: [9]};// TBS\n\n  /* invalid */\n  this.rules[5].opcodes = [];\n  this.rules[5].opcodes[0] = {type: 1, children: [1,2,3,4]};// ALT\n  this.rules[5].opcodes[1] = {type: 5, min: 0, max: 8};// TRG\n  this.rules[5].opcodes[2] = {type: 5, min: 11, max: 12};// TRG\n  this.rules[5].opcodes[3] = {type: 5, min: 14, max: 31};// TRG\n  this.rules[5].opcodes[4] = {type: 5, min: 127, max: 4294967295};// TRG\n\n  /* end */\n  this.rules[6].opcodes = [];\n  this.rules[6].opcodes[0] = {type: 1, children: [1,2,3]};// ALT\n  this.rules[6].opcodes[1] = {type: 4, index: 7};// RNM(CRLF)\n  this.rules[6].opcodes[2] = {type: 4, index: 8};// RNM(LF)\n  this.rules[6].opcodes[3] = {type: 4, index: 9};// RNM(CR)\n\n  /* CRLF */\n  this.rules[7].opcodes = [];\n  this.rules[7].opcodes[0] = {type: 6, string: [13,10]};// TBS\n\n  /* LF */\n  this.rules[8].opcodes = [];\n  this.rules[8].opcodes[0] = {type: 6, string: [10]};// TBS\n\n  /* CR */\n  this.rules[9].opcodes = [];\n  this.rules[9].opcodes[0] = {type: 6, string: [13]};// TBS\n\n  // The `toString()` function will display the original grammar file(s) that produced these opcodes.\n  this.toString = function toString(){\n    let str = \"\";\n    str += \"file = *line [last-line]\\n\";\n    str += \"line = line-text end\\n\";\n    str += \"line-text = *(valid/invalid)\\n\";\n    str += \"last-line = 1*(valid/invalid)\\n\";\n    str += \"valid = %d32-126 / %d9\\n\";\n    str += \"invalid = %d0-8 / %d11-12 /%d14-31 / %x7f-ffffffff\\n\";\n    str += \"end = CRLF / LF / CR\\n\";\n    str += \"CRLF = %d13.10\\n\";\n    str += \"LF = %d10\\n\";\n    str += \"CR = %d13\\n\";\n    return str;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/scanner-grammar.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/scanner.js":
/*!****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/scanner.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module reads the input grammar file and does a preliminary analysis\n// before attempting to parse it into a grammar object.\n// See:<br>\n// `./dist/scanner-grammar.bnf`<br>\n// for the grammar file this parser is based on.\n//\n// It has two primary functions.\n// - verify the character codes - no non-printing ASCII characters\n// - catalog the lines - create an array with a line object for each line.\n// The object carries information about the line number and character length which is used\n// by the parser generator primarily for error reporting.\nmodule.exports = function exfn(chars, errors, strict, trace) {\n  const thisFileName = 'scanner.js: ';\n  const apglib = __webpack_require__(/*! ../apg-lib/node-exports */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/node-exports.js\");\n  const grammar = new (__webpack_require__(/*! ./scanner-grammar */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/scanner-grammar.js\"))();\n  const { callbacks } = __webpack_require__(/*! ./scanner-callbacks */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/scanner-callbacks.js\");\n\n  /* Scan the grammar for character code errors and catalog the lines. */\n  const lines = [];\n  // eslint-disable-next-line new-cap\n  const parser = new apglib.parser();\n  // eslint-disable-next-line new-cap\n  parser.ast = new apglib.ast();\n  parser.ast.callbacks = callbacks;\n  if (trace) {\n    if (trace.traceObject !== 'traceObject') {\n      throw new TypeError(`${thisFileName}trace argument is not a trace object`);\n    }\n    parser.trace = trace;\n  }\n\n  /* parse the input SABNF grammar */\n  const test = parser.parse(grammar, 'file', chars);\n  if (test.success !== true) {\n    errors.push({\n      line: 0,\n      char: 0,\n      msg: 'syntax analysis error analyzing input SABNF grammar',\n    });\n    return;\n  }\n  const data = {\n    lines,\n    lineNo: 0,\n    errors,\n    strict: !!strict,\n  };\n\n  /* translate (analyze) the input SABNF grammar */\n  parser.ast.translate(data);\n  // eslint-disable-next-line consistent-return\n  return lines;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FwZy1qc0A0LjIuMS9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctYXBpL3NjYW5uZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixtQkFBTyxDQUFDLDRIQUF5QjtBQUNsRCx1QkFBdUIsbUJBQU8sQ0FBQyx5SEFBbUI7QUFDbEQsVUFBVSxZQUFZLEVBQUUsbUJBQU8sQ0FBQyw2SEFBcUI7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixhQUFhO0FBQzFDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdG9rZW5zdHJlYW0vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9hcGctanNANC4yLjEvbm9kZV9tb2R1bGVzL2FwZy1qcy9zcmMvYXBnLWFwaS9zY2FubmVyLmpzPzcwZTIiXSwic291cmNlc0NvbnRlbnQiOlsiLyogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgY29weXJpZ2h0OiBDb3B5cmlnaHQgKGMpIDIwMjEgTG93ZWxsIEQuIFRob21hcywgYWxsIHJpZ2h0cyByZXNlcnZlZFxuICogICAgIGxpY2Vuc2U6IEJTRC0yLUNsYXVzZSAoaHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMi1DbGF1c2UpXG4gKiAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuLy8gVGhpcyBtb2R1bGUgcmVhZHMgdGhlIGlucHV0IGdyYW1tYXIgZmlsZSBhbmQgZG9lcyBhIHByZWxpbWluYXJ5IGFuYWx5c2lzXG4vLyBiZWZvcmUgYXR0ZW1wdGluZyB0byBwYXJzZSBpdCBpbnRvIGEgZ3JhbW1hciBvYmplY3QuXG4vLyBTZWU6PGJyPlxuLy8gYC4vZGlzdC9zY2FubmVyLWdyYW1tYXIuYm5mYDxicj5cbi8vIGZvciB0aGUgZ3JhbW1hciBmaWxlIHRoaXMgcGFyc2VyIGlzIGJhc2VkIG9uLlxuLy9cbi8vIEl0IGhhcyB0d28gcHJpbWFyeSBmdW5jdGlvbnMuXG4vLyAtIHZlcmlmeSB0aGUgY2hhcmFjdGVyIGNvZGVzIC0gbm8gbm9uLXByaW50aW5nIEFTQ0lJIGNoYXJhY3RlcnNcbi8vIC0gY2F0YWxvZyB0aGUgbGluZXMgLSBjcmVhdGUgYW4gYXJyYXkgd2l0aCBhIGxpbmUgb2JqZWN0IGZvciBlYWNoIGxpbmUuXG4vLyBUaGUgb2JqZWN0IGNhcnJpZXMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGxpbmUgbnVtYmVyIGFuZCBjaGFyYWN0ZXIgbGVuZ3RoIHdoaWNoIGlzIHVzZWRcbi8vIGJ5IHRoZSBwYXJzZXIgZ2VuZXJhdG9yIHByaW1hcmlseSBmb3IgZXJyb3IgcmVwb3J0aW5nLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBleGZuKGNoYXJzLCBlcnJvcnMsIHN0cmljdCwgdHJhY2UpIHtcbiAgY29uc3QgdGhpc0ZpbGVOYW1lID0gJ3NjYW5uZXIuanM6ICc7XG4gIGNvbnN0IGFwZ2xpYiA9IHJlcXVpcmUoJy4uL2FwZy1saWIvbm9kZS1leHBvcnRzJyk7XG4gIGNvbnN0IGdyYW1tYXIgPSBuZXcgKHJlcXVpcmUoJy4vc2Nhbm5lci1ncmFtbWFyJykpKCk7XG4gIGNvbnN0IHsgY2FsbGJhY2tzIH0gPSByZXF1aXJlKCcuL3NjYW5uZXItY2FsbGJhY2tzJyk7XG5cbiAgLyogU2NhbiB0aGUgZ3JhbW1hciBmb3IgY2hhcmFjdGVyIGNvZGUgZXJyb3JzIGFuZCBjYXRhbG9nIHRoZSBsaW5lcy4gKi9cbiAgY29uc3QgbGluZXMgPSBbXTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5ldy1jYXBcbiAgY29uc3QgcGFyc2VyID0gbmV3IGFwZ2xpYi5wYXJzZXIoKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5ldy1jYXBcbiAgcGFyc2VyLmFzdCA9IG5ldyBhcGdsaWIuYXN0KCk7XG4gIHBhcnNlci5hc3QuY2FsbGJhY2tzID0gY2FsbGJhY2tzO1xuICBpZiAodHJhY2UpIHtcbiAgICBpZiAodHJhY2UudHJhY2VPYmplY3QgIT09ICd0cmFjZU9iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCR7dGhpc0ZpbGVOYW1lfXRyYWNlIGFyZ3VtZW50IGlzIG5vdCBhIHRyYWNlIG9iamVjdGApO1xuICAgIH1cbiAgICBwYXJzZXIudHJhY2UgPSB0cmFjZTtcbiAgfVxuXG4gIC8qIHBhcnNlIHRoZSBpbnB1dCBTQUJORiBncmFtbWFyICovXG4gIGNvbnN0IHRlc3QgPSBwYXJzZXIucGFyc2UoZ3JhbW1hciwgJ2ZpbGUnLCBjaGFycyk7XG4gIGlmICh0ZXN0LnN1Y2Nlc3MgIT09IHRydWUpIHtcbiAgICBlcnJvcnMucHVzaCh7XG4gICAgICBsaW5lOiAwLFxuICAgICAgY2hhcjogMCxcbiAgICAgIG1zZzogJ3N5bnRheCBhbmFseXNpcyBlcnJvciBhbmFseXppbmcgaW5wdXQgU0FCTkYgZ3JhbW1hcicsXG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGRhdGEgPSB7XG4gICAgbGluZXMsXG4gICAgbGluZU5vOiAwLFxuICAgIGVycm9ycyxcbiAgICBzdHJpY3Q6ICEhc3RyaWN0LFxuICB9O1xuXG4gIC8qIHRyYW5zbGF0ZSAoYW5hbHl6ZSkgdGhlIGlucHV0IFNBQk5GIGdyYW1tYXIgKi9cbiAgcGFyc2VyLmFzdC50cmFuc2xhdGUoZGF0YSk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICByZXR1cm4gbGluZXM7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/scanner.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/semantic-callbacks.js":
/*!***************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/semantic-callbacks.js ***!
  \***************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module has all of the AST translation callback functions for the semantic analysis\n// phase of the generator.\n// See:<br>\n// `./dist/abnf-for-sabnf-grammar.bnf`<br>\n// for the grammar file these callback functions are based on.\nmodule.exports = function exfn() {\n  const apglib = __webpack_require__(/*! ../apg-lib/node-exports */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/node-exports.js\");\n  const id = apglib.ids;\n\n  /* Some helper functions. */\n  const NameList = function NameList() {\n    this.names = [];\n    /* Adds a new rule name object to the list. Returns -1 if the name already exists. */\n    /* Returns the added name object if the name does not already exist. */\n    this.add = function add(name) {\n      let ret = -1;\n      const find = this.get(name);\n      if (find === -1) {\n        ret = {\n          name,\n          lower: name.toLowerCase(),\n          index: this.names.length,\n        };\n        this.names.push(ret);\n      }\n      return ret;\n    };\n    /* Brute-force look up. */\n    this.get = function get(name) {\n      let ret = -1;\n      const lower = name.toLowerCase();\n      for (let i = 0; i < this.names.length; i += 1) {\n        if (this.names[i].lower === lower) {\n          ret = this.names[i];\n          break;\n        }\n      }\n      return ret;\n    };\n  };\n  /* converts text decimal numbers from, e.g. %d99, to an integer */\n  const decnum = function decnum(chars, beg, len) {\n    let num = 0;\n    for (let i = beg; i < beg + len; i += 1) {\n      num = 10 * num + chars[i] - 48;\n    }\n    return num;\n  };\n  /* converts text binary numbers from, e.g. %b10, to an integer */\n  const binnum = function binnum(chars, beg, len) {\n    let num = 0;\n    for (let i = beg; i < beg + len; i += 1) {\n      num = 2 * num + chars[i] - 48;\n    }\n    return num;\n  };\n  /* converts text hexadecimal numbers from, e.g. %xff, to an integer */\n  const hexnum = function hexnum(chars, beg, len) {\n    let num = 0;\n    for (let i = beg; i < beg + len; i += 1) {\n      let digit = chars[i];\n      if (digit >= 48 && digit <= 57) {\n        digit -= 48;\n      } else if (digit >= 65 && digit <= 70) {\n        digit -= 55;\n      } else if (digit >= 97 && digit <= 102) {\n        digit -= 87;\n      } else {\n        throw new Error('hexnum out of range');\n      }\n      num = 16 * num + digit;\n    }\n    return num;\n  };\n\n  // This is the prototype for all semantic analysis callback functions.\n  // ````\n  // state - the translator state\n  //   id.SEM_PRE for downward (pre-branch) traversal of the AST\n  //   id.SEM_POST for upward (post branch) traversal of the AST\n  // chars - the array of character codes for the input string\n  // phraseIndex - index into the chars array to the first\n  //               character of the phrase\n  // phraseCount - the number of characters in the phrase\n  // data - user-defined data passed to the translator\n  //        for use by the callback functions.\n  // @return id.SEM_OK, normal return.\n  //         id.SEM_SKIP in state id.SEM_PRE will\n  //         skip the branch below.\n  //         Any thing else is an error which will\n  //         stop the translation.\n  // ````\n  /*\n  function semCallbackPrototype(state, chars, phraseIndex, phraseCount, data) {\n    let ret = id.SEM_OK;\n    if (state === id.SEM_PRE) {\n    } else if (state === id.SEM_POST) {\n    }\n    return ret;\n  }\n  */\n  // The AST callback functions.\n  function semFile(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_PRE) {\n      data.ruleNames = new NameList();\n      data.udtNames = new NameList();\n      data.rules = [];\n      data.udts = [];\n      data.rulesLineMap = [];\n      data.opcodes = [];\n      data.altStack = [];\n      data.topStack = null;\n      data.topRule = null;\n    } else if (state === id.SEM_POST) {\n      /* validate RNM rule names and set opcode rule index */\n      let nameObj;\n      data.rules.forEach((rule) => {\n        rule.isBkr = false;\n        rule.opcodes.forEach((op) => {\n          if (op.type === id.RNM) {\n            nameObj = data.ruleNames.get(op.index.name);\n            if (nameObj === -1) {\n              data.errors.push({\n                line: data.findLine(data.lines, op.index.phraseIndex, data.charsLength),\n                char: op.index.phraseIndex,\n                msg: `Rule name '${op.index.name}' used but not defined.`,\n              });\n              op.index = -1;\n            } else {\n              op.index = nameObj.index;\n            }\n          }\n        });\n      });\n      /* validate BKR rule names and set opcode rule index */\n      data.udts.forEach((udt) => {\n        udt.isBkr = false;\n      });\n      data.rules.forEach((rule) => {\n        rule.opcodes.forEach((op) => {\n          if (op.type === id.BKR) {\n            rule.hasBkr = true;\n            nameObj = data.ruleNames.get(op.index.name);\n            if (nameObj !== -1) {\n              data.rules[nameObj.index].isBkr = true;\n              op.index = nameObj.index;\n            } else {\n              nameObj = data.udtNames.get(op.index.name);\n              if (nameObj !== -1) {\n                data.udts[nameObj.index].isBkr = true;\n                op.index = data.rules.length + nameObj.index;\n              } else {\n                data.errors.push({\n                  line: data.findLine(data.lines, op.index.phraseIndex, data.charsLength),\n                  char: op.index.phraseIndex,\n                  msg: `Back reference name '${op.index.name}' refers to undefined rule or unamed UDT.`,\n                });\n                op.index = -1;\n              }\n            }\n          }\n        });\n      });\n    }\n    return ret;\n  }\n  function semRule(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_PRE) {\n      data.altStack.length = 0;\n      data.topStack = null;\n      data.rulesLineMap.push({\n        line: data.findLine(data.lines, phraseIndex, data.charsLength),\n        char: phraseIndex,\n      });\n    }\n    return ret;\n  }\n  function semRuleLookup(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_PRE) {\n      data.ruleName = '';\n      data.definedas = '';\n    } else if (state === id.SEM_POST) {\n      let ruleName;\n      if (data.definedas === '=') {\n        ruleName = data.ruleNames.add(data.ruleName);\n        if (ruleName === -1) {\n          data.definedas = null;\n          data.errors.push({\n            line: data.findLine(data.lines, phraseIndex, data.charsLength),\n            char: phraseIndex,\n            msg: `Rule name '${data.ruleName}' previously defined.`,\n          });\n        } else {\n          /* start a new rule */\n          data.topRule = {\n            name: ruleName.name,\n            lower: ruleName.lower,\n            opcodes: [],\n            index: ruleName.index,\n          };\n          data.rules.push(data.topRule);\n          data.opcodes = data.topRule.opcodes;\n        }\n      } else {\n        ruleName = data.ruleNames.get(data.ruleName);\n        if (ruleName === -1) {\n          data.definedas = null;\n          data.errors.push({\n            line: data.findLine(data.lines, phraseIndex, data.charsLength),\n            char: phraseIndex,\n            msg: `Rule name '${data.ruleName}' for incremental alternate not previously defined.`,\n          });\n        } else {\n          data.topRule = data.rules[ruleName.index];\n          data.opcodes = data.topRule.opcodes;\n        }\n      }\n    }\n    return ret;\n  }\n  function semAlternation(state, chars, phraseIndex, phraseCount, data) {\n    let ret = id.SEM_OK;\n    if (state === id.SEM_PRE) {\n      const TRUE = true;\n      while (TRUE) {\n        if (data.definedas === null) {\n          /* rule error - skip opcode generation */\n          ret = id.SEM_SKIP;\n          break;\n        }\n        if (data.topStack === null) {\n          /* top-level ALT */\n          if (data.definedas === '=') {\n            /* \"=\" new rule */\n            data.topStack = {\n              alt: {\n                type: id.ALT,\n                children: [],\n              },\n              cat: null,\n            };\n            data.altStack.push(data.topStack);\n            data.opcodes.push(data.topStack.alt);\n            break;\n          }\n          /* \"=/\" incremental alternate */\n          data.topStack = {\n            alt: data.opcodes[0],\n            cat: null,\n          };\n          data.altStack.push(data.topStack);\n          break;\n        }\n        /* lower-level ALT */\n        data.topStack = {\n          alt: {\n            type: id.ALT,\n            children: [],\n          },\n          cat: null,\n        };\n        data.altStack.push(data.topStack);\n        data.opcodes.push(data.topStack.alt);\n        break;\n      }\n    } else if (state === id.SEM_POST) {\n      data.altStack.pop();\n      if (data.altStack.length > 0) {\n        data.topStack = data.altStack[data.altStack.length - 1];\n      } else {\n        data.topStack = null;\n      }\n    }\n    return ret;\n  }\n  function semConcatenation(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_PRE) {\n      data.topStack.alt.children.push(data.opcodes.length);\n      data.topStack.cat = {\n        type: id.CAT,\n        children: [],\n      };\n      data.opcodes.push(data.topStack.cat);\n    } else if (state === id.SEM_POST) {\n      data.topStack.cat = null;\n    }\n    return ret;\n  }\n  function semRepetition(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_PRE) {\n      data.topStack.cat.children.push(data.opcodes.length);\n    }\n    return ret;\n  }\n  function semOptionOpen(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      data.opcodes.push({\n        type: id.REP,\n        min: 0,\n        max: 1,\n        char: phraseIndex,\n      });\n    }\n    return ret;\n  }\n  function semRuleName(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_PRE) {\n      data.ruleName = apglib.utils.charsToString(chars, phraseIndex, phraseCount);\n    }\n    return ret;\n  }\n  function semDefined(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      data.definedas = '=';\n    }\n    return ret;\n  }\n  function semIncAlt(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      data.definedas = '=/';\n    }\n    return ret;\n  }\n  function semRepOp(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_PRE) {\n      data.min = 0;\n      data.max = Infinity;\n      data.topRep = {\n        type: id.REP,\n        min: 0,\n        max: Infinity,\n      };\n      data.opcodes.push(data.topRep);\n    } else if (state === id.SEM_POST) {\n      if (data.min > data.max) {\n        data.errors.push({\n          line: data.findLine(data.lines, phraseIndex, data.charsLength),\n          char: phraseIndex,\n          msg: `repetition min cannot be greater than max: min: ${data.min}: max: ${data.max}`,\n        });\n      }\n      data.topRep.min = data.min;\n      data.topRep.max = data.max;\n    }\n    return ret;\n  }\n  function semRepMin(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      data.min = decnum(chars, phraseIndex, phraseCount);\n    }\n    return ret;\n  }\n  function semRepMax(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      data.max = decnum(chars, phraseIndex, phraseCount);\n    }\n    return ret;\n  }\n  function semRepMinMax(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      data.max = decnum(chars, phraseIndex, phraseCount);\n      data.min = data.max;\n    }\n    return ret;\n  }\n  function semAndOp(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      data.opcodes.push({\n        type: id.AND,\n      });\n    }\n    return ret;\n  }\n  function semNotOp(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      data.opcodes.push({\n        type: id.NOT,\n      });\n    }\n    return ret;\n  }\n  function semRnmOp(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      data.opcodes.push({\n        type: id.RNM,\n        /* NOTE: this is temporary info, index will be replaced with integer later. */\n        /* Probably not the best coding practice but here you go. */\n        index: {\n          phraseIndex,\n          name: apglib.utils.charsToString(chars, phraseIndex, phraseCount),\n        },\n      });\n    }\n    return ret;\n  }\n  function semAbgOp(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      data.opcodes.push({\n        type: id.ABG,\n      });\n    }\n    return ret;\n  }\n  function semAenOp(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      data.opcodes.push({\n        type: id.AEN,\n      });\n    }\n    return ret;\n  }\n  function semBkaOp(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      data.opcodes.push({\n        type: id.BKA,\n      });\n    }\n    return ret;\n  }\n  function semBknOp(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      data.opcodes.push({\n        type: id.BKN,\n      });\n    }\n    return ret;\n  }\n  function semBkrOp(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_PRE) {\n      data.ci = true; /* default to case insensitive */\n      data.cs = false;\n      data.um = true;\n      data.pm = false;\n    } else if (state === id.SEM_POST) {\n      data.opcodes.push({\n        type: id.BKR,\n        bkrCase: data.cs === true ? id.BKR_MODE_CS : id.BKR_MODE_CI,\n        bkrMode: data.pm === true ? id.BKR_MODE_PM : id.BKR_MODE_UM,\n        /* NOTE: this is temporary info, index will be replaced with integer later. */\n        /* Probably not the best coding practice but here you go. */\n        index: {\n          phraseIndex: data.bkrname.phraseIndex,\n          name: apglib.utils.charsToString(chars, data.bkrname.phraseIndex, data.bkrname.phraseLength),\n        },\n      });\n    }\n    return ret;\n  }\n  function semBkrCi(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      data.ci = true;\n    }\n    return ret;\n  }\n  function semBkrCs(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      data.cs = true;\n    }\n    return ret;\n  }\n  function semBkrUm(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      data.um = true;\n    }\n    return ret;\n  }\n  function semBkrPm(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      data.pm = true;\n    }\n    return ret;\n  }\n  function semBkrName(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      data.bkrname = {\n        phraseIndex,\n        phraseLength: phraseCount,\n      };\n    }\n    return ret;\n  }\n  function semUdtEmpty(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      const name = apglib.utils.charsToString(chars, phraseIndex, phraseCount);\n      let udtName = data.udtNames.add(name);\n      if (udtName === -1) {\n        udtName = data.udtNames.get(name);\n        if (udtName === -1) {\n          throw new Error('semUdtEmpty: name look up error');\n        }\n      } else {\n        data.udts.push({\n          name: udtName.name,\n          lower: udtName.lower,\n          index: udtName.index,\n          empty: true,\n        });\n      }\n      data.opcodes.push({\n        type: id.UDT,\n        empty: true,\n        index: udtName.index,\n      });\n    }\n    return ret;\n  }\n  function semUdtNonEmpty(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      const name = apglib.utils.charsToString(chars, phraseIndex, phraseCount);\n      let udtName = data.udtNames.add(name);\n      if (udtName === -1) {\n        udtName = data.udtNames.get(name);\n        if (udtName === -1) {\n          throw new Error('semUdtNonEmpty: name look up error');\n        }\n      } else {\n        data.udts.push({\n          name: udtName.name,\n          lower: udtName.lower,\n          index: udtName.index,\n          empty: false,\n        });\n      }\n      data.opcodes.push({\n        type: id.UDT,\n        empty: false,\n        index: udtName.index,\n        syntax: null,\n        semantic: null,\n      });\n    }\n    return ret;\n  }\n  function semTlsOp(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_PRE) {\n      data.tlscase = true; /* default to case insensitive */\n    }\n    return ret;\n  }\n  function semTlsCase(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      if (phraseCount > 0 && (chars[phraseIndex + 1] === 83 || chars[phraseIndex + 1] === 115)) {\n        data.tlscase = false; /* set to case sensitive */\n      }\n    }\n    return ret;\n  }\n  function semTlsString(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      if (data.tlscase) {\n        const str = chars.slice(phraseIndex, phraseIndex + phraseCount);\n        for (let i = 0; i < str.length; i += 1) {\n          if (str[i] >= 65 && str[i] <= 90) {\n            str[i] += 32;\n          }\n        }\n        data.opcodes.push({\n          type: id.TLS,\n          string: str,\n        });\n      } else {\n        data.opcodes.push({\n          type: id.TBS,\n          string: chars.slice(phraseIndex, phraseIndex + phraseCount),\n        });\n      }\n    }\n    return ret;\n  }\n  function semClsOp(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      if (phraseCount <= 2) {\n        /* only TLS is allowed to be empty */\n        data.opcodes.push({\n          type: id.TLS,\n          string: [],\n        });\n      } else {\n        data.opcodes.push({\n          type: id.TBS,\n          string: chars.slice(phraseIndex + 1, phraseIndex + phraseCount - 1),\n        });\n      }\n    }\n    return ret;\n  }\n  function semTbsOp(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_PRE) {\n      data.tbsstr = [];\n    } else if (state === id.SEM_POST) {\n      data.opcodes.push({\n        type: id.TBS,\n        string: data.tbsstr,\n      });\n    }\n    return ret;\n  }\n  function semTrgOp(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_PRE) {\n      data.min = 0;\n      data.max = 0;\n    } else if (state === id.SEM_POST) {\n      if (data.min > data.max) {\n        data.errors.push({\n          line: data.findLine(data.lines, phraseIndex, data.charsLength),\n          char: phraseIndex,\n          msg: `TRG, (%dmin-max), min cannot be greater than max: min: ${data.min}: max: ${data.max}`,\n        });\n      }\n      data.opcodes.push({\n        type: id.TRG,\n        min: data.min,\n        max: data.max,\n      });\n    }\n    return ret;\n  }\n  function semDmin(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      data.min = decnum(chars, phraseIndex, phraseCount);\n    }\n    return ret;\n  }\n  function semDmax(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      data.max = decnum(chars, phraseIndex, phraseCount);\n    }\n    return ret;\n  }\n  function semBmin(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      data.min = binnum(chars, phraseIndex, phraseCount);\n    }\n    return ret;\n  }\n  function semBmax(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      data.max = binnum(chars, phraseIndex, phraseCount);\n    }\n    return ret;\n  }\n  function semXmin(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      data.min = hexnum(chars, phraseIndex, phraseCount);\n    }\n    return ret;\n  }\n  function semXmax(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      data.max = hexnum(chars, phraseIndex, phraseCount);\n    }\n    return ret;\n  }\n  function semDstring(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      data.tbsstr.push(decnum(chars, phraseIndex, phraseCount));\n    }\n    return ret;\n  }\n  function semBstring(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      data.tbsstr.push(binnum(chars, phraseIndex, phraseCount));\n    }\n    return ret;\n  }\n  function semXstring(state, chars, phraseIndex, phraseCount, data) {\n    const ret = id.SEM_OK;\n    if (state === id.SEM_POST) {\n      data.tbsstr.push(hexnum(chars, phraseIndex, phraseCount));\n    }\n    return ret;\n  }\n  // Define the callback functions to the AST object.\n  this.callbacks = [];\n  this.callbacks.abgop = semAbgOp;\n  this.callbacks.aenop = semAenOp;\n  this.callbacks.alternation = semAlternation;\n  this.callbacks.andop = semAndOp;\n  this.callbacks.bmax = semBmax;\n  this.callbacks.bmin = semBmin;\n  this.callbacks.bkaop = semBkaOp;\n  this.callbacks.bknop = semBknOp;\n  this.callbacks.bkrop = semBkrOp;\n  this.callbacks['bkr-name'] = semBkrName;\n  this.callbacks.bstring = semBstring;\n  this.callbacks.clsop = semClsOp;\n  this.callbacks.ci = semBkrCi;\n  this.callbacks.cs = semBkrCs;\n  this.callbacks.um = semBkrUm;\n  this.callbacks.pm = semBkrPm;\n  this.callbacks.concatenation = semConcatenation;\n  this.callbacks.defined = semDefined;\n  this.callbacks.dmax = semDmax;\n  this.callbacks.dmin = semDmin;\n  this.callbacks.dstring = semDstring;\n  this.callbacks.file = semFile;\n  this.callbacks.incalt = semIncAlt;\n  this.callbacks.notop = semNotOp;\n  this.callbacks.optionopen = semOptionOpen;\n  this.callbacks['rep-max'] = semRepMax;\n  this.callbacks['rep-min'] = semRepMin;\n  this.callbacks['rep-min-max'] = semRepMinMax;\n  this.callbacks.repetition = semRepetition;\n  this.callbacks.repop = semRepOp;\n  this.callbacks.rnmop = semRnmOp;\n  this.callbacks.rule = semRule;\n  this.callbacks.rulelookup = semRuleLookup;\n  this.callbacks.rulename = semRuleName;\n  this.callbacks.tbsop = semTbsOp;\n  this.callbacks.tlscase = semTlsCase;\n  this.callbacks.tlsstring = semTlsString;\n  this.callbacks.tlsop = semTlsOp;\n  this.callbacks.trgop = semTrgOp;\n  this.callbacks['udt-empty'] = semUdtEmpty;\n  this.callbacks['udt-non-empty'] = semUdtNonEmpty;\n  this.callbacks.xmax = semXmax;\n  this.callbacks.xmin = semXmin;\n  this.callbacks.xstring = semXstring;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/semantic-callbacks.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/show-rules.js":
/*!*******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/show-rules.js ***!
  \*******************************************************************************************/
/***/ ((module) => {

eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\nmodule.exports = (function exfn() {\n  const thisFileName = 'show-rules.js';\n  // Display the rules.\n  // This function may be called before the attributes calculation.\n  // Sorting is done independently from the attributes.\n  // - order\n  //      - \"index\" or \"i\", index order (default)\n  //      - \"alpha\" or \"a\", alphabetical order\n  //      - none of above, index order (default)\n  const showRules = function showRules(rulesIn = [], udtsIn = [], order = 'index') {\n    const thisFuncName = 'showRules';\n    let alphaArray = [];\n    let udtAlphaArray = [];\n    const indexArray = [];\n    const udtIndexArray = [];\n    const rules = rulesIn;\n    const udts = udtsIn;\n    const ruleCount = rulesIn.length;\n    const udtCount = udtsIn.length;\n    let str = 'RULE/UDT NAMES';\n    let i;\n    function compRulesAlpha(left, right) {\n      if (rules[left].lower < rules[right].lower) {\n        return -1;\n      }\n      if (rules[left].lower > rules[right].lower) {\n        return 1;\n      }\n      return 0;\n    }\n    function compUdtsAlpha(left, right) {\n      if (udts[left].lower < udts[right].lower) {\n        return -1;\n      }\n      if (udts[left].lower > udts[right].lower) {\n        return 1;\n      }\n      return 0;\n    }\n    if (!(Array.isArray(rulesIn) && rulesIn.length)) {\n      throw new Error(`${thisFileName}:${thisFuncName}: rules arg must be array with length > 0`);\n    }\n    if (!Array.isArray(udtsIn)) {\n      throw new Error(`${thisFileName}:${thisFuncName}: udts arg must be array`);\n    }\n\n    for (i = 0; i < ruleCount; i += 1) {\n      indexArray.push(i);\n    }\n    alphaArray = indexArray.slice(0);\n    alphaArray.sort(compRulesAlpha);\n    if (udtCount) {\n      for (i = 0; i < udtCount; i += 1) {\n        udtIndexArray.push(i);\n      }\n      udtAlphaArray = udtIndexArray.slice(0);\n      udtAlphaArray.sort(compUdtsAlpha);\n    }\n    if (order.charCodeAt(0) === 97) {\n      str += ' - alphabetical by rule/UDT name\\n';\n      for (i = 0; i < ruleCount; i += 1) {\n        str += `${i}: ${alphaArray[i]}: ${rules[alphaArray[i]].name}\\n`;\n      }\n      if (udtCount) {\n        for (i = 0; i < udtCount; i += 1) {\n          str += `${i}: ${udtAlphaArray[i]}: ${udts[udtAlphaArray[i]].name}\\n`;\n        }\n      }\n    } else {\n      str += ' - ordered by rule/UDT index\\n';\n      for (i = 0; i < ruleCount; i += 1) {\n        str += `${i}: ${rules[i].name}\\n`;\n      }\n      if (udtCount) {\n        for (i = 0; i < udtCount; i += 1) {\n          str += `${i}: ${udts[i].name}\\n`;\n        }\n      }\n    }\n    return str;\n  };\n  return showRules;\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FwZy1qc0A0LjIuMS9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctYXBpL3Nob3ctcnVsZXMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixhQUFhLEdBQUcsYUFBYTtBQUN0RDtBQUNBO0FBQ0EseUJBQXlCLGFBQWEsR0FBRyxhQUFhO0FBQ3REOztBQUVBLGdCQUFnQixlQUFlO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsY0FBYztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixlQUFlO0FBQ2pDLGtCQUFrQixFQUFFLElBQUksY0FBYyxJQUFJLDBCQUEwQjtBQUNwRTtBQUNBO0FBQ0Esb0JBQW9CLGNBQWM7QUFDbEMsb0JBQW9CLEVBQUUsSUFBSSxpQkFBaUIsSUFBSSw0QkFBNEI7QUFDM0U7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLGtCQUFrQixlQUFlO0FBQ2pDLGtCQUFrQixFQUFFLElBQUksY0FBYztBQUN0QztBQUNBO0FBQ0Esb0JBQW9CLGNBQWM7QUFDbEMsb0JBQW9CLEVBQUUsSUFBSSxhQUFhO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdG9rZW5zdHJlYW0vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9hcGctanNANC4yLjEvbm9kZV9tb2R1bGVzL2FwZy1qcy9zcmMvYXBnLWFwaS9zaG93LXJ1bGVzLmpzPzc3M2IiXSwic291cmNlc0NvbnRlbnQiOlsiLyogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgY29weXJpZ2h0OiBDb3B5cmlnaHQgKGMpIDIwMjEgTG93ZWxsIEQuIFRob21hcywgYWxsIHJpZ2h0cyByZXNlcnZlZFxuICogICAgIGxpY2Vuc2U6IEJTRC0yLUNsYXVzZSAoaHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMi1DbGF1c2UpXG4gKiAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24gZXhmbigpIHtcbiAgY29uc3QgdGhpc0ZpbGVOYW1lID0gJ3Nob3ctcnVsZXMuanMnO1xuICAvLyBEaXNwbGF5IHRoZSBydWxlcy5cbiAgLy8gVGhpcyBmdW5jdGlvbiBtYXkgYmUgY2FsbGVkIGJlZm9yZSB0aGUgYXR0cmlidXRlcyBjYWxjdWxhdGlvbi5cbiAgLy8gU29ydGluZyBpcyBkb25lIGluZGVwZW5kZW50bHkgZnJvbSB0aGUgYXR0cmlidXRlcy5cbiAgLy8gLSBvcmRlclxuICAvLyAgICAgIC0gXCJpbmRleFwiIG9yIFwiaVwiLCBpbmRleCBvcmRlciAoZGVmYXVsdClcbiAgLy8gICAgICAtIFwiYWxwaGFcIiBvciBcImFcIiwgYWxwaGFiZXRpY2FsIG9yZGVyXG4gIC8vICAgICAgLSBub25lIG9mIGFib3ZlLCBpbmRleCBvcmRlciAoZGVmYXVsdClcbiAgY29uc3Qgc2hvd1J1bGVzID0gZnVuY3Rpb24gc2hvd1J1bGVzKHJ1bGVzSW4gPSBbXSwgdWR0c0luID0gW10sIG9yZGVyID0gJ2luZGV4Jykge1xuICAgIGNvbnN0IHRoaXNGdW5jTmFtZSA9ICdzaG93UnVsZXMnO1xuICAgIGxldCBhbHBoYUFycmF5ID0gW107XG4gICAgbGV0IHVkdEFscGhhQXJyYXkgPSBbXTtcbiAgICBjb25zdCBpbmRleEFycmF5ID0gW107XG4gICAgY29uc3QgdWR0SW5kZXhBcnJheSA9IFtdO1xuICAgIGNvbnN0IHJ1bGVzID0gcnVsZXNJbjtcbiAgICBjb25zdCB1ZHRzID0gdWR0c0luO1xuICAgIGNvbnN0IHJ1bGVDb3VudCA9IHJ1bGVzSW4ubGVuZ3RoO1xuICAgIGNvbnN0IHVkdENvdW50ID0gdWR0c0luLmxlbmd0aDtcbiAgICBsZXQgc3RyID0gJ1JVTEUvVURUIE5BTUVTJztcbiAgICBsZXQgaTtcbiAgICBmdW5jdGlvbiBjb21wUnVsZXNBbHBoYShsZWZ0LCByaWdodCkge1xuICAgICAgaWYgKHJ1bGVzW2xlZnRdLmxvd2VyIDwgcnVsZXNbcmlnaHRdLmxvd2VyKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIGlmIChydWxlc1tsZWZ0XS5sb3dlciA+IHJ1bGVzW3JpZ2h0XS5sb3dlcikge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wVWR0c0FscGhhKGxlZnQsIHJpZ2h0KSB7XG4gICAgICBpZiAodWR0c1tsZWZ0XS5sb3dlciA8IHVkdHNbcmlnaHRdLmxvd2VyKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIGlmICh1ZHRzW2xlZnRdLmxvd2VyID4gdWR0c1tyaWdodF0ubG93ZXIpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgaWYgKCEoQXJyYXkuaXNBcnJheShydWxlc0luKSAmJiBydWxlc0luLmxlbmd0aCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHt0aGlzRmlsZU5hbWV9OiR7dGhpc0Z1bmNOYW1lfTogcnVsZXMgYXJnIG11c3QgYmUgYXJyYXkgd2l0aCBsZW5ndGggPiAwYCk7XG4gICAgfVxuICAgIGlmICghQXJyYXkuaXNBcnJheSh1ZHRzSW4pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dGhpc0ZpbGVOYW1lfToke3RoaXNGdW5jTmFtZX06IHVkdHMgYXJnIG11c3QgYmUgYXJyYXlgKTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgcnVsZUNvdW50OyBpICs9IDEpIHtcbiAgICAgIGluZGV4QXJyYXkucHVzaChpKTtcbiAgICB9XG4gICAgYWxwaGFBcnJheSA9IGluZGV4QXJyYXkuc2xpY2UoMCk7XG4gICAgYWxwaGFBcnJheS5zb3J0KGNvbXBSdWxlc0FscGhhKTtcbiAgICBpZiAodWR0Q291bnQpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB1ZHRDb3VudDsgaSArPSAxKSB7XG4gICAgICAgIHVkdEluZGV4QXJyYXkucHVzaChpKTtcbiAgICAgIH1cbiAgICAgIHVkdEFscGhhQXJyYXkgPSB1ZHRJbmRleEFycmF5LnNsaWNlKDApO1xuICAgICAgdWR0QWxwaGFBcnJheS5zb3J0KGNvbXBVZHRzQWxwaGEpO1xuICAgIH1cbiAgICBpZiAob3JkZXIuY2hhckNvZGVBdCgwKSA9PT0gOTcpIHtcbiAgICAgIHN0ciArPSAnIC0gYWxwaGFiZXRpY2FsIGJ5IHJ1bGUvVURUIG5hbWVcXG4nO1xuICAgICAgZm9yIChpID0gMDsgaSA8IHJ1bGVDb3VudDsgaSArPSAxKSB7XG4gICAgICAgIHN0ciArPSBgJHtpfTogJHthbHBoYUFycmF5W2ldfTogJHtydWxlc1thbHBoYUFycmF5W2ldXS5uYW1lfVxcbmA7XG4gICAgICB9XG4gICAgICBpZiAodWR0Q291bnQpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHVkdENvdW50OyBpICs9IDEpIHtcbiAgICAgICAgICBzdHIgKz0gYCR7aX06ICR7dWR0QWxwaGFBcnJheVtpXX06ICR7dWR0c1t1ZHRBbHBoYUFycmF5W2ldXS5uYW1lfVxcbmA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RyICs9ICcgLSBvcmRlcmVkIGJ5IHJ1bGUvVURUIGluZGV4XFxuJztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBydWxlQ291bnQ7IGkgKz0gMSkge1xuICAgICAgICBzdHIgKz0gYCR7aX06ICR7cnVsZXNbaV0ubmFtZX1cXG5gO1xuICAgICAgfVxuICAgICAgaWYgKHVkdENvdW50KSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB1ZHRDb3VudDsgaSArPSAxKSB7XG4gICAgICAgICAgc3RyICs9IGAke2l9OiAke3VkdHNbaV0ubmFtZX1cXG5gO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG4gIH07XG4gIHJldHVybiBzaG93UnVsZXM7XG59KSgpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/show-rules.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/syntax-callbacks.js":
/*!*************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/syntax-callbacks.js ***!
  \*************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint-disable func-names */\n/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module has all of the callback functions for the syntax phase of the generation.\n// See:<br>\n// `./dist/abnf-for-sabnf-grammar.bnf`<br>\n// for the grammar file these callback functions are based on.\nmodule.exports = function exfn() {\n  const thisFileName = 'syntax-callbacks.js: ';\n  const apglib = __webpack_require__(/*! ../apg-lib/node-exports */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/node-exports.js\");\n  const id = apglib.ids;\n  let topAlt;\n  /* syntax, RNM, callback functions */\n  const synFile = function synFile(result, chars, phraseIndex, data) {\n    switch (result.state) {\n      case id.ACTIVE:\n        data.altStack = [];\n        data.repCount = 0;\n        break;\n      case id.EMPTY:\n        data.errors.push({\n          line: 0,\n          char: 0,\n          msg: 'grammar file is empty',\n        });\n        break;\n      case id.MATCH:\n        if (data.ruleCount === 0) {\n          data.errors.push({\n            line: 0,\n            char: 0,\n            msg: 'no rules defined',\n          });\n        }\n        break;\n      case id.NOMATCH:\n        throw new Error(`${thisFileName}synFile: grammar file NOMATCH: design error: should never happen.`);\n      default:\n        throw new Error(`${thisFileName}synFile: unrecognized case.`);\n    }\n  };\n  // eslint-disable-next-line func-names\n  const synRule = function (result, chars, phraseIndex, data) {\n    switch (result.state) {\n      case id.ACTIVE:\n        data.altStack.length = 0;\n        topAlt = {\n          groupOpen: null,\n          groupError: false,\n          optionOpen: null,\n          optionError: false,\n          tlsOpen: null,\n          clsOpen: null,\n          prosValOpen: null,\n          basicError: false,\n        };\n        data.altStack.push(topAlt);\n        break;\n      case id.EMPTY:\n        throw new Error(`${thisFileName}synRule: EMPTY: rule cannot be empty`);\n      case id.NOMATCH:\n        break;\n      case id.MATCH:\n        data.ruleCount += 1;\n        break;\n      default:\n        throw new Error(`${thisFileName}synFile: unrecognized case.`);\n    }\n  };\n  const synRuleError = function (result, chars, phraseIndex, data) {\n    switch (result.state) {\n      case id.ACTIVE:\n        break;\n      case id.EMPTY:\n        break;\n      case id.NOMATCH:\n        break;\n      case id.MATCH:\n        data.errors.push({\n          line: data.findLine(data.lines, phraseIndex, data.charsLength),\n          char: phraseIndex,\n          msg: 'Unrecognized SABNF line. Invalid rule, comment or blank line.',\n        });\n        break;\n      default:\n        throw new Error(`${thisFileName}synFile: unrecognized case.`);\n    }\n  };\n  const synRuleNameError = function (result, chars, phraseIndex, data) {\n    switch (result.state) {\n      case id.ACTIVE:\n        break;\n      case id.EMPTY:\n        break;\n      case id.NOMATCH:\n        break;\n      case id.MATCH:\n        data.errors.push({\n          line: data.findLine(data.lines, phraseIndex, data.charsLength),\n          char: phraseIndex,\n          msg: 'Rule names must be alphanum and begin with alphabetic character.',\n        });\n        break;\n      default:\n        throw new Error(`${thisFileName}synFile: unrecognized case.`);\n    }\n  };\n  const synDefinedAsError = function (result, chars, phraseIndex, data) {\n    switch (result.state) {\n      case id.ACTIVE:\n        break;\n      case id.EMPTY:\n        break;\n      case id.NOMATCH:\n        break;\n      case id.MATCH:\n        data.errors.push({\n          line: data.findLine(data.lines, phraseIndex, data.charsLength),\n          char: phraseIndex,\n          msg: \"Expected '=' or '=/'. Not found.\",\n        });\n        break;\n      default:\n        throw new Error(`${thisFileName}synFile: unrecognized case.`);\n    }\n  };\n  const synAndOp = function (result, chars, phraseIndex, data) {\n    switch (result.state) {\n      case id.ACTIVE:\n        break;\n      case id.EMPTY:\n        break;\n      case id.NOMATCH:\n        break;\n      case id.MATCH:\n        if (data.strict) {\n          data.errors.push({\n            line: data.findLine(data.lines, phraseIndex, data.charsLength),\n            char: phraseIndex,\n            msg: 'AND operator(&) found - strict ABNF specified.',\n          });\n        }\n        break;\n      default:\n        throw new Error(`${thisFileName}synFile: unrecognized case.`);\n    }\n  };\n  const synNotOp = function (result, chars, phraseIndex, data) {\n    switch (result.state) {\n      case id.ACTIVE:\n        break;\n      case id.EMPTY:\n        break;\n      case id.NOMATCH:\n        break;\n      case id.MATCH:\n        if (data.strict) {\n          data.errors.push({\n            line: data.findLine(data.lines, phraseIndex, data.charsLength),\n            char: phraseIndex,\n            msg: 'NOT operator(!) found - strict ABNF specified.',\n          });\n        }\n        break;\n      default:\n        throw new Error(`${thisFileName}synFile: unrecognized case.`);\n    }\n  };\n  const synBkaOp = function (result, chars, phraseIndex, data) {\n    switch (result.state) {\n      case id.ACTIVE:\n        break;\n      case id.EMPTY:\n        break;\n      case id.NOMATCH:\n        break;\n      case id.MATCH:\n        if (data.strict) {\n          data.errors.push({\n            line: data.findLine(data.lines, phraseIndex, data.charsLength),\n            char: phraseIndex,\n            msg: 'Positive look-behind operator(&&) found - strict ABNF specified.',\n          });\n        }\n        break;\n      default:\n        throw new Error(`${thisFileName}synFile: unrecognized case.`);\n    }\n  };\n  const synBknOp = function (result, chars, phraseIndex, data) {\n    switch (result.state) {\n      case id.ACTIVE:\n        break;\n      case id.EMPTY:\n        break;\n      case id.NOMATCH:\n        break;\n      case id.MATCH:\n        if (data.strict) {\n          data.errors.push({\n            line: data.findLine(data.lines, phraseIndex, data.charsLength),\n            char: phraseIndex,\n            msg: 'Negative look-behind operator(!!) found - strict ABNF specified.',\n          });\n        }\n        break;\n      default:\n        throw new Error(`${thisFileName}synFile: unrecognized case.`);\n    }\n  };\n  const synAbgOp = function (result, chars, phraseIndex, data) {\n    switch (result.state) {\n      case id.ACTIVE:\n        break;\n      case id.EMPTY:\n        break;\n      case id.NOMATCH:\n        break;\n      case id.MATCH:\n        if (data.strict) {\n          data.errors.push({\n            line: data.findLine(data.lines, phraseIndex, data.charsLength),\n            char: phraseIndex,\n            msg: 'Beginning of string anchor(%^) found - strict ABNF specified.',\n          });\n        }\n        break;\n      default:\n        throw new Error(`${thisFileName}synFile: unrecognized case.`);\n    }\n  };\n  const synAenOp = function (result, chars, phraseIndex, data) {\n    switch (result.state) {\n      case id.ACTIVE:\n        break;\n      case id.EMPTY:\n        break;\n      case id.NOMATCH:\n        break;\n      case id.MATCH:\n        if (data.strict) {\n          data.errors.push({\n            line: data.findLine(data.lines, phraseIndex, data.charsLength),\n            char: phraseIndex,\n            msg: 'End of string anchor(%$) found - strict ABNF specified.',\n          });\n        }\n        break;\n      default:\n        throw new Error(`${thisFileName}synFile: unrecognized case.`);\n    }\n  };\n  const synBkrOp = function (result, chars, phraseIndex, data) {\n    switch (result.state) {\n      case id.ACTIVE:\n        break;\n      case id.EMPTY:\n        break;\n      case id.NOMATCH:\n        break;\n      case id.MATCH:\n        if (data.strict) {\n          const name = apglib.utils.charsToString(chars, phraseIndex, result.phraseLength);\n          data.errors.push({\n            line: data.findLine(data.lines, phraseIndex, data.charsLength),\n            char: phraseIndex,\n            msg: `Back reference operator(${name}) found - strict ABNF specified.`,\n          });\n        }\n        break;\n      default:\n        throw new Error(`${thisFileName}synFile: unrecognized case.`);\n    }\n  };\n  const synUdtOp = function (result, chars, phraseIndex, data) {\n    switch (result.state) {\n      case id.ACTIVE:\n        break;\n      case id.EMPTY:\n        break;\n      case id.NOMATCH:\n        break;\n      case id.MATCH:\n        if (data.strict) {\n          const name = apglib.utils.charsToString(chars, phraseIndex, result.phraseLength);\n          data.errors.push({\n            line: data.findLine(data.lines, phraseIndex, data.charsLength),\n            char: phraseIndex,\n            msg: `UDT operator found(${name}) - strict ABNF specified.`,\n          });\n        }\n        break;\n      default:\n        throw new Error(`${thisFileName}synFile: unrecognized case.`);\n    }\n  };\n  const synTlsOpen = function (result, chars, phraseIndex) {\n    switch (result.state) {\n      case id.ACTIVE:\n        break;\n      case id.EMPTY:\n        break;\n      case id.NOMATCH:\n        break;\n      case id.MATCH:\n        topAlt.tlsOpen = phraseIndex;\n        break;\n      default:\n        throw new Error(`${thisFileName}synFile: unrecognized case.`);\n    }\n  };\n  const synTlsString = function (result, chars, phraseIndex, data) {\n    switch (result.state) {\n      case id.ACTIVE:\n        data.stringTabChar = false;\n        break;\n      case id.EMPTY:\n        break;\n      case id.NOMATCH:\n        break;\n      case id.MATCH:\n        if (data.stringTabChar !== false) {\n          data.errors.push({\n            line: data.findLine(data.lines, data.stringTabChar),\n            char: data.stringTabChar,\n            msg: \"Tab character (\\\\t, x09) not allowed in literal string (see 'quoted-string' definition, RFC 7405.)\",\n          });\n        }\n        break;\n      default:\n        throw new Error(`${thisFileName}synFile: unrecognized case.`);\n    }\n  };\n  const synStringTab = function (result, chars, phraseIndex, data) {\n    switch (result.state) {\n      case id.ACTIVE:\n        break;\n      case id.EMPTY:\n        break;\n      case id.NOMATCH:\n        break;\n      case id.MATCH:\n        data.stringTabChar = phraseIndex;\n        break;\n      default:\n        throw new Error(`${thisFileName}synFile: unrecognized case.`);\n    }\n  };\n  const synTlsClose = function (result, chars, phraseIndex, data) {\n    switch (result.state) {\n      case id.ACTIVE:\n        break;\n      case id.EMPTY:\n        break;\n      case id.NOMATCH:\n        data.errors.push({\n          line: data.findLine(data.lines, topAlt.tlsOpen),\n          char: topAlt.tlsOpen,\n          msg: 'Case-insensitive literal string(\"...\") opened but not closed.',\n        });\n        topAlt.basicError = true;\n        topAlt.tlsOpen = null;\n        break;\n      case id.MATCH:\n        topAlt.tlsOpen = null;\n        break;\n      default:\n        throw new Error(`${thisFileName}synFile: unrecognized case.`);\n    }\n  };\n  const synClsOpen = function (result, chars, phraseIndex) {\n    switch (result.state) {\n      case id.ACTIVE:\n        break;\n      case id.EMPTY:\n        break;\n      case id.NOMATCH:\n        break;\n      case id.MATCH:\n        topAlt.clsOpen = phraseIndex;\n        break;\n      default:\n        throw new Error(`${thisFileName}synFile: unrecognized case.`);\n    }\n  };\n  const synClsString = function (result, chars, phraseIndex, data) {\n    switch (result.state) {\n      case id.ACTIVE:\n        data.stringTabChar = false;\n        break;\n      case id.EMPTY:\n        break;\n      case id.NOMATCH:\n        break;\n      case id.MATCH:\n        if (data.stringTabChar !== false) {\n          data.errors.push({\n            line: data.findLine(data.lines, data.stringTabChar),\n            char: data.stringTabChar,\n            msg: 'Tab character (\\\\t, x09) not allowed in literal string.',\n          });\n        }\n        break;\n      default:\n        throw new Error(`${thisFileName}synFile: unrecognized case.`);\n    }\n  };\n  const synClsClose = function (result, chars, phraseIndex, data) {\n    switch (result.state) {\n      case id.ACTIVE:\n        break;\n      case id.EMPTY:\n        break;\n      case id.NOMATCH:\n        data.errors.push({\n          line: data.findLine(data.lines, topAlt.clsOpen),\n          char: topAlt.clsOpen,\n          msg: \"Case-sensitive literal string('...') opened but not closed.\",\n        });\n        topAlt.clsOpen = null;\n        topAlt.basicError = true;\n        break;\n      case id.MATCH:\n        if (data.strict) {\n          data.errors.push({\n            line: data.findLine(data.lines, topAlt.clsOpen),\n            char: topAlt.clsOpen,\n            msg: \"Case-sensitive string operator('...') found - strict ABNF specified.\",\n          });\n        }\n        topAlt.clsOpen = null;\n        break;\n      default:\n        throw new Error(`${thisFileName}synFile: unrecognized case.`);\n    }\n  };\n  const synProsValOpen = function (result, chars, phraseIndex) {\n    switch (result.state) {\n      case id.ACTIVE:\n        break;\n      case id.EMPTY:\n        break;\n      case id.NOMATCH:\n        break;\n      case id.MATCH:\n        topAlt.prosValOpen = phraseIndex;\n        break;\n      default:\n        throw new Error(`${thisFileName}synFile: unrecognized case.`);\n    }\n  };\n  const synProsValString = function (result, chars, phraseIndex, data) {\n    switch (result.state) {\n      case id.ACTIVE:\n        data.stringTabChar = false;\n        break;\n      case id.EMPTY:\n        break;\n      case id.NOMATCH:\n        break;\n      case id.MATCH:\n        if (data.stringTabChar !== false) {\n          data.errors.push({\n            line: data.findLine(data.lines, data.stringTabChar),\n            char: data.stringTabChar,\n            msg: 'Tab character (\\\\t, x09) not allowed in prose value string.',\n          });\n        }\n        break;\n      default:\n        throw new Error(`${thisFileName}synFile: unrecognized case.`);\n    }\n  };\n  const synProsValClose = function (result, chars, phraseIndex, data) {\n    switch (result.state) {\n      case id.ACTIVE:\n        break;\n      case id.EMPTY:\n        break;\n      case id.NOMATCH:\n        data.errors.push({\n          line: data.findLine(data.lines, topAlt.prosValOpen),\n          char: topAlt.prosValOpen,\n          msg: 'Prose value operator(<...>) opened but not closed.',\n        });\n        topAlt.basicError = true;\n        topAlt.prosValOpen = null;\n        break;\n      case id.MATCH:\n        data.errors.push({\n          line: data.findLine(data.lines, topAlt.prosValOpen),\n          char: topAlt.prosValOpen,\n          msg: 'Prose value operator(<...>) found. The ABNF syntax is valid, but a parser cannot be generated from this grammar.',\n        });\n        topAlt.prosValOpen = null;\n        break;\n      default:\n        throw new Error(`${thisFileName}synFile: unrecognized case.`);\n    }\n  };\n  const synGroupOpen = function (result, chars, phraseIndex, data) {\n    switch (result.state) {\n      case id.ACTIVE:\n        break;\n      case id.EMPTY:\n        break;\n      case id.NOMATCH:\n        break;\n      case id.MATCH:\n        topAlt = {\n          groupOpen: phraseIndex,\n          groupError: false,\n          optionOpen: null,\n          optionError: false,\n          tlsOpen: null,\n          clsOpen: null,\n          prosValOpen: null,\n          basicError: false,\n        };\n        data.altStack.push(topAlt);\n        break;\n      default:\n        throw new Error(`${thisFileName}synFile: unrecognized case.`);\n    }\n  };\n  const synGroupClose = function (result, chars, phraseIndex, data) {\n    switch (result.state) {\n      case id.ACTIVE:\n        break;\n      case id.EMPTY:\n        break;\n      case id.NOMATCH:\n        data.errors.push({\n          line: data.findLine(data.lines, topAlt.groupOpen),\n          char: topAlt.groupOpen,\n          msg: 'Group \"(...)\" opened but not closed.',\n        });\n        topAlt = data.altStack.pop();\n        topAlt.groupError = true;\n        break;\n      case id.MATCH:\n        topAlt = data.altStack.pop();\n        break;\n      default:\n        throw new Error(`${thisFileName}synFile: unrecognized case.`);\n    }\n  };\n  const synOptionOpen = function (result, chars, phraseIndex, data) {\n    switch (result.state) {\n      case id.ACTIVE:\n        break;\n      case id.EMPTY:\n        break;\n      case id.NOMATCH:\n        break;\n      case id.MATCH:\n        topAlt = {\n          groupOpen: null,\n          groupError: false,\n          optionOpen: phraseIndex,\n          optionError: false,\n          tlsOpen: null,\n          clsOpen: null,\n          prosValOpen: null,\n          basicError: false,\n        };\n        data.altStack.push(topAlt);\n        break;\n      default:\n        throw new Error(`${thisFileName}synFile: unrecognized case.`);\n    }\n  };\n  const synOptionClose = function (result, chars, phraseIndex, data) {\n    switch (result.state) {\n      case id.ACTIVE:\n        break;\n      case id.EMPTY:\n        break;\n      case id.NOMATCH:\n        data.errors.push({\n          line: data.findLine(data.lines, topAlt.optionOpen),\n          char: topAlt.optionOpen,\n          msg: 'Option \"[...]\" opened but not closed.',\n        });\n        topAlt = data.altStack.pop();\n        topAlt.optionError = true;\n        break;\n      case id.MATCH:\n        topAlt = data.altStack.pop();\n        break;\n      default:\n        throw new Error(`${thisFileName}synFile: unrecognized case.`);\n    }\n  };\n  const synBasicElementError = function (result, chars, phraseIndex, data) {\n    switch (result.state) {\n      case id.ACTIVE:\n        break;\n      case id.EMPTY:\n        break;\n      case id.NOMATCH:\n        break;\n      case id.MATCH:\n        if (topAlt.basicError === false) {\n          data.errors.push({\n            line: data.findLine(data.lines, phraseIndex, data.charsLength),\n            char: phraseIndex,\n            msg: 'Unrecognized SABNF element.',\n          });\n        }\n        break;\n      default:\n        throw new Error(`${thisFileName}synFile: unrecognized case.`);\n    }\n  };\n  const synLineEnd = function (result, chars, phraseIndex, data) {\n    switch (result.state) {\n      case id.ACTIVE:\n        break;\n      case id.EMPTY:\n        break;\n      case id.NOMATCH:\n        break;\n      case id.MATCH:\n        if (result.phraseLength === 1 && data.strict) {\n          const end = chars[phraseIndex] === 13 ? 'CR' : 'LF';\n          data.errors.push({\n            line: data.findLine(data.lines, phraseIndex, data.charsLength),\n            char: phraseIndex,\n            msg: `Line end '${end}' found - strict ABNF specified, only CRLF allowed.`,\n          });\n        }\n        break;\n      default:\n        throw new Error(`${thisFileName}synFile: unrecognized case.`);\n    }\n  };\n  const synLineEndError = function (result, chars, phraseIndex, data) {\n    switch (result.state) {\n      case id.ACTIVE:\n        break;\n      case id.EMPTY:\n        break;\n      case id.NOMATCH:\n        break;\n      case id.MATCH:\n        data.errors.push({\n          line: data.findLine(data.lines, phraseIndex, data.charsLength),\n          char: phraseIndex,\n          msg: 'Unrecognized grammar element or characters.',\n        });\n        break;\n      default:\n        throw new Error(`${thisFileName}synFile: unrecognized case.`);\n    }\n  };\n  const synRepetition = function (result, chars, phraseIndex, data) {\n    switch (result.state) {\n      case id.ACTIVE:\n        break;\n      case id.EMPTY:\n        break;\n      case id.NOMATCH:\n        data.repCount += 1;\n        break;\n      case id.MATCH:\n        data.repCount += 1;\n        break;\n      default:\n        throw new Error(`${thisFileName}synFile: unrecognized case.`);\n    }\n  };\n  // Define the list of callback functions.\n  this.callbacks = [];\n  this.callbacks.andop = synAndOp;\n  this.callbacks.basicelementerr = synBasicElementError;\n  this.callbacks.clsclose = synClsClose;\n  this.callbacks.clsopen = synClsOpen;\n  this.callbacks.clsstring = synClsString;\n  this.callbacks.definedaserror = synDefinedAsError;\n  this.callbacks.file = synFile;\n  this.callbacks.groupclose = synGroupClose;\n  this.callbacks.groupopen = synGroupOpen;\n  this.callbacks.lineenderror = synLineEndError;\n  this.callbacks.lineend = synLineEnd;\n  this.callbacks.notop = synNotOp;\n  this.callbacks.optionclose = synOptionClose;\n  this.callbacks.optionopen = synOptionOpen;\n  this.callbacks.prosvalclose = synProsValClose;\n  this.callbacks.prosvalopen = synProsValOpen;\n  this.callbacks.prosvalstring = synProsValString;\n  this.callbacks.repetition = synRepetition;\n  this.callbacks.rule = synRule;\n  this.callbacks.ruleerror = synRuleError;\n  this.callbacks.rulenameerror = synRuleNameError;\n  this.callbacks.stringtab = synStringTab;\n  this.callbacks.tlsclose = synTlsClose;\n  this.callbacks.tlsopen = synTlsOpen;\n  this.callbacks.tlsstring = synTlsString;\n  this.callbacks.udtop = synUdtOp;\n  this.callbacks.bkaop = synBkaOp;\n  this.callbacks.bknop = synBknOp;\n  this.callbacks.bkrop = synBkrOp;\n  this.callbacks.abgop = synAbgOp;\n  this.callbacks.aenop = synAenOp;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/syntax-callbacks.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-conv-api/converter.js":
/*!***********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-conv-api/converter.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module exposes the public encoding, decoding and conversion functions.\n// Its private functions provide the disassembling and interpetation of the source and destination encoding types.\n// In the case of Unicode encodings, private functions determine the presence of Byte Order Marks (BOMs), if any.\n//\n// Throws \"TypeError\" exceptions on input errors.\n//\n\n'use strict;';\n\nconst { Buffer } = __webpack_require__(/*! buffer */ \"buffer\");\n\nconst trans = __webpack_require__(/*! ./transformers */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-conv-api/transformers.js\");\n\n/* types */\nconst UTF8 = 'UTF8';\nconst UTF16 = 'UTF16';\nconst UTF16BE = 'UTF16BE';\nconst UTF16LE = 'UTF16LE';\nconst UTF32 = 'UTF32';\nconst UTF32BE = 'UTF32BE';\nconst UTF32LE = 'UTF32LE';\nconst UINT7 = 'UINT7';\nconst ASCII = 'ASCII';\nconst BINARY = 'BINARY';\nconst UINT8 = 'UINT8';\nconst UINT16 = 'UINT16';\nconst UINT16LE = 'UINT16LE';\nconst UINT16BE = 'UINT16BE';\nconst UINT32 = 'UINT32';\nconst UINT32LE = 'UINT32LE';\nconst UINT32BE = 'UINT32BE';\nconst ESCAPED = 'ESCAPED';\nconst STRING = 'STRING';\n\n/* private functions */\n// Find the UTF8 BOM, if any.\nconst bom8 = function bom8(src) {\n  src.type = UTF8;\n  const buf = src.data;\n  src.bom = 0;\n  if (buf.length >= 3) {\n    if (buf[0] === 0xef && buf[1] === 0xbb && buf[2] === 0xbf) {\n      src.bom = 3;\n    }\n  }\n};\n// Find the UTF16 BOM, if any, and determine the UTF16 type.\n// Defaults to UTF16BE.\n// Throws TypeError exception if BOM does not match the specified type.\nconst bom16 = function bom16(src) {\n  const buf = src.data;\n  src.bom = 0;\n  switch (src.type) {\n    case UTF16:\n      src.type = UTF16BE;\n      if (buf.length >= 2) {\n        if (buf[0] === 0xfe && buf[1] === 0xff) {\n          src.bom = 2;\n        } else if (buf[0] === 0xff && buf[1] === 0xfe) {\n          src.type = UTF16LE;\n          src.bom = 2;\n        }\n      }\n      break;\n    case UTF16BE:\n      src.type = UTF16BE;\n      if (buf.length >= 2) {\n        if (buf[0] === 0xfe && buf[1] === 0xff) {\n          src.bom = 2;\n        } else if (buf[0] === 0xff && buf[1] === 0xfe) {\n          throw new TypeError(`src type: \"${UTF16BE}\" specified but BOM is for \"${UTF16LE}\"`);\n        }\n      }\n      break;\n    case UTF16LE:\n      src.type = UTF16LE;\n      if (buf.length >= 0) {\n        if (buf[0] === 0xfe && buf[1] === 0xff) {\n          throw new TypeError(`src type: \"${UTF16LE}\" specified but BOM is for \"${UTF16BE}\"`);\n        } else if (buf[0] === 0xff && buf[1] === 0xfe) {\n          src.bom = 2;\n        }\n      }\n      break;\n    default:\n      throw new TypeError(`UTF16 BOM: src type \"${src.type}\" unrecognized`);\n  }\n};\n// Find the UTF32 BOM, if any, and determine the UTF32 type.\n// Defaults to UTF32BE.\n// Throws exception if BOM does not match the specified type.\nconst bom32 = function bom32(src) {\n  const buf = src.data;\n  src.bom = 0;\n  switch (src.type) {\n    case UTF32:\n      src.type = UTF32BE;\n      if (buf.length >= 4) {\n        if (buf[0] === 0 && buf[1] === 0 && buf[2] === 0xfe && buf[3] === 0xff) {\n          src.bom = 4;\n        }\n        if (buf[0] === 0xff && buf[1] === 0xfe && buf[2] === 0 && buf[3] === 0) {\n          src.type = UTF32LE;\n          src.bom = 4;\n        }\n      }\n      break;\n    case UTF32BE:\n      src.type = UTF32BE;\n      if (buf.length >= 4) {\n        if (buf[0] === 0 && buf[1] === 0 && buf[2] === 0xfe && buf[3] === 0xff) {\n          src.bom = 4;\n        }\n        if (buf[0] === 0xff && buf[1] === 0xfe && buf[2] === 0 && buf[3] === 0) {\n          throw new TypeError(`src type: ${UTF32BE} specified but BOM is for ${UTF32LE}\"`);\n        }\n      }\n      break;\n    case UTF32LE:\n      src.type = UTF32LE;\n      if (buf.length >= 4) {\n        if (buf[0] === 0 && buf[1] === 0 && buf[2] === 0xfe && buf[3] === 0xff) {\n          throw new TypeError(`src type: \"${UTF32LE}\" specified but BOM is for \"${UTF32BE}\"`);\n        }\n        if (buf[0] === 0xff && buf[1] === 0xfe && buf[2] === 0 && buf[3] === 0) {\n          src.bom = 4;\n        }\n      }\n      break;\n    default:\n      throw new TypeError(`UTF32 BOM: src type \"${src.type}\" unrecognized`);\n  }\n};\n// Validates the source encoding type and matching data.\n// If the BASE64: prefix is present, the base 64 decoding is done here as the initial step.\n// - For type STRING, data must be a JavaScript string.\n// - For type BASE64:*, data may be a string or Buffer.\n// - For all other types, data must be a Buffer.\n// - The BASE64: prefix is not allowed for type STRING.\nconst validateSrc = function validateSrc(type, data) {\n  function getType(typeArg) {\n    const ret = {\n      type: '',\n      base64: false,\n    };\n    const rx = /^(base64:)?([a-zA-Z0-9]+)$/i;\n    const result = rx.exec(typeArg);\n    if (result) {\n      if (result[2]) {\n        ret.type = result[2].toUpperCase();\n      }\n      if (result[1]) {\n        ret.base64 = true;\n      }\n    }\n    return ret;\n  }\n  const ret = getType(type.toUpperCase());\n  if (ret.base64) {\n    /* handle base 64 */\n    if (ret.type === STRING) {\n      throw new TypeError(`type: \"${type} \"BASE64:\" prefix not allowed with type ${STRING}`);\n    }\n    if (Buffer.isBuffer(data)) {\n      ret.data = trans.base64.decode(data);\n    } else if (typeof data === 'string') {\n      const buf = Buffer.from(data, 'ascii');\n      ret.data = trans.base64.decode(buf);\n    } else {\n      throw new TypeError(`type: \"${type} unrecognized data type: typeof(data): ${typeof data}`);\n    }\n  } else {\n    ret.data = data;\n  }\n  switch (ret.type) {\n    case UTF8:\n      bom8(ret);\n      break;\n    case UTF16:\n    case UTF16BE:\n    case UTF16LE:\n      bom16(ret);\n      break;\n    case UTF32:\n    case UTF32BE:\n    case UTF32LE:\n      bom32(ret);\n      break;\n    case UINT16:\n      ret.type = UINT16BE;\n      break;\n    case UINT32:\n      ret.type = UINT32BE;\n      break;\n    case ASCII:\n      ret.type = UINT7;\n      break;\n    case BINARY:\n      ret.type = UINT8;\n      break;\n    case UINT7:\n    case UINT8:\n    case UINT16LE:\n    case UINT16BE:\n    case UINT32LE:\n    case UINT32BE:\n    case STRING:\n    case ESCAPED:\n      break;\n    default:\n      throw new TypeError(`type: \"${type}\" not recognized`);\n  }\n  if (ret.type === STRING) {\n    if (typeof ret.data !== 'string') {\n      throw new TypeError(`type: \"${type}\" but data is not a string`);\n    }\n  } else if (!Buffer.isBuffer(ret.data)) {\n    throw new TypeError(`type: \"${type}\" but data is not a Buffer`);\n  }\n  return ret;\n};\n// Disassembles and validates the destination type.\n// `chars` must be an Array of integers.\n// The :BASE64 suffix is not allowed for type STRING.\nconst validateDst = function validateDst(type, chars) {\n  function getType(typeArg) {\n    let fix;\n    let rem;\n    const ret = {\n      crlf: false,\n      lf: false,\n      base64: false,\n      type: '',\n    };\n    /* prefix, if any */\n    const TRUE = true;\n    while (TRUE) {\n      rem = typeArg;\n      fix = typeArg.slice(0, 5);\n      if (fix === 'CRLF:') {\n        ret.crlf = true;\n        rem = typeArg.slice(5);\n        break;\n      }\n      fix = typeArg.slice(0, 3);\n      if (fix === 'LF:') {\n        ret.lf = true;\n        rem = typeArg.slice(3);\n        break;\n      }\n      break;\n    }\n    /* suffix, if any */\n    fix = rem.split(':');\n    if (fix.length === 1) {\n      // eslint-disable-next-line prefer-destructuring\n      ret.type = fix[0];\n    } else if (fix.length === 2 && fix[1] === 'BASE64') {\n      ret.base64 = true;\n      // eslint-disable-next-line prefer-destructuring\n      ret.type = fix[0];\n    }\n    return ret;\n  }\n  if (!Array.isArray(chars)) {\n    throw new TypeError(`dst chars: not array: \"${typeof chars}`);\n  }\n  if (typeof type !== 'string') {\n    throw new TypeError(`dst type: not string: \"${typeof type}`);\n  }\n  const ret = getType(type.toUpperCase());\n  switch (ret.type) {\n    case UTF8:\n    case UTF16BE:\n    case UTF16LE:\n    case UTF32BE:\n    case UTF32LE:\n    case UINT7:\n    case UINT8:\n    case UINT16LE:\n    case UINT16BE:\n    case UINT32LE:\n    case UINT32BE:\n    case ESCAPED:\n      break;\n    case STRING:\n      if (ret.base64) {\n        throw new TypeError(`\":BASE64\" suffix not allowed with type ${STRING}`);\n      }\n      break;\n    case ASCII:\n      ret.type = UINT7;\n      break;\n    case BINARY:\n      ret.type = UINT8;\n      break;\n    case UTF16:\n      ret.type = UTF16BE;\n      break;\n    case UTF32:\n      ret.type = UTF32BE;\n      break;\n    case UINT16:\n      ret.type = UINT16BE;\n      break;\n    case UINT32:\n      ret.type = UINT32BE;\n      break;\n    default:\n      throw new TypeError(`dst type unrecognized: \"${type}\" : must have form [crlf:|lf:]type[:base64]`);\n  }\n  return ret;\n};\n// Select and call the requested encoding function.\nconst encode = function encode(type, chars) {\n  switch (type) {\n    case UTF8:\n      return trans.utf8.encode(chars);\n    case UTF16BE:\n      return trans.utf16be.encode(chars);\n    case UTF16LE:\n      return trans.utf16le.encode(chars);\n    case UTF32BE:\n      return trans.utf32be.encode(chars);\n    case UTF32LE:\n      return trans.utf32le.encode(chars);\n    case UINT7:\n      return trans.uint7.encode(chars);\n    case UINT8:\n      return trans.uint8.encode(chars);\n    case UINT16BE:\n      return trans.uint16be.encode(chars);\n    case UINT16LE:\n      return trans.uint16le.encode(chars);\n    case UINT32BE:\n      return trans.uint32be.encode(chars);\n    case UINT32LE:\n      return trans.uint32le.encode(chars);\n    case STRING:\n      return trans.string.encode(chars);\n    case ESCAPED:\n      return trans.escaped.encode(chars);\n    default:\n      throw new TypeError(`encode type \"${type}\" not recognized`);\n  }\n};\n// Select and call the requested decoding function.\n// `src` contains BOM information as well as the source type and data.\nconst decode = function decode(src) {\n  switch (src.type) {\n    case UTF8:\n      return trans.utf8.decode(src.data, src.bom);\n    case UTF16LE:\n      return trans.utf16le.decode(src.data, src.bom);\n    case UTF16BE:\n      return trans.utf16be.decode(src.data, src.bom);\n    case UTF32BE:\n      return trans.utf32be.decode(src.data, src.bom);\n    case UTF32LE:\n      return trans.utf32le.decode(src.data, src.bom);\n    case UINT7:\n      return trans.uint7.decode(src.data);\n    case UINT8:\n      return trans.uint8.decode(src.data);\n    case UINT16BE:\n      return trans.uint16be.decode(src.data);\n    case UINT16LE:\n      return trans.uint16le.decode(src.data);\n    case UINT32BE:\n      return trans.uint32be.decode(src.data);\n    case UINT32LE:\n      return trans.uint32le.decode(src.data);\n    case STRING:\n      return trans.string.decode(src.data);\n    case ESCAPED:\n      return trans.escaped.decode(src.data);\n    default:\n      throw new TypeError(`decode type \"${src.type}\" not recognized`);\n  }\n};\n\n// The public decoding function. Returns an array of integers.\nexports.decode = function exportsDecode(type, data) {\n  const src = validateSrc(type, data);\n  return decode(src);\n};\n// The public encoding function. Returns a Buffer-typed byte array.\nexports.encode = function exportsEncode(type, chars) {\n  let c;\n  let buf;\n  const dst = validateDst(type, chars);\n  if (dst.crlf) {\n    /* prefix with CRLF line end conversion, don't contaminate caller's chars array */\n    c = trans.lineEnds.crlf(chars);\n    buf = encode(dst.type, c);\n  } else if (dst.lf) {\n    /* prefix with LF line end conversion, don't contaminate caller's chars array */\n    c = trans.lineEnds.lf(chars);\n    buf = encode(dst.type, c);\n  } else {\n    buf = encode(dst.type, chars);\n  }\n  if (dst.base64) {\n    /* post base 64 encoding */\n    buf = trans.base64.encode(buf);\n  }\n  return buf;\n};\n// Converts data of type `srcType` to data of type `dstType`.\n// `srcData` may be a JavaScript String, or node.js Buffer, depending on the corresponding type.\nconst convert = function convert(srcType, srcData, dstType) {\n  return exports.encode(dstType, exports.decode(srcType, srcData));\n};\nexports.convert = convert;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-conv-api/converter.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-conv-api/transformers.js":
/*!**************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-conv-api/transformers.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* eslint-disable prefer-destructuring */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-bitwise */\n/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module contains the actual encoding and decoding algorithms.\n// Throws \"RangeError\" exceptions on characters or bytes out of range for the given encoding.\n\n'use strict;';\n\nconst { Buffer } = __webpack_require__(/*! buffer */ \"buffer\");\n\n/* decoding error codes */\nconst NON_SHORTEST = 0xfffffffc;\nconst TRAILING = 0xfffffffd;\nconst RANGE = 0xfffffffe;\nconst ILL_FORMED = 0xffffffff;\n\n/* mask[n] = 2**n - 1, ie. mask[n] = n bits on. e.g. mask[6] = %b111111 */\nconst mask = [0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023];\n\n/* ascii[n] = 'HH', where 0xHH = n, eg. ascii[254] = 'FE' */\nconst ascii = [\n  '00',\n  '01',\n  '02',\n  '03',\n  '04',\n  '05',\n  '06',\n  '07',\n  '08',\n  '09',\n  '0A',\n  '0B',\n  '0C',\n  '0D',\n  '0E',\n  '0F',\n  '10',\n  '11',\n  '12',\n  '13',\n  '14',\n  '15',\n  '16',\n  '17',\n  '18',\n  '19',\n  '1A',\n  '1B',\n  '1C',\n  '1D',\n  '1E',\n  '1F',\n  '20',\n  '21',\n  '22',\n  '23',\n  '24',\n  '25',\n  '26',\n  '27',\n  '28',\n  '29',\n  '2A',\n  '2B',\n  '2C',\n  '2D',\n  '2E',\n  '2F',\n  '30',\n  '31',\n  '32',\n  '33',\n  '34',\n  '35',\n  '36',\n  '37',\n  '38',\n  '39',\n  '3A',\n  '3B',\n  '3C',\n  '3D',\n  '3E',\n  '3F',\n  '40',\n  '41',\n  '42',\n  '43',\n  '44',\n  '45',\n  '46',\n  '47',\n  '48',\n  '49',\n  '4A',\n  '4B',\n  '4C',\n  '4D',\n  '4E',\n  '4F',\n  '50',\n  '51',\n  '52',\n  '53',\n  '54',\n  '55',\n  '56',\n  '57',\n  '58',\n  '59',\n  '5A',\n  '5B',\n  '5C',\n  '5D',\n  '5E',\n  '5F',\n  '60',\n  '61',\n  '62',\n  '63',\n  '64',\n  '65',\n  '66',\n  '67',\n  '68',\n  '69',\n  '6A',\n  '6B',\n  '6C',\n  '6D',\n  '6E',\n  '6F',\n  '70',\n  '71',\n  '72',\n  '73',\n  '74',\n  '75',\n  '76',\n  '77',\n  '78',\n  '79',\n  '7A',\n  '7B',\n  '7C',\n  '7D',\n  '7E',\n  '7F',\n  '80',\n  '81',\n  '82',\n  '83',\n  '84',\n  '85',\n  '86',\n  '87',\n  '88',\n  '89',\n  '8A',\n  '8B',\n  '8C',\n  '8D',\n  '8E',\n  '8F',\n  '90',\n  '91',\n  '92',\n  '93',\n  '94',\n  '95',\n  '96',\n  '97',\n  '98',\n  '99',\n  '9A',\n  '9B',\n  '9C',\n  '9D',\n  '9E',\n  '9F',\n  'A0',\n  'A1',\n  'A2',\n  'A3',\n  'A4',\n  'A5',\n  'A6',\n  'A7',\n  'A8',\n  'A9',\n  'AA',\n  'AB',\n  'AC',\n  'AD',\n  'AE',\n  'AF',\n  'B0',\n  'B1',\n  'B2',\n  'B3',\n  'B4',\n  'B5',\n  'B6',\n  'B7',\n  'B8',\n  'B9',\n  'BA',\n  'BB',\n  'BC',\n  'BD',\n  'BE',\n  'BF',\n  'C0',\n  'C1',\n  'C2',\n  'C3',\n  'C4',\n  'C5',\n  'C6',\n  'C7',\n  'C8',\n  'C9',\n  'CA',\n  'CB',\n  'CC',\n  'CD',\n  'CE',\n  'CF',\n  'D0',\n  'D1',\n  'D2',\n  'D3',\n  'D4',\n  'D5',\n  'D6',\n  'D7',\n  'D8',\n  'D9',\n  'DA',\n  'DB',\n  'DC',\n  'DD',\n  'DE',\n  'DF',\n  'E0',\n  'E1',\n  'E2',\n  'E3',\n  'E4',\n  'E5',\n  'E6',\n  'E7',\n  'E8',\n  'E9',\n  'EA',\n  'EB',\n  'EC',\n  'ED',\n  'EE',\n  'EF',\n  'F0',\n  'F1',\n  'F2',\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'FA',\n  'FB',\n  'FC',\n  'FD',\n  'FE',\n  'FF',\n];\n\n/* vector of base 64 characters */\nconst base64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='.split('');\n\n/* vector of base 64 character codes */\nconst base64codes = [];\nbase64chars.forEach((char) => {\n  base64codes.push(char.charCodeAt(0));\n});\n\n// The UTF8 algorithms.\nexports.utf8 = {\n  encode(chars) {\n    const bytes = [];\n    chars.forEach((char) => {\n      if (char >= 0 && char <= 0x7f) {\n        bytes.push(char);\n      } else if (char <= 0x7ff) {\n        bytes.push(0xc0 + ((char >> 6) & mask[5]));\n        bytes.push(0x80 + (char & mask[6]));\n      } else if (char < 0xd800 || (char > 0xdfff && char <= 0xffff)) {\n        bytes.push(0xe0 + ((char >> 12) & mask[4]));\n        bytes.push(0x80 + ((char >> 6) & mask[6]));\n        bytes.push(0x80 + (char & mask[6]));\n      } else if (char >= 0x10000 && char <= 0x10ffff) {\n        const u = (char >> 16) & mask[5];\n        bytes.push(0xf0 + (u >> 2));\n        bytes.push(0x80 + ((u & mask[2]) << 4) + ((char >> 12) & mask[4]));\n        bytes.push(0x80 + ((char >> 6) & mask[6]));\n        bytes.push(0x80 + (char & mask[6]));\n      } else {\n        throw new RangeError(`utf8.encode: character out of range: char: ${char}`);\n      }\n    });\n    return Buffer.from(bytes);\n  },\n  decode(buf, bom) {\n    /* bytes functions return error for non-shortest forms & values out of range */\n    function bytes2(b1, b2) {\n      /* U+0080..U+07FF */\n      /* 00000000 00000yyy yyxxxxxx | 110yyyyy 10xxxxxx */\n      if ((b2 & 0xc0) !== 0x80) {\n        return TRAILING;\n      }\n      const x = ((b1 & mask[5]) << 6) + (b2 & mask[6]);\n      if (x < 0x80) {\n        return NON_SHORTEST;\n      }\n      return x;\n    }\n    function bytes3(b1, b2, b3) {\n      /* U+0800..U+FFFF */\n      /* 00000000 zzzzyyyy yyxxxxxx | 1110zzzz 10yyyyyy 10xxxxxx */\n      if ((b3 & 0xc0) !== 0x80 || (b2 & 0xc0) !== 0x80) {\n        return TRAILING;\n      }\n      const x = ((b1 & mask[4]) << 12) + ((b2 & mask[6]) << 6) + (b3 & mask[6]);\n      if (x < 0x800) {\n        return NON_SHORTEST;\n      }\n      if (x >= 0xd800 && x <= 0xdfff) {\n        return RANGE;\n      }\n      return x;\n    }\n    function bytes4(b1, b2, b3, b4) {\n      /* U+10000..U+10FFFF */\n      /* 000uuuuu zzzzyyyy yyxxxxxx | 11110uuu 10uuzzzz 10yyyyyy 10xxxxxx */\n      if ((b4 & 0xc0) !== 0x80 || (b3 & 0xc0) !== 0x80 || (b2 & 0xc0) !== 0x80) {\n        return TRAILING;\n      }\n      const x =\n        ((((b1 & mask[3]) << 2) + ((b2 >> 4) & mask[2])) << 16) +\n        ((b2 & mask[4]) << 12) +\n        ((b3 & mask[6]) << 6) +\n        (b4 & mask[6]);\n      if (x < 0x10000) {\n        return NON_SHORTEST;\n      }\n      if (x > 0x10ffff) {\n        return RANGE;\n      }\n      return x;\n    }\n    let c;\n    let b1;\n    let i1;\n    let i2;\n    let i3;\n    let inc;\n    const len = buf.length;\n    let i = bom ? 3 : 0;\n    const chars = [];\n    while (i < len) {\n      b1 = buf[i];\n      c = ILL_FORMED;\n      const TRUE = true;\n      while (TRUE) {\n        if (b1 >= 0 && b1 <= 0x7f) {\n          /* U+0000..U+007F 00..7F */\n          c = b1;\n          inc = 1;\n          break;\n        }\n        i1 = i + 1;\n        if (i1 < len && b1 >= 0xc2 && b1 <= 0xdf) {\n          /* U+0080..U+07FF C2..DF 80..BF */\n          c = bytes2(b1, buf[i1]);\n          inc = 2;\n          break;\n        }\n        i2 = i + 2;\n        if (i2 < len && b1 >= 0xe0 && b1 <= 0xef) {\n          /* U+0800..U+FFFF */\n          c = bytes3(b1, buf[i1], buf[i2]);\n          inc = 3;\n          break;\n        }\n        i3 = i + 3;\n        if (i3 < len && b1 >= 0xf0 && b1 <= 0xf4) {\n          /* U+10000..U+10FFFF */\n          c = bytes4(b1, buf[i1], buf[i2], buf[i3]);\n          inc = 4;\n          break;\n        }\n        /* if we fall through to here, it is an ill-formed sequence */\n        break;\n      }\n      if (c > 0x10ffff) {\n        const at = `byte[${i}]`;\n        if (c === ILL_FORMED) {\n          throw new RangeError(`utf8.decode: ill-formed UTF8 byte sequence found at: ${at}`);\n        }\n        if (c === TRAILING) {\n          throw new RangeError(`utf8.decode: illegal trailing byte found at: ${at}`);\n        }\n        if (c === RANGE) {\n          throw new RangeError(`utf8.decode: code point out of range found at: ${at}`);\n        }\n        if (c === NON_SHORTEST) {\n          throw new RangeError(`utf8.decode: non-shortest form found at: ${at}`);\n        }\n        throw new RangeError(`utf8.decode: unrecognized error found at: ${at}`);\n      }\n      chars.push(c);\n      i += inc;\n    }\n    return chars;\n  },\n};\n\n// The UTF16BE algorithms.\nexports.utf16be = {\n  encode(chars) {\n    const bytes = [];\n    let char;\n    let h;\n    let l;\n    for (let i = 0; i < chars.length; i += 1) {\n      char = chars[i];\n      if ((char >= 0 && char <= 0xd7ff) || (char >= 0xe000 && char <= 0xffff)) {\n        bytes.push((char >> 8) & mask[8]);\n        bytes.push(char & mask[8]);\n      } else if (char >= 0x10000 && char <= 0x10ffff) {\n        l = char - 0x10000;\n        h = 0xd800 + (l >> 10);\n        l = 0xdc00 + (l & mask[10]);\n        bytes.push((h >> 8) & mask[8]);\n        bytes.push(h & mask[8]);\n        bytes.push((l >> 8) & mask[8]);\n        bytes.push(l & mask[8]);\n      } else {\n        throw new RangeError(`utf16be.encode: UTF16BE value out of range: char[${i}]: ${char}`);\n      }\n    }\n    return Buffer.from(bytes);\n  },\n  decode(buf, bom) {\n    /* assumes caller has insured that buf is a Buffer of bytes */\n    if (buf.length % 2 > 0) {\n      throw new RangeError(`utf16be.decode: data length must be even multiple of 2: length: ${buf.length}`);\n    }\n    const chars = [];\n    const len = buf.length;\n    let i = bom ? 2 : 0;\n    let j = 0;\n    let c;\n    let inc;\n    let i1;\n    let i3;\n    let high;\n    let low;\n    while (i < len) {\n      const TRUE = true;\n      while (TRUE) {\n        i1 = i + 1;\n        if (i1 < len) {\n          high = (buf[i] << 8) + buf[i1];\n          if (high < 0xd800 || high > 0xdfff) {\n            c = high;\n            inc = 2;\n            break;\n          }\n          i3 = i + 3;\n          if (i3 < len) {\n            low = (buf[i + 2] << 8) + buf[i3];\n            if (high <= 0xdbff && low >= 0xdc00 && low <= 0xdfff) {\n              c = 0x10000 + ((high - 0xd800) << 10) + (low - 0xdc00);\n              inc = 4;\n              break;\n            }\n          }\n        }\n        /* if we fall through to here, it is an ill-formed sequence */\n        throw new RangeError(`utf16be.decode: ill-formed UTF16BE byte sequence found: byte[${i}]`);\n      }\n      chars[j++] = c;\n      i += inc;\n    }\n    return chars;\n  },\n};\n\n// The UTF16LE algorithms.\nexports.utf16le = {\n  encode(chars) {\n    const bytes = [];\n    let char;\n    let h;\n    let l;\n    for (let i = 0; i < chars.length; i += 1) {\n      char = chars[i];\n      if ((char >= 0 && char <= 0xd7ff) || (char >= 0xe000 && char <= 0xffff)) {\n        bytes.push(char & mask[8]);\n        bytes.push((char >> 8) & mask[8]);\n      } else if (char >= 0x10000 && char <= 0x10ffff) {\n        l = char - 0x10000;\n        h = 0xd800 + (l >> 10);\n        l = 0xdc00 + (l & mask[10]);\n        bytes.push(h & mask[8]);\n        bytes.push((h >> 8) & mask[8]);\n        bytes.push(l & mask[8]);\n        bytes.push((l >> 8) & mask[8]);\n      } else {\n        throw new RangeError(`utf16le.encode: UTF16LE value out of range: char[${i}]: ${char}`);\n      }\n    }\n    return Buffer.from(bytes);\n  },\n  decode(buf, bom) {\n    /* assumes caller has insured that buf is a Buffer of bytes */\n    if (buf.length % 2 > 0) {\n      throw new RangeError(`utf16le.decode: data length must be even multiple of 2: length: ${buf.length}`);\n    }\n    const chars = [];\n    const len = buf.length;\n    let i = bom ? 2 : 0;\n    let j = 0;\n    let c;\n    let inc;\n    let i1;\n    let i3;\n    let high;\n    let low;\n    while (i < len) {\n      const TRUE = true;\n      while (TRUE) {\n        i1 = i + 1;\n        if (i1 < len) {\n          high = (buf[i1] << 8) + buf[i];\n          if (high < 0xd800 || high > 0xdfff) {\n            c = high;\n            inc = 2;\n            break;\n          }\n          i3 = i + 3;\n          if (i3 < len) {\n            low = (buf[i3] << 8) + buf[i + 2];\n            if (high <= 0xdbff && low >= 0xdc00 && low <= 0xdfff) {\n              c = 0x10000 + ((high - 0xd800) << 10) + (low - 0xdc00);\n              inc = 4;\n              break;\n            }\n          }\n        }\n        /* if we fall through to here, it is an ill-formed sequence */\n        throw new RangeError(`utf16le.decode: ill-formed UTF16LE byte sequence found: byte[${i}]`);\n      }\n      chars[j++] = c;\n      i += inc;\n    }\n    return chars;\n  },\n};\n\n// The UTF32BE algorithms.\nexports.utf32be = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length * 4);\n    let i = 0;\n    chars.forEach((char) => {\n      if ((char >= 0xd800 && char <= 0xdfff) || char > 0x10ffff) {\n        throw new RangeError(`utf32be.encode: UTF32BE character code out of range: char[${i / 4}]: ${char}`);\n      }\n      buf[i++] = (char >> 24) & mask[8];\n      buf[i++] = (char >> 16) & mask[8];\n      buf[i++] = (char >> 8) & mask[8];\n      buf[i++] = char & mask[8];\n    });\n    return buf;\n  },\n  decode(buf, bom) {\n    /* caller to insure buf is a Buffer of bytes */\n    if (buf.length % 4 > 0) {\n      throw new RangeError(`utf32be.decode: UTF32BE byte length must be even multiple of 4: length: ${buf.length}`);\n    }\n    const chars = [];\n    let i = bom ? 4 : 0;\n    for (; i < buf.length; i += 4) {\n      const char = (buf[i] << 24) + (buf[i + 1] << 16) + (buf[i + 2] << 8) + buf[i + 3];\n      if ((char >= 0xd800 && char <= 0xdfff) || char > 0x10ffff) {\n        throw new RangeError(`utf32be.decode: UTF32BE character code out of range: char[${i / 4}]: ${char}`);\n      }\n      chars.push(char);\n    }\n    return chars;\n  },\n};\n\n// The UTF32LE algorithms.\nexports.utf32le = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length * 4);\n    let i = 0;\n    chars.forEach((char) => {\n      if ((char >= 0xd800 && char <= 0xdfff) || char > 0x10ffff) {\n        throw new RangeError(`utf32le.encode: UTF32LE character code out of range: char[${i / 4}]: ${char}`);\n      }\n      buf[i++] = char & mask[8];\n      buf[i++] = (char >> 8) & mask[8];\n      buf[i++] = (char >> 16) & mask[8];\n      buf[i++] = (char >> 24) & mask[8];\n    });\n    return buf;\n  },\n  decode(buf, bom) {\n    /* caller to insure buf is a Buffer of bytes */\n    if (buf.length % 4 > 0) {\n      throw new RangeError(`utf32be.decode: UTF32LE byte length must be even multiple of 4: length: ${buf.length}`);\n    }\n    const chars = [];\n    let i = bom ? 4 : 0;\n    for (; i < buf.length; i += 4) {\n      const char = (buf[i + 3] << 24) + (buf[i + 2] << 16) + (buf[i + 1] << 8) + buf[i];\n      if ((char >= 0xd800 && char <= 0xdfff) || char > 0x10ffff) {\n        throw new RangeError(`utf32le.encode: UTF32LE character code out of range: char[${i / 4}]: ${char}`);\n      }\n      chars.push(char);\n    }\n    return chars;\n  },\n};\n\n// The UINT7 algorithms. ASCII or 7-bit unsigned integers.\nexports.uint7 = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length);\n    for (let i = 0; i < chars.length; i += 1) {\n      if (chars[i] > 0x7f) {\n        throw new RangeError(`uint7.encode: UINT7 character code out of range: char[${i}]: ${chars[i]}`);\n      }\n      buf[i] = chars[i];\n    }\n    return buf;\n  },\n  decode(buf) {\n    const chars = [];\n    for (let i = 0; i < buf.length; i += 1) {\n      if (buf[i] > 0x7f) {\n        throw new RangeError(`uint7.decode: UINT7 character code out of range: byte[${i}]: ${buf[i]}`);\n      }\n      chars[i] = buf[i];\n    }\n    return chars;\n  },\n};\n\n// The UINT8 algorithms. BINARY, Latin 1 or 8-bit unsigned integers.\nexports.uint8 = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length);\n    for (let i = 0; i < chars.length; i += 1) {\n      if (chars[i] > 0xff) {\n        throw new RangeError(`uint8.encode: UINT8 character code out of range: char[${i}]: ${chars[i]}`);\n      }\n      buf[i] = chars[i];\n    }\n    return buf;\n  },\n  decode(buf) {\n    const chars = [];\n    for (let i = 0; i < buf.length; i += 1) {\n      chars[i] = buf[i];\n    }\n    return chars;\n  },\n};\n\n// The UINT16BE algorithms. Big-endian 16-bit unsigned integers.\nexports.uint16be = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length * 2);\n    let i = 0;\n    chars.forEach((char) => {\n      if (char > 0xffff) {\n        throw new RangeError(`uint16be.encode: UINT16BE character code out of range: char[${i / 2}]: ${char}`);\n      }\n      buf[i++] = (char >> 8) & mask[8];\n      buf[i++] = char & mask[8];\n    });\n    return buf;\n  },\n  decode(buf) {\n    if (buf.length % 2 > 0) {\n      throw new RangeError(`uint16be.decode: UINT16BE byte length must be even multiple of 2: length: ${buf.length}`);\n    }\n    const chars = [];\n    for (let i = 0; i < buf.length; i += 2) {\n      chars.push((buf[i] << 8) + buf[i + 1]);\n    }\n    return chars;\n  },\n};\n\n// The UINT16LE algorithms. Little-endian 16-bit unsigned integers.\nexports.uint16le = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length * 2);\n    let i = 0;\n    chars.forEach((char) => {\n      if (char > 0xffff) {\n        throw new RangeError(`uint16le.encode: UINT16LE character code out of range: char[${i / 2}]: ${char}`);\n      }\n      buf[i++] = char & mask[8];\n      buf[i++] = (char >> 8) & mask[8];\n    });\n    return buf;\n  },\n  decode(buf) {\n    if (buf.length % 2 > 0) {\n      throw new RangeError(`uint16le.decode: UINT16LE byte length must be even multiple of 2: length: ${buf.length}`);\n    }\n    const chars = [];\n    for (let i = 0; i < buf.length; i += 2) {\n      chars.push((buf[i + 1] << 8) + buf[i]);\n    }\n    return chars;\n  },\n};\n\n// The UINT32BE algorithms. Big-endian 32-bit unsigned integers.\nexports.uint32be = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length * 4);\n    let i = 0;\n    chars.forEach((char) => {\n      buf[i++] = (char >> 24) & mask[8];\n      buf[i++] = (char >> 16) & mask[8];\n      buf[i++] = (char >> 8) & mask[8];\n      buf[i++] = char & mask[8];\n    });\n    return buf;\n  },\n  decode(buf) {\n    if (buf.length % 4 > 0) {\n      throw new RangeError(`uint32be.decode: UINT32BE byte length must be even multiple of 4: length: ${buf.length}`);\n    }\n    const chars = [];\n    for (let i = 0; i < buf.length; i += 4) {\n      chars.push((buf[i] << 24) + (buf[i + 1] << 16) + (buf[i + 2] << 8) + buf[i + 3]);\n    }\n    return chars;\n  },\n};\n\n// The UINT32LE algorithms. Little-endian 32-bit unsigned integers.\nexports.uint32le = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length * 4);\n    let i = 0;\n    chars.forEach((char) => {\n      buf[i++] = char & mask[8];\n      buf[i++] = (char >> 8) & mask[8];\n      buf[i++] = (char >> 16) & mask[8];\n      buf[i++] = (char >> 24) & mask[8];\n    });\n    return buf;\n  },\n  decode(buf) {\n    /* caller to insure buf is a Buffer of bytes */\n    if (buf.length % 4 > 0) {\n      throw new RangeError(`uint32le.decode: UINT32LE byte length must be even multiple of 4: length: ${buf.length}`);\n    }\n    const chars = [];\n    for (let i = 0; i < buf.length; i += 4) {\n      chars.push((buf[i + 3] << 24) + (buf[i + 2] << 16) + (buf[i + 1] << 8) + buf[i]);\n    }\n    return chars;\n  },\n};\n\n// The STRING algorithms. Converts JavaScript strings to Array of 32-bit integers and vice versa.\n// Uses the node.js Buffer's native \"utf16le\" capabilites.\nexports.string = {\n  encode(chars) {\n    return exports.utf16le.encode(chars).toString('utf16le');\n  },\n  decode(str) {\n    return exports.utf16le.decode(Buffer.from(str, 'utf16le'), 0);\n  },\n};\n\n// The ESCAPED algorithms.\n// Note that ESCAPED format contains only ASCII characters.\n// The characters are always in the form of a Buffer of bytes.\nexports.escaped = {\n  // Encodes an Array of 32-bit integers into ESCAPED format.\n  encode(chars) {\n    const bytes = [];\n    for (let i = 0; i < chars.length; i += 1) {\n      const char = chars[i];\n      if (char === 96) {\n        bytes.push(char);\n        bytes.push(char);\n      } else if (char === 10) {\n        bytes.push(char);\n      } else if (char >= 32 && char <= 126) {\n        bytes.push(char);\n      } else {\n        let str = '';\n        if (char >= 0 && char <= 31) {\n          str += `\\`x${ascii[char]}`;\n        } else if (char >= 127 && char <= 255) {\n          str += `\\`x${ascii[char]}`;\n        } else if (char >= 0x100 && char <= 0xffff) {\n          str += `\\`u${ascii[(char >> 8) & mask[8]]}${ascii[char & mask[8]]}`;\n        } else if (char >= 0x10000 && char <= 0xffffffff) {\n          str += '`u{';\n          const digit = (char >> 24) & mask[8];\n          if (digit > 0) {\n            str += ascii[digit];\n          }\n          str += `${ascii[(char >> 16) & mask[8]] + ascii[(char >> 8) & mask[8]] + ascii[char & mask[8]]}}`;\n        } else {\n          throw new Error('escape.encode(char): char > 0xffffffff not allowed');\n        }\n        const buf = Buffer.from(str);\n        buf.forEach((b) => {\n          bytes.push(b);\n        });\n      }\n    }\n    return Buffer.from(bytes);\n  },\n  // Decodes ESCAPED format from a Buffer of bytes to an Array of 32-bit integers.\n  decode(buf) {\n    function isHex(hex) {\n      if ((hex >= 48 && hex <= 57) || (hex >= 65 && hex <= 70) || (hex >= 97 && hex <= 102)) {\n        return true;\n      }\n      return false;\n    }\n    function getx(i, len, bufArg) {\n      const ret = { char: null, nexti: i + 2, error: true };\n      if (i + 1 < len) {\n        if (isHex(bufArg[i]) && isHex(bufArg[i + 1])) {\n          const str = String.fromCodePoint(bufArg[i], bufArg[i + 1]);\n          ret.char = parseInt(str, 16);\n          if (!Number.isNaN(ret.char)) {\n            ret.error = false;\n          }\n        }\n      }\n      return ret;\n    }\n    function getu(i, len, bufArg) {\n      const ret = { char: null, nexti: i + 4, error: true };\n      if (i + 3 < len) {\n        if (isHex(bufArg[i]) && isHex(bufArg[i + 1]) && isHex(bufArg[i + 2]) && isHex(bufArg[i + 3])) {\n          const str = String.fromCodePoint(bufArg[i], bufArg[i + 1], bufArg[i + 2], bufArg[i + 3]);\n          ret.char = parseInt(str, 16);\n          if (!Number.isNaN(ret.char)) {\n            ret.error = false;\n          }\n        }\n      }\n      return ret;\n    }\n    function getU(i, len, bufArg) {\n      const ret = { char: null, nexti: i + 4, error: true };\n      let str = '';\n      while (i < len && isHex(bufArg[i])) {\n        str += String.fromCodePoint(bufArg[i]);\n        // eslint-disable-next-line no-param-reassign\n        i += 1;\n      }\n      ret.char = parseInt(str, 16);\n      if (bufArg[i] === 125 && !Number.isNaN(ret.char)) {\n        ret.error = false;\n      }\n      ret.nexti = i + 1;\n      return ret;\n    }\n    const chars = [];\n    const len = buf.length;\n    let i1;\n    let ret;\n    let error;\n    let i = 0;\n    while (i < len) {\n      const TRUE = true;\n      while (TRUE) {\n        error = true;\n        if (buf[i] !== 96) {\n          /* unescaped character */\n          chars.push(buf[i]);\n          i += 1;\n          error = false;\n          break;\n        }\n        i1 = i + 1;\n        if (i1 >= len) {\n          break;\n        }\n        if (buf[i1] === 96) {\n          /* escaped grave accent */\n          chars.push(96);\n          i += 2;\n          error = false;\n          break;\n        }\n        if (buf[i1] === 120) {\n          ret = getx(i1 + 1, len, buf);\n          if (ret.error) {\n            break;\n          }\n          /* escaped hex */\n          chars.push(ret.char);\n          i = ret.nexti;\n          error = false;\n          break;\n        }\n        if (buf[i1] === 117) {\n          if (buf[i1 + 1] === 123) {\n            ret = getU(i1 + 2, len, buf);\n            if (ret.error) {\n              break;\n            }\n            /* escaped utf-32 */\n            chars.push(ret.char);\n            i = ret.nexti;\n            error = false;\n            break;\n          }\n          ret = getu(i1 + 1, len, buf);\n          if (ret.error) {\n            break;\n          }\n          /* escaped utf-16 */\n          chars.push(ret.char);\n          i = ret.nexti;\n          error = false;\n          break;\n        }\n        break;\n      }\n      if (error) {\n        throw new Error(`escaped.decode: ill-formed escape sequence at buf[${i}]`);\n      }\n    }\n    return chars;\n  },\n};\n\n// The line end conversion algorigthms.\nconst CR = 13;\nconst LF = 10;\nexports.lineEnds = {\n  crlf(chars) {\n    const lfchars = [];\n    let i = 0;\n    while (i < chars.length) {\n      switch (chars[i]) {\n        case CR:\n          if (i + 1 < chars.length && chars[i + 1] === LF) {\n            i += 2;\n          } else {\n            i += 1;\n          }\n          lfchars.push(CR);\n          lfchars.push(LF);\n          break;\n        case LF:\n          lfchars.push(CR);\n          lfchars.push(LF);\n          i += 1;\n          break;\n        default:\n          lfchars.push(chars[i]);\n          i += 1;\n          break;\n      }\n    }\n    if (lfchars.length > 0 && lfchars[lfchars.length - 1] !== LF) {\n      lfchars.push(CR);\n      lfchars.push(LF);\n    }\n    return lfchars;\n  },\n  lf(chars) {\n    const lfchars = [];\n    let i = 0;\n    while (i < chars.length) {\n      switch (chars[i]) {\n        case CR:\n          if (i + 1 < chars.length && chars[i + 1] === LF) {\n            i += 2;\n          } else {\n            i += 1;\n          }\n          lfchars.push(LF);\n          break;\n        case LF:\n          lfchars.push(LF);\n          i += 1;\n          break;\n        default:\n          lfchars.push(chars[i]);\n          i += 1;\n          break;\n      }\n    }\n    if (lfchars.length > 0 && lfchars[lfchars.length - 1] !== LF) {\n      lfchars.push(LF);\n    }\n    return lfchars;\n  },\n};\n\n// The base 64 algorithms.\nexports.base64 = {\n  encode(buf) {\n    if (buf.length === 0) {\n      return Buffer.alloc(0);\n    }\n    let i;\n    let j;\n    let n;\n    let tail = buf.length % 3;\n    tail = tail > 0 ? 3 - tail : 0;\n    let units = (buf.length + tail) / 3;\n    const base64 = Buffer.alloc(units * 4);\n    if (tail > 0) {\n      units -= 1;\n    }\n    i = 0;\n    j = 0;\n    for (let u = 0; u < units; u += 1) {\n      n = buf[i++] << 16;\n      n += buf[i++] << 8;\n      n += buf[i++];\n      base64[j++] = base64codes[(n >> 18) & mask[6]];\n      base64[j++] = base64codes[(n >> 12) & mask[6]];\n      base64[j++] = base64codes[(n >> 6) & mask[6]];\n      base64[j++] = base64codes[n & mask[6]];\n    }\n    if (tail === 0) {\n      return base64;\n    }\n    if (tail === 1) {\n      n = buf[i++] << 16;\n      n += buf[i] << 8;\n      base64[j++] = base64codes[(n >> 18) & mask[6]];\n      base64[j++] = base64codes[(n >> 12) & mask[6]];\n      base64[j++] = base64codes[(n >> 6) & mask[6]];\n      base64[j] = base64codes[64];\n      return base64;\n    }\n    if (tail === 2) {\n      n = buf[i] << 16;\n      base64[j++] = base64codes[(n >> 18) & mask[6]];\n      base64[j++] = base64codes[(n >> 12) & mask[6]];\n      base64[j++] = base64codes[64];\n      base64[j] = base64codes[64];\n      return base64;\n    }\n    return undefined;\n  },\n  decode(codes) {\n    /* remove white space and ctrl characters, validate & translate characters */\n    function validate(buf) {\n      const chars = [];\n      let tail = 0;\n      for (let i = 0; i < buf.length; i += 1) {\n        const char = buf[i];\n        const TRUE = true;\n        while (TRUE) {\n          if (char === 32 || char === 9 || char === 10 || char === 13) {\n            break;\n          }\n          if (char >= 65 && char <= 90) {\n            chars.push(char - 65);\n            break;\n          }\n          if (char >= 97 && char <= 122) {\n            chars.push(char - 71);\n            break;\n          }\n          if (char >= 48 && char <= 57) {\n            chars.push(char + 4);\n            break;\n          }\n          if (char === 43) {\n            chars.push(62);\n            break;\n          }\n          if (char === 47) {\n            chars.push(63);\n            break;\n          }\n          if (char === 61) {\n            chars.push(64);\n            tail += 1;\n            break;\n          }\n          /* invalid character */\n          throw new RangeError(`base64.decode: invalid character buf[${i}]: ${char}`);\n        }\n      }\n      /* validate length */\n      if (chars.length % 4 > 0) {\n        throw new RangeError(`base64.decode: string length not integral multiple of 4: ${chars.length}`);\n      }\n      /* validate tail */\n      switch (tail) {\n        case 0:\n          break;\n        case 1:\n          if (chars[chars.length - 1] !== 64) {\n            throw new RangeError('base64.decode: one tail character found: not last character');\n          }\n          break;\n        case 2:\n          if (chars[chars.length - 1] !== 64 || chars[chars.length - 2] !== 64) {\n            throw new RangeError('base64.decode: two tail characters found: not last characters');\n          }\n          break;\n        default:\n          throw new RangeError(`base64.decode: more than two tail characters found: ${tail}`);\n      }\n      return { tail, buf: Buffer.from(chars) };\n    }\n\n    if (codes.length === 0) {\n      return Buffer.alloc(0);\n    }\n    const val = validate(codes);\n    const { tail } = val;\n    const base64 = val.buf;\n    let i;\n    let j;\n    let n;\n    let units = base64.length / 4;\n    const buf = Buffer.alloc(units * 3 - tail);\n    if (tail > 0) {\n      units -= 1;\n    }\n    j = 0;\n    i = 0;\n    for (let u = 0; u < units; u += 1) {\n      n = base64[i++] << 18;\n      n += base64[i++] << 12;\n      n += base64[i++] << 6;\n      n += base64[i++];\n      buf[j++] = (n >> 16) & mask[8];\n      buf[j++] = (n >> 8) & mask[8];\n      buf[j++] = n & mask[8];\n    }\n    if (tail === 1) {\n      n = base64[i++] << 18;\n      n += base64[i++] << 12;\n      n += base64[i] << 6;\n      buf[j++] = (n >> 16) & mask[8];\n      buf[j] = (n >> 8) & mask[8];\n    }\n    if (tail === 2) {\n      n = base64[i++] << 18;\n      n += base64[i++] << 12;\n      buf[j] = (n >> 16) & mask[8];\n    }\n    return buf;\n  },\n  // Converts a base 64 Buffer of bytes to a JavaScript string with line breaks.\n  toString(buf) {\n    if (buf.length % 4 > 0) {\n      throw new RangeError(`base64.toString: input buffer length not multiple of 4: ${buf.length}`);\n    }\n    let str = '';\n    let lineLen = 0;\n    function buildLine(c1, c2, c3, c4) {\n      switch (lineLen) {\n        case 76:\n          str += `\\r\\n${c1}${c2}${c3}${c4}`;\n          lineLen = 4;\n          break;\n        case 75:\n          str += `${c1}\\r\\n${c2}${c3}${c4}`;\n          lineLen = 3;\n          break;\n        case 74:\n          str += `${c1 + c2}\\r\\n${c3}${c4}`;\n          lineLen = 2;\n          break;\n        case 73:\n          str += `${c1 + c2 + c3}\\r\\n${c4}`;\n          lineLen = 1;\n          break;\n        default:\n          str += c1 + c2 + c3 + c4;\n          lineLen += 4;\n          break;\n      }\n    }\n    function validate(c) {\n      if (c >= 65 && c <= 90) {\n        return true;\n      }\n      if (c >= 97 && c <= 122) {\n        return true;\n      }\n      if (c >= 48 && c <= 57) {\n        return true;\n      }\n      if (c === 43) {\n        return true;\n      }\n      if (c === 47) {\n        return true;\n      }\n      if (c === 61) {\n        return true;\n      }\n      return false;\n    }\n    for (let i = 0; i < buf.length; i += 4) {\n      for (let j = i; j < i + 4; j += 1) {\n        if (!validate(buf[j])) {\n          throw new RangeError(`base64.toString: buf[${j}]: ${buf[j]} : not valid base64 character code`);\n        }\n      }\n      buildLine(\n        String.fromCharCode(buf[i]),\n        String.fromCharCode(buf[i + 1]),\n        String.fromCharCode(buf[i + 2]),\n        String.fromCharCode(buf[i + 3])\n      );\n    }\n    return str;\n  },\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-conv-api/transformers.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/ast.js":
/*!************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/ast.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint-disable guard-for-in */\n/* eslint-disable no-restricted-syntax */\n/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module is used by the parser to build an [Abstract Syntax Tree](https://en.wikipedia.org/wiki/Abstract_syntax_tree) (AST).\n// The AST can be thought of as a subset of the full parse tree.\n// Each node of the AST holds the phrase that was matched at the corresponding, named parse tree node.\n// It is built as the parser successfully matches phrases to the rule names\n// (`RNM` operators) and `UDT`s as it parses an input string.\n// The user controls which `RNM` or `UDT` names to keep on the AST.\n// The user can also associate callback functions with some or all of the retained\n// AST nodes to be used to translate the node phrases. That is, associate semantic\n// actions to the matched phrases.\n// Translating the AST rather that attempting to apply semantic actions during\n// the parsing process, has the advantage that there is no backtracking and that the phrases\n// are known while traversing down tree as will as up.\n//\n// Let `ast` be an `ast.js` object. To identify a node to be kept on the AST:\n// ```\n// ast.callbacks[\"rulename\"] = true; (all nodes default to false)\n// ```\n// To associate a callback function with a node:\n// ```\n// ast.callbacks[\"rulename\"] = fn\n// ```\n// `rulename` is any `RNM` or `UDT` name defined by the associated grammar\n// and `fn` is a user-written callback function.\n// (See [`apg-examples`](https://github.com/ldthomas/apg-js2-examples/tree/master/ast) for examples of how to create an AST,\n// define the nodes and callback functions and attach it to a parser.)\nmodule.exports = function exportsAst() {\n  const id = __webpack_require__(/*! ./identifiers */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/identifiers.js\");\n  const utils = __webpack_require__(/*! ./utilities */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/utilities.js\");\n\n  const thisFileName = 'ast.js: ';\n  const that = this;\n  let rules = null;\n  let udts = null;\n  let chars = null;\n  let nodeCount = 0;\n  const nodesDefined = [];\n  const nodeCallbacks = [];\n  const stack = [];\n  const records = [];\n  this.callbacks = [];\n  this.astObject = 'astObject';\n  /* called by the parser to initialize the AST with the rules, UDTs and the input characters */\n  this.init = function init(rulesIn, udtsIn, charsIn) {\n    stack.length = 0;\n    records.length = 0;\n    nodesDefined.length = 0;\n    nodeCount = 0;\n    rules = rulesIn;\n    udts = udtsIn;\n    chars = charsIn;\n    let i;\n    const list = [];\n    for (i = 0; i < rules.length; i += 1) {\n      list.push(rules[i].lower);\n    }\n    for (i = 0; i < udts.length; i += 1) {\n      list.push(udts[i].lower);\n    }\n    nodeCount = rules.length + udts.length;\n    for (i = 0; i < nodeCount; i += 1) {\n      nodesDefined[i] = false;\n      nodeCallbacks[i] = null;\n    }\n    for (const index in that.callbacks) {\n      const lower = index.toLowerCase();\n      i = list.indexOf(lower);\n      if (i < 0) {\n        throw new Error(`${thisFileName}init: node '${index}' not a rule or udt name`);\n      }\n      if (typeof that.callbacks[index] === 'function') {\n        nodesDefined[i] = true;\n        nodeCallbacks[i] = that.callbacks[index];\n      }\n      if (that.callbacks[index] === true) {\n        nodesDefined[i] = true;\n      }\n    }\n  };\n  /* AST node definitions - called by the parser's `RNM` operator */\n  this.ruleDefined = function ruleDefined(index) {\n    return nodesDefined[index] !== false;\n  };\n  /* AST node definitions - called by the parser's `UDT` operator */\n  this.udtDefined = function udtDefined(index) {\n    return nodesDefined[rules.length + index] !== false;\n  };\n  /* called by the parser's `RNM` & `UDT` operators */\n  /* builds a record for the downward traversal of the node */\n  this.down = function down(callbackIndex, name) {\n    const thisIndex = records.length;\n    stack.push(thisIndex);\n    records.push({\n      name,\n      thisIndex,\n      thatIndex: null,\n      state: id.SEM_PRE,\n      callbackIndex,\n      phraseIndex: null,\n      phraseLength: null,\n      stack: stack.length,\n    });\n    return thisIndex;\n  };\n  /* called by the parser's `RNM` & `UDT` operators */\n  /* builds a record for the upward traversal of the node */\n  this.up = function up(callbackIndex, name, phraseIndex, phraseLength) {\n    const thisIndex = records.length;\n    const thatIndex = stack.pop();\n    records.push({\n      name,\n      thisIndex,\n      thatIndex,\n      state: id.SEM_POST,\n      callbackIndex,\n      phraseIndex,\n      phraseLength,\n      stack: stack.length,\n    });\n    records[thatIndex].thatIndex = thisIndex;\n    records[thatIndex].phraseIndex = phraseIndex;\n    records[thatIndex].phraseLength = phraseLength;\n    return thisIndex;\n  };\n  // Called by the user to translate the AST.\n  // Translate means to associate or apply some semantic action to the\n  // phrases that were syntactically matched to the AST nodes according\n  // to the defining grammar.\n  // ```\n  // data - optional user-defined data\n  //        passed to the callback functions by the translator\n  // ```\n  this.translate = function translate(data) {\n    let ret;\n    let callback;\n    let record;\n    for (let i = 0; i < records.length; i += 1) {\n      record = records[i];\n      callback = nodeCallbacks[record.callbackIndex];\n      if (record.state === id.SEM_PRE) {\n        if (callback !== null) {\n          ret = callback(id.SEM_PRE, chars, record.phraseIndex, record.phraseLength, data);\n          if (ret === id.SEM_SKIP) {\n            i = record.thatIndex;\n          }\n        }\n      } else if (callback !== null) {\n        callback(id.SEM_POST, chars, record.phraseIndex, record.phraseLength, data);\n      }\n    }\n  };\n  /* called by the parser to reset the length of the records array */\n  /* necessary on backtracking */\n  this.setLength = function setLength(length) {\n    records.length = length;\n    if (length > 0) {\n      stack.length = records[length - 1].stack;\n    } else {\n      stack.length = 0;\n    }\n  };\n  /* called by the parser to get the length of the records array */\n  this.getLength = function getLength() {\n    return records.length;\n  };\n  /* helper for XML display */\n  function indent(n) {\n    let ret = '';\n    for (let i = 0; i < n; i += 1) {\n      ret += ' ';\n    }\n    return ret;\n  }\n  // Generate an `XML` version of the AST.\n  // Useful if you want to use a special or favorite XML parser to translate the\n  // AST.\n  // ```\n  // mode - the display mode of the captured phrases\n  //      - default mode is \"ascii\"\n  //      - can be: \"ascii\"\n  //                \"decimal\"\n  //                \"hexadecimal\"\n  //                \"unicode\"\n  // ```\n  this.toXml = function toSml(modeArg) {\n    let display = utils.charsToDec;\n    let caption = 'decimal integer character codes';\n    if (typeof modeArg === 'string' && modeArg.length >= 3) {\n      const mode = modeArg.slice(0, 3).toLowerCase();\n      if (mode === 'asc') {\n        display = utils.charsToAscii;\n        caption = 'ASCII for printing characters, hex for non-printing';\n      } else if (mode === 'hex') {\n        display = utils.charsToHex;\n        caption = 'hexadecimal integer character codes';\n      } else if (mode === 'uni') {\n        display = utils.charsToUnicode;\n        caption = 'Unicode UTF-32 integer character codes';\n      }\n    }\n    let xml = '';\n    let depth = 0;\n    xml += '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n';\n    xml += `<root nodes=\"${records.length / 2}\" characters=\"${chars.length}\">\\n`;\n    xml += `<!-- input string, ${caption} -->\\n`;\n    xml += indent(depth + 2);\n    xml += display(chars);\n    xml += '\\n';\n    records.forEach((rec) => {\n      if (rec.state === id.SEM_PRE) {\n        depth += 1;\n        xml += indent(depth);\n        xml += `<node name=\"${rec.name}\" index=\"${rec.phraseIndex}\" length=\"${rec.phraseLength}\">\\n`;\n        xml += indent(depth + 2);\n        xml += display(chars, rec.phraseIndex, rec.phraseLength);\n        xml += '\\n';\n      } else {\n        xml += indent(depth);\n        xml += `</node><!-- name=\"${rec.name}\" -->\\n`;\n        depth -= 1;\n      }\n    });\n\n    xml += '</root>\\n';\n    return xml;\n  };\n  /* generate a JavaScript object version of the AST */\n  /* for the phrase-matching engine apg-exp */\n  this.phrases = function phrases() {\n    const obj = {};\n    let i;\n    let record;\n    for (i = 0; i < records.length; i += 1) {\n      record = records[i];\n      if (record.state === id.SEM_PRE) {\n        if (!Array.isArray(obj[record.name])) {\n          obj[record.name] = [];\n        }\n        obj[record.name].push({\n          index: record.phraseIndex,\n          length: record.phraseLength,\n        });\n      }\n    }\n    return obj;\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/ast.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/circular-buffer.js":
/*!************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/circular-buffer.js ***!
  \************************************************************************************************/
/***/ ((module) => {

eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module acts as a \"circular buffer\". It is used to keep track\n// only the last N records in an array of records. If more than N records\n// are saved, each additional record overwrites the previously oldest record.\n// This module deals only with the record indexes and does not save\n// any actual records. It is used by [`trace.js`](./trace.html) for limiting the number of\n// trace records saved.\nmodule.exports = function exportsCircularBuffer() {\n  'use strict;';\n\n  const thisFileName = 'circular-buffer.js: ';\n  let itemIndex = -1;\n  let maxListSize = 0;\n  // Initialize buffer.<br>\n  // *size* is `maxListSize`, the maximum number of records saved before overwriting begins.\n  this.init = function init(size) {\n    if (typeof size !== 'number' || size <= 0) {\n      throw new Error(`${thisFileName}init: circular buffer size must an integer > 0`);\n    }\n    maxListSize = Math.ceil(size);\n    itemIndex = -1;\n  };\n  // Call this to increment the number of records collected.<br>\n  // Returns the array index number to store the next record in.\n  this.increment = function increment() {\n    itemIndex += 1;\n    return (itemIndex + maxListSize) % maxListSize;\n  };\n  // Returns `maxListSize` - the maximum number of records to keep in the buffer.\n  this.maxSize = function maxSize() {\n    return maxListSize;\n  };\n  // Returns the highest number of items saved.<br>\n  // (The number of items is the actual number of records processed\n  // even though only `maxListSize` records are actually retained.)\n  this.items = function items() {\n    return itemIndex + 1;\n  };\n  // Returns the record number associated with this item index.\n  this.getListIndex = function getListIndex(item) {\n    if (itemIndex === -1) {\n      return -1;\n    }\n    if (item < 0 || item > itemIndex) {\n      return -1;\n    }\n    if (itemIndex - item >= maxListSize) {\n      return -1;\n    }\n    return (item + maxListSize) % maxListSize;\n  };\n  // The iterator over the circular buffer.\n  // The user's function, `fn`, will be called with arguments `fn(listIndex, itemIndex)`\n  // where `listIndex` is the saved record index and `itemIndex` is the actual item index.\n  this.forEach = function forEach(fn) {\n    if (itemIndex === -1) {\n      /* no records have been collected */\n      return;\n    }\n    if (itemIndex < maxListSize) {\n      /* fewer than maxListSize records have been collected - number of items = number of records */\n      for (let i = 0; i <= itemIndex; i += 1) {\n        fn(i, i);\n      }\n      return;\n    }\n    /* start with the oldest record saved and finish with the most recent record saved */\n    for (let i = itemIndex - maxListSize + 1; i <= itemIndex; i += 1) {\n      const listIndex = (i + maxListSize) % maxListSize;\n      fn(listIndex, i);\n    }\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FwZy1qc0A0LjIuMS9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctbGliL2NpcmN1bGFyLWJ1ZmZlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYzs7QUFFZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixhQUFhO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGdCQUFnQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLGdCQUFnQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHRva2Vuc3RyZWFtL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vYXBnLWpzQDQuMi4xL25vZGVfbW9kdWxlcy9hcGctanMvc3JjL2FwZy1saWIvY2lyY3VsYXItYnVmZmVyLmpzPzY0YzUiXSwic291cmNlc0NvbnRlbnQiOlsiLyogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgY29weXJpZ2h0OiBDb3B5cmlnaHQgKGMpIDIwMjEgTG93ZWxsIEQuIFRob21hcywgYWxsIHJpZ2h0cyByZXNlcnZlZFxuICogICAgIGxpY2Vuc2U6IEJTRC0yLUNsYXVzZSAoaHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMi1DbGF1c2UpXG4gKiAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuLy8gVGhpcyBtb2R1bGUgYWN0cyBhcyBhIFwiY2lyY3VsYXIgYnVmZmVyXCIuIEl0IGlzIHVzZWQgdG8ga2VlcCB0cmFja1xuLy8gb25seSB0aGUgbGFzdCBOIHJlY29yZHMgaW4gYW4gYXJyYXkgb2YgcmVjb3Jkcy4gSWYgbW9yZSB0aGFuIE4gcmVjb3Jkc1xuLy8gYXJlIHNhdmVkLCBlYWNoIGFkZGl0aW9uYWwgcmVjb3JkIG92ZXJ3cml0ZXMgdGhlIHByZXZpb3VzbHkgb2xkZXN0IHJlY29yZC5cbi8vIFRoaXMgbW9kdWxlIGRlYWxzIG9ubHkgd2l0aCB0aGUgcmVjb3JkIGluZGV4ZXMgYW5kIGRvZXMgbm90IHNhdmVcbi8vIGFueSBhY3R1YWwgcmVjb3Jkcy4gSXQgaXMgdXNlZCBieSBbYHRyYWNlLmpzYF0oLi90cmFjZS5odG1sKSBmb3IgbGltaXRpbmcgdGhlIG51bWJlciBvZlxuLy8gdHJhY2UgcmVjb3JkcyBzYXZlZC5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXhwb3J0c0NpcmN1bGFyQnVmZmVyKCkge1xuICAndXNlIHN0cmljdDsnO1xuXG4gIGNvbnN0IHRoaXNGaWxlTmFtZSA9ICdjaXJjdWxhci1idWZmZXIuanM6ICc7XG4gIGxldCBpdGVtSW5kZXggPSAtMTtcbiAgbGV0IG1heExpc3RTaXplID0gMDtcbiAgLy8gSW5pdGlhbGl6ZSBidWZmZXIuPGJyPlxuICAvLyAqc2l6ZSogaXMgYG1heExpc3RTaXplYCwgdGhlIG1heGltdW0gbnVtYmVyIG9mIHJlY29yZHMgc2F2ZWQgYmVmb3JlIG92ZXJ3cml0aW5nIGJlZ2lucy5cbiAgdGhpcy5pbml0ID0gZnVuY3Rpb24gaW5pdChzaXplKSB7XG4gICAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJyB8fCBzaXplIDw9IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHt0aGlzRmlsZU5hbWV9aW5pdDogY2lyY3VsYXIgYnVmZmVyIHNpemUgbXVzdCBhbiBpbnRlZ2VyID4gMGApO1xuICAgIH1cbiAgICBtYXhMaXN0U2l6ZSA9IE1hdGguY2VpbChzaXplKTtcbiAgICBpdGVtSW5kZXggPSAtMTtcbiAgfTtcbiAgLy8gQ2FsbCB0aGlzIHRvIGluY3JlbWVudCB0aGUgbnVtYmVyIG9mIHJlY29yZHMgY29sbGVjdGVkLjxicj5cbiAgLy8gUmV0dXJucyB0aGUgYXJyYXkgaW5kZXggbnVtYmVyIHRvIHN0b3JlIHRoZSBuZXh0IHJlY29yZCBpbi5cbiAgdGhpcy5pbmNyZW1lbnQgPSBmdW5jdGlvbiBpbmNyZW1lbnQoKSB7XG4gICAgaXRlbUluZGV4ICs9IDE7XG4gICAgcmV0dXJuIChpdGVtSW5kZXggKyBtYXhMaXN0U2l6ZSkgJSBtYXhMaXN0U2l6ZTtcbiAgfTtcbiAgLy8gUmV0dXJucyBgbWF4TGlzdFNpemVgIC0gdGhlIG1heGltdW0gbnVtYmVyIG9mIHJlY29yZHMgdG8ga2VlcCBpbiB0aGUgYnVmZmVyLlxuICB0aGlzLm1heFNpemUgPSBmdW5jdGlvbiBtYXhTaXplKCkge1xuICAgIHJldHVybiBtYXhMaXN0U2l6ZTtcbiAgfTtcbiAgLy8gUmV0dXJucyB0aGUgaGlnaGVzdCBudW1iZXIgb2YgaXRlbXMgc2F2ZWQuPGJyPlxuICAvLyAoVGhlIG51bWJlciBvZiBpdGVtcyBpcyB0aGUgYWN0dWFsIG51bWJlciBvZiByZWNvcmRzIHByb2Nlc3NlZFxuICAvLyBldmVuIHRob3VnaCBvbmx5IGBtYXhMaXN0U2l6ZWAgcmVjb3JkcyBhcmUgYWN0dWFsbHkgcmV0YWluZWQuKVxuICB0aGlzLml0ZW1zID0gZnVuY3Rpb24gaXRlbXMoKSB7XG4gICAgcmV0dXJuIGl0ZW1JbmRleCArIDE7XG4gIH07XG4gIC8vIFJldHVybnMgdGhlIHJlY29yZCBudW1iZXIgYXNzb2NpYXRlZCB3aXRoIHRoaXMgaXRlbSBpbmRleC5cbiAgdGhpcy5nZXRMaXN0SW5kZXggPSBmdW5jdGlvbiBnZXRMaXN0SW5kZXgoaXRlbSkge1xuICAgIGlmIChpdGVtSW5kZXggPT09IC0xKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGlmIChpdGVtIDwgMCB8fCBpdGVtID4gaXRlbUluZGV4KSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGlmIChpdGVtSW5kZXggLSBpdGVtID49IG1heExpc3RTaXplKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIHJldHVybiAoaXRlbSArIG1heExpc3RTaXplKSAlIG1heExpc3RTaXplO1xuICB9O1xuICAvLyBUaGUgaXRlcmF0b3Igb3ZlciB0aGUgY2lyY3VsYXIgYnVmZmVyLlxuICAvLyBUaGUgdXNlcidzIGZ1bmN0aW9uLCBgZm5gLCB3aWxsIGJlIGNhbGxlZCB3aXRoIGFyZ3VtZW50cyBgZm4obGlzdEluZGV4LCBpdGVtSW5kZXgpYFxuICAvLyB3aGVyZSBgbGlzdEluZGV4YCBpcyB0aGUgc2F2ZWQgcmVjb3JkIGluZGV4IGFuZCBgaXRlbUluZGV4YCBpcyB0aGUgYWN0dWFsIGl0ZW0gaW5kZXguXG4gIHRoaXMuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgICBpZiAoaXRlbUluZGV4ID09PSAtMSkge1xuICAgICAgLyogbm8gcmVjb3JkcyBoYXZlIGJlZW4gY29sbGVjdGVkICovXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpdGVtSW5kZXggPCBtYXhMaXN0U2l6ZSkge1xuICAgICAgLyogZmV3ZXIgdGhhbiBtYXhMaXN0U2l6ZSByZWNvcmRzIGhhdmUgYmVlbiBjb2xsZWN0ZWQgLSBudW1iZXIgb2YgaXRlbXMgPSBudW1iZXIgb2YgcmVjb3JkcyAqL1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gaXRlbUluZGV4OyBpICs9IDEpIHtcbiAgICAgICAgZm4oaSwgaSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8qIHN0YXJ0IHdpdGggdGhlIG9sZGVzdCByZWNvcmQgc2F2ZWQgYW5kIGZpbmlzaCB3aXRoIHRoZSBtb3N0IHJlY2VudCByZWNvcmQgc2F2ZWQgKi9cbiAgICBmb3IgKGxldCBpID0gaXRlbUluZGV4IC0gbWF4TGlzdFNpemUgKyAxOyBpIDw9IGl0ZW1JbmRleDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBsaXN0SW5kZXggPSAoaSArIG1heExpc3RTaXplKSAlIG1heExpc3RTaXplO1xuICAgICAgZm4obGlzdEluZGV4LCBpKTtcbiAgICB9XG4gIH07XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/circular-buffer.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/emitcss.js":
/*!****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/emitcss.js ***!
  \****************************************************************************************/
/***/ ((module) => {

eval("// This module has been developed programmatically in the `apg-lib` build process.\n// It is used to build web pages programatically on the fly without the need for <script> or <style> tags.\n\nmodule.exports = function emittcss(){\nreturn '/* This file automatically generated by jsonToless() and LESS. */\\n.apg-mono {\\n  font-family: monospace;\\n}\\n.apg-active {\\n  font-weight: bold;\\n  color: #000000;\\n}\\n.apg-match {\\n  font-weight: bold;\\n  color: #264BFF;\\n}\\n.apg-empty {\\n  font-weight: bold;\\n  color: #0fbd0f;\\n}\\n.apg-nomatch {\\n  font-weight: bold;\\n  color: #FF4000;\\n}\\n.apg-lh-match {\\n  font-weight: bold;\\n  color: #1A97BA;\\n}\\n.apg-lb-match {\\n  font-weight: bold;\\n  color: #5F1687;\\n}\\n.apg-remainder {\\n  font-weight: bold;\\n  color: #999999;\\n}\\n.apg-ctrl-char {\\n  font-weight: bolder;\\n  font-style: italic;\\n  font-size: 0.6em;\\n}\\n.apg-line-end {\\n  font-weight: bold;\\n  color: #000000;\\n}\\n.apg-error {\\n  font-weight: bold;\\n  color: #FF4000;\\n}\\n.apg-phrase {\\n  color: #000000;\\n  background-color: #8caae6;\\n}\\n.apg-empty-phrase {\\n  color: #0fbd0f;\\n}\\ntable.apg-state {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: left;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-state th,\\ntable.apg-state td {\\n  text-align: left;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-state th:nth-last-child(2),\\ntable.apg-state td:nth-last-child(2) {\\n  text-align: right;\\n}\\ntable.apg-state caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-stats {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-stats th,\\ntable.apg-stats td {\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-stats caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-trace {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-trace caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-trace th,\\ntable.apg-trace td {\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-trace th:last-child,\\ntable.apg-trace th:nth-last-child(2),\\ntable.apg-trace td:last-child,\\ntable.apg-trace td:nth-last-child(2) {\\n  text-align: left;\\n}\\ntable.apg-grammar {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-grammar caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-grammar th,\\ntable.apg-grammar td {\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-grammar th:last-child,\\ntable.apg-grammar td:last-child {\\n  text-align: left;\\n}\\ntable.apg-rules {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-rules caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-rules th,\\ntable.apg-rules td {\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-rules a {\\n  color: #003399 !important;\\n}\\ntable.apg-rules a:hover {\\n  color: #8caae6 !important;\\n}\\ntable.apg-attrs {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: center;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-attrs caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-attrs th,\\ntable.apg-attrs td {\\n  text-align: center;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-attrs th:nth-child(1),\\ntable.apg-attrs th:nth-child(2),\\ntable.apg-attrs th:nth-child(3) {\\n  text-align: right;\\n}\\ntable.apg-attrs td:nth-child(1),\\ntable.apg-attrs td:nth-child(2),\\ntable.apg-attrs td:nth-child(3) {\\n  text-align: right;\\n}\\ntable.apg-attrs a {\\n  color: #003399 !important;\\n}\\ntable.apg-attrs a:hover {\\n  color: #8caae6 !important;\\n}\\n';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/emitcss.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/identifiers.js":
/*!********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/identifiers.js ***!
  \********************************************************************************************/
/***/ ((module) => {

eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module exposes a list of named identifiers, shared across the parser generator\n// and the parsers that are generated.\n\nmodule.exports = {\n  // Identifies the operator type. Used by the generator\n  // to indicate operator types in the grammar object.\n  // Used by the [parser](./parser.html) when interpreting the grammar object.\n  /* the original ABNF operators */\n  ALT: 1 /* alternation */,\n  CAT: 2 /* concatenation */,\n  REP: 3 /* repetition */,\n  RNM: 4 /* rule name */,\n  TRG: 5 /* terminal range */,\n  TBS: 6 /* terminal binary string, case sensitive */,\n  TLS: 7 /* terminal literal string, case insensitive */,\n  /* the super set, SABNF operators */\n  UDT: 11 /* user-defined terminal */,\n  AND: 12 /* positive look ahead */,\n  NOT: 13 /* negative look ahead */,\n  BKR: 14 /* back reference to a previously matched rule name */,\n  BKA: 15 /* positive look behind */,\n  BKN: 16 /* negative look behind */,\n  ABG: 17 /* anchor - begin of string */,\n  AEN: 18 /* anchor - end of string */,\n  // Used by the parser and the user's `RNM` and `UDT` callback functions.\n  // Identifies the parser state as it traverses the parse tree nodes.\n  // - *ACTIVE* - indicates the downward direction through the parse tree node.\n  // - *MATCH* - indicates the upward direction and a phrase, of length \\> 0, has been successfully matched\n  // - *EMPTY* - indicates the upward direction and a phrase, of length = 0, has been successfully matched\n  // - *NOMATCH* - indicates the upward direction and the parser failed to match any phrase at all\n  ACTIVE: 100,\n  MATCH: 101,\n  EMPTY: 102,\n  NOMATCH: 103,\n  // Used by [`AST` translator](./ast.html) (semantic analysis) and the user's callback functions\n  // to indicate the direction of flow through the `AST` nodes.\n  // - *SEM_PRE* - indicates the downward (pre-branch) direction through the `AST` node.\n  // - *SEM_POST* - indicates the upward (post-branch) direction through the `AST` node.\n  SEM_PRE: 200,\n  SEM_POST: 201,\n  // Used by the user's callback functions to indicate to the `AST` translator (semantic analysis) how to proceed.\n  // - *SEM_OK* - normal return value\n  // - *SEM_SKIP* - if a callback function returns this value from the SEM_PRE state,\n  // the translator will skip processing all `AST` nodes in the branch below the current node.\n  // Ignored if returned from the SEM_POST state.\n  SEM_OK: 300,\n  SEM_SKIP: 301,\n  // Used in attribute generation to distinguish the necessary attribute categories.\n  // - *ATTR_N* - non-recursive\n  // - *ATTR_R* - recursive\n  // - *ATTR_MR* - belongs to a mutually-recursive set\n  ATTR_N: 400,\n  ATTR_R: 401,\n  ATTR_MR: 402,\n  // Look around values indicate whether the parser is in look ahead or look behind mode.\n  // Used by the tracing facility to indicate the look around mode in the trace records display.\n  // - *LOOKAROUND_NONE* - the parser is in normal parsing mode\n  // - *LOOKAROUND_AHEAD* - the parse is in look-ahead mode, phrase matching for operator `AND(&)` or `NOT(!)`\n  // - *LOOKAROUND_BEHIND* - the parse is in look-behind mode, phrase matching for operator `BKA(&&)` or `BKN(!!)`\n  LOOKAROUND_NONE: 500,\n  LOOKAROUND_AHEAD: 501,\n  LOOKAROUND_BEHIND: 502,\n  // Back reference rule mode indicators\n  // - *BKR_MODE_UM* - the back reference is using universal mode\n  // - *BKR_MODE_PM* - the back reference is using parent frame mode\n  // - *BKR_MODE_CS* - the back reference is using case-sensitive phrase matching\n  // - *BKR_MODE_CI* - the back reference is using case-insensitive phrase matching\n  BKR_MODE_UM: 601,\n  BKR_MODE_PM: 602,\n  BKR_MODE_CS: 603,\n  BKR_MODE_CI: 604,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FwZy1qc0A0LjIuMS9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctbGliL2lkZW50aWZpZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdG9rZW5zdHJlYW0vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9hcGctanNANC4yLjEvbm9kZV9tb2R1bGVzL2FwZy1qcy9zcmMvYXBnLWxpYi9pZGVudGlmaWVycy5qcz81ZWNjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgIGNvcHlyaWdodDogQ29weXJpZ2h0IChjKSAyMDIxIExvd2VsbCBELiBUaG9tYXMsIGFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqICAgICBsaWNlbnNlOiBCU0QtMi1DbGF1c2UgKGh0dHBzOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTItQ2xhdXNlKVxuICogICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cbi8vIFRoaXMgbW9kdWxlIGV4cG9zZXMgYSBsaXN0IG9mIG5hbWVkIGlkZW50aWZpZXJzLCBzaGFyZWQgYWNyb3NzIHRoZSBwYXJzZXIgZ2VuZXJhdG9yXG4vLyBhbmQgdGhlIHBhcnNlcnMgdGhhdCBhcmUgZ2VuZXJhdGVkLlxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gSWRlbnRpZmllcyB0aGUgb3BlcmF0b3IgdHlwZS4gVXNlZCBieSB0aGUgZ2VuZXJhdG9yXG4gIC8vIHRvIGluZGljYXRlIG9wZXJhdG9yIHR5cGVzIGluIHRoZSBncmFtbWFyIG9iamVjdC5cbiAgLy8gVXNlZCBieSB0aGUgW3BhcnNlcl0oLi9wYXJzZXIuaHRtbCkgd2hlbiBpbnRlcnByZXRpbmcgdGhlIGdyYW1tYXIgb2JqZWN0LlxuICAvKiB0aGUgb3JpZ2luYWwgQUJORiBvcGVyYXRvcnMgKi9cbiAgQUxUOiAxIC8qIGFsdGVybmF0aW9uICovLFxuICBDQVQ6IDIgLyogY29uY2F0ZW5hdGlvbiAqLyxcbiAgUkVQOiAzIC8qIHJlcGV0aXRpb24gKi8sXG4gIFJOTTogNCAvKiBydWxlIG5hbWUgKi8sXG4gIFRSRzogNSAvKiB0ZXJtaW5hbCByYW5nZSAqLyxcbiAgVEJTOiA2IC8qIHRlcm1pbmFsIGJpbmFyeSBzdHJpbmcsIGNhc2Ugc2Vuc2l0aXZlICovLFxuICBUTFM6IDcgLyogdGVybWluYWwgbGl0ZXJhbCBzdHJpbmcsIGNhc2UgaW5zZW5zaXRpdmUgKi8sXG4gIC8qIHRoZSBzdXBlciBzZXQsIFNBQk5GIG9wZXJhdG9ycyAqL1xuICBVRFQ6IDExIC8qIHVzZXItZGVmaW5lZCB0ZXJtaW5hbCAqLyxcbiAgQU5EOiAxMiAvKiBwb3NpdGl2ZSBsb29rIGFoZWFkICovLFxuICBOT1Q6IDEzIC8qIG5lZ2F0aXZlIGxvb2sgYWhlYWQgKi8sXG4gIEJLUjogMTQgLyogYmFjayByZWZlcmVuY2UgdG8gYSBwcmV2aW91c2x5IG1hdGNoZWQgcnVsZSBuYW1lICovLFxuICBCS0E6IDE1IC8qIHBvc2l0aXZlIGxvb2sgYmVoaW5kICovLFxuICBCS046IDE2IC8qIG5lZ2F0aXZlIGxvb2sgYmVoaW5kICovLFxuICBBQkc6IDE3IC8qIGFuY2hvciAtIGJlZ2luIG9mIHN0cmluZyAqLyxcbiAgQUVOOiAxOCAvKiBhbmNob3IgLSBlbmQgb2Ygc3RyaW5nICovLFxuICAvLyBVc2VkIGJ5IHRoZSBwYXJzZXIgYW5kIHRoZSB1c2VyJ3MgYFJOTWAgYW5kIGBVRFRgIGNhbGxiYWNrIGZ1bmN0aW9ucy5cbiAgLy8gSWRlbnRpZmllcyB0aGUgcGFyc2VyIHN0YXRlIGFzIGl0IHRyYXZlcnNlcyB0aGUgcGFyc2UgdHJlZSBub2Rlcy5cbiAgLy8gLSAqQUNUSVZFKiAtIGluZGljYXRlcyB0aGUgZG93bndhcmQgZGlyZWN0aW9uIHRocm91Z2ggdGhlIHBhcnNlIHRyZWUgbm9kZS5cbiAgLy8gLSAqTUFUQ0gqIC0gaW5kaWNhdGVzIHRoZSB1cHdhcmQgZGlyZWN0aW9uIGFuZCBhIHBocmFzZSwgb2YgbGVuZ3RoIFxcPiAwLCBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgbWF0Y2hlZFxuICAvLyAtICpFTVBUWSogLSBpbmRpY2F0ZXMgdGhlIHVwd2FyZCBkaXJlY3Rpb24gYW5kIGEgcGhyYXNlLCBvZiBsZW5ndGggPSAwLCBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgbWF0Y2hlZFxuICAvLyAtICpOT01BVENIKiAtIGluZGljYXRlcyB0aGUgdXB3YXJkIGRpcmVjdGlvbiBhbmQgdGhlIHBhcnNlciBmYWlsZWQgdG8gbWF0Y2ggYW55IHBocmFzZSBhdCBhbGxcbiAgQUNUSVZFOiAxMDAsXG4gIE1BVENIOiAxMDEsXG4gIEVNUFRZOiAxMDIsXG4gIE5PTUFUQ0g6IDEwMyxcbiAgLy8gVXNlZCBieSBbYEFTVGAgdHJhbnNsYXRvcl0oLi9hc3QuaHRtbCkgKHNlbWFudGljIGFuYWx5c2lzKSBhbmQgdGhlIHVzZXIncyBjYWxsYmFjayBmdW5jdGlvbnNcbiAgLy8gdG8gaW5kaWNhdGUgdGhlIGRpcmVjdGlvbiBvZiBmbG93IHRocm91Z2ggdGhlIGBBU1RgIG5vZGVzLlxuICAvLyAtICpTRU1fUFJFKiAtIGluZGljYXRlcyB0aGUgZG93bndhcmQgKHByZS1icmFuY2gpIGRpcmVjdGlvbiB0aHJvdWdoIHRoZSBgQVNUYCBub2RlLlxuICAvLyAtICpTRU1fUE9TVCogLSBpbmRpY2F0ZXMgdGhlIHVwd2FyZCAocG9zdC1icmFuY2gpIGRpcmVjdGlvbiB0aHJvdWdoIHRoZSBgQVNUYCBub2RlLlxuICBTRU1fUFJFOiAyMDAsXG4gIFNFTV9QT1NUOiAyMDEsXG4gIC8vIFVzZWQgYnkgdGhlIHVzZXIncyBjYWxsYmFjayBmdW5jdGlvbnMgdG8gaW5kaWNhdGUgdG8gdGhlIGBBU1RgIHRyYW5zbGF0b3IgKHNlbWFudGljIGFuYWx5c2lzKSBob3cgdG8gcHJvY2VlZC5cbiAgLy8gLSAqU0VNX09LKiAtIG5vcm1hbCByZXR1cm4gdmFsdWVcbiAgLy8gLSAqU0VNX1NLSVAqIC0gaWYgYSBjYWxsYmFjayBmdW5jdGlvbiByZXR1cm5zIHRoaXMgdmFsdWUgZnJvbSB0aGUgU0VNX1BSRSBzdGF0ZSxcbiAgLy8gdGhlIHRyYW5zbGF0b3Igd2lsbCBza2lwIHByb2Nlc3NpbmcgYWxsIGBBU1RgIG5vZGVzIGluIHRoZSBicmFuY2ggYmVsb3cgdGhlIGN1cnJlbnQgbm9kZS5cbiAgLy8gSWdub3JlZCBpZiByZXR1cm5lZCBmcm9tIHRoZSBTRU1fUE9TVCBzdGF0ZS5cbiAgU0VNX09LOiAzMDAsXG4gIFNFTV9TS0lQOiAzMDEsXG4gIC8vIFVzZWQgaW4gYXR0cmlidXRlIGdlbmVyYXRpb24gdG8gZGlzdGluZ3Vpc2ggdGhlIG5lY2Vzc2FyeSBhdHRyaWJ1dGUgY2F0ZWdvcmllcy5cbiAgLy8gLSAqQVRUUl9OKiAtIG5vbi1yZWN1cnNpdmVcbiAgLy8gLSAqQVRUUl9SKiAtIHJlY3Vyc2l2ZVxuICAvLyAtICpBVFRSX01SKiAtIGJlbG9uZ3MgdG8gYSBtdXR1YWxseS1yZWN1cnNpdmUgc2V0XG4gIEFUVFJfTjogNDAwLFxuICBBVFRSX1I6IDQwMSxcbiAgQVRUUl9NUjogNDAyLFxuICAvLyBMb29rIGFyb3VuZCB2YWx1ZXMgaW5kaWNhdGUgd2hldGhlciB0aGUgcGFyc2VyIGlzIGluIGxvb2sgYWhlYWQgb3IgbG9vayBiZWhpbmQgbW9kZS5cbiAgLy8gVXNlZCBieSB0aGUgdHJhY2luZyBmYWNpbGl0eSB0byBpbmRpY2F0ZSB0aGUgbG9vayBhcm91bmQgbW9kZSBpbiB0aGUgdHJhY2UgcmVjb3JkcyBkaXNwbGF5LlxuICAvLyAtICpMT09LQVJPVU5EX05PTkUqIC0gdGhlIHBhcnNlciBpcyBpbiBub3JtYWwgcGFyc2luZyBtb2RlXG4gIC8vIC0gKkxPT0tBUk9VTkRfQUhFQUQqIC0gdGhlIHBhcnNlIGlzIGluIGxvb2stYWhlYWQgbW9kZSwgcGhyYXNlIG1hdGNoaW5nIGZvciBvcGVyYXRvciBgQU5EKCYpYCBvciBgTk9UKCEpYFxuICAvLyAtICpMT09LQVJPVU5EX0JFSElORCogLSB0aGUgcGFyc2UgaXMgaW4gbG9vay1iZWhpbmQgbW9kZSwgcGhyYXNlIG1hdGNoaW5nIGZvciBvcGVyYXRvciBgQktBKCYmKWAgb3IgYEJLTighISlgXG4gIExPT0tBUk9VTkRfTk9ORTogNTAwLFxuICBMT09LQVJPVU5EX0FIRUFEOiA1MDEsXG4gIExPT0tBUk9VTkRfQkVISU5EOiA1MDIsXG4gIC8vIEJhY2sgcmVmZXJlbmNlIHJ1bGUgbW9kZSBpbmRpY2F0b3JzXG4gIC8vIC0gKkJLUl9NT0RFX1VNKiAtIHRoZSBiYWNrIHJlZmVyZW5jZSBpcyB1c2luZyB1bml2ZXJzYWwgbW9kZVxuICAvLyAtICpCS1JfTU9ERV9QTSogLSB0aGUgYmFjayByZWZlcmVuY2UgaXMgdXNpbmcgcGFyZW50IGZyYW1lIG1vZGVcbiAgLy8gLSAqQktSX01PREVfQ1MqIC0gdGhlIGJhY2sgcmVmZXJlbmNlIGlzIHVzaW5nIGNhc2Utc2Vuc2l0aXZlIHBocmFzZSBtYXRjaGluZ1xuICAvLyAtICpCS1JfTU9ERV9DSSogLSB0aGUgYmFjayByZWZlcmVuY2UgaXMgdXNpbmcgY2FzZS1pbnNlbnNpdGl2ZSBwaHJhc2UgbWF0Y2hpbmdcbiAgQktSX01PREVfVU06IDYwMSxcbiAgQktSX01PREVfUE06IDYwMixcbiAgQktSX01PREVfQ1M6IDYwMyxcbiAgQktSX01PREVfQ0k6IDYwNCxcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/identifiers.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/node-exports.js":
/*!*********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/node-exports.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module serves to export all library objects and object constructors with the `require(\"apg-lib\")` statement.\n// For example, to create a new parser in your program,\n// ````\n// let apglib = require(\"../apg-lib/node-exports\");\n// let my-parser = new apglib.parser();\n// ````\nmodule.exports = {\n  ast: __webpack_require__(/*! ./ast */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/ast.js\"),\n  circular: __webpack_require__(/*! ./circular-buffer */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/circular-buffer.js\"),\n  ids: __webpack_require__(/*! ./identifiers */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/identifiers.js\"),\n  parser: __webpack_require__(/*! ./parser */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/parser.js\"),\n  stats: __webpack_require__(/*! ./stats */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/stats.js\"),\n  trace: __webpack_require__(/*! ./trace */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/trace.js\"),\n  utils: __webpack_require__(/*! ./utilities */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/utilities.js\"),\n  emitcss: __webpack_require__(/*! ./emitcss */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/emitcss.js\"),\n  style: __webpack_require__(/*! ./style */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/style.js\"),\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FwZy1qc0A0LjIuMS9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctbGliL25vZGUtZXhwb3J0cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxtQkFBTyxDQUFDLGlHQUFPO0FBQ3RCLFlBQVksbUJBQU8sQ0FBQyx5SEFBbUI7QUFDdkMsT0FBTyxtQkFBTyxDQUFDLGlIQUFlO0FBQzlCLFVBQVUsbUJBQU8sQ0FBQyx1R0FBVTtBQUM1QixTQUFTLG1CQUFPLENBQUMscUdBQVM7QUFDMUIsU0FBUyxtQkFBTyxDQUFDLHFHQUFTO0FBQzFCLFNBQVMsbUJBQU8sQ0FBQyw2R0FBYTtBQUM5QixXQUFXLG1CQUFPLENBQUMseUdBQVc7QUFDOUIsU0FBUyxtQkFBTyxDQUFDLHFHQUFTO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHRva2Vuc3RyZWFtL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vYXBnLWpzQDQuMi4xL25vZGVfbW9kdWxlcy9hcGctanMvc3JjL2FwZy1saWIvbm9kZS1leHBvcnRzLmpzPzA5ZGMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgY29weXJpZ2h0OiBDb3B5cmlnaHQgKGMpIDIwMjEgTG93ZWxsIEQuIFRob21hcywgYWxsIHJpZ2h0cyByZXNlcnZlZFxuICogICAgIGxpY2Vuc2U6IEJTRC0yLUNsYXVzZSAoaHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMi1DbGF1c2UpXG4gKiAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuLy8gVGhpcyBtb2R1bGUgc2VydmVzIHRvIGV4cG9ydCBhbGwgbGlicmFyeSBvYmplY3RzIGFuZCBvYmplY3QgY29uc3RydWN0b3JzIHdpdGggdGhlIGByZXF1aXJlKFwiYXBnLWxpYlwiKWAgc3RhdGVtZW50LlxuLy8gRm9yIGV4YW1wbGUsIHRvIGNyZWF0ZSBhIG5ldyBwYXJzZXIgaW4geW91ciBwcm9ncmFtLFxuLy8gYGBgYFxuLy8gbGV0IGFwZ2xpYiA9IHJlcXVpcmUoXCIuLi9hcGctbGliL25vZGUtZXhwb3J0c1wiKTtcbi8vIGxldCBteS1wYXJzZXIgPSBuZXcgYXBnbGliLnBhcnNlcigpO1xuLy8gYGBgYFxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFzdDogcmVxdWlyZSgnLi9hc3QnKSxcbiAgY2lyY3VsYXI6IHJlcXVpcmUoJy4vY2lyY3VsYXItYnVmZmVyJyksXG4gIGlkczogcmVxdWlyZSgnLi9pZGVudGlmaWVycycpLFxuICBwYXJzZXI6IHJlcXVpcmUoJy4vcGFyc2VyJyksXG4gIHN0YXRzOiByZXF1aXJlKCcuL3N0YXRzJyksXG4gIHRyYWNlOiByZXF1aXJlKCcuL3RyYWNlJyksXG4gIHV0aWxzOiByZXF1aXJlKCcuL3V0aWxpdGllcycpLFxuICBlbWl0Y3NzOiByZXF1aXJlKCcuL2VtaXRjc3MnKSxcbiAgc3R5bGU6IHJlcXVpcmUoJy4vc3R5bGUnKSxcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/node-exports.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/parser.js":
/*!***************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/parser.js ***!
  \***************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable new-cap */\n/* eslint-disable guard-for-in */\n/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This is the primary object of `apg-lib`. Calling its `parse()` member function\n// walks the parse tree of opcodes, matching phrases from the input string as it goes.\n// The working code for all of the operators, `ALT`, `CAT`, etc. is in this module.\nmodule.exports = function parser() {\n  const id = __webpack_require__(/*! ./identifiers */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/identifiers.js\");\n  const utils = __webpack_require__(/*! ./utilities */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/utilities.js\");\n\n  const thisFileName = 'parser.js: ';\n  const thisThis = this;\n  let opExecute;\n  this.ast = null;\n  this.stats = null;\n  this.trace = null;\n  this.callbacks = [];\n  let opcodes = null;\n  let chars = null;\n  let charsBegin;\n  let charsLength;\n  let charsEnd;\n  let lookAround;\n  let treeDepth = 0;\n  let maxTreeDepth = 0;\n  let nodeHits = 0;\n  let ruleCallbacks = null;\n  let udtCallbacks = null;\n  let rules = null;\n  let udts = null;\n  let syntaxData = null;\n  let maxMatched = 0;\n  let limitTreeDepth = Infinity;\n  let limitNodeHits = Infinity;\n  // Evaluates any given rule. This can be called from the syntax callback\n  // functions to evaluate any rule in the grammar's rule list. Great caution\n  // should be used. Use of this function will alter the language that the\n  // parser accepts.\n  const evaluateRule = function evaluateRule(ruleIndex, phraseIndex, sysData) {\n    const functionName = `${thisFileName}evaluateRule(): `;\n    if (ruleIndex >= rules.length) {\n      throw new Error(`${functionName}rule index: ${ruleIndex} out of range`);\n    }\n    if (phraseIndex >= charsEnd) {\n      throw new Error(`${functionName}phrase index: ${phraseIndex} out of range`);\n    }\n    const { length } = opcodes;\n    opcodes.push({\n      type: id.RNM,\n      index: ruleIndex,\n    });\n    opExecute(length, phraseIndex, sysData);\n    opcodes.pop();\n  };\n  // Evaluates any given UDT. This can be called from the syntax callback\n  // functions to evaluate any UDT in the grammar's UDT list. Great caution\n  // should be used. Use of this function will alter the language that the\n  // parser accepts.\n  const evaluateUdt = function (udtIndex, phraseIndex, sysData) {\n    const functionName = `${thisFileName}evaluateUdt(): `;\n    if (udtIndex >= udts.length) {\n      throw new Error(`${functionName}udt index: ${udtIndex} out of range`);\n    }\n    if (phraseIndex >= charsEnd) {\n      throw new Error(`${functionName}phrase index: ${phraseIndex} out of range`);\n    }\n    const { length } = opcodes;\n    opcodes.push({\n      type: id.UDT,\n      empty: udts[udtIndex].empty,\n      index: udtIndex,\n    });\n    opExecute(length, phraseIndex, sysData);\n    opcodes.pop();\n  };\n  /* Clears this object of any/all data that has been initialized or added to it. */\n  /* Called by parse() on initialization, allowing this object to be re-used for multiple parsing calls. */\n  const clear = function () {\n    treeDepth = 0;\n    maxTreeDepth = 0;\n    nodeHits = 0;\n    maxMatched = 0;\n    lookAround = [\n      {\n        lookAround: id.LOOKAROUND_NONE,\n        anchor: 0,\n        charsEnd: 0,\n        charsLength: 0,\n      },\n    ];\n    rules = null;\n    udts = null;\n    chars = null;\n    charsBegin = 0;\n    charsLength = 0;\n    charsEnd = 0;\n    ruleCallbacks = null;\n    udtCallbacks = null;\n    syntaxData = null;\n    opcodes = null;\n  };\n  /* object for maintaining a stack of back reference frames */\n  const backRef = function () {\n    const stack = [];\n    const init = function () {\n      const obj = {};\n      rules.forEach((rule) => {\n        if (rule.isBkr) {\n          obj[rule.lower] = null;\n        }\n      });\n      if (udts.length > 0) {\n        udts.forEach((udt) => {\n          if (udt.isBkr) {\n            obj[udt.lower] = null;\n          }\n        });\n      }\n      stack.push(obj);\n    };\n    const copy = function () {\n      const top = stack[stack.length - 1];\n      const obj = {};\n      /* // eslint-disable-next-line no-restricted-syntax */\n      for (const name in top) {\n        obj[name] = top[name];\n      }\n      return obj;\n    };\n    this.push = function push() {\n      stack.push(copy());\n    };\n    this.pop = function pop(lengthArg) {\n      let length = lengthArg;\n      if (!length) {\n        length = stack.length - 1;\n      }\n      if (length < 1 || length > stack.length) {\n        throw new Error(`${thisFileName}backRef.pop(): bad length: ${length}`);\n      }\n      stack.length = length;\n      return stack[stack.length - 1];\n    };\n    this.length = function length() {\n      return stack.length;\n    };\n    this.savePhrase = function savePhrase(name, index, length) {\n      stack[stack.length - 1][name] = {\n        phraseIndex: index,\n        phraseLength: length,\n      };\n    };\n    this.getPhrase = function (name) {\n      return stack[stack.length - 1][name];\n    };\n    /* constructor */\n    init();\n  };\n  // The system data structure that relays system information to and from the rule and UDT callback functions.\n  // - *state* - the state of the parser, ACTIVE, MATCH, EMPTY or NOMATCH (see the `identifiers` object in\n  // [`apg-lib`](https://github.com/ldthomas/apg-js2-lib))\n  // - *phraseLength* - the number of characters matched if the state is MATCHED or EMPTY\n  // - *lookaround* - the top of the stack holds the current look around state,\n  // LOOKAROUND_NONE, LOOKAROUND_AHEAD or LOOKAROUND_BEHIND,\n  // - *uFrame* - the \"universal\" back reference frame.\n  // Holds the last matched phrase for each of the back referenced rules and UDTs.\n  // - *pFrame* - the stack of \"parent\" back reference frames.\n  // Holds the matched phrase from the parent frame of each back referenced rules and UDTs.\n  // - *evaluateRule* - a reference to this object's `evaluateRule()` function.\n  // Can be called from a callback function (use with extreme caution!)\n  // - *evaluateUdt* - a reference to this object's `evaluateUdt()` function.\n  // Can be called from a callback function (use with extreme caution!)\n  const systemData = function systemData() {\n    const thisData = this;\n    this.state = id.ACTIVE;\n    this.phraseLength = 0;\n    this.ruleIndex = 0;\n    this.udtIndex = 0;\n    this.lookAround = lookAround[lookAround.length - 1];\n    this.uFrame = new backRef();\n    this.pFrame = new backRef();\n    this.evaluateRule = evaluateRule;\n    this.evaluateUdt = evaluateUdt;\n    /* refresh the parser state for the next operation */\n    this.refresh = function refresh() {\n      thisData.state = id.ACTIVE;\n      thisData.phraseLength = 0;\n      thisData.lookAround = lookAround[lookAround.length - 1];\n    };\n  };\n  /* some look around helper functions */\n  const lookAroundValue = function lookAroundValue() {\n    return lookAround[lookAround.length - 1];\n  };\n  /* return true if parser is in look around (ahead or behind) state */\n  const inLookAround = function inLookAround() {\n    return lookAround.length > 1;\n  };\n  /* return true if parser is in look behind state */\n  const inLookBehind = function () {\n    return lookAround[lookAround.length - 1].lookAround === id.LOOKAROUND_BEHIND;\n  };\n  /* called by parse() to initialize the AST object, if one has been defined */\n  const initializeAst = function () {\n    const functionName = `${thisFileName}initializeAst(): `;\n    const TRUE = true;\n    while (TRUE) {\n      if (thisThis.ast === undefined) {\n        thisThis.ast = null;\n        break;\n      }\n      if (thisThis.ast === null) {\n        break;\n      }\n      if (thisThis.ast.astObject !== 'astObject') {\n        throw new Error(`${functionName}ast object not recognized`);\n      }\n      break;\n    }\n    if (thisThis.ast !== null) {\n      thisThis.ast.init(rules, udts, chars);\n    }\n  };\n  /* called by parse() to initialize the trace object, if one has been defined */\n  const initializeTrace = function () {\n    const functionName = `${thisFileName}initializeTrace(): `;\n    const TRUE = true;\n    while (TRUE) {\n      if (thisThis.trace === undefined) {\n        thisThis.trace = null;\n        break;\n      }\n      if (thisThis.trace === null) {\n        break;\n      }\n      if (thisThis.trace.traceObject !== 'traceObject') {\n        throw new Error(`${functionName}trace object not recognized`);\n      }\n      break;\n    }\n    if (thisThis.trace !== null) {\n      thisThis.trace.init(rules, udts, chars);\n    }\n  };\n  /* called by parse() to initialize the statistics object, if one has been defined */\n  const initializeStats = function () {\n    const functionName = `${thisFileName}initializeStats(): `;\n    const TRUE = true;\n    while (TRUE) {\n      if (thisThis.stats === undefined) {\n        thisThis.stats = null;\n        break;\n      }\n      if (thisThis.stats === null) {\n        break;\n      }\n      if (thisThis.stats.statsObject !== 'statsObject') {\n        throw new Error(`${functionName}stats object not recognized`);\n      }\n      break;\n    }\n    if (thisThis.stats !== null) {\n      thisThis.stats.init(rules, udts);\n    }\n  };\n  /* called by parse() to initialize the rules & udts from the grammar object */\n  /* (the grammar object generated previously by apg) */\n  const initializeGrammar = function (grammar) {\n    const functionName = `${thisFileName}initializeGrammar(): `;\n    if (!grammar) {\n      throw new Error(`${functionName}grammar object undefined`);\n    }\n    if (grammar.grammarObject !== 'grammarObject') {\n      throw new Error(`${functionName}bad grammar object`);\n    }\n    rules = grammar.rules;\n    udts = grammar.udts;\n  };\n  /* called by parse() to initialize the start rule */\n  const initializeStartRule = function (startRule) {\n    const functionName = `${thisFileName}initializeStartRule(): `;\n    let start = null;\n    if (typeof startRule === 'number') {\n      if (startRule >= rules.length) {\n        throw new Error(`${functionName}start rule index too large: max: ${rules.length}: index: ${startRule}`);\n      }\n      start = startRule;\n    } else if (typeof startRule === 'string') {\n      const lower = startRule.toLowerCase();\n      for (let i = 0; i < rules.length; i += 1) {\n        if (lower === rules[i].lower) {\n          start = rules[i].index;\n          break;\n        }\n      }\n      if (start === null) {\n        throw new Error(`${functionName}start rule name '${startRule}' not recognized`);\n      }\n    } else {\n      throw new Error(`${functionName}type of start rule '${typeof startRule}' not recognized`);\n    }\n    return start;\n  };\n  /* called by parse() to initialize the array of characters codes representing the input string */\n  const initializeInputChars = function initializeInputChars(inputArg, begArg, lenArg) {\n    const functionName = `${thisFileName}initializeInputChars(): `;\n    /* varify and normalize input */\n    let input = inputArg;\n    let beg = begArg;\n    let len = lenArg;\n    if (input === undefined) {\n      throw new Error(`${functionName}input string is undefined`);\n    }\n    if (input === null) {\n      throw new Error(`${functionName}input string is null`);\n    }\n    if (typeof input === 'string') {\n      input = utils.stringToChars(input);\n    } else if (!Array.isArray(input)) {\n      throw new Error(`${functionName}input string is not a string or array`);\n    }\n    if (input.length > 0) {\n      if (typeof input[0] !== 'number') {\n        throw new Error(`${functionName}input string not an array of integers`);\n      }\n    }\n    /* verify and normalize beginning index */\n    if (typeof beg !== 'number') {\n      beg = 0;\n    } else {\n      beg = Math.floor(beg);\n      if (beg < 0 || beg > input.length) {\n        throw new Error(`${functionName}input beginning index out of range: ${beg}`);\n      }\n    }\n    /* verify and normalize input length */\n    if (typeof len !== 'number') {\n      len = input.length - beg;\n    } else {\n      len = Math.floor(len);\n      if (len < 0 || len > input.length - beg) {\n        throw new Error(`${functionName}input length out of range: ${len}`);\n      }\n    }\n    chars = input;\n    charsBegin = beg;\n    charsLength = len;\n    charsEnd = charsBegin + charsLength;\n  };\n  /* called by parse() to initialize the user-written, syntax callback functions, if any */\n  const initializeCallbacks = function () {\n    const functionName = `${thisFileName}initializeCallbacks(): `;\n    let i;\n    ruleCallbacks = [];\n    udtCallbacks = [];\n    for (i = 0; i < rules.length; i += 1) {\n      ruleCallbacks[i] = null;\n    }\n    for (i = 0; i < udts.length; i += 1) {\n      udtCallbacks[i] = null;\n    }\n    let func;\n    const list = [];\n    for (i = 0; i < rules.length; i += 1) {\n      list.push(rules[i].lower);\n    }\n    for (i = 0; i < udts.length; i += 1) {\n      list.push(udts[i].lower);\n    }\n    for (const index in thisThis.callbacks) {\n      i = list.indexOf(index.toLowerCase());\n      if (i < 0) {\n        throw new Error(`${functionName}syntax callback '${index}' not a rule or udt name`);\n      }\n      func = thisThis.callbacks[index];\n      if (!func) {\n        func = null;\n      }\n      if (typeof func === 'function' || func === null) {\n        if (i < rules.length) {\n          ruleCallbacks[i] = func;\n        } else {\n          udtCallbacks[i - rules.length] = func;\n        }\n      } else {\n        throw new Error(\n          `${functionName}syntax callback[${index}] must be function reference or 'false' (false/null/undefined/etc.)`\n        );\n      }\n    }\n    /* make sure all udts have been defined - the parser can't work without them */\n    for (i = 0; i < udts.length; i += 1) {\n      if (udtCallbacks[i] === null) {\n        throw new Error(\n          `${functionName}all UDT callbacks must be defined. UDT callback[${udts[i].lower}] not a function reference`\n        );\n      }\n    }\n  };\n  // Set the maximum parse tree depth allowed. The default is `Infinity`.\n  // A limit is not normally needed, but can be used to protect against an\n  // exponentual or \"catastrophically backtracking\" grammar.\n  // <ul>\n  // <li>\n  // depth - max allowed parse tree depth. An exception is thrown if exceeded.\n  // </li>\n  // </ul>\n  this.setMaxTreeDepth = function (depth) {\n    if (typeof depth !== 'number') {\n      throw new Error(`parser: max tree depth must be integer > 0: ${depth}`);\n    }\n    limitTreeDepth = Math.floor(depth);\n    if (limitTreeDepth <= 0) {\n      throw new Error(`parser: max tree depth must be integer > 0: ${depth}`);\n    }\n  };\n  // Set the maximum number of node hits (parser unit steps or opcode function calls) allowed.\n  // The default is `Infinity`.\n  // A limit is not normally needed, but can be used to protect against an\n  // exponentual or \"catastrophically backtracking\" grammar.\n  // <ul>\n  // <li>\n  // hits - maximum number of node hits or parser unit steps allowed.\n  // An exception thrown if exceeded.\n  // </li>\n  // </ul>\n  this.setMaxNodeHits = function (hits) {\n    if (typeof hits !== 'number') {\n      throw new Error(`parser: max node hits must be integer > 0: ${hits}`);\n    }\n    limitNodeHits = Math.floor(hits);\n    if (limitNodeHits <= 0) {\n      throw new Error(`parser: max node hits must be integer > 0: ${hits}`);\n    }\n  };\n  /* the main parser function */\n  const privateParse = function (grammar, startRuleArg, callbackData) {\n    let success;\n    const functionName = `${thisFileName}parse(): `;\n    initializeGrammar(grammar);\n    const startRule = initializeStartRule(startRuleArg);\n    initializeCallbacks();\n    initializeTrace();\n    initializeStats();\n    initializeAst();\n    const sysData = new systemData();\n    if (!(callbackData === undefined || callbackData === null)) {\n      syntaxData = callbackData;\n    }\n    /* create a dummy opcode for the start rule */\n    opcodes = [\n      {\n        type: id.RNM,\n        index: startRule,\n      },\n    ];\n    /* execute the start rule */\n    opExecute(0, charsBegin, sysData);\n    opcodes = null;\n    /* test and return the sysData */\n    switch (sysData.state) {\n      case id.ACTIVE:\n        throw new Error(`${functionName}final state should never be 'ACTIVE'`);\n      case id.NOMATCH:\n        success = false;\n        break;\n      case id.EMPTY:\n      case id.MATCH:\n        if (sysData.phraseLength === charsLength) {\n          success = true;\n        } else {\n          success = false;\n        }\n        break;\n      default:\n        throw new Error('unrecognized state');\n    }\n    return {\n      success,\n      state: sysData.state,\n      length: charsLength,\n      matched: sysData.phraseLength,\n      maxMatched,\n      maxTreeDepth,\n      nodeHits,\n      inputLength: chars.length,\n      subBegin: charsBegin,\n      subEnd: charsEnd,\n      subLength: charsLength,\n    };\n  };\n\n  // This form allows parsing of a sub-string of the full input string.\n  // <ul>\n  // <li>*inputIndex* - index of the first character in the sub-string</li>\n  // <li>*inputLength* - length of the sub-string</li>\n  // </ul>\n  // All other parameters as for the above function `parse()`.\n  this.parseSubstring = function parseSubstring(grammar, startRule, inputChars, inputIndex, inputLength, callbackData) {\n    clear();\n    initializeInputChars(inputChars, inputIndex, inputLength);\n    return privateParse(grammar, startRule, callbackData);\n  };\n  // This is the main function, called to parse an input string.\n  // <ul>\n  // <li>*grammar* - an instantiated grammar object - the output of `apg` for a\n  // specific SABNF grammar</li>\n  // <li>*startRule* - the rule name or rule index to be used as the root of the\n  // parse tree. This is usually the first rule, index = 0, of the grammar\n  // but can be any rule defined in the above grammar object.</li>\n  // <li>*inputChars* - the input string. Can be a string or an array of integer character codes representing the\n  // string.</li>\n  // <li>*callbackData* - user-defined data object to be passed to the user's\n  // callback functions.\n  // This is not used by the parser in any way, merely passed on to the user.\n  // May be `null` or omitted.</li>\n  // </ul>\n  this.parse = function parse(grammar, startRule, inputChars, callbackData) {\n    clear();\n    initializeInputChars(inputChars, 0, inputChars.length);\n    return privateParse(grammar, startRule, callbackData);\n  };\n  // The `ALT` operator.<br>\n  // Executes its child nodes, from left to right, until it finds a match.\n  // Fails if *all* of its child nodes fail.\n  const opALT = function (opIndex, phraseIndex, sysData) {\n    const op = opcodes[opIndex];\n    for (let i = 0; i < op.children.length; i += 1) {\n      opExecute(op.children[i], phraseIndex, sysData);\n      if (sysData.state !== id.NOMATCH) {\n        break;\n      }\n    }\n  };\n  // The `CAT` operator.<br>\n  // Executes all of its child nodes, from left to right,\n  // concatenating the matched phrases.\n  // Fails if *any* child nodes fail.\n  const opCAT = function (opIndex, phraseIndex, sysData) {\n    let success;\n    let astLength;\n    let catCharIndex;\n    let catPhrase;\n    const op = opcodes[opIndex];\n    const ulen = sysData.uFrame.length();\n    const plen = sysData.pFrame.length();\n    if (thisThis.ast) {\n      astLength = thisThis.ast.getLength();\n    }\n    success = true;\n    catCharIndex = phraseIndex;\n    catPhrase = 0;\n    for (let i = 0; i < op.children.length; i += 1) {\n      opExecute(op.children[i], catCharIndex, sysData);\n      if (sysData.state === id.NOMATCH) {\n        success = false;\n        break;\n      } else {\n        catCharIndex += sysData.phraseLength;\n        catPhrase += sysData.phraseLength;\n      }\n    }\n    if (success) {\n      sysData.state = catPhrase === 0 ? id.EMPTY : id.MATCH;\n      sysData.phraseLength = catPhrase;\n    } else {\n      sysData.state = id.NOMATCH;\n      sysData.phraseLength = 0;\n      /* reset the back referencing frames on failure */\n      sysData.uFrame.pop(ulen);\n      sysData.pFrame.pop(plen);\n      if (thisThis.ast) {\n        thisThis.ast.setLength(astLength);\n      }\n    }\n  };\n  // The `REP` operator.<br>\n  // Repeatedly executes its single child node,\n  // concatenating each of the matched phrases found.\n  // The number of repetitions executed and its final sysData depends\n  // on its `min` & `max` repetition values.\n  const opREP = function (opIndex, phraseIndex, sysData) {\n    let astLength;\n    let repCharIndex;\n    let repPhrase;\n    let repCount;\n    const op = opcodes[opIndex];\n    if (op.max === 0) {\n      // this is an empty-string acceptor\n      // deprecated: use the TLS empty string operator, \"\", instead\n      sysData.state = id.EMPTY;\n      sysData.phraseLength = 0;\n      return;\n    }\n    repCharIndex = phraseIndex;\n    repPhrase = 0;\n    repCount = 0;\n    const ulen = sysData.uFrame.length();\n    const plen = sysData.pFrame.length();\n    if (thisThis.ast) {\n      astLength = thisThis.ast.getLength();\n    }\n    const TRUE = true;\n    while (TRUE) {\n      if (repCharIndex >= charsEnd) {\n        /* exit on end of input string */\n        break;\n      }\n      opExecute(opIndex + 1, repCharIndex, sysData);\n      if (sysData.state === id.NOMATCH) {\n        /* always end if the child node fails */\n        break;\n      }\n      if (sysData.state === id.EMPTY) {\n        /* REP always succeeds when the child node returns an empty phrase */\n        /* this may not seem obvious, but that's the way it works out */\n        break;\n      }\n      repCount += 1;\n      repPhrase += sysData.phraseLength;\n      repCharIndex += sysData.phraseLength;\n      if (repCount === op.max) {\n        /* end on maxed out reps */\n        break;\n      }\n    }\n    /* evaluate the match count according to the min, max values */\n    if (sysData.state === id.EMPTY) {\n      sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;\n      sysData.phraseLength = repPhrase;\n    } else if (repCount >= op.min) {\n      sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;\n      sysData.phraseLength = repPhrase;\n    } else {\n      sysData.state = id.NOMATCH;\n      sysData.phraseLength = 0;\n      /* reset the back referencing frames on failure */\n      sysData.uFrame.pop(ulen);\n      sysData.pFrame.pop(plen);\n      if (thisThis.ast) {\n        thisThis.ast.setLength(astLength);\n      }\n    }\n  };\n  // Validate the callback function's returned sysData values.\n  // It's the user's responsibility to get them right\n  // but `RNM` fails if not.\n  const validateRnmCallbackResult = function (rule, sysData, charsLeft, down) {\n    if (sysData.phraseLength > charsLeft) {\n      let str = `${thisFileName}opRNM(${rule.name}): callback function error: `;\n      str += `sysData.phraseLength: ${sysData.phraseLength}`;\n      str += ` must be <= remaining chars: ${charsLeft}`;\n      throw new Error(str);\n    }\n    switch (sysData.state) {\n      case id.ACTIVE:\n        if (down !== true) {\n          throw new Error(\n            `${thisFileName}opRNM(${rule.name}): callback function return error. ACTIVE state not allowed.`\n          );\n        }\n        break;\n      case id.EMPTY:\n        sysData.phraseLength = 0;\n        break;\n      case id.MATCH:\n        if (sysData.phraseLength === 0) {\n          sysData.state = id.EMPTY;\n        }\n        break;\n      case id.NOMATCH:\n        sysData.phraseLength = 0;\n        break;\n      default:\n        throw new Error(\n          `${thisFileName}opRNM(${rule.name}): callback function return error. Unrecognized return state: ${sysData.state}`\n        );\n    }\n  };\n  // The `RNM` operator.<br>\n  // This operator will acts as a root node for a parse tree branch below and\n  // returns the matched phrase to its parent.\n  // However, its larger responsibility is handling user-defined callback functions, back references and `AST` nodes.\n  // Note that the `AST` is a separate object, but `RNM` calls its functions to create its nodes.\n  // See [`ast.js`](./ast.html) for usage.\n  const opRNM = function (opIndex, phraseIndex, sysData) {\n    let astLength;\n    let astDefined;\n    let savedOpcodes;\n    let ulen;\n    let plen;\n    let saveFrame;\n    const op = opcodes[opIndex];\n    const rule = rules[op.index];\n    const callback = ruleCallbacks[rule.index];\n    const notLookAround = !inLookAround();\n    /* ignore AST and back references in lookaround */\n    if (notLookAround) {\n      /* begin AST and back references */\n      astDefined = thisThis.ast && thisThis.ast.ruleDefined(op.index);\n      if (astDefined) {\n        astLength = thisThis.ast.getLength();\n        thisThis.ast.down(op.index, rules[op.index].name);\n      }\n      ulen = sysData.uFrame.length();\n      plen = sysData.pFrame.length();\n      sysData.uFrame.push();\n      sysData.pFrame.push();\n      saveFrame = sysData.pFrame;\n      sysData.pFrame = new backRef();\n    }\n    if (callback === null) {\n      /* no callback - just execute the rule */\n      savedOpcodes = opcodes;\n      opcodes = rule.opcodes;\n      opExecute(0, phraseIndex, sysData);\n      opcodes = savedOpcodes;\n    } else {\n      /* call user's callback */\n      const charsLeft = charsEnd - phraseIndex;\n      sysData.ruleIndex = rule.index;\n      callback(sysData, chars, phraseIndex, syntaxData);\n      validateRnmCallbackResult(rule, sysData, charsLeft, true);\n      if (sysData.state === id.ACTIVE) {\n        savedOpcodes = opcodes;\n        opcodes = rule.opcodes;\n        opExecute(0, phraseIndex, sysData);\n        opcodes = savedOpcodes;\n        sysData.ruleIndex = rule.index;\n        callback(sysData, chars, phraseIndex, syntaxData);\n        validateRnmCallbackResult(rule, sysData, charsLeft, false);\n      } /* implied else clause: just accept the callback sysData - RNM acting as UDT */\n    }\n    if (notLookAround) {\n      /* end AST */\n      if (astDefined) {\n        if (sysData.state === id.NOMATCH) {\n          thisThis.ast.setLength(astLength);\n        } else {\n          thisThis.ast.up(op.index, rule.name, phraseIndex, sysData.phraseLength);\n        }\n      }\n      /* end back reference */\n      sysData.pFrame = saveFrame;\n      if (sysData.state === id.NOMATCH) {\n        sysData.uFrame.pop(ulen);\n        sysData.pFrame.pop(plen);\n      } else if (rule.isBkr) {\n        /* save phrase on both the parent and universal frames */\n        /* BKR operator will decide which to use later */\n        sysData.pFrame.savePhrase(rule.lower, phraseIndex, sysData.phraseLength);\n        sysData.uFrame.savePhrase(rule.lower, phraseIndex, sysData.phraseLength);\n      }\n    }\n  };\n  // Validate the callback function's returned sysData values.\n  // It's the user's responsibility to get it right but `UDT` fails if not.\n  const validateUdtCallbackResult = function (udt, sysData, charsLeft) {\n    if (sysData.phraseLength > charsLeft) {\n      let str = `${thisFileName}opUDT(${udt.name}): callback function error: `;\n      str += `sysData.phraseLength: ${sysData.phraseLength}`;\n      str += ` must be <= remaining chars: ${charsLeft}`;\n      throw new Error(str);\n    }\n    switch (sysData.state) {\n      case id.ACTIVE:\n        throw new Error(`${thisFileName}opUDT(${udt.name}): callback function return error. ACTIVE state not allowed.`);\n      case id.EMPTY:\n        if (udt.empty === false) {\n          throw new Error(`${thisFileName}opUDT(${udt.name}): callback function return error. May not return EMPTY.`);\n        } else {\n          sysData.phraseLength = 0;\n        }\n        break;\n      case id.MATCH:\n        if (sysData.phraseLength === 0) {\n          if (udt.empty === false) {\n            throw new Error(`${thisFileName}opUDT(${udt.name}): callback function return error. May not return EMPTY.`);\n          } else {\n            sysData.state = id.EMPTY;\n          }\n        }\n        break;\n      case id.NOMATCH:\n        sysData.phraseLength = 0;\n        break;\n      default:\n        throw new Error(\n          `${thisFileName}opUDT(${udt.name}): callback function return error. Unrecognized return state: ${sysData.state}`\n        );\n    }\n  };\n  // The `UDT` operator.<br>\n  // Simply calls the user's callback function, but operates like `RNM` with regard to the `AST`\n  // and back referencing.\n  // There is some ambiguity here. `UDT`s act as terminals for phrase recognition but as named rules\n  // for `AST` nodes and back referencing.\n  // See [`ast.js`](./ast.html) for usage.\n  const opUDT = function (opIndex, phraseIndex, sysData) {\n    let astLength;\n    let astIndex;\n    let astDefined;\n    let ulen;\n    let plen;\n    let saveFrame;\n    const op = opcodes[opIndex];\n    const udt = udts[op.index];\n    sysData.UdtIndex = udt.index;\n\n    const notLookAround = !inLookAround();\n    /* ignore AST and back references in lookaround */\n    if (notLookAround) {\n      /* begin AST and back reference */\n      astDefined = thisThis.ast && thisThis.ast.udtDefined(op.index);\n      if (astDefined) {\n        astIndex = rules.length + op.index;\n        astLength = thisThis.ast.getLength();\n        thisThis.ast.down(astIndex, udt.name);\n      }\n      /* NOTE: push and pop of the back reference frame is normally not necessary */\n      /* only in the case that the UDT calls evaluateRule() or evaluateUdt() */\n      ulen = sysData.uFrame.length();\n      plen = sysData.pFrame.length();\n      sysData.uFrame.push();\n      sysData.pFrame.push();\n      saveFrame = sysData.pFrame;\n      sysData.pFrame = new backRef();\n    }\n    /* call the UDT */\n    const charsLeft = charsEnd - phraseIndex;\n    udtCallbacks[op.index](sysData, chars, phraseIndex, syntaxData);\n    validateUdtCallbackResult(udt, sysData, charsLeft);\n    if (notLookAround) {\n      /* end AST */\n      if (astDefined) {\n        if (sysData.state === id.NOMATCH) {\n          thisThis.ast.setLength(astLength);\n        } else {\n          thisThis.ast.up(astIndex, udt.name, phraseIndex, sysData.phraseLength);\n        }\n      }\n      /* end back reference */\n      sysData.pFrame = saveFrame;\n      if (sysData.state === id.NOMATCH) {\n        sysData.uFrame.pop(ulen);\n        sysData.pFrame.pop(plen);\n      } else if (udt.isBkr) {\n        /* save phrase on both the parent and universal frames */\n        /* BKR operator will decide which to use later */\n        sysData.pFrame.savePhrase(udt.lower, phraseIndex, sysData.phraseLength);\n        sysData.uFrame.savePhrase(udt.lower, phraseIndex, sysData.phraseLength);\n      }\n    }\n  };\n  // The `AND` operator.<br>\n  // This is the positive `look ahead` operator.\n  // Executes its single child node, returning the EMPTY state\n  // if it succeedsand NOMATCH if it fails.\n  // *Always* backtracks on any matched phrase and returns EMPTY on success.\n  const opAND = function (opIndex, phraseIndex, sysData) {\n    lookAround.push({\n      lookAround: id.LOOKAROUND_AHEAD,\n      anchor: phraseIndex,\n      charsEnd,\n      charsLength,\n    });\n    charsEnd = chars.length;\n    charsLength = chars.length - charsBegin;\n    opExecute(opIndex + 1, phraseIndex, sysData);\n    const pop = lookAround.pop();\n    charsEnd = pop.charsEnd;\n    charsLength = pop.charsLength;\n    sysData.phraseLength = 0;\n    switch (sysData.state) {\n      case id.EMPTY:\n        sysData.state = id.EMPTY;\n        break;\n      case id.MATCH:\n        sysData.state = id.EMPTY;\n        break;\n      case id.NOMATCH:\n        sysData.state = id.NOMATCH;\n        break;\n      default:\n        throw new Error(`opAND: invalid state ${sysData.state}`);\n    }\n  };\n  // The `NOT` operator.<br>\n  // This is the negative `look ahead` operator.\n  // Executes its single child node, returning the EMPTY state\n  // if it *fails* and NOMATCH if it succeeds.\n  // *Always* backtracks on any matched phrase and returns EMPTY\n  // on success (failure of its child node).\n  const opNOT = function (opIndex, phraseIndex, sysData) {\n    lookAround.push({\n      lookAround: id.LOOKAROUND_AHEAD,\n      anchor: phraseIndex,\n      charsEnd,\n      charsLength,\n    });\n    charsEnd = chars.length;\n    charsLength = chars.length - charsBegin;\n    opExecute(opIndex + 1, phraseIndex, sysData);\n    const pop = lookAround.pop();\n    charsEnd = pop.charsEnd;\n    charsLength = pop.charsLength;\n    sysData.phraseLength = 0;\n    switch (sysData.state) {\n      case id.EMPTY:\n      case id.MATCH:\n        sysData.state = id.NOMATCH;\n        break;\n      case id.NOMATCH:\n        sysData.state = id.EMPTY;\n        break;\n      default:\n        throw new Error(`opNOT: invalid state ${sysData.state}`);\n    }\n  };\n  // The `TRG` operator.<br>\n  // Succeeds if the single first character of the phrase is\n  // within the `min - max` range.\n  const opTRG = function (opIndex, phraseIndex, sysData) {\n    const op = opcodes[opIndex];\n    sysData.state = id.NOMATCH;\n    if (phraseIndex < charsEnd) {\n      if (op.min <= chars[phraseIndex] && chars[phraseIndex] <= op.max) {\n        sysData.state = id.MATCH;\n        sysData.phraseLength = 1;\n      }\n    }\n  };\n  // The `TBS` operator.<br>\n  // Matches its pre-defined phrase against the input string.\n  // All characters must match exactly.\n  // Case-sensitive literal strings (`'string'` & `%s\"string\"`) are translated to `TBS`\n  // operators by `apg`.\n  // Phrase length of zero is not allowed.\n  // Empty phrases can only be defined with `TLS` operators.\n  const opTBS = function (opIndex, phraseIndex, sysData) {\n    let i;\n    const op = opcodes[opIndex];\n    const len = op.string.length;\n    sysData.state = id.NOMATCH;\n    if (phraseIndex + len <= charsEnd) {\n      for (i = 0; i < len; i += 1) {\n        if (chars[phraseIndex + i] !== op.string[i]) {\n          return;\n        }\n      }\n      sysData.state = id.MATCH;\n      sysData.phraseLength = len;\n    } /* implied else NOMATCH */\n  };\n  // The `TLS` operator.<br>\n  // Matches its pre-defined phrase against the input string.\n  // A case-insensitive match is attempted for ASCII alphbetical characters.\n  // `TLS` is the only operator that explicitly allows empty phrases.\n  // `apg` will fail for empty `TBS`, case-sensitive strings (`''`) or\n  // zero repetitions (`0*0RuleName` or `0RuleName`).\n  const opTLS = function (opIndex, phraseIndex, sysData) {\n    let i;\n    let code;\n    const op = opcodes[opIndex];\n    sysData.state = id.NOMATCH;\n    const len = op.string.length;\n    if (len === 0) {\n      /* EMPTY match allowed for TLS */\n      sysData.state = id.EMPTY;\n      return;\n    }\n    if (phraseIndex + len <= charsEnd) {\n      for (i = 0; i < len; i += 1) {\n        code = chars[phraseIndex + i];\n        if (code >= 65 && code <= 90) {\n          code += 32;\n        }\n        if (code !== op.string[i]) {\n          return;\n        }\n      }\n      sysData.state = id.MATCH;\n      sysData.phraseLength = len;\n    } /* implied else NOMATCH */\n  };\n  // The `ABG` operator.<br>\n  // This is an \"anchor\" for the beginning of the string, similar to the familiar regex `^` anchor.\n  // An anchor matches a position rather than a phrase.\n  // Returns EMPTY if `phraseIndex` is 0, NOMATCH otherwise.\n  const opABG = function (opIndex, phraseIndex, sysData) {\n    sysData.state = id.NOMATCH;\n    sysData.phraseLength = 0;\n    sysData.state = phraseIndex === 0 ? id.EMPTY : id.NOMATCH;\n  };\n  // The `AEN` operator.<br>\n  // This is an \"anchor\" for the end of the string, similar to the familiar regex `$` anchor.\n  // An anchor matches a position rather than a phrase.\n  // Returns EMPTY if `phraseIndex` equals the input string length, NOMATCH otherwise.\n  const opAEN = function (opIndex, phraseIndex, sysData) {\n    sysData.state = id.NOMATCH;\n    sysData.phraseLength = 0;\n    sysData.state = phraseIndex === chars.length ? id.EMPTY : id.NOMATCH;\n  };\n  // The `BKR` operator.<br>\n  // The back reference operator.\n  // Matches the last matched phrase of the named rule or UDT against the input string.\n  // For ASCII alphbetical characters the match may be case sensitive (`%s`) or insensitive (`%i`),\n  // depending on the back reference definition.\n  // For `universal` mode (`%u`) matches the last phrase found anywhere in the grammar.\n  // For `parent frame` mode (`%p`) matches the last phrase found in the parent rule only.\n  const opBKR = function (opIndex, phraseIndex, sysData) {\n    let i;\n    let code;\n    let lmcode;\n    let lower;\n    const op = opcodes[opIndex];\n    sysData.state = id.NOMATCH;\n    if (op.index < rules.length) {\n      lower = rules[op.index].lower;\n    } else {\n      lower = udts[op.index - rules.length].lower;\n    }\n    const frame = op.bkrMode === id.BKR_MODE_PM ? sysData.pFrame.getPhrase(lower) : sysData.uFrame.getPhrase(lower);\n    const insensitive = op.bkrCase === id.BKR_MODE_CI;\n    if (frame === null) {\n      return;\n    }\n    const lmIndex = frame.phraseIndex;\n    const len = frame.phraseLength;\n    if (len === 0) {\n      sysData.state = id.EMPTY;\n      return;\n    }\n    if (phraseIndex + len <= charsEnd) {\n      if (insensitive) {\n        /* case-insensitive match */\n        for (i = 0; i < len; i += 1) {\n          code = chars[phraseIndex + i];\n          lmcode = chars[lmIndex + i];\n          if (code >= 65 && code <= 90) {\n            code += 32;\n          }\n          if (lmcode >= 65 && lmcode <= 90) {\n            lmcode += 32;\n          }\n          if (code !== lmcode) {\n            return;\n          }\n        }\n        sysData.state = id.MATCH;\n        sysData.phraseLength = len;\n      } else {\n        /* case-sensitive match */\n        for (i = 0; i < len; i += 1) {\n          code = chars[phraseIndex + i];\n          lmcode = chars[lmIndex + i];\n          if (code !== lmcode) {\n            return;\n          }\n        }\n      }\n      sysData.state = id.MATCH;\n      sysData.phraseLength = len;\n    }\n  };\n  // The `BKA` operator.<br>\n  // This is the positive `look behind` operator.\n  // It's child node is parsed right-to-left.\n  // Returns the EMPTY state if a match is found, NOMATCH otherwise.\n  // Like the look ahead operators, it always backtracks to `phraseIndex`.\n  const opBKA = function (opIndex, phraseIndex, sysData) {\n    lookAround.push({\n      lookAround: id.LOOKAROUND_BEHIND,\n      anchor: phraseIndex,\n    });\n    opExecute(opIndex + 1, phraseIndex, sysData);\n    lookAround.pop();\n    sysData.phraseLength = 0;\n    switch (sysData.state) {\n      case id.EMPTY:\n        sysData.state = id.EMPTY;\n        break;\n      case id.MATCH:\n        sysData.state = id.EMPTY;\n        break;\n      case id.NOMATCH:\n        sysData.state = id.NOMATCH;\n        break;\n      default:\n        throw new Error(`opBKA: invalid state ${sysData.state}`);\n    }\n  };\n  // The `BKN` operator.<br>\n  // This is the negative `look behind` operator.\n  // It's child node is parsed right-to-left.\n  // Returns the EMPTY state if a match is *not* found, NOMATCH otherwise.\n  // Like the look ahead operators, it always backtracks to `phraseIndex`.\n  const opBKN = function (opIndex, phraseIndex, sysData) {\n    // let op;\n    // op = opcodes[opIndex];\n    lookAround.push({\n      lookAround: id.LOOKAROUND_BEHIND,\n      anchor: phraseIndex,\n    });\n    opExecute(opIndex + 1, phraseIndex, sysData);\n    lookAround.pop();\n    sysData.phraseLength = 0;\n    switch (sysData.state) {\n      case id.EMPTY:\n      case id.MATCH:\n        sysData.state = id.NOMATCH;\n        break;\n      case id.NOMATCH:\n        sysData.state = id.EMPTY;\n        break;\n      default:\n        throw new Error(`opBKN: invalid state ${sysData.state}`);\n    }\n  };\n  // The right-to-left `CAT` operator.<br>\n  // Called for `CAT` operators when in look behind mode.\n  // Calls its child nodes from right to left concatenating matched phrases right to left.\n  const opCATBehind = function (opIndex, phraseIndex, sysData) {\n    let success;\n    let astLength;\n    let catCharIndex;\n    let catMatched;\n    const op = opcodes[opIndex];\n    const ulen = sysData.uFrame.length();\n    const plen = sysData.pFrame.length();\n    if (thisThis.ast) {\n      astLength = thisThis.ast.getLength();\n    }\n    success = true;\n    catCharIndex = phraseIndex;\n    catMatched = 0;\n    // catPhrase = 0;\n    for (let i = op.children.length - 1; i >= 0; i -= 1) {\n      opExecute(op.children[i], catCharIndex, sysData);\n      catCharIndex -= sysData.phraseLength;\n      catMatched += sysData.phraseLength;\n      // catPhrase += sysData.phraseLength;\n      if (sysData.state === id.NOMATCH) {\n        success = false;\n        break;\n      }\n    }\n    if (success) {\n      sysData.state = catMatched === 0 ? id.EMPTY : id.MATCH;\n      sysData.phraseLength = catMatched;\n    } else {\n      sysData.state = id.NOMATCH;\n      sysData.phraseLength = 0;\n      sysData.uFrame.pop(ulen);\n      sysData.pFrame.pop(plen);\n      if (thisThis.ast) {\n        thisThis.ast.setLength(astLength);\n      }\n    }\n  };\n  // The right-to-left `REP` operator.<br>\n  // Called for `REP` operators in look behind mode.\n  // Makes repeated calls to its child node, concatenating matched phrases right to left.\n  const opREPBehind = function (opIndex, phraseIndex, sysData) {\n    let astLength;\n    let repCharIndex;\n    let repPhrase;\n    let repCount;\n    const op = opcodes[opIndex];\n    repCharIndex = phraseIndex;\n    repPhrase = 0;\n    repCount = 0;\n    const ulen = sysData.uFrame.length();\n    const plen = sysData.pFrame.length();\n    if (thisThis.ast) {\n      astLength = thisThis.ast.getLength();\n    }\n    const TRUE = true;\n    while (TRUE) {\n      if (repCharIndex <= 0) {\n        /* exit on end of input string */\n        break;\n      }\n      opExecute(opIndex + 1, repCharIndex, sysData);\n      if (sysData.state === id.NOMATCH) {\n        /* always end if the child node fails */\n        break;\n      }\n      if (sysData.state === id.EMPTY) {\n        /* REP always succeeds when the child node returns an empty phrase */\n        /* this may not seem obvious, but that's the way it works out */\n        break;\n      }\n      repCount += 1;\n      repPhrase += sysData.phraseLength;\n      repCharIndex -= sysData.phraseLength;\n      if (repCount === op.max) {\n        /* end on maxed out reps */\n        break;\n      }\n    }\n    /* evaluate the match count according to the min, max values */\n    if (sysData.state === id.EMPTY) {\n      sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;\n      sysData.phraseLength = repPhrase;\n    } else if (repCount >= op.min) {\n      sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;\n      sysData.phraseLength = repPhrase;\n    } else {\n      sysData.state = id.NOMATCH;\n      sysData.phraseLength = 0;\n      sysData.uFrame.pop(ulen);\n      sysData.pFrame.pop(plen);\n      if (thisThis.ast) {\n        thisThis.ast.setLength(astLength);\n      }\n    }\n  };\n  // The right-to-left `TRG` operator.<br>\n  // Called for `TRG` operators in look behind mode.\n  // Matches a single character at `phraseIndex - 1` to the `min` - `max` range.\n  const opTRGBehind = function (opIndex, phraseIndex, sysData) {\n    const op = opcodes[opIndex];\n    sysData.state = id.NOMATCH;\n    sysData.phraseLength = 0;\n    if (phraseIndex > 0) {\n      const char = chars[phraseIndex - 1];\n      if (op.min <= char && char <= op.max) {\n        sysData.state = id.MATCH;\n        sysData.phraseLength = 1;\n      }\n    }\n  };\n  // The right-to-left `TBS` operator.<br>\n  // Called for `TBS` operators in look behind mode.\n  // Matches the `TBS` phrase to the left of `phraseIndex`.\n  const opTBSBehind = function (opIndex, phraseIndex, sysData) {\n    let i;\n    const op = opcodes[opIndex];\n    sysData.state = id.NOMATCH;\n    const len = op.string.length;\n    const beg = phraseIndex - len;\n    if (beg >= 0) {\n      for (i = 0; i < len; i += 1) {\n        if (chars[beg + i] !== op.string[i]) {\n          return;\n        }\n      }\n      sysData.state = id.MATCH;\n      sysData.phraseLength = len;\n    }\n  };\n  // The right-to-left `TLS` operator.<br>\n  // Called for `TLS` operators in look behind mode.\n  // Matches the `TLS` phrase to the left of `phraseIndex`.\n  const opTLSBehind = function (opIndex, phraseIndex, sysData) {\n    let char;\n    const op = opcodes[opIndex];\n    sysData.state = id.NOMATCH;\n    const len = op.string.length;\n    if (len === 0) {\n      /* EMPTY match allowed for TLS */\n      sysData.state = id.EMPTY;\n      return;\n    }\n    const beg = phraseIndex - len;\n    if (beg >= 0) {\n      for (let i = 0; i < len; i += 1) {\n        char = chars[beg + i];\n        if (char >= 65 && char <= 90) {\n          char += 32;\n        }\n        if (char !== op.string[i]) {\n          return;\n        }\n      }\n      sysData.state = id.MATCH;\n      sysData.phraseLength = len;\n    }\n  };\n  // The right-to-left back reference operator.<br>\n  // Matches the back referenced phrase to the left of `phraseIndex`.\n  const opBKRBehind = function (opIndex, phraseIndex, sysData) {\n    let i;\n    let code;\n    let lmcode;\n    let lower;\n    const op = opcodes[opIndex];\n    /* NOMATCH default */\n    sysData.state = id.NOMATCH;\n    sysData.phraseLength = 0;\n    if (op.index < rules.length) {\n      lower = rules[op.index].lower;\n    } else {\n      lower = udts[op.index - rules.length].lower;\n    }\n    const frame = op.bkrMode === id.BKR_MODE_PM ? sysData.pFrame.getPhrase(lower) : sysData.uFrame.getPhrase(lower);\n    const insensitive = op.bkrCase === id.BKR_MODE_CI;\n    if (frame === null) {\n      return;\n    }\n    const lmIndex = frame.phraseIndex;\n    const len = frame.phraseLength;\n    if (len === 0) {\n      sysData.state = id.EMPTY;\n      sysData.phraseLength = 0;\n      return;\n    }\n    const beg = phraseIndex - len;\n    if (beg >= 0) {\n      if (insensitive) {\n        /* case-insensitive match */\n        for (i = 0; i < len; i += 1) {\n          code = chars[beg + i];\n          lmcode = chars[lmIndex + i];\n          if (code >= 65 && code <= 90) {\n            code += 32;\n          }\n          if (lmcode >= 65 && lmcode <= 90) {\n            lmcode += 32;\n          }\n          if (code !== lmcode) {\n            return;\n          }\n        }\n        sysData.state = id.MATCH;\n        sysData.phraseLength = len;\n      } else {\n        /* case-sensitive match */\n        for (i = 0; i < len; i += 1) {\n          code = chars[beg + i];\n          lmcode = chars[lmIndex + i];\n          if (code !== lmcode) {\n            return;\n          }\n        }\n      }\n      sysData.state = id.MATCH;\n      sysData.phraseLength = len;\n    }\n  };\n  // Generalized execution function.<br>\n  // Having a single, generalized function, allows a single location\n  // for tracing and statistics gathering functions to be called.\n  // Tracing and statistics are handled in separate objects.\n  // However, the parser calls their API to build the object data records.\n  // See [`trace.js`](./trace.html) and [`stats.js`](./stats.html) for their\n  // usage.\n  opExecute = function opExecuteFunc(opIndex, phraseIndex, sysData) {\n    let ret = true;\n    const op = opcodes[opIndex];\n    nodeHits += 1;\n    if (nodeHits > limitNodeHits) {\n      throw new Error(`parser: maximum number of node hits exceeded: ${limitNodeHits}`);\n    }\n    treeDepth += 1;\n    if (treeDepth > maxTreeDepth) {\n      maxTreeDepth = treeDepth;\n      if (maxTreeDepth > limitTreeDepth) {\n        throw new Error(`parser: maximum parse tree depth exceeded: ${limitTreeDepth}`);\n      }\n    }\n    sysData.refresh();\n    if (thisThis.trace !== null) {\n      /* collect the trace record for down the parse tree */\n      const lk = lookAroundValue();\n      thisThis.trace.down(op, sysData.state, phraseIndex, sysData.phraseLength, lk.anchor, lk.lookAround);\n    }\n    if (inLookBehind()) {\n      switch (op.type) {\n        case id.ALT:\n          opALT(opIndex, phraseIndex, sysData);\n          break;\n        case id.CAT:\n          opCATBehind(opIndex, phraseIndex, sysData);\n          break;\n        case id.REP:\n          opREPBehind(opIndex, phraseIndex, sysData);\n          break;\n        case id.RNM:\n          opRNM(opIndex, phraseIndex, sysData);\n          break;\n        case id.UDT:\n          opUDT(opIndex, phraseIndex, sysData);\n          break;\n        case id.AND:\n          opAND(opIndex, phraseIndex, sysData);\n          break;\n        case id.NOT:\n          opNOT(opIndex, phraseIndex, sysData);\n          break;\n        case id.TRG:\n          opTRGBehind(opIndex, phraseIndex, sysData);\n          break;\n        case id.TBS:\n          opTBSBehind(opIndex, phraseIndex, sysData);\n          break;\n        case id.TLS:\n          opTLSBehind(opIndex, phraseIndex, sysData);\n          break;\n        case id.BKR:\n          opBKRBehind(opIndex, phraseIndex, sysData);\n          break;\n        case id.BKA:\n          opBKA(opIndex, phraseIndex, sysData);\n          break;\n        case id.BKN:\n          opBKN(opIndex, phraseIndex, sysData);\n          break;\n        case id.ABG:\n          opABG(opIndex, phraseIndex, sysData);\n          break;\n        case id.AEN:\n          opAEN(opIndex, phraseIndex, sysData);\n          break;\n        default:\n          ret = false;\n          break;\n      }\n    } else {\n      switch (op.type) {\n        case id.ALT:\n          opALT(opIndex, phraseIndex, sysData);\n          break;\n        case id.CAT:\n          opCAT(opIndex, phraseIndex, sysData);\n          break;\n        case id.REP:\n          opREP(opIndex, phraseIndex, sysData);\n          break;\n        case id.RNM:\n          opRNM(opIndex, phraseIndex, sysData);\n          break;\n        case id.UDT:\n          opUDT(opIndex, phraseIndex, sysData);\n          break;\n        case id.AND:\n          opAND(opIndex, phraseIndex, sysData);\n          break;\n        case id.NOT:\n          opNOT(opIndex, phraseIndex, sysData);\n          break;\n        case id.TRG:\n          opTRG(opIndex, phraseIndex, sysData);\n          break;\n        case id.TBS:\n          opTBS(opIndex, phraseIndex, sysData);\n          break;\n        case id.TLS:\n          opTLS(opIndex, phraseIndex, sysData);\n          break;\n        case id.BKR:\n          opBKR(opIndex, phraseIndex, sysData);\n          break;\n        case id.BKA:\n          opBKA(opIndex, phraseIndex, sysData);\n          break;\n        case id.BKN:\n          opBKN(opIndex, phraseIndex, sysData);\n          break;\n        case id.ABG:\n          opABG(opIndex, phraseIndex, sysData);\n          break;\n        case id.AEN:\n          opAEN(opIndex, phraseIndex, sysData);\n          break;\n        default:\n          ret = false;\n          break;\n      }\n    }\n    if (!inLookAround() && phraseIndex + sysData.phraseLength > maxMatched) {\n      maxMatched = phraseIndex + sysData.phraseLength;\n    }\n    if (thisThis.stats !== null) {\n      /* collect the statistics */\n      thisThis.stats.collect(op, sysData);\n    }\n    if (thisThis.trace !== null) {\n      /* collect the trace record for up the parse tree */\n      const lk = lookAroundValue();\n      thisThis.trace.up(op, sysData.state, phraseIndex, sysData.phraseLength, lk.anchor, lk.lookAround);\n    }\n    treeDepth -= 1;\n    return ret;\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/parser.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/stats.js":
/*!**************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/stats.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module is the constructor for the statistics gathering object.\n// The statistics are nothing more than keeping a count of the\n// number of times each node in the parse tree is traversed.\n//\n// Counts are collected for each of the individual types of operators.\n// Additionally, counts are collected for each of the individually named\n// `RNM` and `UDT` operators.\nmodule.exports = function statsFunc() {\n  const id = __webpack_require__(/*! ./identifiers */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/identifiers.js\");\n  const utils = __webpack_require__(/*! ./utilities */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/utilities.js\");\n  const style = __webpack_require__(/*! ./style */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/style.js\");\n\n  const thisFileName = 'stats.js: ';\n  let rules = [];\n  let udts = [];\n  const stats = [];\n  let totals;\n  const ruleStats = [];\n  const udtStats = [];\n  this.statsObject = 'statsObject';\n  const nameId = 'stats';\n  /* `Array.sort()` callback function for sorting `RNM` and `UDT` operators alphabetically by name. */\n  const sortAlpha = function sortAlpha(lhs, rhs) {\n    if (lhs.lower < rhs.lower) {\n      return -1;\n    }\n    if (lhs.lower > rhs.lower) {\n      return 1;\n    }\n    return 0;\n  };\n  /* `Array.sort()` callback function for sorting `RNM` and `UDT` operators by hit count. */\n  const sortHits = function sortHits(lhs, rhs) {\n    if (lhs.total < rhs.total) {\n      return 1;\n    }\n    if (lhs.total > rhs.total) {\n      return -1;\n    }\n    return sortAlpha(lhs, rhs);\n  };\n  /* `Array.sort()` callback function for sorting `RNM` and `UDT` operators by index */\n  /* (in the order in which they appear in the SABNF grammar). */\n  const sortIndex = function sortIndex(lhs, rhs) {\n    if (lhs.index < rhs.index) {\n      return -1;\n    }\n    if (lhs.index > rhs.index) {\n      return 1;\n    }\n    return 0;\n  };\n  const EmptyStat = function EmptyStat() {\n    this.empty = 0;\n    this.match = 0;\n    this.nomatch = 0;\n    this.total = 0;\n  };\n  /* Zero out all stats */\n  const clear = function clear() {\n    stats.length = 0;\n    totals = new EmptyStat();\n    stats[id.ALT] = new EmptyStat();\n    stats[id.CAT] = new EmptyStat();\n    stats[id.REP] = new EmptyStat();\n    stats[id.RNM] = new EmptyStat();\n    stats[id.TRG] = new EmptyStat();\n    stats[id.TBS] = new EmptyStat();\n    stats[id.TLS] = new EmptyStat();\n    stats[id.UDT] = new EmptyStat();\n    stats[id.AND] = new EmptyStat();\n    stats[id.NOT] = new EmptyStat();\n    stats[id.BKR] = new EmptyStat();\n    stats[id.BKA] = new EmptyStat();\n    stats[id.BKN] = new EmptyStat();\n    stats[id.ABG] = new EmptyStat();\n    stats[id.AEN] = new EmptyStat();\n    ruleStats.length = 0;\n    for (let i = 0; i < rules.length; i += 1) {\n      ruleStats.push({\n        empty: 0,\n        match: 0,\n        nomatch: 0,\n        total: 0,\n        name: rules[i].name,\n        lower: rules[i].lower,\n        index: rules[i].index,\n      });\n    }\n    if (udts.length > 0) {\n      udtStats.length = 0;\n      for (let i = 0; i < udts.length; i += 1) {\n        udtStats.push({\n          empty: 0,\n          match: 0,\n          nomatch: 0,\n          total: 0,\n          name: udts[i].name,\n          lower: udts[i].lower,\n          index: udts[i].index,\n        });\n      }\n    }\n  };\n  /* increment the designated operator hit count by one */\n  const incStat = function incStat(stat, state) {\n    stat.total += 1;\n    switch (state) {\n      case id.EMPTY:\n        stat.empty += 1;\n        break;\n      case id.MATCH:\n        stat.match += 1;\n        break;\n      case id.NOMATCH:\n        stat.nomatch += 1;\n        break;\n      default:\n        throw new Error(`${thisFileName}collect(): incStat(): unrecognized state: ${state}`);\n    }\n  };\n  /* helper for toHtml() */\n  const displayRow = function displayRow(name, stat) {\n    let html = '';\n    html += '<tr>';\n    html += `<td class=\"${style.CLASS_ACTIVE}\">${name}</td>`;\n    html += `<td class=\"${style.CLASS_EMPTY}\">${stat.empty}</td>`;\n    html += `<td class=\"${style.CLASS_MATCH}\">${stat.match}</td>`;\n    html += `<td class=\"${style.CLASS_NOMATCH}\">${stat.nomatch}</td>`;\n    html += `<td class=\"${style.CLASS_ACTIVE}\">${stat.total}</td>`;\n    html += '</tr>\\n';\n    return html;\n  };\n  const displayOpsOnly = function displayOpsOnly() {\n    let html = '';\n    html += displayRow('ALT', stats[id.ALT]);\n    html += displayRow('CAT', stats[id.CAT]);\n    html += displayRow('REP', stats[id.REP]);\n    html += displayRow('RNM', stats[id.RNM]);\n    html += displayRow('TRG', stats[id.TRG]);\n    html += displayRow('TBS', stats[id.TBS]);\n    html += displayRow('TLS', stats[id.TLS]);\n    html += displayRow('UDT', stats[id.UDT]);\n    html += displayRow('AND', stats[id.AND]);\n    html += displayRow('NOT', stats[id.NOT]);\n    html += displayRow('BKR', stats[id.BKR]);\n    html += displayRow('BKA', stats[id.BKA]);\n    html += displayRow('BKN', stats[id.BKN]);\n    html += displayRow('ABG', stats[id.ABG]);\n    html += displayRow('AEN', stats[id.AEN]);\n    html += displayRow('totals', totals);\n    return html;\n  };\n  /* helper for toHtml() */\n  const displayRules = function displayRules() {\n    let html = '';\n    html += '<tr><th></th><th></th><th></th><th></th><th></th></tr>\\n';\n    html += '<tr><th>rules</th><th></th><th></th><th></th><th></th></tr>\\n';\n    for (let i = 0; i < rules.length; i += 1) {\n      if (ruleStats[i].total > 0) {\n        html += '<tr>';\n        html += `<td class=\"${style.CLASS_ACTIVE}\">${ruleStats[i].name}</td>`;\n        html += `<td class=\"${style.CLASS_EMPTY}\">${ruleStats[i].empty}</td>`;\n        html += `<td class=\"${style.CLASS_MATCH}\">${ruleStats[i].match}</td>`;\n        html += `<td class=\"${style.CLASS_NOMATCH}\">${ruleStats[i].nomatch}</td>`;\n        html += `<td class=\"${style.CLASS_ACTIVE}\">${ruleStats[i].total}</td>`;\n        html += '</tr>\\n';\n      }\n    }\n    if (udts.length > 0) {\n      html += '<tr><th></th><th></th><th></th><th></th><th></th></tr>\\n';\n      html += '<tr><th>udts</th><th></th><th></th><th></th><th></th></tr>\\n';\n      for (let i = 0; i < udts.length; i += 1) {\n        if (udtStats[i].total > 0) {\n          html += '<tr>';\n          html += `<td class=\"${style.CLASS_ACTIVE}\">${udtStats[i].name}</td>`;\n          html += `<td class=\"${style.CLASS_EMPTY}\">${udtStats[i].empty}</td>`;\n          html += `<td class=\"${style.CLASS_MATCH}\">${udtStats[i].match}</td>`;\n          html += `<td class=\"${style.CLASS_NOMATCH}\">${udtStats[i].nomatch}</td>`;\n          html += `<td class=\"${style.CLASS_ACTIVE}\">${udtStats[i].total}</td>`;\n          html += '</tr>\\n';\n        }\n      }\n    }\n    return html;\n  };\n  /* called only by the parser to validate a stats object */\n  this.validate = function validate(name) {\n    let ret = false;\n    if (typeof name === 'string' && nameId === name) {\n      ret = true;\n    }\n    return ret;\n  };\n  /* no verification of input - only called by parser() */\n  this.init = function init(inputRules, inputUdts) {\n    rules = inputRules;\n    udts = inputUdts;\n    clear();\n  };\n  /* This function is the main interaction with the parser. */\n  /* The parser calls it after each node has been traversed. */\n  this.collect = function collect(op, result) {\n    incStat(totals, result.state, result.phraseLength);\n    incStat(stats[op.type], result.state, result.phraseLength);\n    if (op.type === id.RNM) {\n      incStat(ruleStats[op.index], result.state, result.phraseLength);\n    }\n    if (op.type === id.UDT) {\n      incStat(udtStats[op.index], result.state, result.phraseLength);\n    }\n  };\n  // Display the statistics as an HTML table.\n  // - *type*\n  //   - \"ops\" - (default) display only the total hit counts for all operator types.\n  //   - \"index\" - additionally, display the hit counts for the individual `RNM` and `UDT` operators ordered by index.\n  //   - \"hits\" - additionally, display the hit counts for the individual `RNM` and `UDT` operators by hit count.\n  //   - \"alpha\" - additionally, display the hit counts for the individual `RNM` and `UDT` operators by name alphabetically.\n  // - *caption* - optional caption for the table\n  this.toHtml = function toHtml(type, caption) {\n    let html = '';\n    html += `<table class=\"${style.CLASS_STATS}\">\\n`;\n    if (typeof caption === 'string') {\n      html += `<caption>${caption}</caption>\\n`;\n    }\n    html += `<tr><th class=\"${style.CLASS_ACTIVE}\">ops</th>\\n`;\n    html += `<th class=\"${style.CLASS_EMPTY}\">EMPTY</th>\\n`;\n    html += `<th class=\"${style.CLASS_MATCH}\">MATCH</th>\\n`;\n    html += `<th class=\"${style.CLASS_NOMATCH}\">NOMATCH</th>\\n`;\n    html += `<th class=\"${style.CLASS_ACTIVE}\">totals</th></tr>\\n`;\n    const test = true;\n    while (test) {\n      if (type === undefined) {\n        html += displayOpsOnly();\n        break;\n      }\n      if (type === null) {\n        html += displayOpsOnly();\n        break;\n      }\n      if (type === 'ops') {\n        html += displayOpsOnly();\n        break;\n      }\n      if (type === 'index') {\n        ruleStats.sort(sortIndex);\n        if (udtStats.length > 0) {\n          udtStats.sort(sortIndex);\n        }\n        html += displayOpsOnly();\n        html += displayRules();\n        break;\n      }\n      if (type === 'hits') {\n        ruleStats.sort(sortHits);\n        if (udtStats.length > 0) {\n          udtStats.sort(sortIndex);\n        }\n        html += displayOpsOnly();\n        html += displayRules();\n        break;\n      }\n      if (type === 'alpha') {\n        ruleStats.sort(sortAlpha);\n        if (udtStats.length > 0) {\n          udtStats.sort(sortAlpha);\n        }\n        html += displayOpsOnly();\n        html += displayRules();\n        break;\n      }\n      break;\n    }\n    html += '</table>\\n';\n    return html;\n  };\n  // Display the stats table in a complete HTML5 page.\n  this.toHtmlPage = function toHtmlPage(type, caption, title) {\n    return utils.htmlToPage(this.toHtml(type, caption), title);\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/stats.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/style.js":
/*!**************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/style.js ***!
  \**************************************************************************************/
/***/ ((module) => {

eval("module.exports = {\n\n  // Generated by apglib/style.js \n  CLASS_MONOSPACE: 'apg-mono',\n  CLASS_ACTIVE: 'apg-active',\n  CLASS_EMPTY: 'apg-empty',\n  CLASS_MATCH: 'apg-match',\n  CLASS_NOMATCH: 'apg-nomatch',\n  CLASS_LOOKAHEAD: 'apg-lh-match',\n  CLASS_LOOKBEHIND: 'apg-lb-match',\n  CLASS_REMAINDER: 'apg-remainder',\n  CLASS_CTRLCHAR: 'apg-ctrl-char',\n  CLASS_LINEEND: 'apg-line-end',\n  CLASS_ERROR: 'apg-error',\n  CLASS_PHRASE: 'apg-phrase',\n  CLASS_EMPTYPHRASE: 'apg-empty-phrase',\n  CLASS_STATE: 'apg-state',\n  CLASS_STATS: 'apg-stats',\n  CLASS_TRACE: 'apg-trace',\n  CLASS_GRAMMAR: 'apg-grammar',\n  CLASS_RULES: 'apg-rules',\n  CLASS_RULESLINK: 'apg-rules-link',\n  CLASS_ATTRIBUTES: 'apg-attrs',\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FwZy1qc0A0LjIuMS9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctbGliL3N0eWxlLmpzIiwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHRva2Vuc3RyZWFtL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vYXBnLWpzQDQuMi4xL25vZGVfbW9kdWxlcy9hcGctanMvc3JjL2FwZy1saWIvc3R5bGUuanM/NTMwZCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcblxuICAvLyBHZW5lcmF0ZWQgYnkgYXBnbGliL3N0eWxlLmpzIFxuICBDTEFTU19NT05PU1BBQ0U6ICdhcGctbW9ubycsXG4gIENMQVNTX0FDVElWRTogJ2FwZy1hY3RpdmUnLFxuICBDTEFTU19FTVBUWTogJ2FwZy1lbXB0eScsXG4gIENMQVNTX01BVENIOiAnYXBnLW1hdGNoJyxcbiAgQ0xBU1NfTk9NQVRDSDogJ2FwZy1ub21hdGNoJyxcbiAgQ0xBU1NfTE9PS0FIRUFEOiAnYXBnLWxoLW1hdGNoJyxcbiAgQ0xBU1NfTE9PS0JFSElORDogJ2FwZy1sYi1tYXRjaCcsXG4gIENMQVNTX1JFTUFJTkRFUjogJ2FwZy1yZW1haW5kZXInLFxuICBDTEFTU19DVFJMQ0hBUjogJ2FwZy1jdHJsLWNoYXInLFxuICBDTEFTU19MSU5FRU5EOiAnYXBnLWxpbmUtZW5kJyxcbiAgQ0xBU1NfRVJST1I6ICdhcGctZXJyb3InLFxuICBDTEFTU19QSFJBU0U6ICdhcGctcGhyYXNlJyxcbiAgQ0xBU1NfRU1QVFlQSFJBU0U6ICdhcGctZW1wdHktcGhyYXNlJyxcbiAgQ0xBU1NfU1RBVEU6ICdhcGctc3RhdGUnLFxuICBDTEFTU19TVEFUUzogJ2FwZy1zdGF0cycsXG4gIENMQVNTX1RSQUNFOiAnYXBnLXRyYWNlJyxcbiAgQ0xBU1NfR1JBTU1BUjogJ2FwZy1ncmFtbWFyJyxcbiAgQ0xBU1NfUlVMRVM6ICdhcGctcnVsZXMnLFxuICBDTEFTU19SVUxFU0xJTks6ICdhcGctcnVsZXMtbGluaycsXG4gIENMQVNTX0FUVFJJQlVURVM6ICdhcGctYXR0cnMnLFxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/style.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/trace.js":
/*!**************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/trace.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint-disable func-names */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable guard-for-in */\n/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module provides a means of tracing the parser through the parse tree as it goes.\n// It is the primary debugging facility for debugging both the SABNF grammar syntax\n// and the input strings that are supposed to be valid grammar sentences.\n// It is also a very informative and educational tool for understanding\n// how a parser actually operates for a given language.\n//\n// Tracing is the process of generating and saving a record of information for each passage\n// of the parser through a parse tree node. And since it traverses each node twice, once down the tree\n// and once coming back up, there are two records for each node.\n// This, obviously, has the potential of generating lots of records.\n// And since these records are normally displayed on a web page\n// it is important to have a means to limit the actual number of records generated to\n// probably no more that a few thousand. This is almost always enough to find any errors.\n// The problem is to get the *right* few thousand records.\n// Therefore, this module has a number of ways of limiting and/or filtering, the number and type of records.\n// Considerable effort has been made to make this filtering of the trace output as simple\n// and intuitive as possible.\n//\n// However, the ability to filter the trace records, or for that matter even understand what they are\n// and the information they contain, does require a minimum amount of understanding of the APG parsing\n// method. The parse tree nodes are all represented by APG operators. They break down into two natural groups.\n// - The `RNM` operators and `UDT` operators are named phrases.\n// These are names chosen by the writer of the SABNF grammar to represent special phrases of interest.\n// - All others collect, concatenate and otherwise manipulate various intermediate phrases along the way.\n//\n// There are separate means of filtering which of these operators in each of these two groups get traced.\n// Let `trace` be an instantiated `trace.js` object.\n// Prior to parsing the string, filtering the rules and UDTs can be defined as follows:\n// ```\n// trace.filter.rules[\"rulename\"] = true;\n//     /* trace rule name \"rulename\" */\n// trace.filter.rules[\"udtname\"]  = true;\n//     /* trace UDT name \"udtname\" */\n// trace.filter.rules[\"<ALL>\"]    = true;\n//     /* trace all rules and UDTs (the default) */\n// trace.filter.rules[\"<NONE>\"]   = true;\n//     /* trace no rules or UDTS */\n// ```\n// If any rule or UDT name other than \"&lt;ALL>\" or \"&lt;NONE>\" is specified, all other names are turned off.\n// Therefore, to be selective of rule names, a filter statement is required for each rule/UDT name desired.\n//\n// Filtering of the other operators follows a similar procedure.\n// ```\n// trace.filter.operators[\"TRG\"] = true;\n//     /* trace the terminal range, TRG, operators */\n// trace.filter.operators[\"CAT\"]  = true;\n//     /* trace the concatenations, CAT, operators */\n// trace.filter.operators[\"<ALL>\"]    = true;\n//     /* trace all operators */\n// trace.filter.operators[\"<NONE>\"]   = true;\n//     /* trace no operators (the default) */\n// ```\n// If any operator name other than \"&lt;ALL>\" or \"&lt;NONE>\" is specified, all other names are turned off.\n// Therefore, to be selective of operator names, a filter statement is required for each name desired.\n//\n// There is, additionally, a means for limiting the total number of filtered or saved trace records.\n// See the function, `setMaxRecords(max)` below. This will result in only the last `max` records being saved.\n//\n// (See [`apg-examples`](https://github.com/ldthomas/apg-js-examples) for examples of using `trace.js`.)\nmodule.exports = function exportTrace() {\n  const utils = __webpack_require__(/*! ./utilities */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/utilities.js\");\n  const style = __webpack_require__(/*! ./style */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/style.js\");\n  const circular = new (__webpack_require__(/*! ./circular-buffer */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/circular-buffer.js\"))();\n  const id = __webpack_require__(/*! ./identifiers */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/identifiers.js\");\n\n  const thisFileName = 'trace.js: ';\n  const that = this;\n  const MODE_HEX = 16;\n  const MODE_DEC = 10;\n  const MODE_ASCII = 8;\n  const MODE_UNICODE = 32;\n  const MAX_PHRASE = 80;\n  const MAX_TLS = 5;\n  const records = [];\n  let maxRecords = 5000;\n  let lastRecord = -1;\n  let filteredRecords = 0;\n  let treeDepth = 0;\n  const recordStack = [];\n  let chars = null;\n  let rules = null;\n  let udts = null;\n  const operatorFilter = [];\n  const ruleFilter = [];\n  /* special trace table phrases */\n  const PHRASE_END = `<span class=\"${style.CLASS_LINEEND}\">&bull;</span>`;\n  const PHRASE_CONTINUE = `<span class=\"${style.CLASS_LINEEND}\">&hellip;</span>`;\n  const PHRASE_EMPTY = `<span class=\"${style.CLASS_EMPTY}\">&#120634;</span>`;\n  /* filter the non-RNM & non-UDT operators */\n  const initOperatorFilter = function () {\n    const setOperators = function (set) {\n      operatorFilter[id.ALT] = set;\n      operatorFilter[id.CAT] = set;\n      operatorFilter[id.REP] = set;\n      operatorFilter[id.TLS] = set;\n      operatorFilter[id.TBS] = set;\n      operatorFilter[id.TRG] = set;\n      operatorFilter[id.AND] = set;\n      operatorFilter[id.NOT] = set;\n      operatorFilter[id.BKR] = set;\n      operatorFilter[id.BKA] = set;\n      operatorFilter[id.BKN] = set;\n      operatorFilter[id.ABG] = set;\n      operatorFilter[id.AEN] = set;\n    };\n    let items = 0;\n    // eslint-disable-next-line no-unused-vars\n    for (const name in that.filter.operators) {\n      items += 1;\n    }\n    if (items === 0) {\n      /* case 1: no operators specified: default: do not trace any operators */\n      setOperators(false);\n      return;\n    }\n    for (const name in that.filter.operators) {\n      const upper = name.toUpperCase();\n      if (upper === '<ALL>') {\n        /* case 2: <all> operators specified: trace all operators ignore all other operator commands */\n        setOperators(true);\n        return;\n      }\n      if (upper === '<NONE>') {\n        /* case 3: <none> operators specified: trace NO operators ignore all other operator commands */\n        setOperators(false);\n        return;\n      }\n    }\n    setOperators(false);\n    for (const name in that.filter.operators) {\n      const upper = name.toUpperCase();\n      /* case 4: one or more individual operators specified: trace 'true' operators only */\n      if (upper === 'ALT') {\n        operatorFilter[id.ALT] = that.filter.operators[name] === true;\n      } else if (upper === 'CAT') {\n        operatorFilter[id.CAT] = that.filter.operators[name] === true;\n      } else if (upper === 'REP') {\n        operatorFilter[id.REP] = that.filter.operators[name] === true;\n      } else if (upper === 'AND') {\n        operatorFilter[id.AND] = that.filter.operators[name] === true;\n      } else if (upper === 'NOT') {\n        operatorFilter[id.NOT] = that.filter.operators[name] === true;\n      } else if (upper === 'TLS') {\n        operatorFilter[id.TLS] = that.filter.operators[name] === true;\n      } else if (upper === 'TBS') {\n        operatorFilter[id.TBS] = that.filter.operators[name] === true;\n      } else if (upper === 'TRG') {\n        operatorFilter[id.TRG] = that.filter.operators[name] === true;\n      } else if (upper === 'BKR') {\n        operatorFilter[id.BKR] = that.filter.operators[name] === true;\n      } else if (upper === 'BKA') {\n        operatorFilter[id.BKA] = that.filter.operators[name] === true;\n      } else if (upper === 'BKN') {\n        operatorFilter[id.BKN] = that.filter.operators[name] === true;\n      } else if (upper === 'ABG') {\n        operatorFilter[id.ABG] = that.filter.operators[name] === true;\n      } else if (upper === 'AEN') {\n        operatorFilter[id.AEN] = that.filter.operators[name] === true;\n      } else {\n        throw new Error(\n          `${thisFileName}initOpratorFilter: '${name}' not a valid operator name.` +\n            ` Must be <all>, <none>, alt, cat, rep, tls, tbs, trg, and, not, bkr, bka or bkn`\n        );\n      }\n    }\n  };\n  /* filter the rule and `UDT` named operators */\n  const initRuleFilter = function () {\n    const setRules = function (set) {\n      operatorFilter[id.RNM] = set;\n      operatorFilter[id.UDT] = set;\n      const count = rules.length + udts.length;\n      ruleFilter.length = 0;\n      for (let i = 0; i < count; i += 1) {\n        ruleFilter.push(set);\n      }\n    };\n    let items;\n    let i;\n    const list = [];\n    for (i = 0; i < rules.length; i += 1) {\n      list.push(rules[i].lower);\n    }\n    for (i = 0; i < udts.length; i += 1) {\n      list.push(udts[i].lower);\n    }\n    ruleFilter.length = 0;\n    items = 0;\n    // eslint-disable-next-line no-unused-vars\n    for (const name in that.filter.rules) {\n      items += 1;\n    }\n    if (items === 0) {\n      /* case 1: default to all rules & udts */\n      setRules(true);\n      return;\n    }\n    for (const name in that.filter.rules) {\n      const lower = name.toLowerCase();\n      if (lower === '<all>') {\n        /* case 2: trace all rules ignore all other rule commands */\n        setRules(true);\n        return;\n      }\n      if (lower === '<none>') {\n        /* case 3: trace no rules */\n        setRules(false);\n        return;\n      }\n    }\n    /* case 4: trace only individually specified rules */\n    setRules(false);\n    operatorFilter[id.RNM] = true;\n    operatorFilter[id.UDT] = true;\n    for (const name in that.filter.rules) {\n      const lower = name.toLowerCase();\n      i = list.indexOf(lower);\n      if (i < 0) {\n        throw new Error(`${thisFileName}initRuleFilter: '${name}' not a valid rule or udt name`);\n      }\n      ruleFilter[i] = that.filter.rules[name] === true;\n    }\n  };\n  /* used by other APG components to verify that they have a valid trace object */\n  this.traceObject = 'traceObject';\n  this.filter = {\n    operators: [],\n    rules: [],\n  };\n  // Set the maximum number of records to keep (default = 5000).\n  // Each record number larger than `maxRecords`\n  // will result in deleting the previously oldest record.\n  // - `max`: maximum number of records to retain (default = 5000)\n  // - `last`: last record number to retain, (default = -1 for (unknown) actual last record)\n  this.setMaxRecords = function (max, last) {\n    lastRecord = -1;\n    if (typeof max === 'number' && max > 0) {\n      maxRecords = Math.ceil(max);\n    } else {\n      maxRecords = 0;\n      return;\n    }\n    if (typeof last === 'number') {\n      lastRecord = Math.floor(last);\n      if (lastRecord < 0) {\n        lastRecord = -1;\n      }\n    }\n  };\n  // Returns `maxRecords` to the caller.\n  this.getMaxRecords = function () {\n    return maxRecords;\n  };\n  // Returns `lastRecord` to the caller.\n  this.getLastRecord = function () {\n    return lastRecord;\n  };\n  /* Called only by the `parser.js` object. No verification of input. */\n  this.init = function (rulesIn, udtsIn, charsIn) {\n    records.length = 0;\n    recordStack.length = 0;\n    filteredRecords = 0;\n    treeDepth = 0;\n    chars = charsIn;\n    rules = rulesIn;\n    udts = udtsIn;\n    initOperatorFilter();\n    initRuleFilter();\n    circular.init(maxRecords);\n  };\n  /* returns true if this records passes through the designated filter, false if the record is to be skipped */\n  const filterOps = function (op) {\n    let ret = false;\n    if (op.type === id.RNM) {\n      if (operatorFilter[op.type] && ruleFilter[op.index]) {\n        ret = true;\n      } else {\n        ret = false;\n      }\n    } else if (op.type === id.UDT) {\n      if (operatorFilter[op.type] && ruleFilter[rules.length + op.index]) {\n        ret = true;\n      } else {\n        ret = false;\n      }\n    } else {\n      ret = operatorFilter[op.type];\n    }\n    return ret;\n  };\n  const filterRecords = function (record) {\n    if (lastRecord === -1) {\n      return true;\n    }\n    if (record <= lastRecord) {\n      return true;\n    }\n    return false;\n  };\n  /* Collect the \"down\" record. */\n  this.down = function (op, state, offset, length, anchor, lookAround) {\n    if (filterRecords(filteredRecords) && filterOps(op)) {\n      recordStack.push(filteredRecords);\n      records[circular.increment()] = {\n        dirUp: false,\n        depth: treeDepth,\n        thisLine: filteredRecords,\n        thatLine: undefined,\n        opcode: op,\n        state,\n        phraseIndex: offset,\n        phraseLength: length,\n        lookAnchor: anchor,\n        lookAround,\n      };\n      filteredRecords += 1;\n      treeDepth += 1;\n    }\n  };\n  /* Collect the \"up\" record. */\n  this.up = function (op, state, offset, length, anchor, lookAround) {\n    if (filterRecords(filteredRecords) && filterOps(op)) {\n      const thisLine = filteredRecords;\n      const thatLine = recordStack.pop();\n      const thatRecord = circular.getListIndex(thatLine);\n      if (thatRecord !== -1) {\n        records[thatRecord].thatLine = thisLine;\n      }\n      treeDepth -= 1;\n      records[circular.increment()] = {\n        dirUp: true,\n        depth: treeDepth,\n        thisLine,\n        thatLine,\n        opcode: op,\n        state,\n        phraseIndex: offset,\n        phraseLength: length,\n        lookAnchor: anchor,\n        lookAround,\n      };\n      filteredRecords += 1;\n    }\n  };\n  /* convert the trace records to a tree of nodes */\n  const toTreeObj = function () {\n    /* private helper functions */\n    function nodeOpcode(node, opcode) {\n      let name;\n      let casetype;\n      let modetype;\n      if (opcode) {\n        node.op = { id: opcode.type, name: utils.opcodeToString(opcode.type) };\n        node.opData = undefined;\n        switch (opcode.type) {\n          case id.RNM:\n            node.opData = rules[opcode.index].name;\n            break;\n          case id.UDT:\n            node.opData = udts[opcode.index].name;\n            break;\n          case id.BKR:\n            if (opcode.index < rules.length) {\n              name = rules[opcode.index].name;\n            } else {\n              name = udts[opcode.index - rules.length].name;\n            }\n            casetype = opcode.bkrCase === id.BKR_MODE_CI ? '%i' : '%s';\n            modetype = opcode.bkrMode === id.BKR_MODE_UM ? '%u' : '%p';\n            node.opData = `\\\\\\\\${casetype}${modetype}${name}`;\n            break;\n          case id.TLS:\n            node.opData = [];\n            for (let i = 0; i < opcode.string.length; i += 1) {\n              node.opData.push(opcode.string[i]);\n            }\n            break;\n          case id.TBS:\n            node.opData = [];\n            for (let i = 0; i < opcode.string.length; i += 1) {\n              node.opData.push(opcode.string[i]);\n            }\n            break;\n          case id.TRG:\n            node.opData = [opcode.min, opcode.max];\n            break;\n          case id.REP:\n            node.opData = [opcode.min, opcode.max];\n            break;\n          default:\n            throw new Error('unrecognized opcode');\n        }\n      } else {\n        node.op = { id: undefined, name: undefined };\n        node.opData = undefined;\n      }\n    }\n    function nodePhrase(state, index, length) {\n      if (state === id.MATCH) {\n        return {\n          index,\n          length,\n        };\n      }\n      if (state === id.NOMATCH) {\n        return {\n          index,\n          length: 0,\n        };\n      }\n      if (state === id.EMPTY) {\n        return {\n          index,\n          length: 0,\n        };\n      }\n      return null;\n    }\n    let nodeId = -1;\n    function nodeDown(parent, record, depth) {\n      const node = {\n        // eslint-disable-next-line no-plusplus\n        id: nodeId++,\n        branch: -1,\n        parent,\n        up: false,\n        down: false,\n        depth,\n        children: [],\n      };\n      if (record) {\n        node.down = true;\n        node.state = { id: record.state, name: utils.stateToString(record.state) };\n        node.phrase = null;\n        nodeOpcode(node, record.opcode);\n      } else {\n        node.state = { id: undefined, name: undefined };\n        node.phrase = nodePhrase();\n        nodeOpcode(node, undefined);\n      }\n      return node;\n    }\n    function nodeUp(node, record) {\n      if (record) {\n        node.up = true;\n        node.state = { id: record.state, name: utils.stateToString(record.state) };\n        node.phrase = nodePhrase(record.state, record.phraseIndex, record.phraseLength);\n        if (!node.down) {\n          nodeOpcode(node, record.opcode);\n        }\n      }\n    }\n    /* walk the final tree: label branches and count leaf nodes */\n    let leafNodes = 0;\n    let depth = -1;\n    let branchCount = 1;\n    function walk(node) {\n      depth += 1;\n      node.branch = branchCount;\n      if (depth > treeDepth) {\n        treeDepth = depth;\n      }\n      if (node.children.length === 0) {\n        leafNodes += 1;\n      } else {\n        for (let i = 0; i < node.children.length; i += 1) {\n          if (i > 0) {\n            branchCount += 1;\n          }\n          node.children[i].leftMost = false;\n          node.children[i].rightMost = false;\n          if (node.leftMost) {\n            node.children[i].leftMost = i === 0;\n          }\n          if (node.rightMost) {\n            node.children[i].rightMost = i === node.children.length - 1;\n          }\n          walk(node.children[i]);\n        }\n      }\n      depth -= 1;\n    }\n    function display(node, offset) {\n      let name;\n      const obj = {};\n      obj.id = node.id;\n      obj.branch = node.branch;\n      obj.leftMost = node.leftMost;\n      obj.rightMost = node.rightMost;\n      name = node.state.name ? node.state.name : 'ACTIVE';\n      obj.state = { id: node.state.id, name };\n      name = node.op.name ? node.op.name : '?';\n      obj.op = { id: node.op.id, name };\n      if (typeof node.opData === 'string') {\n        obj.opData = node.opData;\n      } else if (Array.isArray(node.opData)) {\n        obj.opData = [];\n        for (let i = 0; i < node.opData.length; i += 1) {\n          obj.opData[i] = node.opData[i];\n        }\n      } else {\n        obj.opData = undefined;\n      }\n      if (node.phrase) {\n        obj.phrase = { index: node.phrase.index, length: node.phrase.length };\n      } else {\n        obj.phrase = null;\n      }\n      obj.depth = node.depth;\n      obj.children = [];\n      for (let i = 0; i < node.children.length; i += 1) {\n        const c = i !== node.children.length - 1;\n        obj.children[i] = display(node.children[i], offset, c);\n      }\n      return obj;\n    }\n\n    /* construct the tree beginning here */\n    const branch = [];\n    let root;\n    let node;\n    let parent;\n    let record;\n    let firstRecord = true;\n    /* push a dummy node so the root node will have a non-null parent */\n    const dummy = nodeDown(null, null, -1);\n    branch.push(dummy);\n    node = dummy;\n    circular.forEach((lineIndex) => {\n      record = records[lineIndex];\n      if (firstRecord) {\n        firstRecord = false;\n        if (record.depth > 0) {\n          /* push some dummy nodes to fill in for missing records */\n          const num = record.dirUp ? record.depth + 1 : record.depth;\n          for (let i = 0; i < num; i += 1) {\n            parent = node;\n            node = nodeDown(node, null, i);\n            branch.push(node);\n            parent.children.push(node);\n          }\n        }\n      }\n      if (record.dirUp) {\n        /* handle the next record up */\n        node = branch.pop();\n        nodeUp(node, record);\n        node = branch[branch.length - 1];\n      } else {\n        /* handle the next record down */\n        parent = node;\n        node = nodeDown(node, record, record.depth);\n        branch.push(node);\n        parent.children.push(node);\n      }\n    });\n\n    /* if not at root, walk it up to root */\n    while (branch.length > 1) {\n      node = branch.pop();\n      nodeUp(node, null);\n    }\n    /* maybe redundant or paranoid tests: these should never happen */\n    if (dummy.children.length === 0) {\n      throw new Error('trace.toTree(): parse tree has no nodes');\n    }\n    if (branch.length === 0) {\n      throw new Error('trace.toTree(): integrity check: dummy root node disappeared?');\n    }\n\n    /* if no record for start rule: find the pseudo root node (first dummy node above a real node) */\n    root = dummy.children[0];\n    let prev = root;\n    while (root && !root.down && !root.up) {\n      prev = root;\n      root = root.children[0];\n    }\n    root = prev;\n\n    /* walk the tree of nodes: label brances and count leaves */\n    root.leftMost = true;\n    root.rightMost = true;\n    walk(root);\n    root.branch = 0;\n\n    /* generate the exported object */\n    const obj = {};\n    obj.string = [];\n    for (let i = 0; i < chars.length; i += 1) {\n      obj.string[i] = chars[i];\n    }\n    /* generate the exported rule names */\n    obj.rules = [];\n    for (let i = 0; i < rules.length; i += 1) {\n      obj.rules[i] = rules[i].name;\n    }\n    /* generate the exported UDT names */\n    obj.udts = [];\n    for (let i = 0; i < udts.length; i += 1) {\n      obj.udts[i] = udts[i].name;\n    }\n    /* generate the ids */\n    obj.id = {};\n    obj.id.ALT = { id: id.ALT, name: 'ALT' };\n    obj.id.CAT = { id: id.CAT, name: 'CAT' };\n    obj.id.REP = { id: id.REP, name: 'REP' };\n    obj.id.RNM = { id: id.RNM, name: 'RNM' };\n    obj.id.TLS = { id: id.TLS, name: 'TLS' };\n    obj.id.TBS = { id: id.TBS, name: 'TBS' };\n    obj.id.TRG = { id: id.TRG, name: 'TRG' };\n    obj.id.UDT = { id: id.UDT, name: 'UDT' };\n    obj.id.AND = { id: id.AND, name: 'AND' };\n    obj.id.NOT = { id: id.NOT, name: 'NOT' };\n    obj.id.BKR = { id: id.BKR, name: 'BKR' };\n    obj.id.BKA = { id: id.BKA, name: 'BKA' };\n    obj.id.BKN = { id: id.BKN, name: 'BKN' };\n    obj.id.ABG = { id: id.ABG, name: 'ABG' };\n    obj.id.AEN = { id: id.AEN, name: 'AEN' };\n    obj.id.ACTIVE = { id: id.ACTIVE, name: 'ACTIVE' };\n    obj.id.MATCH = { id: id.MATCH, name: 'MATCH' };\n    obj.id.EMPTY = { id: id.EMPTY, name: 'EMPTY' };\n    obj.id.NOMATCH = { id: id.NOMATCH, name: 'NOMATCH' };\n    /* generate the max tree depth */\n    obj.treeDepth = treeDepth;\n    /* generate the number of leaf nodes (branches) */\n    obj.leafNodes = leafNodes;\n    /* generate the types of the left- and right-most branches */\n    let branchesIncomplete;\n    if (root.down) {\n      if (root.up) {\n        branchesIncomplete = 'none';\n      } else {\n        branchesIncomplete = 'right';\n      }\n    } else if (root.up) {\n      branchesIncomplete = 'left';\n    } else {\n      branchesIncomplete = 'both';\n    }\n    obj.branchesIncomplete = branchesIncomplete;\n    obj.tree = display(root, root.depth, false);\n    return obj;\n  };\n  // Returns the trace records as JSON parse tree object.\n  // - stringify: if `true`, the object is 'stringified' before returning, otherwise, the object itself is returned.\n  this.toTree = function (stringify) {\n    const obj = toTreeObj();\n    if (stringify) {\n      return JSON.stringify(obj);\n    }\n    return obj;\n  };\n  // Translate the trace records to HTML format and create a complete HTML page for browser display.\n  this.toHtmlPage = function (mode, caption, title) {\n    return utils.htmlToPage(this.toHtml(mode, caption), title);\n  };\n\n  /* From here on down, these are just helper functions for `toHtml()`. */\n  const htmlHeader = function (mode, caption) {\n    /* open the page */\n    /* write the HTML5 header with table style */\n    /* open the <table> tag */\n    let modeName;\n    switch (mode) {\n      case MODE_HEX:\n        modeName = 'hexadecimal';\n        break;\n      case MODE_DEC:\n        modeName = 'decimal';\n        break;\n      case MODE_ASCII:\n        modeName = 'ASCII';\n        break;\n      case MODE_UNICODE:\n        modeName = 'UNICODE';\n        break;\n      default:\n        throw new Error(`${thisFileName}htmlHeader: unrecognized mode: ${mode}`);\n    }\n    let header = '';\n    header += `<p>display mode: ${modeName}</p>\\n`;\n    header += `<table class=\"${style.CLASS_TRACE}\">\\n`;\n    if (typeof caption === 'string') {\n      header += `<caption>${caption}</caption>`;\n    }\n    return header;\n  };\n  const htmlFooter = function () {\n    let footer = '';\n    /* close the </table> tag */\n    footer += '</table>\\n';\n    /* display a table legend */\n    footer += `<p class=\"${style.CLASS_MONOSPACE}\">legend:<br>\\n`;\n    footer += '(a)&nbsp;-&nbsp;line number<br>\\n';\n    footer += '(b)&nbsp;-&nbsp;matching line number<br>\\n';\n    footer += '(c)&nbsp;-&nbsp;phrase offset<br>\\n';\n    footer += '(d)&nbsp;-&nbsp;phrase length<br>\\n';\n    footer += '(e)&nbsp;-&nbsp;tree depth<br>\\n';\n    footer += '(f)&nbsp;-&nbsp;operator state<br>\\n';\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_ACTIVE}\">&darr;</span>&nbsp;&nbsp;phrase opened<br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_MATCH}\">&uarr;M</span> phrase matched<br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_EMPTY}\">&uarr;E</span> empty phrase matched<br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_NOMATCH}\">&uarr;N</span> phrase not matched<br>\\n`;\n    footer +=\n      'operator&nbsp;-&nbsp;ALT, CAT, REP, RNM, TRG, TLS, TBS<sup>&dagger;</sup>, UDT, AND, NOT, BKA, BKN, BKR, ABG, AEN<sup>&Dagger;</sup><br>\\n';\n    footer += `phrase&nbsp;&nbsp;&nbsp;-&nbsp;up to ${MAX_PHRASE} characters of the phrase being matched<br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_MATCH}\">matched characters</span><br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_LOOKAHEAD}\">matched characters in look ahead mode</span><br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_LOOKBEHIND}\">matched characters in look behind mode</span><br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_REMAINDER}\">remainder characters(not yet examined by parser)</span><br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_CTRLCHAR}\">control characters, TAB, LF, CR, etc. (ASCII mode only)</span><br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;${PHRASE_EMPTY} empty string<br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;${PHRASE_END} end of input string<br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;${PHRASE_CONTINUE} input string display truncated<br>\\n`;\n    footer += '</p>\\n';\n    footer += `<p class=\"${style.CLASS_MONOSPACE}\">\\n`;\n    footer += '<sup>&dagger;</sup>original ABNF operators:<br>\\n';\n    footer += 'ALT - alternation<br>\\n';\n    footer += 'CAT - concatenation<br>\\n';\n    footer += 'REP - repetition<br>\\n';\n    footer += 'RNM - rule name<br>\\n';\n    footer += 'TRG - terminal range<br>\\n';\n    footer += 'TLS - terminal literal string (case insensitive)<br>\\n';\n    footer += 'TBS - terminal binary string (case sensitive)<br>\\n';\n    footer += '<br>\\n';\n    footer += '<sup>&Dagger;</sup>super set SABNF operators:<br>\\n';\n    footer += 'UDT - user-defined terminal<br>\\n';\n    footer += 'AND - positive look ahead<br>\\n';\n    footer += 'NOT - negative look ahead<br>\\n';\n    footer += 'BKA - positive look behind<br>\\n';\n    footer += 'BKN - negative look behind<br>\\n';\n    footer += 'BKR - back reference<br>\\n';\n    footer += 'ABG - anchor - begin of input string<br>\\n';\n    footer += 'AEN - anchor - end of input string<br>\\n';\n    footer += '</p>\\n';\n    return footer;\n  };\n  this.indent = function (depth) {\n    let html = '';\n    for (let i = 0; i < depth; i += 1) {\n      html += '.';\n    }\n    return html;\n  };\n  /* format the TRG operator */\n  const displayTrg = function (mode, op) {\n    let html = '';\n    if (op.type === id.TRG) {\n      if (mode === MODE_HEX || mode === MODE_UNICODE) {\n        let hex = op.min.toString(16).toUpperCase();\n        if (hex.length % 2 !== 0) {\n          hex = `0${hex}`;\n        }\n        html += mode === MODE_HEX ? '%x' : 'U+';\n        html += hex;\n        hex = op.max.toString(16).toUpperCase();\n        if (hex.length % 2 !== 0) {\n          hex = `0${hex}`;\n        }\n        html += `&ndash;${hex}`;\n      } else {\n        html = `%d${op.min.toString(10)}&ndash;${op.max.toString(10)}`;\n      }\n    }\n    return html;\n  };\n  /* format the REP operator */\n  const displayRep = function (mode, op) {\n    let html = '';\n    if (op.type === id.REP) {\n      if (mode === MODE_HEX) {\n        let hex = op.min.toString(16).toUpperCase();\n        if (hex.length % 2 !== 0) {\n          hex = `0${hex}`;\n        }\n        html = `x${hex}`;\n        if (op.max < Infinity) {\n          hex = op.max.toString(16).toUpperCase();\n          if (hex.length % 2 !== 0) {\n            hex = `0${hex}`;\n          }\n        } else {\n          hex = 'inf';\n        }\n        html += `&ndash;${hex}`;\n      } else if (op.max < Infinity) {\n        html = `${op.min.toString(10)}&ndash;${op.max.toString(10)}`;\n      } else {\n        html = `${op.min.toString(10)}&ndash;inf`;\n      }\n    }\n    return html;\n  };\n  /* format the TBS operator */\n  const displayTbs = function (mode, op) {\n    let html = '';\n    if (op.type === id.TBS) {\n      const len = Math.min(op.string.length, MAX_TLS * 2);\n      if (mode === MODE_HEX || mode === MODE_UNICODE) {\n        html += mode === MODE_HEX ? '%x' : 'U+';\n        for (let i = 0; i < len; i += 1) {\n          let hex;\n          if (i > 0) {\n            html += '.';\n          }\n          hex = op.string[i].toString(16).toUpperCase();\n          if (hex.length % 2 !== 0) {\n            hex = `0${hex}`;\n          }\n          html += hex;\n        }\n      } else {\n        html = '%d';\n        for (let i = 0; i < len; i += 1) {\n          if (i > 0) {\n            html += '.';\n          }\n          html += op.string[i].toString(10);\n        }\n      }\n      if (len < op.string.length) {\n        html += PHRASE_CONTINUE;\n      }\n    }\n    return html;\n  };\n  /* format the TLS operator */\n  const displayTls = function (mode, op) {\n    let html = '';\n    if (op.type === id.TLS) {\n      const len = Math.min(op.string.length, MAX_TLS);\n      if (mode === MODE_HEX || mode === MODE_DEC) {\n        let charu;\n        let charl;\n        let base;\n        if (mode === MODE_HEX) {\n          html = '%x';\n          base = 16;\n        } else {\n          html = '%d';\n          base = 10;\n        }\n        for (let i = 0; i < len; i += 1) {\n          if (i > 0) {\n            html += '.';\n          }\n          charl = op.string[i];\n          if (charl >= 97 && charl <= 122) {\n            charu = charl - 32;\n            html += `${charu.toString(base)}/${charl.toString(base)}`.toUpperCase();\n          } else if (charl >= 65 && charl <= 90) {\n            charu = charl;\n            charl += 32;\n            html += `${charu.toString(base)}/${charl.toString(base)}`.toUpperCase();\n          } else {\n            html += charl.toString(base).toUpperCase();\n          }\n        }\n        if (len < op.string.length) {\n          html += PHRASE_CONTINUE;\n        }\n      } else {\n        html = '\"';\n        for (let i = 0; i < len; i += 1) {\n          html += utils.asciiChars[op.string[i]];\n        }\n        if (len < op.string.length) {\n          html += PHRASE_CONTINUE;\n        }\n        html += '\"';\n      }\n    }\n    return html;\n  };\n  const subPhrase = function (mode, charsArg, index, length, prev) {\n    if (length === 0) {\n      return '';\n    }\n    let phrase = '';\n    const comma = prev ? ',' : '';\n    switch (mode) {\n      case MODE_HEX:\n        phrase = comma + utils.charsToHex(charsArg, index, length);\n        break;\n      case MODE_DEC:\n        if (prev) {\n          return `,${utils.charsToDec(charsArg, index, length)}`;\n        }\n        phrase = comma + utils.charsToDec(charsArg, index, length);\n        break;\n      case MODE_UNICODE:\n        phrase = utils.charsToUnicode(charsArg, index, length);\n        break;\n      case MODE_ASCII:\n      default:\n        phrase = utils.charsToAsciiHtml(charsArg, index, length);\n        break;\n    }\n    return phrase;\n  };\n  /* display phrases matched in look-behind mode */\n  const displayBehind = function (mode, charsArg, state, index, length, anchor) {\n    let html = '';\n    let beg1;\n    let len1;\n    let beg2;\n    let len2;\n    let lastchar = PHRASE_END;\n    const spanBehind = `<span class=\"${style.CLASS_LOOKBEHIND}\">`;\n    const spanRemainder = `<span class=\"${style.CLASS_REMAINDER}\">`;\n    const spanend = '</span>';\n    let prev = false;\n    switch (state) {\n      case id.EMPTY:\n        html += PHRASE_EMPTY;\n      /* // eslint-disable-next-line no-fallthrough */\n      case id.NOMATCH:\n      case id.MATCH:\n      case id.ACTIVE:\n        beg1 = index - length;\n        len1 = anchor - beg1;\n        beg2 = anchor;\n        len2 = charsArg.length - beg2;\n        break;\n      default:\n        throw new Error('unrecognized state');\n    }\n    lastchar = PHRASE_END;\n    if (len1 > MAX_PHRASE) {\n      len1 = MAX_PHRASE;\n      lastchar = PHRASE_CONTINUE;\n      len2 = 0;\n    } else if (len1 + len2 > MAX_PHRASE) {\n      lastchar = PHRASE_CONTINUE;\n      len2 = MAX_PHRASE - len1;\n    }\n    if (len1 > 0) {\n      html += spanBehind;\n      html += subPhrase(mode, charsArg, beg1, len1, prev);\n      html += spanend;\n      prev = true;\n    }\n    if (len2 > 0) {\n      html += spanRemainder;\n      html += subPhrase(mode, charsArg, beg2, len2, prev);\n      html += spanend;\n    }\n    return html + lastchar;\n  };\n  const displayForward = function (mode, charsArg, state, index, length, spanAhead) {\n    let html = '';\n    let beg1;\n    let len1;\n    let beg2;\n    let len2;\n    let lastchar = PHRASE_END;\n    const spanRemainder = `<span class=\"${style.CLASS_REMAINDER}\">`;\n    const spanend = '</span>';\n    let prev = false;\n    switch (state) {\n      case id.EMPTY:\n        html += PHRASE_EMPTY;\n      /* // eslint-disable-next-line no-fallthrough */\n      case id.NOMATCH:\n      case id.ACTIVE:\n        beg1 = index;\n        len1 = 0;\n        beg2 = index;\n        len2 = charsArg.length - beg2;\n        break;\n      case id.MATCH:\n        beg1 = index;\n        len1 = length;\n        beg2 = index + len1;\n        len2 = charsArg.length - beg2;\n        break;\n      default:\n        throw new Error('unrecognized state');\n    }\n    lastchar = PHRASE_END;\n    if (len1 > MAX_PHRASE) {\n      len1 = MAX_PHRASE;\n      lastchar = PHRASE_CONTINUE;\n      len2 = 0;\n    } else if (len1 + len2 > MAX_PHRASE) {\n      lastchar = PHRASE_CONTINUE;\n      len2 = MAX_PHRASE - len1;\n    }\n    if (len1 > 0) {\n      html += spanAhead;\n      html += subPhrase(mode, charsArg, beg1, len1, prev);\n      html += spanend;\n      prev = true;\n    }\n    if (len2 > 0) {\n      html += spanRemainder;\n      html += subPhrase(mode, charsArg, beg2, len2, prev);\n      html += spanend;\n    }\n    return html + lastchar;\n  };\n  /* display phrases matched in look-ahead mode */\n  const displayAhead = function (mode, charsArg, state, index, length) {\n    const spanAhead = `<span class=\"${style.CLASS_LOOKAHEAD}\">`;\n    return displayForward(mode, charsArg, state, index, length, spanAhead);\n  };\n  /* display phrases matched in normal parsing mode */\n  const displayNone = function (mode, charsArg, state, index, length) {\n    const spanAhead = `<span class=\"${style.CLASS_MATCH}\">`;\n    return displayForward(mode, charsArg, state, index, length, spanAhead);\n  };\n  /* Returns the filtered records, formatted as an HTML table. */\n  const htmlTable = function (mode) {\n    if (rules === null) {\n      return '';\n    }\n    let html = '';\n    let thisLine;\n    let thatLine;\n    let lookAhead;\n    let lookBehind;\n    let lookAround;\n    let anchor;\n    html += '<tr><th>(a)</th><th>(b)</th><th>(c)</th><th>(d)</th><th>(e)</th><th>(f)</th>';\n    html += '<th>operator</th><th>phrase</th></tr>\\n';\n    circular.forEach((lineIndex) => {\n      const line = records[lineIndex];\n      thisLine = line.thisLine;\n      thatLine = line.thatLine !== undefined ? line.thatLine : '--';\n      lookAhead = false;\n      lookBehind = false;\n      lookAround = false;\n      if (line.lookAround === id.LOOKAROUND_AHEAD) {\n        lookAhead = true;\n        lookAround = true;\n        anchor = line.lookAnchor;\n      }\n      if (line.opcode.type === id.AND || line.opcode.type === id.NOT) {\n        lookAhead = true;\n        lookAround = true;\n        anchor = line.phraseIndex;\n      }\n      if (line.lookAround === id.LOOKAROUND_BEHIND) {\n        lookBehind = true;\n        lookAround = true;\n        anchor = line.lookAnchor;\n      }\n      if (line.opcode.type === id.BKA || line.opcode.type === id.BKN) {\n        lookBehind = true;\n        lookAround = true;\n        anchor = line.phraseIndex;\n      }\n      html += '<tr>';\n      html += `<td>${thisLine}</td><td>${thatLine}</td>`;\n      html += `<td>${line.phraseIndex}</td>`;\n      html += `<td>${line.phraseLength}</td>`;\n      html += `<td>${line.depth}</td>`;\n      html += '<td>';\n      switch (line.state) {\n        case id.ACTIVE:\n          html += `<span class=\"${style.CLASS_ACTIVE}\">&darr;&nbsp;</span>`;\n          break;\n        case id.MATCH:\n          html += `<span class=\"${style.CLASS_MATCH}\">&uarr;M</span>`;\n          break;\n        case id.NOMATCH:\n          html += `<span class=\"${style.CLASS_NOMATCH}\">&uarr;N</span>`;\n          break;\n        case id.EMPTY:\n          html += `<span class=\"${style.CLASS_EMPTY}\">&uarr;E</span>`;\n          break;\n        default:\n          html += `<span class=\"${style.CLASS_ACTIVE}\">--</span>`;\n          break;\n      }\n      html += '</td>';\n      html += '<td>';\n      html += that.indent(line.depth);\n      if (lookAhead) {\n        html += `<span class=\"${style.CLASS_LOOKAHEAD}\">`;\n      } else if (lookBehind) {\n        html += `<span class=\"${style.CLASS_LOOKBEHIND}\">`;\n      }\n      html += utils.opcodeToString(line.opcode.type);\n      if (line.opcode.type === id.RNM) {\n        html += `(${rules[line.opcode.index].name}) `;\n      }\n      if (line.opcode.type === id.BKR) {\n        const casetype = line.opcode.bkrCase === id.BKR_MODE_CI ? '%i' : '%s';\n        const modetype = line.opcode.bkrMode === id.BKR_MODE_UM ? '%u' : '%p';\n        html += `(\\\\${casetype}${modetype}${rules[line.opcode.index].name}) `;\n      }\n      if (line.opcode.type === id.UDT) {\n        html += `(${udts[line.opcode.index].name}) `;\n      }\n      if (line.opcode.type === id.TRG) {\n        html += `(${displayTrg(mode, line.opcode)}) `;\n      }\n      if (line.opcode.type === id.TBS) {\n        html += `(${displayTbs(mode, line.opcode)}) `;\n      }\n      if (line.opcode.type === id.TLS) {\n        html += `(${displayTls(mode, line.opcode)}) `;\n      }\n      if (line.opcode.type === id.REP) {\n        html += `(${displayRep(mode, line.opcode)}) `;\n      }\n      if (lookAround) {\n        html += '</span>';\n      }\n      html += '</td>';\n      html += '<td>';\n      if (lookBehind) {\n        html += displayBehind(mode, chars, line.state, line.phraseIndex, line.phraseLength, anchor);\n      } else if (lookAhead) {\n        html += displayAhead(mode, chars, line.state, line.phraseIndex, line.phraseLength);\n      } else {\n        html += displayNone(mode, chars, line.state, line.phraseIndex, line.phraseLength);\n      }\n      html += '</td></tr>\\n';\n    });\n    html += '<tr><th>(a)</th><th>(b)</th><th>(c)</th><th>(d)</th><th>(e)</th><th>(f)</th>';\n    html += '<th>operator</th><th>phrase</th></tr>\\n';\n    html += '</table>\\n';\n    return html;\n  };\n  // Translate the trace records to HTML format.\n  // - *modearg* - can be `\"ascii\"`, `\"decimal\"`, `\"hexadecimal\"` or `\"unicode\"`.\n  // Determines the format of the string character code display.\n  // - *caption* - optional caption for the HTML table.\n  this.toHtml = function (modearg, caption) {\n    /* writes the trace records as a table in a complete html page */\n    let mode = MODE_ASCII;\n    if (typeof modearg === 'string' && modearg.length >= 3) {\n      const modein = modearg.toLowerCase().slice(0, 3);\n      if (modein === 'hex') {\n        mode = MODE_HEX;\n      } else if (modein === 'dec') {\n        mode = MODE_DEC;\n      } else if (modein === 'uni') {\n        mode = MODE_UNICODE;\n      }\n    }\n    let html = '';\n    html += htmlHeader(mode, caption);\n    html += htmlTable(mode);\n    html += htmlFooter();\n    return html;\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/trace.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/utilities.js":
/*!******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/utilities.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* eslint-disable func-names */\n/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module exports a variety of utility functions that support\n// [`apg`](https://github.com/ldthomas/apg-js2), [`apg-lib`](https://github.com/ldthomas/apg-js2-lib)\n// and the generated parser applications.\n\nconst style = __webpack_require__(/*! ./style */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/style.js\");\nconst converter = __webpack_require__(/*! ../apg-conv-api/converter */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-conv-api/converter.js\");\nconst emitCss = __webpack_require__(/*! ./emitcss */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/emitcss.js\");\nconst id = __webpack_require__(/*! ./identifiers */ \"(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/identifiers.js\");\n\nconst thisFileName = 'utilities.js: ';\n\n/* translate (implied) phrase beginning character and length to actual first and last character indexes */\n/* used by multiple phrase handling functions */\nconst getBounds = function (length, begArg, len) {\n  let end;\n  let beg = begArg;\n  const TRUE = true;\n  while (TRUE) {\n    if (length <= 0) {\n      beg = 0;\n      end = 0;\n      break;\n    }\n    if (typeof beg !== 'number') {\n      beg = 0;\n      end = length;\n      break;\n    }\n    if (beg >= length) {\n      beg = length;\n      end = length;\n      break;\n    }\n    if (typeof len !== 'number') {\n      end = length;\n      break;\n    }\n    end = beg + len;\n    if (end > length) {\n      end = length;\n      break;\n    }\n    break;\n  }\n  return {\n    beg,\n    end,\n  };\n};\n// Generates a complete, minimal HTML5 page, inserting the user's HTML text on the page.\n// - *html* - the page text in HTML format\n// - *title* - the HTML page `<title>` - defaults to `htmlToPage`.\nexports.htmlToPage = function (html, titleArg) {\n  let title;\n  if (typeof html !== 'string') {\n    throw new Error(`${thisFileName}htmlToPage: input HTML is not a string`);\n  }\n  if (typeof titleArg !== 'string') {\n    title = 'htmlToPage';\n  } else {\n    title = titleArg;\n  }\n  let page = '';\n  page += '<!DOCTYPE html>\\n';\n  page += '<html lang=\"en\">\\n';\n  page += '<head>\\n';\n  page += '<meta charset=\"utf-8\">\\n';\n  page += `<title>${title}</title>\\n`;\n  page += '<style>\\n';\n  page += emitCss();\n  page += '</style>\\n';\n  page += '</head>\\n<body>\\n';\n  page += `<p>${new Date()}</p>\\n`;\n  page += html;\n  page += '</body>\\n</html>\\n';\n  return page;\n};\n// Formats the returned object from `parser.parse()`\n// into an HTML table.\n// ```\n// return {\n//   success : sysData.success,\n//   state : sysData.state,\n//   length : charsLength,\n//   matched : sysData.phraseLength,\n//   maxMatched : maxMatched,\n//   maxTreeDepth : maxTreeDepth,\n//   nodeHits : nodeHits,\n//   inputLength : chars.length,\n//   subBegin : charsBegin,\n//   subEnd : charsEnd,\n//   subLength : charsLength\n// };\n// ```\nexports.parserResultToHtml = function (result, caption) {\n  let cap = null;\n  if (typeof caption === 'string' && caption !== '') {\n    cap = caption;\n  }\n  let success;\n  let state;\n  if (result.success === true) {\n    success = `<span class=\"${style.CLASS_MATCH}\">true</span>`;\n  } else {\n    success = `<span class=\"${style.CLASS_NOMATCH}\">false</span>`;\n  }\n  if (result.state === id.EMPTY) {\n    state = `<span class=\"${style.CLASS_EMPTY}\">EMPTY</span>`;\n  } else if (result.state === id.MATCH) {\n    state = `<span class=\"${style.CLASS_MATCH}\">MATCH</span>`;\n  } else if (result.state === id.NOMATCH) {\n    state = `<span class=\"${style.CLASS_NOMATCH}\">NOMATCH</span>`;\n  } else {\n    state = `<span class=\"${style.CLASS_NOMATCH}\">unrecognized</span>`;\n  }\n  let html = '';\n  html += `<table class=\"${style.CLASS_STATE}\">\\n`;\n  if (cap) {\n    html += `<caption>${cap}</caption>\\n`;\n  }\n  html += '<tr><th>state item</th><th>value</th><th>description</th></tr>\\n';\n  html += `<tr><td>parser success</td><td>${success}</td>\\n`;\n  html += `<td><span class=\"${style.CLASS_MATCH}\">true</span> if the parse succeeded,\\n`;\n  html += ` <span class=\"${style.CLASS_NOMATCH}\">false</span> otherwise`;\n  html += '<br><i>NOTE: for success, entire string must be matched</i></td></tr>\\n';\n  html += `<tr><td>parser state</td><td>${state}</td>\\n`;\n  html += `<td><span class=\"${style.CLASS_EMPTY}\">EMPTY</span>, `;\n  html += `<span class=\"${style.CLASS_MATCH}\">MATCH</span> or \\n`;\n  html += `<span class=\"${style.CLASS_NOMATCH}\">NOMATCH</span></td></tr>\\n`;\n  html += `<tr><td>string length</td><td>${result.length}</td><td>length of the input (sub)string</td></tr>\\n`;\n  html += `<tr><td>matched length</td><td>${result.matched}</td><td>number of input string characters matched</td></tr>\\n`;\n  html += `<tr><td>max matched</td><td>${result.maxMatched}</td><td>maximum number of input string characters matched</td></tr>\\n`;\n  html += `<tr><td>max tree depth</td><td>${result.maxTreeDepth}</td><td>maximum depth of the parse tree reached</td></tr>\\n`;\n  html += `<tr><td>node hits</td><td>${result.nodeHits}</td><td>number of parse tree node hits (opcode function calls)</td></tr>\\n`;\n  html += `<tr><td>input length</td><td>${result.inputLength}</td><td>length of full input string</td></tr>\\n`;\n  html += `<tr><td>sub-string begin</td><td>${result.subBegin}</td><td>sub-string first character index</td></tr>\\n`;\n  html += `<tr><td>sub-string end</td><td>${result.subEnd}</td><td>sub-string end-of-string index</td></tr>\\n`;\n  html += `<tr><td>sub-string length</td><td>${result.subLength}</td><td>sub-string length</td></tr>\\n`;\n  html += '</table>\\n';\n  return html;\n};\n// Translates a sub-array of integer character codes into a string.\n// Very useful in callback functions to translate the matched phrases into strings.\nexports.charsToString = function (chars, phraseIndex, phraseLength) {\n  let beg;\n  let end;\n  if (typeof phraseIndex === 'number') {\n    if (phraseIndex >= chars.length) {\n      return '';\n    }\n    beg = phraseIndex < 0 ? 0 : phraseIndex;\n  } else {\n    beg = 0;\n  }\n  if (typeof phraseLength === 'number') {\n    if (phraseLength <= 0) {\n      return '';\n    }\n    end = phraseLength > chars.length - beg ? chars.length : beg + phraseLength;\n  } else {\n    end = chars.length;\n  }\n  if (beg < end) {\n    return converter.encode('UTF16LE', chars.slice(beg, end)).toString('utf16le');\n  }\n  return '';\n};\n// Translates a string into an array of integer character codes.\nexports.stringToChars = function (string) {\n  return converter.decode('STRING', string);\n};\n// Translates an opcode identifier into a human-readable string.\nexports.opcodeToString = function (type) {\n  let ret = 'unknown';\n  switch (type) {\n    case id.ALT:\n      ret = 'ALT';\n      break;\n    case id.CAT:\n      ret = 'CAT';\n      break;\n    case id.RNM:\n      ret = 'RNM';\n      break;\n    case id.UDT:\n      ret = 'UDT';\n      break;\n    case id.AND:\n      ret = 'AND';\n      break;\n    case id.NOT:\n      ret = 'NOT';\n      break;\n    case id.REP:\n      ret = 'REP';\n      break;\n    case id.TRG:\n      ret = 'TRG';\n      break;\n    case id.TBS:\n      ret = 'TBS';\n      break;\n    case id.TLS:\n      ret = 'TLS';\n      break;\n    case id.BKR:\n      ret = 'BKR';\n      break;\n    case id.BKA:\n      ret = 'BKA';\n      break;\n    case id.BKN:\n      ret = 'BKN';\n      break;\n    case id.ABG:\n      ret = 'ABG';\n      break;\n    case id.AEN:\n      ret = 'AEN';\n      break;\n    default:\n      throw new Error('unrecognized opcode');\n  }\n  return ret;\n};\n// Translates an state identifier into a human-readable string.\nexports.stateToString = function (state) {\n  let ret = 'unknown';\n  switch (state) {\n    case id.ACTIVE:\n      ret = 'ACTIVE';\n      break;\n    case id.MATCH:\n      ret = 'MATCH';\n      break;\n    case id.EMPTY:\n      ret = 'EMPTY';\n      break;\n    case id.NOMATCH:\n      ret = 'NOMATCH';\n      break;\n    default:\n      throw new Error('unrecognized state');\n  }\n  return ret;\n};\n// Array which translates all 128, 7-bit ASCII character codes to their respective HTML format.\nexports.asciiChars = [\n  'NUL',\n  'SOH',\n  'STX',\n  'ETX',\n  'EOT',\n  'ENQ',\n  'ACK',\n  'BEL',\n  'BS',\n  'TAB',\n  'LF',\n  'VT',\n  'FF',\n  'CR',\n  'SO',\n  'SI',\n  'DLE',\n  'DC1',\n  'DC2',\n  'DC3',\n  'DC4',\n  'NAK',\n  'SYN',\n  'ETB',\n  'CAN',\n  'EM',\n  'SUB',\n  'ESC',\n  'FS',\n  'GS',\n  'RS',\n  'US',\n  '&nbsp;',\n  '!',\n  '&#34;',\n  '#',\n  '$',\n  '%',\n  '&#38;',\n  '&#39;',\n  '(',\n  ')',\n  '*',\n  '+',\n  ',',\n  '-',\n  '.',\n  '/',\n  '0',\n  '1',\n  '2',\n  '3',\n  '4',\n  '5',\n  '6',\n  '7',\n  '8',\n  '9',\n  ':',\n  ';',\n  '&#60;',\n  '=',\n  '&#62;',\n  '?',\n  '@',\n  'A',\n  'B',\n  'C',\n  'D',\n  'E',\n  'F',\n  'G',\n  'H',\n  'I',\n  'J',\n  'K',\n  'L',\n  'M',\n  'N',\n  'O',\n  'P',\n  'Q',\n  'R',\n  'S',\n  'T',\n  'U',\n  'V',\n  'W',\n  'X',\n  'Y',\n  'Z',\n  '[',\n  '&#92;',\n  ']',\n  '^',\n  '_',\n  '`',\n  'a',\n  'b',\n  'c',\n  'd',\n  'e',\n  'f',\n  'g',\n  'h',\n  'i',\n  'j',\n  'k',\n  'l',\n  'm',\n  'n',\n  'o',\n  'p',\n  'q',\n  'r',\n  's',\n  't',\n  'u',\n  'v',\n  'w',\n  'x',\n  'y',\n  'z',\n  '{',\n  '|',\n  '}',\n  '~',\n  'DEL',\n];\n// Translates a single character to hexadecimal with leading zeros for 2, 4, or 8 digit display.\nexports.charToHex = function (char) {\n  let ch = char.toString(16).toUpperCase();\n  switch (ch.length) {\n    case 1:\n    case 3:\n    case 7:\n      ch = `0${ch}`;\n      break;\n    case 2:\n    case 6:\n      ch = `00${ch}`;\n      break;\n    case 4:\n      break;\n    case 5:\n      ch = `000${ch}`;\n      break;\n    default:\n      throw new Error('unrecognized option');\n  }\n  return ch;\n};\n// Translates a sub-array of character codes to decimal display format.\nexports.charsToDec = function (chars, beg, len) {\n  let ret = '';\n  if (!Array.isArray(chars)) {\n    throw new Error(`${thisFileName}charsToDec: input must be an array of integers`);\n  }\n  const bounds = getBounds(chars.length, beg, len);\n  if (bounds.end > bounds.beg) {\n    ret += chars[bounds.beg];\n    for (let i = bounds.beg + 1; i < bounds.end; i += 1) {\n      ret += `,${chars[i]}`;\n    }\n  }\n  return ret;\n};\n// Translates a sub-array of character codes to hexadecimal display format.\nexports.charsToHex = function (chars, beg, len) {\n  let ret = '';\n  if (!Array.isArray(chars)) {\n    throw new Error(`${thisFileName}charsToHex: input must be an array of integers`);\n  }\n  const bounds = getBounds(chars.length, beg, len);\n  if (bounds.end > bounds.beg) {\n    ret += `\\\\x${exports.charToHex(chars[bounds.beg])}`;\n    for (let i = bounds.beg + 1; i < bounds.end; i += 1) {\n      ret += `,\\\\x${exports.charToHex(chars[i])}`;\n    }\n  }\n  return ret;\n};\nexports.charsToHtmlEntities = function (chars, beg, len) {\n  let ret = '';\n  if (!Array.isArray(chars)) {\n    throw new Error(`${thisFileName}charsToHex: input must be an array of integers`);\n  }\n  const bounds = getBounds(chars.length, beg, len);\n  if (bounds.end > bounds.beg) {\n    for (let i = bounds.beg; i < bounds.end; i += 1) {\n      ret += `&#x${chars[i].toString(16)};`;\n    }\n  }\n  return ret;\n};\n// Translates a sub-array of character codes to Unicode display format.\nfunction isUnicode(char) {\n  if (char >= 0xd800 && char <= 0xdfff) {\n    return false;\n  }\n  if (char > 0x10ffff) {\n    return false;\n  }\n  return true;\n}\nexports.charsToUnicode = function (chars, beg, len) {\n  let ret = '';\n  if (!Array.isArray(chars)) {\n    throw new Error(`${thisFileName}charsToUnicode: input must be an array of integers`);\n  }\n  const bounds = getBounds(chars.length, beg, len);\n  if (bounds.end > bounds.beg) {\n    for (let i = bounds.beg; i < bounds.end; i += 1) {\n      if (isUnicode(chars[i])) {\n        ret += `&#${chars[i]};`;\n      } else {\n        ret += ` U+${exports.charToHex(chars[i])}`;\n      }\n    }\n  }\n  return ret;\n};\n// Translates a sub-array of character codes to JavaScript Unicode display format (`\\uXXXX`).\nexports.charsToJsUnicode = function (chars, beg, len) {\n  let ret = '';\n  if (!Array.isArray(chars)) {\n    throw new Error(`${thisFileName}charsToJsUnicode: input must be an array of integers`);\n  }\n  const bounds = getBounds(chars.length, beg, len);\n  if (bounds.end > bounds.beg) {\n    ret += `\\\\u${exports.charToHex(chars[bounds.beg])}`;\n    for (let i = bounds.beg + 1; i < bounds.end; i += 1) {\n      ret += `,\\\\u${exports.charToHex(chars[i])}`;\n    }\n  }\n  return ret;\n};\n// Translates a sub-array of character codes to printing ASCII character display format.\nexports.charsToAscii = function (chars, beg, len) {\n  let ret = '';\n  if (!Array.isArray(chars)) {\n    throw new Error(`${thisFileName}charsToAscii: input must be an array of integers`);\n  }\n  const bounds = getBounds(chars.length, beg, len);\n  for (let i = bounds.beg; i < bounds.end; i += 1) {\n    const char = chars[i];\n    if (char >= 32 && char <= 126) {\n      ret += String.fromCharCode(char);\n    } else {\n      ret += `\\\\x${exports.charToHex(char)}`;\n    }\n  }\n  return ret;\n};\n// Translates a sub-array of character codes to HTML display format.\nexports.charsToAsciiHtml = function (chars, beg, len) {\n  if (!Array.isArray(chars)) {\n    throw new Error(`${thisFileName}charsToAsciiHtml: input must be an array of integers`);\n  }\n  let html = '';\n  let char;\n  const bounds = getBounds(chars.length, beg, len);\n  for (let i = bounds.beg; i < bounds.end; i += 1) {\n    char = chars[i];\n    if (char < 32 || char === 127) {\n      /* control characters */\n      html += `<span class=\"${style.CLASS_CTRLCHAR}\">${exports.asciiChars[char]}</span>`;\n    } else if (char > 127) {\n      /* non-ASCII */\n      html += `<span class=\"${style.CLASS_CTRLCHAR}\">U+${exports.charToHex(char)}</span>`;\n    } else {\n      /* printing ASCII, 32 <= char <= 126 */\n      html += exports.asciiChars[char];\n    }\n  }\n  return html;\n};\n// Translates a JavaScript string to HTML display format.\nexports.stringToAsciiHtml = function (str) {\n  const chars = converter.decode('STRING', str);\n  return this.charsToAsciiHtml(chars);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/utilities.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/api.js":
/*!************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/api.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This module is Application Programming Interface (API) for **APG** - the ABNF Parser Generator.\n//\n// *Note on teminology.*\n// APG is a parser generator.\n// However, it really only generates a \"grammar object\" (see below) from the defining SABNF grammar.\n// The generated parser is incomplete at this stage.\n// Remaining, it is the job of the user to develop the generated parser from the grammar object and the **APG** Library (**apg-lib**).\n//\n// The following terminology my help clear up any confusion between the idea of a \"generated parser\" versus a \"generated grammar object\".\n// - The generating parser: **APG** is an **APG** parser (yes, there is a circular dependence between **apg-api** and **apg-lib**). We'll call it the generating parser.\n// - The target parser: **APG**'s goal is to generate a parser. We'll call it the target parser.\n// - The target grammar: this is the (ASCII) SABNF grammar defining the target parser.\n// - The target grammar object: **APG** parses the SABNF grammar and generates the JavaScript source for a target grammar object constructor function\n// and/or an actual grammar object.\n// - The final target parser: The user then develops the final target parser using the generated target grammar\n// object and the **APG** parsing library, **apg-lib**.\n// Throws execeptions on fatal errors.\n//\n// src: the input SABNF grammar<br>\n// may be one of:\n// - Buffer of bytes\n// - JavaScript string\n// - Array of integer character codes\n\nmodule.exports = function api(src) {\n    const { Buffer } = __webpack_require__(/*! buffer */ \"buffer\");\n    const thisFileName = \"api.js: \";\n    const thisObject = this;\n    /* PRIVATE PROPERTIES */ const apglib = __webpack_require__(/*! ../apg-lib/node-exports */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/node-exports.js\");\n    const converter = __webpack_require__(/*! ../apg-conv-api/converter */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-conv-api/converter.js\");\n    const scanner = __webpack_require__(/*! ./scanner */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/scanner.js\");\n    const parser = new (__webpack_require__(/*! ./parser */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/parser.js\"))();\n    const { attributes, showAttributes, showAttributeErrors, showRuleDependencies } = __webpack_require__(/*! ./attributes */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/attributes.js\");\n    const showRules = __webpack_require__(/*! ./show-rules */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/show-rules.js\");\n    /* PRIVATE MEMBERS (FUNCTIONS) */ /* Convert a phrase (array of character codes) to HTML. */ const abnfToHtml = function abnfToHtml(chars, beg, len) {\n        const NORMAL = 0;\n        const CONTROL = 1;\n        const INVALID = 2;\n        const CONTROL_BEG = `<span class=\"${apglib.style.CLASS_CTRLCHAR}\">`;\n        const CONTROL_END = \"</span>\";\n        const INVALID_BEG = `<span class=\"${apglib.style.CLASS_NOMATCH}\">`;\n        const INVALID_END = \"</span>\";\n        let end;\n        let html = \"\";\n        const TRUE = true;\n        while(TRUE){\n            if (!Array.isArray(chars) || chars.length === 0) {\n                break;\n            }\n            if (typeof beg !== \"number\") {\n                throw new Error(\"abnfToHtml: beg must be type number\");\n            }\n            if (beg >= chars.length) {\n                break;\n            }\n            if (typeof len !== \"number\" || beg + len >= chars.length) {\n                end = chars.length;\n            } else {\n                end = beg + len;\n            }\n            let state = NORMAL;\n            for(let i = beg; i < end; i += 1){\n                const ch = chars[i];\n                if (ch >= 32 && ch <= 126) {\n                    /* normal - printable ASCII characters */ if (state === CONTROL) {\n                        html += CONTROL_END;\n                        state = NORMAL;\n                    } else if (state === INVALID) {\n                        html += INVALID_END;\n                        state = NORMAL;\n                    }\n                    /* handle reserved HTML entity characters */ switch(ch){\n                        case 32:\n                            html += \"&nbsp;\";\n                            break;\n                        case 60:\n                            html += \"&lt;\";\n                            break;\n                        case 62:\n                            html += \"&gt;\";\n                            break;\n                        case 38:\n                            html += \"&amp;\";\n                            break;\n                        case 34:\n                            html += \"&quot;\";\n                            break;\n                        case 39:\n                            html += \"&#039;\";\n                            break;\n                        case 92:\n                            html += \"&#092;\";\n                            break;\n                        default:\n                            html += String.fromCharCode(ch);\n                            break;\n                    }\n                } else if (ch === 9 || ch === 10 || ch === 13) {\n                    /* control characters */ if (state === NORMAL) {\n                        html += CONTROL_BEG;\n                        state = CONTROL;\n                    } else if (state === INVALID) {\n                        html += INVALID_END + CONTROL_BEG;\n                        state = CONTROL;\n                    }\n                    if (ch === 9) {\n                        html += \"TAB\";\n                    }\n                    if (ch === 10) {\n                        html += \"LF\";\n                    }\n                    if (ch === 13) {\n                        html += \"CR\";\n                    }\n                } else {\n                    /* invalid characters */ if (state === NORMAL) {\n                        html += INVALID_BEG;\n                        state = INVALID;\n                    } else if (state === CONTROL) {\n                        html += CONTROL_END + INVALID_BEG;\n                        state = INVALID;\n                    }\n                    /* display character as hexadecimal value */ html += `\\\\x${apglib.utils.charToHex(ch)}`;\n                }\n            }\n            if (state === INVALID) {\n                html += INVALID_END;\n            }\n            if (state === CONTROL) {\n                html += CONTROL_END;\n            }\n            break;\n        }\n        return html;\n    };\n    /* Convert a phrase (array of character codes) to ASCII text. */ const abnfToAscii = function abnfToAscii(chars, beg, len) {\n        let str = \"\";\n        for(let i = beg; i < beg + len; i += 1){\n            const ch = chars[i];\n            if (ch >= 32 && ch <= 126) {\n                str += String.fromCharCode(ch);\n            } else {\n                switch(ch){\n                    case 9:\n                        str += \"\\\\t\";\n                        break;\n                    case 10:\n                        str += \"\\\\n\";\n                        break;\n                    case 13:\n                        str += \"\\\\r\";\n                        break;\n                    default:\n                        str += \"\\\\unknown\";\n                        break;\n                }\n            }\n        }\n        return str;\n    };\n    /* translate lines (SABNF grammar) to ASCII text */ const linesToAscii = function linesToAscii(lines) {\n        let str = \"Annotated Input Grammar\";\n        lines.forEach((val)=>{\n            str += \"\\n\";\n            str += `line no: ${val.lineNo}`;\n            str += ` : char index: ${val.beginChar}`;\n            str += ` : length: ${val.length}`;\n            str += ` : abnf: ${abnfToAscii(thisObject.chars, val.beginChar, val.length)}`;\n        });\n        str += \"\\n\";\n        return str;\n    };\n    /* translate lines (SABNF grammar) to HTML */ const linesToHtml = function linesToHtml(lines) {\n        let html = \"\";\n        html += `<table class=\"${apglib.style.CLASS_GRAMMAR}\">\\n`;\n        const title = \"Annotated Input Grammar\";\n        html += `<caption>${title}</caption>\\n`;\n        html += \"<tr>\";\n        html += \"<th>line<br>no.</th><th>first<br>char</th><th><br>length</th><th><br>text</th>\";\n        html += \"</tr>\\n\";\n        lines.forEach((val)=>{\n            html += \"<tr>\";\n            html += `<td>${val.lineNo}`;\n            html += `</td><td>${val.beginChar}`;\n            html += `</td><td>${val.length}`;\n            html += `</td><td>${abnfToHtml(thisObject.chars, val.beginChar, val.length)}`;\n            html += \"</td>\";\n            html += \"</tr>\\n\";\n        });\n        html += \"</table>\\n\";\n        return html;\n    };\n    /* Format the error messages to HTML, for page display. */ const errorsToHtml = function errorsToHtml(errors, lines, chars, title) {\n        const [style] = apglib;\n        let html = \"\";\n        const errorArrow = `<span class=\"${style.CLASS_NOMATCH}\">&raquo;</span>`;\n        html += `<p><table class=\"${style.CLASS_GRAMMAR}\">\\n`;\n        if (title && typeof title === \"string\") {\n            html += `<caption>${title}</caption>\\n`;\n        }\n        html += \"<tr><th>line<br>no.</th><th>line<br>offset</th><th>error<br>offset</th><th><br>text</th></tr>\\n\";\n        errors.forEach((val)=>{\n            let line;\n            let relchar;\n            let beg;\n            let end;\n            let text;\n            let prefix = \"\";\n            let suffix = \"\";\n            if (lines.length === 0) {\n                text = errorArrow;\n                relchar = 0;\n            } else {\n                line = lines[val.line];\n                beg = line.beginChar;\n                if (val.char > beg) {\n                    prefix = abnfToHtml(chars, beg, val.char - beg);\n                }\n                beg = val.char;\n                end = line.beginChar + line.length;\n                if (beg < end) {\n                    suffix = abnfToHtml(chars, beg, end - beg);\n                }\n                text = prefix + errorArrow + suffix;\n                relchar = val.char - line.beginChar;\n                html += \"<tr>\";\n                html += `<td>${val.line}</td><td>${line.beginChar}</td><td>${relchar}</td><td>${text}</td>`;\n                html += \"</tr>\\n\";\n                html += \"<tr>\";\n                html += `<td colspan=\"3\"></td><td>&uarr;:&nbsp;${apglib.utils.stringToAsciiHtml(val.msg)}</td>`;\n                html += \"</tr>\\n\";\n            }\n        });\n        html += \"</table></p>\\n\";\n        return html;\n    };\n    /* Display an array of errors in ASCII text */ const errorsToAscii = function errorsToAscii(errors, lines, chars) {\n        let str;\n        let line;\n        let beg;\n        let len;\n        str = \"\";\n        errors.forEach((error)=>{\n            line = lines[error.line];\n            str += `${line.lineNo}: `;\n            str += `${line.beginChar}: `;\n            str += `${error.char - line.beginChar}: `;\n            beg = line.beginChar;\n            len = error.char - line.beginChar;\n            str += abnfToAscii(chars, beg, len);\n            str += \" >> \";\n            beg = error.char;\n            len = line.beginChar + line.length - error.char;\n            str += abnfToAscii(chars, beg, len);\n            str += \"\\n\";\n            str += `${line.lineNo}: `;\n            str += `${line.beginChar}: `;\n            str += `${error.char - line.beginChar}: `;\n            str += \"error: \";\n            str += error.msg;\n            str += \"\\n\";\n        });\n        return str;\n    };\n    let isScanned = false;\n    let isParsed = false;\n    let isTranslated = false;\n    let haveAttributes = false;\n    let attributeErrors = 0;\n    let lineMap;\n    /* PUBLIC PROPERTIES */ // The input SABNF grammar as a JavaScript string.\n    // this.sabnf;\n    // The input SABNF grammar as an array of character codes.\n    // this.chars;\n    // An array of line objects, defining each line of the input SABNF grammar\n    // - lineNo : the zero-based line number\n    // - beginChar : offset (into `this.chars`) of the first character in the line\n    // - length : the number of characters in the line\n    // - textLength : the number of characters of text in the line, excluding the line ending characters\n    // - endType : \"CRLF\", \"LF\", \"CR\" or \"none\" if the last line has no line ending characters\n    // - invalidChars : `true` if the line contains invalid characters, `false` otherwise\n    // this.lines;\n    // An array of rule names and data.\n    // - name : the rule name\n    // - lower : the rule name in lower case\n    // - index : the index of the rule (ordered by appearance in SABNF grammar)\n    // - isBkr : `true` if this rule has been back referenced, `false` otherwise\n    // - opcodes : array of opcodes for this rule\n    // - attrs : the rule attributes\n    // - ctrl : system data\n    // this.rules;\n    // An array of UDT names and data.\n    // this.udts;\n    // An array of errors, if any.\n    // - line : the line number containing the error\n    // - char : the character offset of the error\n    // - msg : the error message\n    this.errors = [];\n    /* CONSTRUCTOR */ if (Buffer.isBuffer(src)) {\n        this.chars = converter.decode(\"BINARY\", src);\n    } else if (Array.isArray(src)) {\n        this.chars = src.slice();\n    } else if (typeof src === \"string\") {\n        this.chars = converter.decode(\"STRING\", src);\n    } else {\n        throw new Error(`${thisFileName}input source is not a string, byte Buffer or character array`);\n    }\n    this.sabnf = converter.encode(\"STRING\", this.chars);\n    /* PUBLIC MEMBERS (FUNCTIONS) */ // Scan the input SABNF grammar for invalid characters and catalog the lines via `this.lines`.\n    // - strict : (optional) if `true`, all lines, including the last must end with CRLF (\\r\\n),\n    // if `false` (in any JavaScript sense) then line endings may be any mix of CRLF, LF, CR, or end-of-file.\n    // - trace (*) : (optional) a parser trace object, which will trace the parser that does the scan\n    this.scan = function scan(strict, trace) {\n        this.lines = scanner(this.chars, this.errors, strict, trace);\n        isScanned = true;\n    };\n    // Parse the input SABNF grammar for correct syntax.\n    // - strict : (optional) if `true`, the input grammar must be strict ABNF, conforming to [RFC 5234](https://tools.ietf.org/html/rfc5234)\n    // and [RFC 7405](https://tools.ietf.org/html/rfc7405). No superset features allowed.\n    // - trace (\\*) : (optional) a parser trace object, which will trace the syntax parser\n    //\n    // <i>(*)NOTE: the trace option was used primarily during development.\n    // Error detection and reporting is now fairly robust and tracing should be unnecessary. Use at your own peril.</i>\n    this.parse = function parse(strict, trace) {\n        if (!isScanned) {\n            throw new Error(`${thisFileName}grammar not scanned`);\n        }\n        parser.syntax(this.chars, this.lines, this.errors, strict, trace);\n        isParsed = true;\n    };\n    // Translate the SABNF grammar syntax into the opcodes that will guide the parser for this grammar.\n    this.translate = function translate() {\n        if (!isParsed) {\n            throw new Error(`${thisFileName}grammar not scanned and parsed`);\n        }\n        const ret = parser.semantic(this.chars, this.lines, this.errors);\n        if (this.errors.length === 0) {\n            this.rules = ret.rules;\n            this.udts = ret.udts;\n            lineMap = ret.lineMap;\n            isTranslated = true;\n        }\n    };\n    // Compute the attributes of each rule.\n    this.attributes = function attrs() {\n        if (!isTranslated) {\n            throw new Error(`${thisFileName}grammar not scanned, parsed and translated`);\n        }\n        attributeErrors = attributes(this.rules, this.udts, lineMap, this.errors);\n        haveAttributes = true;\n        return attributeErrors;\n    };\n    // This function will perform the full suite of steps required to generate a parser grammar object\n    // from the input SABNF grammar.\n    this.generate = function generate(strict) {\n        this.lines = scanner(this.chars, this.errors, strict);\n        if (this.errors.length) {\n            return;\n        }\n        parser.syntax(this.chars, this.lines, this.errors, strict);\n        if (this.errors.length) {\n            return;\n        }\n        const ret = parser.semantic(this.chars, this.lines, this.errors);\n        if (this.errors.length) {\n            return;\n        }\n        this.rules = ret.rules;\n        this.udts = ret.udts;\n        lineMap = ret.lineMap;\n        attributeErrors = attributes(this.rules, this.udts, lineMap, this.errors);\n        haveAttributes = true;\n    };\n    // Display the rules.\n    // Must scan, parse and translate before calling this function, otherwise there are no rules to display.\n    // - order\n    //      - \"index\" or \"i\", index order (default)\n    //      - \"alpha\" or \"a\", alphabetical order\n    //      - none of above, index order (default)\n    this.displayRules = function displayRules(order = \"index\") {\n        if (!isTranslated) {\n            throw new Error(`${thisFileName}grammar not scanned, parsed and translated`);\n        }\n        return showRules(this.rules, this.udts, order);\n    };\n    // Display the rule dependencies.\n    // Must scan, parse, translate and compute attributes before calling this function.\n    // Otherwise the rule dependencies are not known.\n    // - order\n    //      - \"index\" or \"i\", index order (default)\n    //      - \"alpha\" or \"a\", alphabetical order\n    //      - \"type\" or \"t\", ordered by type (alphabetical within each type/group)\n    //      - none of above, index order (default)\n    this.displayRuleDependencies = function displayRuleDependencies(order = \"index\") {\n        if (!haveAttributes) {\n            throw new Error(`${thisFileName}no attributes - must be preceeded by call to attributes()`);\n        }\n        return showRuleDependencies(order);\n    };\n    // Display the attributes.\n    // Must scan, parse, translate and compute attributes before calling this function.\n    // - order\n    //      - \"index\" or \"i\", index order (default)\n    //      - \"alpha\" or \"a\", alphabetical order\n    //      - \"type\" or \"t\", ordered by type (alphabetical within each type/group)\n    //      - none of above, type order (default)\n    this.displayAttributes = function displayAttributes(order = \"index\") {\n        if (!haveAttributes) {\n            throw new Error(`${thisFileName}no attributes - must be preceeded by call to attributes()`);\n        }\n        if (attributeErrors) {\n            showAttributeErrors(order);\n        }\n        return showAttributes(order);\n    };\n    this.displayAttributeErrors = function displayAttributeErrors() {\n        if (!haveAttributes) {\n            throw new Error(`${thisFileName}no attributes - must be preceeded by call to attributes()`);\n        }\n        return showAttributeErrors();\n    };\n    // Returns a parser grammar object constructor function as a JavaScript string.\n    // This object can then be used to construct a parser.\n    this.toSource = function toSource(name) {\n        if (!haveAttributes) {\n            throw new Error(`${thisFileName}can't generate parser source - must be preceeded by call to attributes()`);\n        }\n        if (attributeErrors) {\n            throw new Error(`${thisFileName}can't generate parser source - attributes have ${attributeErrors} errors`);\n        }\n        return parser.generateSource(this.chars, this.lines, this.rules, this.udts, name);\n    };\n    // Returns a parser grammar object.\n    // This grammar object may be used by the application to construct a parser.\n    this.toObject = function toObject() {\n        if (!haveAttributes) {\n            throw new Error(`${thisFileName}can't generate parser source - must be preceeded by call to attributes()`);\n        }\n        if (attributeErrors) {\n            throw new Error(`${thisFileName}can't generate parser source - attributes have ${attributeErrors} errors`);\n        }\n        return parser.generateObject(this.sabnf, this.rules, this.udts);\n    };\n    // Display errors in text format, suitable for `console.log()`.\n    this.errorsToAscii = function errorsToAsciiFunc() {\n        return errorsToAscii(this.errors, this.lines, this.chars);\n    };\n    // Display errors in HTML format, suitable for web page display.\n    // (`apg-lib.css` required for proper styling)\n    this.errorsToHtml = function errorsToHtmlFunc(title) {\n        return errorsToHtml(this.errors, this.lines, this.chars, title);\n    };\n    // Generate an annotated the SABNF grammar display in text format.\n    this.linesToAscii = function linesToAsciiFunc() {\n        return linesToAscii(this.lines);\n    };\n    // Generate an annotated the SABNF grammar display in HTML format.\n    // (`apg-lib.css` required for proper styling)\n    this.linesToHtml = function linesToHtmlFunc() {\n        return linesToHtml(this.lines);\n    };\n// This function was only used by apg.html which has been abandoned.\n/*\n    this.getAttributesObject = function () {\n        return null;\n    };\n    */ };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/api.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/attributes.js":
/*!*******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/attributes.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* eslint-disable class-methods-use-this */ /*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // Attributes Validation\n//\n// It is well known that recursive-descent parsers will fail if a rule is left recursive.\n// Besides left recursion, there are a couple of other fatal attributes that need to be disclosed as well.\n// There are several non-fatal attributes that are of interest also.\n// This module will determine six different attributes listed here with simple examples.\n//\n// **fatal attributes**<br>\n// left recursion<br>\n// S = S \"x\" / \"y\"\n//\n// cyclic<br>\n// S = S\n//\n// infinite<br>\n// S = \"y\" S\n//\n// **non-fatal attributes** (but nice to know)<br>\n// nested recursion<br>\n// S = \"a\" S \"b\" / \"y\"\n//\n// right recursion<br>\n// S = \"x\" S / \"y\"\n//\n// empty string<br>\n// S = \"x\" S / \"\"\n//\n// Note that these are “aggregate” attributes, in that if the attribute is true it only means that it can be true,\n// not that it will always be true for every input string.\n// In the simple examples above the attributes may be obvious and definite – always true or false.\n// However, for a large grammar with possibly hundreds of rules and parse tree branches,\n// it can be obscure which branches lead to which attributes.\n// Furthermore, different input strings will lead the parser down different branches.\n// One input string may parse perfectly while another will hit a left-recursive branch and bottom out the call stack.\n//\n// It is for this reason that the APG parser generator computes these attributes.\n// When using the API the attributes call is optional but generating a parser without checking the attributes - proceed at your own peril.\n//\n// Additionally, the attribute phase will identify rule dependencies and mutually-recursive groups. For example,\n//\n// S = \"a\" A \"b\" / \"y\"<br>\n// A = \"x\"\n//\n// S is dependent on A but A is not dependent on S.\n//\n// S = \"a\" A \"b\" / \"c\"<br>\n// A = \"x\" S \"y\" / \"z\"\n//\n// S and A are dependent on one another and are mutually recursive.\n\nmodule.exports = function exportAttributes() {\n    const id = __webpack_require__(/*! ../apg-lib/identifiers */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/identifiers.js\");\n    const { ruleAttributes, showAttributes, showAttributeErrors } = __webpack_require__(/*! ./rule-attributes */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/rule-attributes.js\");\n    const { ruleDependencies, showRuleDependencies } = __webpack_require__(/*! ./rule-dependencies */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/rule-dependencies.js\");\n    class State {\n        constructor(rules, udts){\n            this.rules = rules;\n            this.udts = udts;\n            this.ruleCount = rules.length;\n            this.udtCount = udts.length;\n            this.startRule = 0;\n            this.dependenciesComplete = false;\n            this.attributesComplete = false;\n            this.isMutuallyRecursive = false;\n            this.ruleIndexes = this.indexArray(this.ruleCount);\n            this.ruleAlphaIndexes = this.indexArray(this.ruleCount);\n            this.ruleTypeIndexes = this.indexArray(this.ruleCount);\n            this.udtIndexes = this.indexArray(this.udtCount);\n            this.udtAlphaIndexes = this.indexArray(this.udtCount);\n            this.attrsErrorCount = 0;\n            this.attrs = [];\n            this.attrsErrors = [];\n            this.attrsWorking = [];\n            this.ruleDeps = [];\n            for(let i = 0; i < this.ruleCount; i += 1){\n                this.attrs.push(this.attrGen(this.rules[i]));\n                this.attrsWorking.push(this.attrGen(this.rules[i]));\n                this.ruleDeps.push(this.rdGen(rules[i], this.ruleCount, this.udtCount));\n            }\n            this.compRulesAlpha = this.compRulesAlpha.bind(this);\n            this.compUdtsAlpha = this.compUdtsAlpha.bind(this);\n            this.compRulesType = this.compRulesType.bind(this);\n            this.compRulesGroup = this.compRulesGroup.bind(this);\n        }\n        // eslint-disable-next-line class-methods-use-this\n        attrGen(rule) {\n            return {\n                left: false,\n                nested: false,\n                right: false,\n                empty: false,\n                finite: false,\n                cyclic: false,\n                leaf: false,\n                isOpen: false,\n                isComplete: false,\n                rule\n            };\n        }\n        // eslint-disable-next-line class-methods-use-this\n        attrInit(attr) {\n            attr.left = false;\n            attr.nested = false;\n            attr.right = false;\n            attr.empty = false;\n            attr.finite = false;\n            attr.cyclic = false;\n            attr.leaf = false;\n            attr.isOpen = false;\n            attr.isComplete = false;\n        }\n        attrCopy(dst, src) {\n            dst.left = src.left;\n            dst.nested = src.nested;\n            dst.right = src.right;\n            dst.empty = src.empty;\n            dst.finite = src.finite;\n            dst.cyclic = src.cyclic;\n            dst.leaf = src.leaf;\n            dst.isOpen = src.isOpen;\n            dst.isComplete = src.isComplete;\n            dst.rule = src.rule;\n        }\n        rdGen(rule, ruleCount, udtCount) {\n            const ret = {\n                rule,\n                recursiveType: id.ATTR_N,\n                groupNumber: -1,\n                refersTo: this.falseArray(ruleCount),\n                refersToUdt: this.falseArray(udtCount),\n                referencedBy: this.falseArray(ruleCount)\n            };\n            return ret;\n        }\n        typeToString(recursiveType) {\n            switch(recursiveType){\n                case id.ATTR_N:\n                    return \" N\";\n                case id.ATTR_R:\n                    return \" R\";\n                case id.ATTR_MR:\n                    return \"MR\";\n                default:\n                    return \"UNKNOWN\";\n            }\n        }\n        falseArray(length) {\n            const ret = [];\n            if (length > 0) {\n                for(let i = 0; i < length; i += 1){\n                    ret.push(false);\n                }\n            }\n            return ret;\n        }\n        falsifyArray(a) {\n            for(let i = 0; i < a.length; i += 1){\n                a[i] = false;\n            }\n        }\n        indexArray(length) {\n            const ret = [];\n            if (length > 0) {\n                for(let i = 0; i < length; i += 1){\n                    ret.push(i);\n                }\n            }\n            return ret;\n        }\n        compRulesAlpha(left, right) {\n            if (this.rules[left].lower < this.rules[right].lower) {\n                return -1;\n            }\n            if (this.rules[left].lower > this.rules[right].lower) {\n                return 1;\n            }\n            return 0;\n        }\n        compUdtsAlpha(left, right) {\n            if (this.udts[left].lower < this.udts[right].lower) {\n                return -1;\n            }\n            if (this.udts[left].lower > this.udts[right].lower) {\n                return 1;\n            }\n            return 0;\n        }\n        compRulesType(left, right) {\n            if (this.ruleDeps[left].recursiveType < this.ruleDeps[right].recursiveType) {\n                return -1;\n            }\n            if (this.ruleDeps[left].recursiveType > this.ruleDeps[right].recursiveType) {\n                return 1;\n            }\n            return 0;\n        }\n        compRulesGroup(left, right) {\n            if (this.ruleDeps[left].recursiveType === id.ATTR_MR && this.ruleDeps[right].recursiveType === id.ATTR_MR) {\n                if (this.ruleDeps[left].groupNumber < this.ruleDeps[right].groupNumber) {\n                    return -1;\n                }\n                if (this.ruleDeps[left].groupNumber > this.ruleDeps[right].groupNumber) {\n                    return 1;\n                }\n            }\n            return 0;\n        }\n    }\n    // eslint-disable-next-line no-unused-vars\n    const attributes = function attributes(rules = [], udts = [], lineMap = [], errors = []) {\n        // let i = 0;\n        // Initialize the state. The state of the computation get passed around to multiple functions in multiple files.\n        const state = new State(rules, udts);\n        // Determine all rule dependencies\n        //  - which rules each rule refers to\n        //  - which rules reference each rule\n        ruleDependencies(state);\n        // Determine the attributes for each rule.\n        ruleAttributes(state);\n        if (state.attrsErrorCount) {\n            errors.push({\n                line: 0,\n                char: 0,\n                msg: `${state.attrsErrorCount} attribute errors`\n            });\n        }\n        // Return the number of attribute errors to the caller.\n        return state.attrsErrorCount;\n    };\n    /* Destructuring assignment - see MDN Web Docs */ return {\n        attributes,\n        showAttributes,\n        showAttributeErrors,\n        showRuleDependencies\n    };\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/attributes.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/parser.js":
/*!***************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/parser.js ***!
  \***************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This module converts an input SABNF grammar text file into a\n// grammar object that can be used with `apg-lib` in an application parser.\n// **apg** is, in fact itself, an ABNF parser that generates an SABNF parser.\n// It is based on the grammar<br>\n// `./dist/abnf-for-sabnf-grammar.bnf`.<br>\n// In its syntax phase, **apg** analyzes the user's input SABNF grammar for correct syntax, generating an AST as it goes.\n// In its semantic phase, **apg** translates the AST to generate the parser for the input grammar.\n\nmodule.exports = function exportParser() {\n    const thisFileName = \"parser: \";\n    const ApgLib = __webpack_require__(/*! ../apg-lib/node-exports */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/node-exports.js\");\n    const id = ApgLib.ids;\n    const syn = new (__webpack_require__(/*! ./syntax-callbacks */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/syntax-callbacks.js\"))();\n    const sem = new (__webpack_require__(/*! ./semantic-callbacks */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/semantic-callbacks.js\"))();\n    const sabnfGrammar = new (__webpack_require__(/*! ./sabnf-grammar */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/sabnf-grammar.js\"))();\n    // eslint-disable-next-line new-cap\n    const parser = new ApgLib.parser();\n    // eslint-disable-next-line new-cap\n    parser.ast = new ApgLib.ast();\n    parser.callbacks = syn.callbacks;\n    parser.ast.callbacks = sem.callbacks;\n    /* find the line containing the given character index */ const findLine = function findLine(lines, charIndex, charLength) {\n        if (charIndex < 0 || charIndex >= charLength) {\n            /* return error if out of range */ return -1;\n        }\n        for(let i = 0; i < lines.length; i += 1){\n            if (charIndex >= lines[i].beginChar && charIndex < lines[i].beginChar + lines[i].length) {\n                return i;\n            }\n        }\n        /* should never reach here */ return -1;\n    };\n    const translateIndex = function translateIndex(map, index) {\n        let ret = -1;\n        if (index < map.length) {\n            for(let i = index; i < map.length; i += 1){\n                if (map[i] !== null) {\n                    ret = map[i];\n                    break;\n                }\n            }\n        }\n        return ret;\n    };\n    /* helper function when removing redundant opcodes */ const reduceOpcodes = function reduceOpcodes(rules) {\n        rules.forEach((rule)=>{\n            const opcodes = [];\n            const map = [];\n            let reducedIndex = 0;\n            rule.opcodes.forEach((op)=>{\n                if (op.type === id.ALT && op.children.length === 1) {\n                    map.push(null);\n                } else if (op.type === id.CAT && op.children.length === 1) {\n                    map.push(null);\n                } else if (op.type === id.REP && op.min === 1 && op.max === 1) {\n                    map.push(null);\n                } else {\n                    map.push(reducedIndex);\n                    opcodes.push(op);\n                    reducedIndex += 1;\n                }\n            });\n            map.push(reducedIndex);\n            /* translate original opcode indexes to the reduced set. */ opcodes.forEach((op)=>{\n                if (op.type === id.ALT || op.type === id.CAT) {\n                    for(let i = 0; i < op.children.length; i += 1){\n                        op.children[i] = translateIndex(map, op.children[i]);\n                    }\n                }\n            });\n            rule.opcodes = opcodes;\n        });\n    };\n    /* Parse the grammar - the syntax phase. */ /* SABNF grammar syntax errors are caught and reported here. */ this.syntax = function syntax(chars, lines, errors, strict, trace) {\n        if (trace) {\n            if (trace.traceObject !== \"traceObject\") {\n                throw new TypeError(`${thisFileName}trace argument is not a trace object`);\n            }\n            parser.trace = trace;\n        }\n        const data = {};\n        data.errors = errors;\n        data.strict = !!strict;\n        data.lines = lines;\n        data.findLine = findLine;\n        data.charsLength = chars.length;\n        data.ruleCount = 0;\n        const result = parser.parse(sabnfGrammar, \"file\", chars, data);\n        if (!result.success) {\n            errors.push({\n                line: 0,\n                char: 0,\n                msg: \"syntax analysis of input grammar failed\"\n            });\n        }\n    };\n    /* Parse the grammar - the semantic phase, translates the AST. */ /* SABNF grammar syntax errors are caught and reported here. */ this.semantic = function semantic(chars, lines, errors) {\n        const data = {};\n        data.errors = errors;\n        data.lines = lines;\n        data.findLine = findLine;\n        data.charsLength = chars.length;\n        parser.ast.translate(data);\n        if (errors.length) {\n            return null;\n        }\n        /* Remove unneeded operators. */ /* ALT operators with a single alternate */ /* CAT operators with a single phrase to concatenate */ /* REP(1,1) operators (`1*1RuleName` or `1RuleName` is the same as just `RuleName`.) */ reduceOpcodes(data.rules);\n        return {\n            rules: data.rules,\n            udts: data.udts,\n            lineMap: data.rulesLineMap\n        };\n    };\n    // Generate a grammar constructor function.\n    // An object instantiated from this constructor is used with the `apg-lib` `parser()` function.\n    this.generateSource = function generateSource(chars, lines, rules, udts, name) {\n        let source = \"\";\n        let i;\n        let bkrname;\n        let bkrlower;\n        let opcodeCount = 0;\n        let charCodeMin = Infinity;\n        let charCodeMax = 0;\n        const ruleNames = [];\n        const udtNames = [];\n        let alt = 0;\n        let cat = 0;\n        let rnm = 0;\n        let udt = 0;\n        let rep = 0;\n        let and = 0;\n        let not = 0;\n        let tls = 0;\n        let tbs = 0;\n        let trg = 0;\n        let bkr = 0;\n        let bka = 0;\n        let bkn = 0;\n        let abg = 0;\n        let aen = 0;\n        rules.forEach((rule)=>{\n            ruleNames.push(rule.lower);\n            opcodeCount += rule.opcodes.length;\n            rule.opcodes.forEach((op)=>{\n                switch(op.type){\n                    case id.ALT:\n                        alt += 1;\n                        break;\n                    case id.CAT:\n                        cat += 1;\n                        break;\n                    case id.RNM:\n                        rnm += 1;\n                        break;\n                    case id.UDT:\n                        udt += 1;\n                        break;\n                    case id.REP:\n                        rep += 1;\n                        break;\n                    case id.AND:\n                        and += 1;\n                        break;\n                    case id.NOT:\n                        not += 1;\n                        break;\n                    case id.BKA:\n                        bka += 1;\n                        break;\n                    case id.BKN:\n                        bkn += 1;\n                        break;\n                    case id.BKR:\n                        bkr += 1;\n                        break;\n                    case id.ABG:\n                        abg += 1;\n                        break;\n                    case id.AEN:\n                        aen += 1;\n                        break;\n                    case id.TLS:\n                        tls += 1;\n                        for(i = 0; i < op.string.length; i += 1){\n                            if (op.string[i] < charCodeMin) {\n                                charCodeMin = op.string[i];\n                            }\n                            if (op.string[i] > charCodeMax) {\n                                charCodeMax = op.string[i];\n                            }\n                        }\n                        break;\n                    case id.TBS:\n                        tbs += 1;\n                        for(i = 0; i < op.string.length; i += 1){\n                            if (op.string[i] < charCodeMin) {\n                                charCodeMin = op.string[i];\n                            }\n                            if (op.string[i] > charCodeMax) {\n                                charCodeMax = op.string[i];\n                            }\n                        }\n                        break;\n                    case id.TRG:\n                        trg += 1;\n                        if (op.min < charCodeMin) {\n                            charCodeMin = op.min;\n                        }\n                        if (op.max > charCodeMax) {\n                            charCodeMax = op.max;\n                        }\n                        break;\n                    default:\n                        throw new Error(\"generateSource: unrecognized opcode\");\n                }\n            });\n        });\n        ruleNames.sort();\n        if (udts.length > 0) {\n            udts.forEach((udtFunc)=>{\n                udtNames.push(udtFunc.lower);\n            });\n            udtNames.sort();\n        }\n        let funcname = \"module.exports\";\n        if (name && typeof name === \"string\") {\n            funcname = `let ${name}`;\n        }\n        source += \"// copyright: Copyright (c) 2023 Lowell D. Thomas, all rights reserved<br>\\n\";\n        source += \"//   license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)<br>\\n\";\n        source += \"//\\n\";\n        source += \"// Generated by apg-js, Version 4.2.1 [apg-js](https://github.com/ldthomas/apg-js)\\n\";\n        source += `${funcname} = function grammar(){\\n`;\n        source += \"  // ```\\n\";\n        source += \"  // SUMMARY\\n\";\n        source += `  //      rules = ${rules.length}\\n`;\n        source += `  //       udts = ${udts.length}\\n`;\n        source += `  //    opcodes = ${opcodeCount}\\n`;\n        source += \"  //        ---   ABNF original opcodes\\n\";\n        source += `  //        ALT = ${alt}\\n`;\n        source += `  //        CAT = ${cat}\\n`;\n        source += `  //        REP = ${rep}\\n`;\n        source += `  //        RNM = ${rnm}\\n`;\n        source += `  //        TLS = ${tls}\\n`;\n        source += `  //        TBS = ${tbs}\\n`;\n        source += `  //        TRG = ${trg}\\n`;\n        source += \"  //        ---   SABNF superset opcodes\\n\";\n        source += `  //        UDT = ${udt}\\n`;\n        source += `  //        AND = ${and}\\n`;\n        source += `  //        NOT = ${not}\\n`;\n        source += `  //        BKA = ${bka}\\n`;\n        source += `  //        BKN = ${bkn}\\n`;\n        source += `  //        BKR = ${bkr}\\n`;\n        source += `  //        ABG = ${abg}\\n`;\n        source += `  //        AEN = ${aen}\\n`;\n        source += \"  // characters = [\";\n        if (tls + tbs + trg === 0) {\n            source += \" none defined ]\";\n        } else {\n            source += `${charCodeMin} - ${charCodeMax}]`;\n        }\n        if (udt > 0) {\n            source += \" + user defined\";\n        }\n        source += \"\\n\";\n        source += \"  // ```\\n\";\n        source += \"  /* OBJECT IDENTIFIER (for internal parser use) */\\n\";\n        source += \"  this.grammarObject = 'grammarObject';\\n\";\n        source += \"\\n\";\n        source += \"  /* RULES */\\n\";\n        source += \"  this.rules = [];\\n\";\n        rules.forEach((rule, ii)=>{\n            let thisRule = \"  this.rules[\";\n            thisRule += ii;\n            thisRule += \"] = {name: '\";\n            thisRule += rule.name;\n            thisRule += \"', lower: '\";\n            thisRule += rule.lower;\n            thisRule += \"', index: \";\n            thisRule += rule.index;\n            thisRule += \", isBkr: \";\n            thisRule += rule.isBkr;\n            thisRule += \"};\\n\";\n            source += thisRule;\n        });\n        source += \"\\n\";\n        source += \"  /* UDTS */\\n\";\n        source += \"  this.udts = [];\\n\";\n        if (udts.length > 0) {\n            udts.forEach((udtFunc, ii)=>{\n                let thisUdt = \"  this.udts[\";\n                thisUdt += ii;\n                thisUdt += \"] = {name: '\";\n                thisUdt += udtFunc.name;\n                thisUdt += \"', lower: '\";\n                thisUdt += udtFunc.lower;\n                thisUdt += \"', index: \";\n                thisUdt += udtFunc.index;\n                thisUdt += \", empty: \";\n                thisUdt += udtFunc.empty;\n                thisUdt += \", isBkr: \";\n                thisUdt += udtFunc.isBkr;\n                thisUdt += \"};\\n\";\n                source += thisUdt;\n            });\n        }\n        source += \"\\n\";\n        source += \"  /* OPCODES */\\n\";\n        rules.forEach((rule, ruleIndex)=>{\n            if (ruleIndex > 0) {\n                source += \"\\n\";\n            }\n            source += `  /* ${rule.name} */\\n`;\n            source += `  this.rules[${ruleIndex}].opcodes = [];\\n`;\n            rule.opcodes.forEach((op, opIndex)=>{\n                let prefix;\n                switch(op.type){\n                    case id.ALT:\n                        source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}, children: [${op.children.toString()}]};// ALT\\n`;\n                        break;\n                    case id.CAT:\n                        source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}, children: [${op.children.toString()}]};// CAT\\n`;\n                        break;\n                    case id.RNM:\n                        source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}, index: ${op.index}};// RNM(${rules[op.index].name})\\n`;\n                        break;\n                    case id.BKR:\n                        if (op.index >= rules.length) {\n                            bkrname = udts[op.index - rules.length].name;\n                            bkrlower = udts[op.index - rules.length].lower;\n                        } else {\n                            bkrname = rules[op.index].name;\n                            bkrlower = rules[op.index].lower;\n                        }\n                        prefix = \"%i\";\n                        if (op.bkrCase === id.BKR_MODE_CS) {\n                            prefix = \"%s\";\n                        }\n                        if (op.bkrMode === id.BKR_MODE_UM) {\n                            prefix += \"%u\";\n                        } else {\n                            prefix += \"%p\";\n                        }\n                        bkrname = prefix + bkrname;\n                        source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}, index: ${op.index}, lower: '${bkrlower}'` + `, bkrCase: ${op.bkrCase}, bkrMode: ${op.bkrMode}};// BKR(\\\\${bkrname})\\n`;\n                        break;\n                    case id.UDT:\n                        source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}, empty: ${op.empty}, index: ${op.index}};// UDT(${udts[op.index].name})\\n`;\n                        break;\n                    case id.REP:\n                        source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}, min: ${op.min}, max: ${op.max}};// REP\\n`;\n                        break;\n                    case id.AND:\n                        source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}};// AND\\n`;\n                        break;\n                    case id.NOT:\n                        source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}};// NOT\\n`;\n                        break;\n                    case id.ABG:\n                        source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}};// ABG(%^)\\n`;\n                        break;\n                    case id.AEN:\n                        source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}};// AEN(%$)\\n`;\n                        break;\n                    case id.BKA:\n                        source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}};// BKA\\n`;\n                        break;\n                    case id.BKN:\n                        source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}};// BKN\\n`;\n                        break;\n                    case id.TLS:\n                        source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}, string: [${op.string.toString()}]};// TLS\\n`;\n                        break;\n                    case id.TBS:\n                        source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}, string: [${op.string.toString()}]};// TBS\\n`;\n                        break;\n                    case id.TRG:\n                        source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}, min: ${op.min}, max: ${op.max}};// TRG\\n`;\n                        break;\n                    default:\n                        throw new Error(\"parser.js: ~143: unrecognized opcode\");\n                }\n            });\n        });\n        source += \"\\n\";\n        source += \"  // The `toString()` function will display the original grammar file(s) that produced these opcodes.\\n\";\n        source += \"  this.toString = function toString(){\\n\";\n        source += '    let str = \"\";\\n';\n        let str;\n        lines.forEach((line)=>{\n            const end = line.beginChar + line.length;\n            str = \"\";\n            source += '    str += \"';\n            for(let ii = line.beginChar; ii < end; ii += 1){\n                switch(chars[ii]){\n                    case 9:\n                        str = \" \";\n                        break;\n                    case 10:\n                        str = \"\\\\n\";\n                        break;\n                    case 13:\n                        str = \"\\\\r\";\n                        break;\n                    case 34:\n                        str = '\\\\\"';\n                        break;\n                    case 92:\n                        str = \"\\\\\\\\\";\n                        break;\n                    default:\n                        str = String.fromCharCode(chars[ii]);\n                        break;\n                }\n                source += str;\n            }\n            source += '\";\\n';\n        });\n        source += \"    return str;\\n\";\n        source += \"  }\\n\";\n        source += \"}\\n\";\n        return source;\n    };\n    // Generate a grammar file object.\n    // Returns the same object as instantiating the constructor function returned by<br>\n    // `this.generateSource()`.<br>\n    this.generateObject = function generateObject(stringArg, rules, udts) {\n        const obj = {};\n        const ruleNames = [];\n        const udtNames = [];\n        const string = stringArg.slice(0);\n        obj.grammarObject = \"grammarObject\";\n        rules.forEach((rule)=>{\n            ruleNames.push(rule.lower);\n        });\n        ruleNames.sort();\n        if (udts.length > 0) {\n            udts.forEach((udtFunc)=>{\n                udtNames.push(udtFunc.lower);\n            });\n            udtNames.sort();\n        }\n        obj.callbacks = [];\n        ruleNames.forEach((name)=>{\n            obj.callbacks[name] = false;\n        });\n        if (udts.length > 0) {\n            udtNames.forEach((name)=>{\n                obj.callbacks[name] = false;\n            });\n        }\n        obj.rules = rules;\n        obj.udts = udts;\n        obj.toString = function toStringFunc() {\n            return string;\n        };\n        return obj;\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/parser.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/rule-attributes.js":
/*!************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/rule-attributes.js ***!
  \************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This module does the heavy lifting for attribute generation.\n\nmodule.exports = function exportRuleAttributes() {\n    const id = __webpack_require__(/*! ../apg-lib/identifiers */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/identifiers.js\");\n    const thisFile = \"rule-attributes.js\";\n    let state = null;\n    function isEmptyOnly(attr) {\n        if (attr.left || attr.nested || attr.right || attr.cyclic) {\n            return false;\n        }\n        return attr.empty;\n    }\n    function isRecursive(attr) {\n        if (attr.left || attr.nested || attr.right || attr.cyclic) {\n            return true;\n        }\n        return false;\n    }\n    function isCatNested(attrs, count) {\n        let i = 0;\n        let j = 0;\n        let k = 0;\n        /* 1. if any child is nested, CAT is nested */ for(i = 0; i < count; i += 1){\n            if (attrs[i].nested) {\n                return true;\n            }\n        }\n        /* 2.) the left-most right recursive child\n               is followed by at least one non-empty child */ for(i = 0; i < count; i += 1){\n            if (attrs[i].right && !attrs[i].leaf) {\n                for(j = i + 1; j < count; j += 1){\n                    if (!isEmptyOnly(attrs[j])) {\n                        return true;\n                    }\n                }\n            }\n        }\n        /* 3.) the right-most left recursive child\n               is preceded by at least one non-empty child */ for(i = count - 1; i >= 0; i -= 1){\n            if (attrs[i].left && !attrs[i].leaf) {\n                for(j = i - 1; j >= 0; j -= 1){\n                    if (!isEmptyOnly(attrs[j])) {\n                        return true;\n                    }\n                }\n            }\n        }\n        /* 4. there is at lease one recursive child between\n              the left-most and right-most non-recursive, non-empty children */ for(i = 0; i < count; i += 1){\n            if (!attrs[i].empty && !isRecursive(attrs[i])) {\n                for(j = i + 1; j < count; j += 1){\n                    if (isRecursive(attrs[j])) {\n                        for(k = j + 1; k < count; k += 1){\n                            if (!attrs[k].empty && !isRecursive(attrs[k])) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        /* none of the above */ return false;\n    }\n    function isCatCyclic(attrs, count) {\n        /* if all children are cyclic, CAT is cyclic */ for(let i = 0; i < count; i += 1){\n            if (!attrs[i].cyclic) {\n                return false;\n            }\n        }\n        return true;\n    }\n    function isCatLeft(attrs, count) {\n        /* if the left-most non-empty is left, CAT is left */ for(let i = 0; i < count; i += 1){\n            if (attrs[i].left) {\n                return true;\n            }\n            if (!attrs[i].empty) {\n                return false;\n            }\n        /* keep looking */ }\n        return false; /* all left-most are empty */ \n    }\n    function isCatRight(attrs, count) {\n        /* if the right-most non-empty is right, CAT is right */ for(let i = count - 1; i >= 0; i -= 1){\n            if (attrs[i].right) {\n                return true;\n            }\n            if (!attrs[i].empty) {\n                return false;\n            }\n        /* keep looking */ }\n        return false;\n    }\n    function isCatEmpty(attrs, count) {\n        /* if all children are empty, CAT is empty */ for(let i = 0; i < count; i += 1){\n            if (!attrs[i].empty) {\n                return false;\n            }\n        }\n        return true;\n    }\n    function isCatFinite(attrs, count) {\n        /* if all children are finite, CAT is finite */ for(let i = 0; i < count; i += 1){\n            if (!attrs[i].finite) {\n                return false;\n            }\n        }\n        return true;\n    }\n    function cat(stateArg, opcodes, opIndex, iAttr) {\n        let i = 0;\n        const opCat = opcodes[opIndex];\n        const count = opCat.children.length;\n        /* generate an empty array of child attributes */ const childAttrs = [];\n        for(i = 0; i < count; i += 1){\n            childAttrs.push(stateArg.attrGen());\n        }\n        for(i = 0; i < count; i += 1){\n            // eslint-disable-next-line no-use-before-define\n            opEval(stateArg, opcodes, opCat.children[i], childAttrs[i]);\n        }\n        iAttr.left = isCatLeft(childAttrs, count);\n        iAttr.right = isCatRight(childAttrs, count);\n        iAttr.nested = isCatNested(childAttrs, count);\n        iAttr.empty = isCatEmpty(childAttrs, count);\n        iAttr.finite = isCatFinite(childAttrs, count);\n        iAttr.cyclic = isCatCyclic(childAttrs, count);\n    }\n    function alt(stateArg, opcodes, opIndex, iAttr) {\n        let i = 0;\n        const opAlt = opcodes[opIndex];\n        const count = opAlt.children.length;\n        /* generate an empty array of child attributes */ const childAttrs = [];\n        for(i = 0; i < count; i += 1){\n            childAttrs.push(stateArg.attrGen());\n        }\n        for(i = 0; i < count; i += 1){\n            // eslint-disable-next-line no-use-before-define\n            opEval(stateArg, opcodes, opAlt.children[i], childAttrs[i]);\n        }\n        /* if any child attribute is true, ALT is true */ iAttr.left = false;\n        iAttr.right = false;\n        iAttr.nested = false;\n        iAttr.empty = false;\n        iAttr.finite = false;\n        iAttr.cyclic = false;\n        for(i = 0; i < count; i += 1){\n            if (childAttrs[i].left) {\n                iAttr.left = true;\n            }\n            if (childAttrs[i].nested) {\n                iAttr.nested = true;\n            }\n            if (childAttrs[i].right) {\n                iAttr.right = true;\n            }\n            if (childAttrs[i].empty) {\n                iAttr.empty = true;\n            }\n            if (childAttrs[i].finite) {\n                iAttr.finite = true;\n            }\n            if (childAttrs[i].cyclic) {\n                iAttr.cyclic = true;\n            }\n        }\n    }\n    function bkr(stateArg, opcodes, opIndex, iAttr) {\n        const opBkr = opcodes[opIndex];\n        if (opBkr.index >= stateArg.ruleCount) {\n            /* use UDT values */ iAttr.empty = stateArg.udts[opBkr.index - stateArg.ruleCount].empty;\n            iAttr.finite = true;\n        } else {\n            /* use the empty and finite values from the back referenced rule */ // eslint-disable-next-line no-use-before-define\n            ruleAttrsEval(stateArg, opBkr.index, iAttr);\n            /* however, this is a terminal node like TLS */ iAttr.left = false;\n            iAttr.nested = false;\n            iAttr.right = false;\n            iAttr.cyclic = false;\n        }\n    }\n    function opEval(stateArg, opcodes, opIndex, iAttr) {\n        stateArg.attrInit(iAttr);\n        const opi = opcodes[opIndex];\n        switch(opi.type){\n            case id.ALT:\n                alt(stateArg, opcodes, opIndex, iAttr);\n                break;\n            case id.CAT:\n                cat(stateArg, opcodes, opIndex, iAttr);\n                break;\n            case id.REP:\n                opEval(stateArg, opcodes, opIndex + 1, iAttr);\n                if (opi.min === 0) {\n                    iAttr.empty = true;\n                    iAttr.finite = true;\n                }\n                break;\n            case id.RNM:\n                // eslint-disable-next-line no-use-before-define\n                ruleAttrsEval(stateArg, opcodes[opIndex].index, iAttr);\n                break;\n            case id.BKR:\n                bkr(stateArg, opcodes, opIndex, iAttr);\n                break;\n            case id.AND:\n            case id.NOT:\n            case id.BKA:\n            case id.BKN:\n                opEval(stateArg, opcodes, opIndex + 1, iAttr);\n                iAttr.empty = true;\n                break;\n            case id.TLS:\n                iAttr.empty = !opcodes[opIndex].string.length;\n                iAttr.finite = true;\n                iAttr.cyclic = false;\n                break;\n            case id.TBS:\n            case id.TRG:\n                iAttr.empty = false;\n                iAttr.finite = true;\n                iAttr.cyclic = false;\n                break;\n            case id.UDT:\n                iAttr.empty = opi.empty;\n                iAttr.finite = true;\n                iAttr.cyclic = false;\n                break;\n            case id.ABG:\n            case id.AEN:\n                iAttr.empty = true;\n                iAttr.finite = true;\n                iAttr.cyclic = false;\n                break;\n            default:\n                throw new Error(`unknown opcode type: ${opi}`);\n        }\n    }\n    // The main logic for handling rules that:\n    //  - have already be evaluated\n    //  - have not been evaluated and is the first occurrence on this branch\n    //  - second occurrence on this branch for the start rule\n    //  - second occurrence on this branch for non-start rules\n    function ruleAttrsEval(stateArg, ruleIndex, iAttr) {\n        const attri = stateArg.attrsWorking[ruleIndex];\n        if (attri.isComplete) {\n            /* just use the completed values */ stateArg.attrCopy(iAttr, attri);\n        } else if (!attri.isOpen) {\n            /* open the rule and traverse it */ attri.isOpen = true;\n            opEval(stateArg, attri.rule.opcodes, 0, iAttr);\n            /* complete this rule's attributes */ attri.left = iAttr.left;\n            attri.right = iAttr.right;\n            attri.nested = iAttr.nested;\n            attri.empty = iAttr.empty;\n            attri.finite = iAttr.finite;\n            attri.cyclic = iAttr.cyclic;\n            attri.leaf = false;\n            attri.isOpen = false;\n            attri.isComplete = true;\n        } else if (ruleIndex === stateArg.startRule) {\n            /* use recursive leaf values */ if (ruleIndex === stateArg.startRule) {\n                iAttr.left = true;\n                iAttr.right = true;\n                iAttr.cyclic = true;\n                iAttr.leaf = true;\n            }\n        } else {\n            /* non-start rule terminal leaf */ iAttr.finite = true;\n        }\n    }\n    // The main driver for the attribute generation.\n    const ruleAttributes = (stateArg)=>{\n        state = stateArg;\n        let i = 0;\n        let j = 0;\n        const iAttr = state.attrGen();\n        for(i = 0; i < state.ruleCount; i += 1){\n            /* initialize working attributes */ for(j = 0; j < state.ruleCount; j += 1){\n                state.attrInit(state.attrsWorking[j]);\n            }\n            state.startRule = i;\n            ruleAttrsEval(state, i, iAttr);\n            /* save off the working attributes for this rule */ state.attrCopy(state.attrs[i], state.attrsWorking[i]);\n        }\n        state.attributesComplete = true;\n        let attri = null;\n        for(i = 0; i < state.ruleCount; i += 1){\n            attri = state.attrs[i];\n            if (attri.left || !attri.finite || attri.cyclic) {\n                const temp = state.attrGen(attri.rule);\n                state.attrCopy(temp, attri);\n                state.attrsErrors.push(temp);\n                state.attrsErrorCount += 1;\n            }\n        }\n    };\n    const truth = (val)=>val ? \"t\" : \"f\";\n    const tError = (val)=>val ? \"e\" : \"f\";\n    const fError = (val)=>val ? \"t\" : \"e\";\n    const showAttr = (seq, index, attr, dep)=>{\n        let str = `${seq}:${index}:`;\n        str += `${tError(attr.left)} `;\n        str += `${truth(attr.nested)} `;\n        str += `${truth(attr.right)} `;\n        str += `${tError(attr.cyclic)} `;\n        str += `${fError(attr.finite)} `;\n        str += `${truth(attr.empty)}:`;\n        str += `${state.typeToString(dep.recursiveType)}:`;\n        str += dep.recursiveType === id.ATTR_MR ? dep.groupNumber : \"-\";\n        str += `:${attr.rule.name}\\n`;\n        return str;\n    };\n    const showLegend = ()=>{\n        let str = \"LEGEND - t=true, f=false, e=error\\n\";\n        str += \"sequence:rule index:left nested right cyclic finite empty:type:group number:rule name\\n\";\n        return str;\n    };\n    const showAttributeErrors = ()=>{\n        let attri = null;\n        let depi = null;\n        let str = \"\";\n        str += \"RULE ATTRIBUTES WITH ERRORS\\n\";\n        str += showLegend();\n        if (state.attrsErrorCount) {\n            for(let i = 0; i < state.attrsErrorCount; i += 1){\n                attri = state.attrsErrors[i];\n                depi = state.ruleDeps[attri.rule.index];\n                str += showAttr(i, attri.rule.index, attri, depi);\n            }\n        } else {\n            str += \"<none>\\n\";\n        }\n        return str;\n    };\n    const show = (type)=>{\n        let i = 0;\n        let ii = 0;\n        let attri = null;\n        let depi = null;\n        let str = \"\";\n        let { ruleIndexes } = state;\n        // let udtIndexes = state.udtIndexes;\n        if (type === 97) {\n            ruleIndexes = state.ruleAlphaIndexes;\n        // udtIndexes = state.udtAlphaIndexes;\n        } else if (type === 116) {\n            ruleIndexes = state.ruleTypeIndexes;\n        // udtIndexes = state.udtAlphaIndexes;\n        }\n        /* show all attributes */ for(i = 0; i < state.ruleCount; i += 1){\n            ii = ruleIndexes[i];\n            attri = state.attrs[ii];\n            depi = state.ruleDeps[ii];\n            str += showAttr(i, ii, attri, depi);\n        }\n        return str;\n    };\n    // Display the rule attributes.\n    // - order\n    //      - \"index\" or \"i\", index order (default)\n    //      - \"alpha\" or \"a\", alphabetical order\n    //      - \"type\" or \"t\", ordered by type (alphabetical within each type/group)\n    //      - none of above, index order (default)\n    const showAttributes = (order = \"index\")=>{\n        if (!state.attributesComplete) {\n            throw new Error(`${thisFile}:showAttributes: attributes not available`);\n        }\n        let str = \"\";\n        const leader = \"RULE ATTRIBUTES\\n\";\n        if (order.charCodeAt(0) === 97) {\n            str += \"alphabetical by rule name\\n\";\n            str += leader;\n            str += showLegend();\n            str += show(97);\n        } else if (order.charCodeAt(0) === 116) {\n            str += \"ordered by rule type\\n\";\n            str += leader;\n            str += showLegend();\n            str += show(116);\n        } else {\n            str += \"ordered by rule index\\n\";\n            str += leader;\n            str += showLegend();\n            str += show();\n        }\n        return str;\n    };\n    /* Destructuring assignment - see MDN Web Docs */ return {\n        ruleAttributes,\n        showAttributes,\n        showAttributeErrors\n    };\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/rule-attributes.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/rule-dependencies.js":
/*!**************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/rule-dependencies.js ***!
  \**************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // Determine rule dependencies and types.\n// For each rule, determine which other rules it refers to\n// and which of the other rules refer back to it.\n//\n// Rule types are:\n//  - non-recursive - the rule never refers to itself, even indirectly\n//  - recursive - the rule refers to itself, possibly indirectly\n//  - mutually-recursive - belongs to a group of two or more rules, each of which refers to every other rule in the group, including itself.\n\nmodule.exports = (()=>{\n    const id = __webpack_require__(/*! ../apg-lib/identifiers */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/identifiers.js\");\n    let state = null; /* keep a global reference to the state for the show functions */ \n    /* scan the opcodes of the indexed rule and discover which rules it references and which rule refer back to it */ const scan = (ruleCount, ruleDeps, index, isScanned)=>{\n        let i = 0;\n        let j = 0;\n        const rdi = ruleDeps[index];\n        isScanned[index] = true;\n        const op = rdi.rule.opcodes;\n        for(i = 0; i < op.length; i += 1){\n            const opi = op[i];\n            if (opi.type === id.RNM) {\n                rdi.refersTo[opi.index] = true;\n                if (!isScanned[opi.index]) {\n                    scan(ruleCount, ruleDeps, opi.index, isScanned);\n                }\n                for(j = 0; j < ruleCount; j += 1){\n                    if (ruleDeps[opi.index].refersTo[j]) {\n                        rdi.refersTo[j] = true;\n                    }\n                }\n            } else if (opi.type === id.UDT) {\n                rdi.refersToUdt[opi.index] = true;\n            } else if (opi.type === id.BKR) {\n                if (opi.index < ruleCount) {\n                    rdi.refersTo[opi.index] = true;\n                    if (!isScanned[opi.index]) {\n                        scan(ruleCount, ruleDeps, opi.index, isScanned);\n                    }\n                } else {\n                    rdi.refersToUdt[ruleCount - opi.index] = true;\n                }\n            }\n        }\n    };\n    // Determine the rule dependencies, types and mutually recursive groups.\n    const ruleDependencies = (stateArg)=>{\n        state = stateArg; /* make it global */ \n        let i = 0;\n        let j = 0;\n        let groupCount = 0;\n        let rdi = null;\n        let rdj = null;\n        let newGroup = false;\n        state.dependenciesComplete = false;\n        /* make a working array of rule scanned markers */ const isScanned = state.falseArray(state.ruleCount);\n        /* discover the rule dependencies */ for(i = 0; i < state.ruleCount; i += 1){\n            state.falsifyArray(isScanned);\n            scan(state.ruleCount, state.ruleDeps, i, isScanned);\n        }\n        /* discover all rules referencing each rule */ for(i = 0; i < state.ruleCount; i += 1){\n            for(j = 0; j < state.ruleCount; j += 1){\n                if (i !== j) {\n                    if (state.ruleDeps[j].refersTo[i]) {\n                        state.ruleDeps[i].referencedBy[j] = true;\n                    }\n                }\n            }\n        }\n        /* find the non-recursive and recursive types */ for(i = 0; i < state.ruleCount; i += 1){\n            state.ruleDeps[i].recursiveType = id.ATTR_N;\n            if (state.ruleDeps[i].refersTo[i]) {\n                state.ruleDeps[i].recursiveType = id.ATTR_R;\n            }\n        }\n        /* find the mutually-recursive groups, if any */ groupCount = -1;\n        for(i = 0; i < state.ruleCount; i += 1){\n            rdi = state.ruleDeps[i];\n            if (rdi.recursiveType === id.ATTR_R) {\n                newGroup = true;\n                for(j = 0; j < state.ruleCount; j += 1){\n                    if (i !== j) {\n                        rdj = state.ruleDeps[j];\n                        if (rdj.recursiveType === id.ATTR_R) {\n                            if (rdi.refersTo[j] && rdj.refersTo[i]) {\n                                if (newGroup) {\n                                    groupCount += 1;\n                                    rdi.recursiveType = id.ATTR_MR;\n                                    rdi.groupNumber = groupCount;\n                                    newGroup = false;\n                                }\n                                rdj.recursiveType = id.ATTR_MR;\n                                rdj.groupNumber = groupCount;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        state.isMutuallyRecursive = groupCount > -1;\n        /* sort the rules/UDTS */ state.ruleAlphaIndexes.sort(state.compRulesAlpha);\n        state.ruleTypeIndexes.sort(state.compRulesAlpha);\n        state.ruleTypeIndexes.sort(state.compRulesType);\n        if (state.isMutuallyRecursive) {\n            state.ruleTypeIndexes.sort(state.compRulesGroup);\n        }\n        if (state.udtCount) {\n            state.udtAlphaIndexes.sort(state.compUdtsAlpha);\n        }\n        state.dependenciesComplete = true;\n    };\n    const show = (type = null)=>{\n        let i = 0;\n        let j = 0;\n        let count = 0;\n        let startSeg = 0;\n        const maxRule = state.ruleCount - 1;\n        const maxUdt = state.udtCount - 1;\n        const lineLength = 100;\n        let str = \"\";\n        let pre = \"\";\n        const toArrow = \"=> \";\n        const byArrow = \"<= \";\n        let first = false;\n        let rdi = null;\n        let { ruleIndexes } = state;\n        let { udtIndexes } = state;\n        if (type === 97) {\n            ruleIndexes = state.ruleAlphaIndexes;\n            udtIndexes = state.udtAlphaIndexes;\n        } else if (type === 116) {\n            ruleIndexes = state.ruleTypeIndexes;\n            udtIndexes = state.udtAlphaIndexes;\n        }\n        for(i = 0; i < state.ruleCount; i += 1){\n            rdi = state.ruleDeps[ruleIndexes[i]];\n            pre = `${ruleIndexes[i]}:${state.typeToString(rdi.recursiveType)}:`;\n            if (state.isMutuallyRecursive) {\n                pre += rdi.groupNumber > -1 ? rdi.groupNumber : \"-\";\n                pre += \":\";\n            }\n            pre += \" \";\n            str += `${pre + state.rules[ruleIndexes[i]].name}\\n`;\n            first = true;\n            count = 0;\n            startSeg = str.length;\n            str += pre;\n            for(j = 0; j < state.ruleCount; j += 1){\n                if (rdi.refersTo[ruleIndexes[j]]) {\n                    if (first) {\n                        str += toArrow;\n                        first = false;\n                        str += state.ruleDeps[ruleIndexes[j]].rule.name;\n                    } else {\n                        str += `, ${state.ruleDeps[ruleIndexes[j]].rule.name}`;\n                    }\n                    count += 1;\n                }\n                if (str.length - startSeg > lineLength && j !== maxRule) {\n                    str += `\\n${pre}${toArrow}`;\n                    startSeg = str.length;\n                }\n            }\n            if (state.udtCount) {\n                for(j = 0; j < state.udtCount; j += 1){\n                    if (rdi.refersToUdt[udtIndexes[j]]) {\n                        if (first) {\n                            str += toArrow;\n                            first = false;\n                            str += state.udts[udtIndexes[j]].name;\n                        } else {\n                            str += `, ${state.udts[udtIndexes[j]].name}`;\n                        }\n                        count += 1;\n                    }\n                    if (str.length - startSeg > lineLength && j !== maxUdt) {\n                        str += `\\n${pre}${toArrow}`;\n                        startSeg = str.length;\n                    }\n                }\n            }\n            if (count === 0) {\n                str += \"=> <none>\\n\";\n            }\n            if (first === false) {\n                str += \"\\n\";\n            }\n            first = true;\n            count = 0;\n            startSeg = str.length;\n            str += pre;\n            for(j = 0; j < state.ruleCount; j += 1){\n                if (rdi.referencedBy[ruleIndexes[j]]) {\n                    if (first) {\n                        str += byArrow;\n                        first = false;\n                        str += state.ruleDeps[ruleIndexes[j]].rule.name;\n                    } else {\n                        str += `, ${state.ruleDeps[ruleIndexes[j]].rule.name}`;\n                    }\n                    count += 1;\n                }\n                if (str.length - startSeg > lineLength && j !== maxRule) {\n                    str += `\\n${pre}${toArrow}`;\n                    startSeg = str.length;\n                }\n            }\n            if (count === 0) {\n                str += \"<= <none>\\n\";\n            }\n            if (first === false) {\n                str += \"\\n\";\n            }\n            str += \"\\n\";\n        }\n        return str;\n    };\n    // Display the rule dependencies.\n    // - order\n    //      - \"index\" or \"i\", index order (default)\n    //      - \"alpha\" or \"a\", alphabetical order\n    //      - \"type\" or \"t\", ordered by type (alphabetical within each type/group)\n    //      - none of above, index order (default)\n    const showRuleDependencies = (order = \"index\")=>{\n        let str = \"RULE DEPENDENCIES(index:type:[group number:])\\n\";\n        str += \"=> refers to rule names\\n\";\n        str += \"<= referenced by rule names\\n\";\n        if (!state.dependenciesComplete) {\n            return str;\n        }\n        if (order.charCodeAt(0) === 97) {\n            str += \"alphabetical by rule name\\n\";\n            str += show(97);\n        } else if (order.charCodeAt(0) === 116) {\n            str += \"ordered by rule type\\n\";\n            str += show(116);\n        } else {\n            str += \"ordered by rule index\\n\";\n            str += show(null);\n        }\n        return str;\n    };\n    /* Destructuring assignment - see MDN Web Docs */ return {\n        ruleDependencies,\n        showRuleDependencies\n    };\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/rule-dependencies.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/sabnf-grammar.js":
/*!**********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/sabnf-grammar.js ***!
  \**********************************************************************************************/
/***/ ((module) => {

"use strict";
eval("// copyright: Copyright (c) 2023 Lowell D. Thomas, all rights reserved<br>\n//   license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)<br>\n//\n// Generated by apg-js, Version 4.2.1 [apg-js](https://github.com/ldthomas/apg-js)\n\nmodule.exports = function grammar() {\n    // ```\n    // SUMMARY\n    //      rules = 95\n    //       udts = 0\n    //    opcodes = 372\n    //        ---   ABNF original opcodes\n    //        ALT = 43\n    //        CAT = 48\n    //        REP = 34\n    //        RNM = 149\n    //        TLS = 2\n    //        TBS = 61\n    //        TRG = 35\n    //        ---   SABNF superset opcodes\n    //        UDT = 0\n    //        AND = 0\n    //        NOT = 0\n    //        BKA = 0\n    //        BKN = 0\n    //        BKR = 0\n    //        ABG = 0\n    //        AEN = 0\n    // characters = [9 - 126]\n    // ```\n    /* OBJECT IDENTIFIER (for internal parser use) */ this.grammarObject = \"grammarObject\";\n    /* RULES */ this.rules = [];\n    this.rules[0] = {\n        name: \"File\",\n        lower: \"file\",\n        index: 0,\n        isBkr: false\n    };\n    this.rules[1] = {\n        name: \"BlankLine\",\n        lower: \"blankline\",\n        index: 1,\n        isBkr: false\n    };\n    this.rules[2] = {\n        name: \"Rule\",\n        lower: \"rule\",\n        index: 2,\n        isBkr: false\n    };\n    this.rules[3] = {\n        name: \"RuleLookup\",\n        lower: \"rulelookup\",\n        index: 3,\n        isBkr: false\n    };\n    this.rules[4] = {\n        name: \"RuleNameTest\",\n        lower: \"rulenametest\",\n        index: 4,\n        isBkr: false\n    };\n    this.rules[5] = {\n        name: \"RuleName\",\n        lower: \"rulename\",\n        index: 5,\n        isBkr: false\n    };\n    this.rules[6] = {\n        name: \"RuleNameError\",\n        lower: \"rulenameerror\",\n        index: 6,\n        isBkr: false\n    };\n    this.rules[7] = {\n        name: \"DefinedAsTest\",\n        lower: \"definedastest\",\n        index: 7,\n        isBkr: false\n    };\n    this.rules[8] = {\n        name: \"DefinedAsError\",\n        lower: \"definedaserror\",\n        index: 8,\n        isBkr: false\n    };\n    this.rules[9] = {\n        name: \"DefinedAs\",\n        lower: \"definedas\",\n        index: 9,\n        isBkr: false\n    };\n    this.rules[10] = {\n        name: \"Defined\",\n        lower: \"defined\",\n        index: 10,\n        isBkr: false\n    };\n    this.rules[11] = {\n        name: \"IncAlt\",\n        lower: \"incalt\",\n        index: 11,\n        isBkr: false\n    };\n    this.rules[12] = {\n        name: \"RuleError\",\n        lower: \"ruleerror\",\n        index: 12,\n        isBkr: false\n    };\n    this.rules[13] = {\n        name: \"LineEndError\",\n        lower: \"lineenderror\",\n        index: 13,\n        isBkr: false\n    };\n    this.rules[14] = {\n        name: \"Alternation\",\n        lower: \"alternation\",\n        index: 14,\n        isBkr: false\n    };\n    this.rules[15] = {\n        name: \"Concatenation\",\n        lower: \"concatenation\",\n        index: 15,\n        isBkr: false\n    };\n    this.rules[16] = {\n        name: \"Repetition\",\n        lower: \"repetition\",\n        index: 16,\n        isBkr: false\n    };\n    this.rules[17] = {\n        name: \"Modifier\",\n        lower: \"modifier\",\n        index: 17,\n        isBkr: false\n    };\n    this.rules[18] = {\n        name: \"Predicate\",\n        lower: \"predicate\",\n        index: 18,\n        isBkr: false\n    };\n    this.rules[19] = {\n        name: \"BasicElement\",\n        lower: \"basicelement\",\n        index: 19,\n        isBkr: false\n    };\n    this.rules[20] = {\n        name: \"BasicElementErr\",\n        lower: \"basicelementerr\",\n        index: 20,\n        isBkr: false\n    };\n    this.rules[21] = {\n        name: \"Group\",\n        lower: \"group\",\n        index: 21,\n        isBkr: false\n    };\n    this.rules[22] = {\n        name: \"GroupError\",\n        lower: \"grouperror\",\n        index: 22,\n        isBkr: false\n    };\n    this.rules[23] = {\n        name: \"GroupOpen\",\n        lower: \"groupopen\",\n        index: 23,\n        isBkr: false\n    };\n    this.rules[24] = {\n        name: \"GroupClose\",\n        lower: \"groupclose\",\n        index: 24,\n        isBkr: false\n    };\n    this.rules[25] = {\n        name: \"Option\",\n        lower: \"option\",\n        index: 25,\n        isBkr: false\n    };\n    this.rules[26] = {\n        name: \"OptionError\",\n        lower: \"optionerror\",\n        index: 26,\n        isBkr: false\n    };\n    this.rules[27] = {\n        name: \"OptionOpen\",\n        lower: \"optionopen\",\n        index: 27,\n        isBkr: false\n    };\n    this.rules[28] = {\n        name: \"OptionClose\",\n        lower: \"optionclose\",\n        index: 28,\n        isBkr: false\n    };\n    this.rules[29] = {\n        name: \"RnmOp\",\n        lower: \"rnmop\",\n        index: 29,\n        isBkr: false\n    };\n    this.rules[30] = {\n        name: \"BkrOp\",\n        lower: \"bkrop\",\n        index: 30,\n        isBkr: false\n    };\n    this.rules[31] = {\n        name: \"bkrModifier\",\n        lower: \"bkrmodifier\",\n        index: 31,\n        isBkr: false\n    };\n    this.rules[32] = {\n        name: \"cs\",\n        lower: \"cs\",\n        index: 32,\n        isBkr: false\n    };\n    this.rules[33] = {\n        name: \"ci\",\n        lower: \"ci\",\n        index: 33,\n        isBkr: false\n    };\n    this.rules[34] = {\n        name: \"um\",\n        lower: \"um\",\n        index: 34,\n        isBkr: false\n    };\n    this.rules[35] = {\n        name: \"pm\",\n        lower: \"pm\",\n        index: 35,\n        isBkr: false\n    };\n    this.rules[36] = {\n        name: \"bkr-name\",\n        lower: \"bkr-name\",\n        index: 36,\n        isBkr: false\n    };\n    this.rules[37] = {\n        name: \"rname\",\n        lower: \"rname\",\n        index: 37,\n        isBkr: false\n    };\n    this.rules[38] = {\n        name: \"uname\",\n        lower: \"uname\",\n        index: 38,\n        isBkr: false\n    };\n    this.rules[39] = {\n        name: \"ename\",\n        lower: \"ename\",\n        index: 39,\n        isBkr: false\n    };\n    this.rules[40] = {\n        name: \"UdtOp\",\n        lower: \"udtop\",\n        index: 40,\n        isBkr: false\n    };\n    this.rules[41] = {\n        name: \"udt-non-empty\",\n        lower: \"udt-non-empty\",\n        index: 41,\n        isBkr: false\n    };\n    this.rules[42] = {\n        name: \"udt-empty\",\n        lower: \"udt-empty\",\n        index: 42,\n        isBkr: false\n    };\n    this.rules[43] = {\n        name: \"RepOp\",\n        lower: \"repop\",\n        index: 43,\n        isBkr: false\n    };\n    this.rules[44] = {\n        name: \"AltOp\",\n        lower: \"altop\",\n        index: 44,\n        isBkr: false\n    };\n    this.rules[45] = {\n        name: \"CatOp\",\n        lower: \"catop\",\n        index: 45,\n        isBkr: false\n    };\n    this.rules[46] = {\n        name: \"StarOp\",\n        lower: \"starop\",\n        index: 46,\n        isBkr: false\n    };\n    this.rules[47] = {\n        name: \"AndOp\",\n        lower: \"andop\",\n        index: 47,\n        isBkr: false\n    };\n    this.rules[48] = {\n        name: \"NotOp\",\n        lower: \"notop\",\n        index: 48,\n        isBkr: false\n    };\n    this.rules[49] = {\n        name: \"BkaOp\",\n        lower: \"bkaop\",\n        index: 49,\n        isBkr: false\n    };\n    this.rules[50] = {\n        name: \"BknOp\",\n        lower: \"bknop\",\n        index: 50,\n        isBkr: false\n    };\n    this.rules[51] = {\n        name: \"AbgOp\",\n        lower: \"abgop\",\n        index: 51,\n        isBkr: false\n    };\n    this.rules[52] = {\n        name: \"AenOp\",\n        lower: \"aenop\",\n        index: 52,\n        isBkr: false\n    };\n    this.rules[53] = {\n        name: \"TrgOp\",\n        lower: \"trgop\",\n        index: 53,\n        isBkr: false\n    };\n    this.rules[54] = {\n        name: \"TbsOp\",\n        lower: \"tbsop\",\n        index: 54,\n        isBkr: false\n    };\n    this.rules[55] = {\n        name: \"TlsOp\",\n        lower: \"tlsop\",\n        index: 55,\n        isBkr: false\n    };\n    this.rules[56] = {\n        name: \"TlsCase\",\n        lower: \"tlscase\",\n        index: 56,\n        isBkr: false\n    };\n    this.rules[57] = {\n        name: \"TlsOpen\",\n        lower: \"tlsopen\",\n        index: 57,\n        isBkr: false\n    };\n    this.rules[58] = {\n        name: \"TlsClose\",\n        lower: \"tlsclose\",\n        index: 58,\n        isBkr: false\n    };\n    this.rules[59] = {\n        name: \"TlsString\",\n        lower: \"tlsstring\",\n        index: 59,\n        isBkr: false\n    };\n    this.rules[60] = {\n        name: \"StringTab\",\n        lower: \"stringtab\",\n        index: 60,\n        isBkr: false\n    };\n    this.rules[61] = {\n        name: \"ClsOp\",\n        lower: \"clsop\",\n        index: 61,\n        isBkr: false\n    };\n    this.rules[62] = {\n        name: \"ClsOpen\",\n        lower: \"clsopen\",\n        index: 62,\n        isBkr: false\n    };\n    this.rules[63] = {\n        name: \"ClsClose\",\n        lower: \"clsclose\",\n        index: 63,\n        isBkr: false\n    };\n    this.rules[64] = {\n        name: \"ClsString\",\n        lower: \"clsstring\",\n        index: 64,\n        isBkr: false\n    };\n    this.rules[65] = {\n        name: \"ProsVal\",\n        lower: \"prosval\",\n        index: 65,\n        isBkr: false\n    };\n    this.rules[66] = {\n        name: \"ProsValOpen\",\n        lower: \"prosvalopen\",\n        index: 66,\n        isBkr: false\n    };\n    this.rules[67] = {\n        name: \"ProsValString\",\n        lower: \"prosvalstring\",\n        index: 67,\n        isBkr: false\n    };\n    this.rules[68] = {\n        name: \"ProsValClose\",\n        lower: \"prosvalclose\",\n        index: 68,\n        isBkr: false\n    };\n    this.rules[69] = {\n        name: \"rep-min\",\n        lower: \"rep-min\",\n        index: 69,\n        isBkr: false\n    };\n    this.rules[70] = {\n        name: \"rep-min-max\",\n        lower: \"rep-min-max\",\n        index: 70,\n        isBkr: false\n    };\n    this.rules[71] = {\n        name: \"rep-max\",\n        lower: \"rep-max\",\n        index: 71,\n        isBkr: false\n    };\n    this.rules[72] = {\n        name: \"rep-num\",\n        lower: \"rep-num\",\n        index: 72,\n        isBkr: false\n    };\n    this.rules[73] = {\n        name: \"dString\",\n        lower: \"dstring\",\n        index: 73,\n        isBkr: false\n    };\n    this.rules[74] = {\n        name: \"xString\",\n        lower: \"xstring\",\n        index: 74,\n        isBkr: false\n    };\n    this.rules[75] = {\n        name: \"bString\",\n        lower: \"bstring\",\n        index: 75,\n        isBkr: false\n    };\n    this.rules[76] = {\n        name: \"Dec\",\n        lower: \"dec\",\n        index: 76,\n        isBkr: false\n    };\n    this.rules[77] = {\n        name: \"Hex\",\n        lower: \"hex\",\n        index: 77,\n        isBkr: false\n    };\n    this.rules[78] = {\n        name: \"Bin\",\n        lower: \"bin\",\n        index: 78,\n        isBkr: false\n    };\n    this.rules[79] = {\n        name: \"dmin\",\n        lower: \"dmin\",\n        index: 79,\n        isBkr: false\n    };\n    this.rules[80] = {\n        name: \"dmax\",\n        lower: \"dmax\",\n        index: 80,\n        isBkr: false\n    };\n    this.rules[81] = {\n        name: \"bmin\",\n        lower: \"bmin\",\n        index: 81,\n        isBkr: false\n    };\n    this.rules[82] = {\n        name: \"bmax\",\n        lower: \"bmax\",\n        index: 82,\n        isBkr: false\n    };\n    this.rules[83] = {\n        name: \"xmin\",\n        lower: \"xmin\",\n        index: 83,\n        isBkr: false\n    };\n    this.rules[84] = {\n        name: \"xmax\",\n        lower: \"xmax\",\n        index: 84,\n        isBkr: false\n    };\n    this.rules[85] = {\n        name: \"dnum\",\n        lower: \"dnum\",\n        index: 85,\n        isBkr: false\n    };\n    this.rules[86] = {\n        name: \"bnum\",\n        lower: \"bnum\",\n        index: 86,\n        isBkr: false\n    };\n    this.rules[87] = {\n        name: \"xnum\",\n        lower: \"xnum\",\n        index: 87,\n        isBkr: false\n    };\n    this.rules[88] = {\n        name: \"alphanum\",\n        lower: \"alphanum\",\n        index: 88,\n        isBkr: false\n    };\n    this.rules[89] = {\n        name: \"owsp\",\n        lower: \"owsp\",\n        index: 89,\n        isBkr: false\n    };\n    this.rules[90] = {\n        name: \"wsp\",\n        lower: \"wsp\",\n        index: 90,\n        isBkr: false\n    };\n    this.rules[91] = {\n        name: \"space\",\n        lower: \"space\",\n        index: 91,\n        isBkr: false\n    };\n    this.rules[92] = {\n        name: \"comment\",\n        lower: \"comment\",\n        index: 92,\n        isBkr: false\n    };\n    this.rules[93] = {\n        name: \"LineEnd\",\n        lower: \"lineend\",\n        index: 93,\n        isBkr: false\n    };\n    this.rules[94] = {\n        name: \"LineContinue\",\n        lower: \"linecontinue\",\n        index: 94,\n        isBkr: false\n    };\n    /* UDTS */ this.udts = [];\n    /* OPCODES */ /* File */ this.rules[0].opcodes = [];\n    this.rules[0].opcodes[0] = {\n        type: 3,\n        min: 0,\n        max: Infinity\n    }; // REP\n    this.rules[0].opcodes[1] = {\n        type: 1,\n        children: [\n            2,\n            3,\n            4\n        ]\n    }; // ALT\n    this.rules[0].opcodes[2] = {\n        type: 4,\n        index: 1\n    }; // RNM(BlankLine)\n    this.rules[0].opcodes[3] = {\n        type: 4,\n        index: 2\n    }; // RNM(Rule)\n    this.rules[0].opcodes[4] = {\n        type: 4,\n        index: 12\n    }; // RNM(RuleError)\n    /* BlankLine */ this.rules[1].opcodes = [];\n    this.rules[1].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            5,\n            7\n        ]\n    }; // CAT\n    this.rules[1].opcodes[1] = {\n        type: 3,\n        min: 0,\n        max: Infinity\n    }; // REP\n    this.rules[1].opcodes[2] = {\n        type: 1,\n        children: [\n            3,\n            4\n        ]\n    }; // ALT\n    this.rules[1].opcodes[3] = {\n        type: 6,\n        string: [\n            32\n        ]\n    }; // TBS\n    this.rules[1].opcodes[4] = {\n        type: 6,\n        string: [\n            9\n        ]\n    }; // TBS\n    this.rules[1].opcodes[5] = {\n        type: 3,\n        min: 0,\n        max: 1\n    }; // REP\n    this.rules[1].opcodes[6] = {\n        type: 4,\n        index: 92\n    }; // RNM(comment)\n    this.rules[1].opcodes[7] = {\n        type: 4,\n        index: 93\n    }; // RNM(LineEnd)\n    /* Rule */ this.rules[2].opcodes = [];\n    this.rules[2].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2,\n            3,\n            4\n        ]\n    }; // CAT\n    this.rules[2].opcodes[1] = {\n        type: 4,\n        index: 3\n    }; // RNM(RuleLookup)\n    this.rules[2].opcodes[2] = {\n        type: 4,\n        index: 89\n    }; // RNM(owsp)\n    this.rules[2].opcodes[3] = {\n        type: 4,\n        index: 14\n    }; // RNM(Alternation)\n    this.rules[2].opcodes[4] = {\n        type: 1,\n        children: [\n            5,\n            8\n        ]\n    }; // ALT\n    this.rules[2].opcodes[5] = {\n        type: 2,\n        children: [\n            6,\n            7\n        ]\n    }; // CAT\n    this.rules[2].opcodes[6] = {\n        type: 4,\n        index: 89\n    }; // RNM(owsp)\n    this.rules[2].opcodes[7] = {\n        type: 4,\n        index: 93\n    }; // RNM(LineEnd)\n    this.rules[2].opcodes[8] = {\n        type: 2,\n        children: [\n            9,\n            10\n        ]\n    }; // CAT\n    this.rules[2].opcodes[9] = {\n        type: 4,\n        index: 13\n    }; // RNM(LineEndError)\n    this.rules[2].opcodes[10] = {\n        type: 4,\n        index: 93\n    }; // RNM(LineEnd)\n    /* RuleLookup */ this.rules[3].opcodes = [];\n    this.rules[3].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2,\n            3\n        ]\n    }; // CAT\n    this.rules[3].opcodes[1] = {\n        type: 4,\n        index: 4\n    }; // RNM(RuleNameTest)\n    this.rules[3].opcodes[2] = {\n        type: 4,\n        index: 89\n    }; // RNM(owsp)\n    this.rules[3].opcodes[3] = {\n        type: 4,\n        index: 7\n    }; // RNM(DefinedAsTest)\n    /* RuleNameTest */ this.rules[4].opcodes = [];\n    this.rules[4].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            2\n        ]\n    }; // ALT\n    this.rules[4].opcodes[1] = {\n        type: 4,\n        index: 5\n    }; // RNM(RuleName)\n    this.rules[4].opcodes[2] = {\n        type: 4,\n        index: 6\n    }; // RNM(RuleNameError)\n    /* RuleName */ this.rules[5].opcodes = [];\n    this.rules[5].opcodes[0] = {\n        type: 4,\n        index: 88\n    }; // RNM(alphanum)\n    /* RuleNameError */ this.rules[6].opcodes = [];\n    this.rules[6].opcodes[0] = {\n        type: 3,\n        min: 1,\n        max: Infinity\n    }; // REP\n    this.rules[6].opcodes[1] = {\n        type: 1,\n        children: [\n            2,\n            3\n        ]\n    }; // ALT\n    this.rules[6].opcodes[2] = {\n        type: 5,\n        min: 33,\n        max: 60\n    }; // TRG\n    this.rules[6].opcodes[3] = {\n        type: 5,\n        min: 62,\n        max: 126\n    }; // TRG\n    /* DefinedAsTest */ this.rules[7].opcodes = [];\n    this.rules[7].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            2\n        ]\n    }; // ALT\n    this.rules[7].opcodes[1] = {\n        type: 4,\n        index: 9\n    }; // RNM(DefinedAs)\n    this.rules[7].opcodes[2] = {\n        type: 4,\n        index: 8\n    }; // RNM(DefinedAsError)\n    /* DefinedAsError */ this.rules[8].opcodes = [];\n    this.rules[8].opcodes[0] = {\n        type: 3,\n        min: 1,\n        max: 2\n    }; // REP\n    this.rules[8].opcodes[1] = {\n        type: 5,\n        min: 33,\n        max: 126\n    }; // TRG\n    /* DefinedAs */ this.rules[9].opcodes = [];\n    this.rules[9].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            2\n        ]\n    }; // ALT\n    this.rules[9].opcodes[1] = {\n        type: 4,\n        index: 11\n    }; // RNM(IncAlt)\n    this.rules[9].opcodes[2] = {\n        type: 4,\n        index: 10\n    }; // RNM(Defined)\n    /* Defined */ this.rules[10].opcodes = [];\n    this.rules[10].opcodes[0] = {\n        type: 6,\n        string: [\n            61\n        ]\n    }; // TBS\n    /* IncAlt */ this.rules[11].opcodes = [];\n    this.rules[11].opcodes[0] = {\n        type: 6,\n        string: [\n            61,\n            47\n        ]\n    }; // TBS\n    /* RuleError */ this.rules[12].opcodes = [];\n    this.rules[12].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            6\n        ]\n    }; // CAT\n    this.rules[12].opcodes[1] = {\n        type: 3,\n        min: 1,\n        max: Infinity\n    }; // REP\n    this.rules[12].opcodes[2] = {\n        type: 1,\n        children: [\n            3,\n            4,\n            5\n        ]\n    }; // ALT\n    this.rules[12].opcodes[3] = {\n        type: 5,\n        min: 32,\n        max: 126\n    }; // TRG\n    this.rules[12].opcodes[4] = {\n        type: 6,\n        string: [\n            9\n        ]\n    }; // TBS\n    this.rules[12].opcodes[5] = {\n        type: 4,\n        index: 94\n    }; // RNM(LineContinue)\n    this.rules[12].opcodes[6] = {\n        type: 4,\n        index: 93\n    }; // RNM(LineEnd)\n    /* LineEndError */ this.rules[13].opcodes = [];\n    this.rules[13].opcodes[0] = {\n        type: 3,\n        min: 1,\n        max: Infinity\n    }; // REP\n    this.rules[13].opcodes[1] = {\n        type: 1,\n        children: [\n            2,\n            3,\n            4\n        ]\n    }; // ALT\n    this.rules[13].opcodes[2] = {\n        type: 5,\n        min: 32,\n        max: 126\n    }; // TRG\n    this.rules[13].opcodes[3] = {\n        type: 6,\n        string: [\n            9\n        ]\n    }; // TBS\n    this.rules[13].opcodes[4] = {\n        type: 4,\n        index: 94\n    }; // RNM(LineContinue)\n    /* Alternation */ this.rules[14].opcodes = [];\n    this.rules[14].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2\n        ]\n    }; // CAT\n    this.rules[14].opcodes[1] = {\n        type: 4,\n        index: 15\n    }; // RNM(Concatenation)\n    this.rules[14].opcodes[2] = {\n        type: 3,\n        min: 0,\n        max: Infinity\n    }; // REP\n    this.rules[14].opcodes[3] = {\n        type: 2,\n        children: [\n            4,\n            5,\n            6\n        ]\n    }; // CAT\n    this.rules[14].opcodes[4] = {\n        type: 4,\n        index: 89\n    }; // RNM(owsp)\n    this.rules[14].opcodes[5] = {\n        type: 4,\n        index: 44\n    }; // RNM(AltOp)\n    this.rules[14].opcodes[6] = {\n        type: 4,\n        index: 15\n    }; // RNM(Concatenation)\n    /* Concatenation */ this.rules[15].opcodes = [];\n    this.rules[15].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2\n        ]\n    }; // CAT\n    this.rules[15].opcodes[1] = {\n        type: 4,\n        index: 16\n    }; // RNM(Repetition)\n    this.rules[15].opcodes[2] = {\n        type: 3,\n        min: 0,\n        max: Infinity\n    }; // REP\n    this.rules[15].opcodes[3] = {\n        type: 2,\n        children: [\n            4,\n            5\n        ]\n    }; // CAT\n    this.rules[15].opcodes[4] = {\n        type: 4,\n        index: 45\n    }; // RNM(CatOp)\n    this.rules[15].opcodes[5] = {\n        type: 4,\n        index: 16\n    }; // RNM(Repetition)\n    /* Repetition */ this.rules[16].opcodes = [];\n    this.rules[16].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            3\n        ]\n    }; // CAT\n    this.rules[16].opcodes[1] = {\n        type: 3,\n        min: 0,\n        max: 1\n    }; // REP\n    this.rules[16].opcodes[2] = {\n        type: 4,\n        index: 17\n    }; // RNM(Modifier)\n    this.rules[16].opcodes[3] = {\n        type: 1,\n        children: [\n            4,\n            5,\n            6,\n            7\n        ]\n    }; // ALT\n    this.rules[16].opcodes[4] = {\n        type: 4,\n        index: 21\n    }; // RNM(Group)\n    this.rules[16].opcodes[5] = {\n        type: 4,\n        index: 25\n    }; // RNM(Option)\n    this.rules[16].opcodes[6] = {\n        type: 4,\n        index: 19\n    }; // RNM(BasicElement)\n    this.rules[16].opcodes[7] = {\n        type: 4,\n        index: 20\n    }; // RNM(BasicElementErr)\n    /* Modifier */ this.rules[17].opcodes = [];\n    this.rules[17].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            5\n        ]\n    }; // ALT\n    this.rules[17].opcodes[1] = {\n        type: 2,\n        children: [\n            2,\n            3\n        ]\n    }; // CAT\n    this.rules[17].opcodes[2] = {\n        type: 4,\n        index: 18\n    }; // RNM(Predicate)\n    this.rules[17].opcodes[3] = {\n        type: 3,\n        min: 0,\n        max: 1\n    }; // REP\n    this.rules[17].opcodes[4] = {\n        type: 4,\n        index: 43\n    }; // RNM(RepOp)\n    this.rules[17].opcodes[5] = {\n        type: 4,\n        index: 43\n    }; // RNM(RepOp)\n    /* Predicate */ this.rules[18].opcodes = [];\n    this.rules[18].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            2,\n            3,\n            4\n        ]\n    }; // ALT\n    this.rules[18].opcodes[1] = {\n        type: 4,\n        index: 49\n    }; // RNM(BkaOp)\n    this.rules[18].opcodes[2] = {\n        type: 4,\n        index: 50\n    }; // RNM(BknOp)\n    this.rules[18].opcodes[3] = {\n        type: 4,\n        index: 47\n    }; // RNM(AndOp)\n    this.rules[18].opcodes[4] = {\n        type: 4,\n        index: 48\n    }; // RNM(NotOp)\n    /* BasicElement */ this.rules[19].opcodes = [];\n    this.rules[19].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            2,\n            3,\n            4,\n            5,\n            6,\n            7,\n            8,\n            9,\n            10\n        ]\n    }; // ALT\n    this.rules[19].opcodes[1] = {\n        type: 4,\n        index: 40\n    }; // RNM(UdtOp)\n    this.rules[19].opcodes[2] = {\n        type: 4,\n        index: 29\n    }; // RNM(RnmOp)\n    this.rules[19].opcodes[3] = {\n        type: 4,\n        index: 53\n    }; // RNM(TrgOp)\n    this.rules[19].opcodes[4] = {\n        type: 4,\n        index: 54\n    }; // RNM(TbsOp)\n    this.rules[19].opcodes[5] = {\n        type: 4,\n        index: 55\n    }; // RNM(TlsOp)\n    this.rules[19].opcodes[6] = {\n        type: 4,\n        index: 61\n    }; // RNM(ClsOp)\n    this.rules[19].opcodes[7] = {\n        type: 4,\n        index: 30\n    }; // RNM(BkrOp)\n    this.rules[19].opcodes[8] = {\n        type: 4,\n        index: 51\n    }; // RNM(AbgOp)\n    this.rules[19].opcodes[9] = {\n        type: 4,\n        index: 52\n    }; // RNM(AenOp)\n    this.rules[19].opcodes[10] = {\n        type: 4,\n        index: 65\n    }; // RNM(ProsVal)\n    /* BasicElementErr */ this.rules[20].opcodes = [];\n    this.rules[20].opcodes[0] = {\n        type: 3,\n        min: 1,\n        max: Infinity\n    }; // REP\n    this.rules[20].opcodes[1] = {\n        type: 1,\n        children: [\n            2,\n            3,\n            4,\n            5\n        ]\n    }; // ALT\n    this.rules[20].opcodes[2] = {\n        type: 5,\n        min: 33,\n        max: 40\n    }; // TRG\n    this.rules[20].opcodes[3] = {\n        type: 5,\n        min: 42,\n        max: 46\n    }; // TRG\n    this.rules[20].opcodes[4] = {\n        type: 5,\n        min: 48,\n        max: 92\n    }; // TRG\n    this.rules[20].opcodes[5] = {\n        type: 5,\n        min: 94,\n        max: 126\n    }; // TRG\n    /* Group */ this.rules[21].opcodes = [];\n    this.rules[21].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2,\n            3\n        ]\n    }; // CAT\n    this.rules[21].opcodes[1] = {\n        type: 4,\n        index: 23\n    }; // RNM(GroupOpen)\n    this.rules[21].opcodes[2] = {\n        type: 4,\n        index: 14\n    }; // RNM(Alternation)\n    this.rules[21].opcodes[3] = {\n        type: 1,\n        children: [\n            4,\n            5\n        ]\n    }; // ALT\n    this.rules[21].opcodes[4] = {\n        type: 4,\n        index: 24\n    }; // RNM(GroupClose)\n    this.rules[21].opcodes[5] = {\n        type: 4,\n        index: 22\n    }; // RNM(GroupError)\n    /* GroupError */ this.rules[22].opcodes = [];\n    this.rules[22].opcodes[0] = {\n        type: 3,\n        min: 1,\n        max: Infinity\n    }; // REP\n    this.rules[22].opcodes[1] = {\n        type: 1,\n        children: [\n            2,\n            3,\n            4,\n            5\n        ]\n    }; // ALT\n    this.rules[22].opcodes[2] = {\n        type: 5,\n        min: 33,\n        max: 40\n    }; // TRG\n    this.rules[22].opcodes[3] = {\n        type: 5,\n        min: 42,\n        max: 46\n    }; // TRG\n    this.rules[22].opcodes[4] = {\n        type: 5,\n        min: 48,\n        max: 92\n    }; // TRG\n    this.rules[22].opcodes[5] = {\n        type: 5,\n        min: 94,\n        max: 126\n    }; // TRG\n    /* GroupOpen */ this.rules[23].opcodes = [];\n    this.rules[23].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2\n        ]\n    }; // CAT\n    this.rules[23].opcodes[1] = {\n        type: 6,\n        string: [\n            40\n        ]\n    }; // TBS\n    this.rules[23].opcodes[2] = {\n        type: 4,\n        index: 89\n    }; // RNM(owsp)\n    /* GroupClose */ this.rules[24].opcodes = [];\n    this.rules[24].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2\n        ]\n    }; // CAT\n    this.rules[24].opcodes[1] = {\n        type: 4,\n        index: 89\n    }; // RNM(owsp)\n    this.rules[24].opcodes[2] = {\n        type: 6,\n        string: [\n            41\n        ]\n    }; // TBS\n    /* Option */ this.rules[25].opcodes = [];\n    this.rules[25].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2,\n            3\n        ]\n    }; // CAT\n    this.rules[25].opcodes[1] = {\n        type: 4,\n        index: 27\n    }; // RNM(OptionOpen)\n    this.rules[25].opcodes[2] = {\n        type: 4,\n        index: 14\n    }; // RNM(Alternation)\n    this.rules[25].opcodes[3] = {\n        type: 1,\n        children: [\n            4,\n            5\n        ]\n    }; // ALT\n    this.rules[25].opcodes[4] = {\n        type: 4,\n        index: 28\n    }; // RNM(OptionClose)\n    this.rules[25].opcodes[5] = {\n        type: 4,\n        index: 26\n    }; // RNM(OptionError)\n    /* OptionError */ this.rules[26].opcodes = [];\n    this.rules[26].opcodes[0] = {\n        type: 3,\n        min: 1,\n        max: Infinity\n    }; // REP\n    this.rules[26].opcodes[1] = {\n        type: 1,\n        children: [\n            2,\n            3,\n            4,\n            5\n        ]\n    }; // ALT\n    this.rules[26].opcodes[2] = {\n        type: 5,\n        min: 33,\n        max: 40\n    }; // TRG\n    this.rules[26].opcodes[3] = {\n        type: 5,\n        min: 42,\n        max: 46\n    }; // TRG\n    this.rules[26].opcodes[4] = {\n        type: 5,\n        min: 48,\n        max: 92\n    }; // TRG\n    this.rules[26].opcodes[5] = {\n        type: 5,\n        min: 94,\n        max: 126\n    }; // TRG\n    /* OptionOpen */ this.rules[27].opcodes = [];\n    this.rules[27].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2\n        ]\n    }; // CAT\n    this.rules[27].opcodes[1] = {\n        type: 6,\n        string: [\n            91\n        ]\n    }; // TBS\n    this.rules[27].opcodes[2] = {\n        type: 4,\n        index: 89\n    }; // RNM(owsp)\n    /* OptionClose */ this.rules[28].opcodes = [];\n    this.rules[28].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2\n        ]\n    }; // CAT\n    this.rules[28].opcodes[1] = {\n        type: 4,\n        index: 89\n    }; // RNM(owsp)\n    this.rules[28].opcodes[2] = {\n        type: 6,\n        string: [\n            93\n        ]\n    }; // TBS\n    /* RnmOp */ this.rules[29].opcodes = [];\n    this.rules[29].opcodes[0] = {\n        type: 4,\n        index: 88\n    }; // RNM(alphanum)\n    /* BkrOp */ this.rules[30].opcodes = [];\n    this.rules[30].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2,\n            4\n        ]\n    }; // CAT\n    this.rules[30].opcodes[1] = {\n        type: 6,\n        string: [\n            92\n        ]\n    }; // TBS\n    this.rules[30].opcodes[2] = {\n        type: 3,\n        min: 0,\n        max: 1\n    }; // REP\n    this.rules[30].opcodes[3] = {\n        type: 4,\n        index: 31\n    }; // RNM(bkrModifier)\n    this.rules[30].opcodes[4] = {\n        type: 4,\n        index: 36\n    }; // RNM(bkr-name)\n    /* bkrModifier */ this.rules[31].opcodes = [];\n    this.rules[31].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            7,\n            13,\n            19\n        ]\n    }; // ALT\n    this.rules[31].opcodes[1] = {\n        type: 2,\n        children: [\n            2,\n            3\n        ]\n    }; // CAT\n    this.rules[31].opcodes[2] = {\n        type: 4,\n        index: 32\n    }; // RNM(cs)\n    this.rules[31].opcodes[3] = {\n        type: 3,\n        min: 0,\n        max: 1\n    }; // REP\n    this.rules[31].opcodes[4] = {\n        type: 1,\n        children: [\n            5,\n            6\n        ]\n    }; // ALT\n    this.rules[31].opcodes[5] = {\n        type: 4,\n        index: 34\n    }; // RNM(um)\n    this.rules[31].opcodes[6] = {\n        type: 4,\n        index: 35\n    }; // RNM(pm)\n    this.rules[31].opcodes[7] = {\n        type: 2,\n        children: [\n            8,\n            9\n        ]\n    }; // CAT\n    this.rules[31].opcodes[8] = {\n        type: 4,\n        index: 33\n    }; // RNM(ci)\n    this.rules[31].opcodes[9] = {\n        type: 3,\n        min: 0,\n        max: 1\n    }; // REP\n    this.rules[31].opcodes[10] = {\n        type: 1,\n        children: [\n            11,\n            12\n        ]\n    }; // ALT\n    this.rules[31].opcodes[11] = {\n        type: 4,\n        index: 34\n    }; // RNM(um)\n    this.rules[31].opcodes[12] = {\n        type: 4,\n        index: 35\n    }; // RNM(pm)\n    this.rules[31].opcodes[13] = {\n        type: 2,\n        children: [\n            14,\n            15\n        ]\n    }; // CAT\n    this.rules[31].opcodes[14] = {\n        type: 4,\n        index: 34\n    }; // RNM(um)\n    this.rules[31].opcodes[15] = {\n        type: 3,\n        min: 0,\n        max: 1\n    }; // REP\n    this.rules[31].opcodes[16] = {\n        type: 1,\n        children: [\n            17,\n            18\n        ]\n    }; // ALT\n    this.rules[31].opcodes[17] = {\n        type: 4,\n        index: 32\n    }; // RNM(cs)\n    this.rules[31].opcodes[18] = {\n        type: 4,\n        index: 33\n    }; // RNM(ci)\n    this.rules[31].opcodes[19] = {\n        type: 2,\n        children: [\n            20,\n            21\n        ]\n    }; // CAT\n    this.rules[31].opcodes[20] = {\n        type: 4,\n        index: 35\n    }; // RNM(pm)\n    this.rules[31].opcodes[21] = {\n        type: 3,\n        min: 0,\n        max: 1\n    }; // REP\n    this.rules[31].opcodes[22] = {\n        type: 1,\n        children: [\n            23,\n            24\n        ]\n    }; // ALT\n    this.rules[31].opcodes[23] = {\n        type: 4,\n        index: 32\n    }; // RNM(cs)\n    this.rules[31].opcodes[24] = {\n        type: 4,\n        index: 33\n    }; // RNM(ci)\n    /* cs */ this.rules[32].opcodes = [];\n    this.rules[32].opcodes[0] = {\n        type: 6,\n        string: [\n            37,\n            115\n        ]\n    }; // TBS\n    /* ci */ this.rules[33].opcodes = [];\n    this.rules[33].opcodes[0] = {\n        type: 6,\n        string: [\n            37,\n            105\n        ]\n    }; // TBS\n    /* um */ this.rules[34].opcodes = [];\n    this.rules[34].opcodes[0] = {\n        type: 6,\n        string: [\n            37,\n            117\n        ]\n    }; // TBS\n    /* pm */ this.rules[35].opcodes = [];\n    this.rules[35].opcodes[0] = {\n        type: 6,\n        string: [\n            37,\n            112\n        ]\n    }; // TBS\n    /* bkr-name */ this.rules[36].opcodes = [];\n    this.rules[36].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            2,\n            3\n        ]\n    }; // ALT\n    this.rules[36].opcodes[1] = {\n        type: 4,\n        index: 38\n    }; // RNM(uname)\n    this.rules[36].opcodes[2] = {\n        type: 4,\n        index: 39\n    }; // RNM(ename)\n    this.rules[36].opcodes[3] = {\n        type: 4,\n        index: 37\n    }; // RNM(rname)\n    /* rname */ this.rules[37].opcodes = [];\n    this.rules[37].opcodes[0] = {\n        type: 4,\n        index: 88\n    }; // RNM(alphanum)\n    /* uname */ this.rules[38].opcodes = [];\n    this.rules[38].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2\n        ]\n    }; // CAT\n    this.rules[38].opcodes[1] = {\n        type: 6,\n        string: [\n            117,\n            95\n        ]\n    }; // TBS\n    this.rules[38].opcodes[2] = {\n        type: 4,\n        index: 88\n    }; // RNM(alphanum)\n    /* ename */ this.rules[39].opcodes = [];\n    this.rules[39].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2\n        ]\n    }; // CAT\n    this.rules[39].opcodes[1] = {\n        type: 6,\n        string: [\n            101,\n            95\n        ]\n    }; // TBS\n    this.rules[39].opcodes[2] = {\n        type: 4,\n        index: 88\n    }; // RNM(alphanum)\n    /* UdtOp */ this.rules[40].opcodes = [];\n    this.rules[40].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            2\n        ]\n    }; // ALT\n    this.rules[40].opcodes[1] = {\n        type: 4,\n        index: 42\n    }; // RNM(udt-empty)\n    this.rules[40].opcodes[2] = {\n        type: 4,\n        index: 41\n    }; // RNM(udt-non-empty)\n    /* udt-non-empty */ this.rules[41].opcodes = [];\n    this.rules[41].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2\n        ]\n    }; // CAT\n    this.rules[41].opcodes[1] = {\n        type: 6,\n        string: [\n            117,\n            95\n        ]\n    }; // TBS\n    this.rules[41].opcodes[2] = {\n        type: 4,\n        index: 88\n    }; // RNM(alphanum)\n    /* udt-empty */ this.rules[42].opcodes = [];\n    this.rules[42].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2\n        ]\n    }; // CAT\n    this.rules[42].opcodes[1] = {\n        type: 6,\n        string: [\n            101,\n            95\n        ]\n    }; // TBS\n    this.rules[42].opcodes[2] = {\n        type: 4,\n        index: 88\n    }; // RNM(alphanum)\n    /* RepOp */ this.rules[43].opcodes = [];\n    this.rules[43].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            5,\n            8,\n            11,\n            12\n        ]\n    }; // ALT\n    this.rules[43].opcodes[1] = {\n        type: 2,\n        children: [\n            2,\n            3,\n            4\n        ]\n    }; // CAT\n    this.rules[43].opcodes[2] = {\n        type: 4,\n        index: 69\n    }; // RNM(rep-min)\n    this.rules[43].opcodes[3] = {\n        type: 4,\n        index: 46\n    }; // RNM(StarOp)\n    this.rules[43].opcodes[4] = {\n        type: 4,\n        index: 71\n    }; // RNM(rep-max)\n    this.rules[43].opcodes[5] = {\n        type: 2,\n        children: [\n            6,\n            7\n        ]\n    }; // CAT\n    this.rules[43].opcodes[6] = {\n        type: 4,\n        index: 69\n    }; // RNM(rep-min)\n    this.rules[43].opcodes[7] = {\n        type: 4,\n        index: 46\n    }; // RNM(StarOp)\n    this.rules[43].opcodes[8] = {\n        type: 2,\n        children: [\n            9,\n            10\n        ]\n    }; // CAT\n    this.rules[43].opcodes[9] = {\n        type: 4,\n        index: 46\n    }; // RNM(StarOp)\n    this.rules[43].opcodes[10] = {\n        type: 4,\n        index: 71\n    }; // RNM(rep-max)\n    this.rules[43].opcodes[11] = {\n        type: 4,\n        index: 46\n    }; // RNM(StarOp)\n    this.rules[43].opcodes[12] = {\n        type: 4,\n        index: 70\n    }; // RNM(rep-min-max)\n    /* AltOp */ this.rules[44].opcodes = [];\n    this.rules[44].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2\n        ]\n    }; // CAT\n    this.rules[44].opcodes[1] = {\n        type: 6,\n        string: [\n            47\n        ]\n    }; // TBS\n    this.rules[44].opcodes[2] = {\n        type: 4,\n        index: 89\n    }; // RNM(owsp)\n    /* CatOp */ this.rules[45].opcodes = [];\n    this.rules[45].opcodes[0] = {\n        type: 4,\n        index: 90\n    }; // RNM(wsp)\n    /* StarOp */ this.rules[46].opcodes = [];\n    this.rules[46].opcodes[0] = {\n        type: 6,\n        string: [\n            42\n        ]\n    }; // TBS\n    /* AndOp */ this.rules[47].opcodes = [];\n    this.rules[47].opcodes[0] = {\n        type: 6,\n        string: [\n            38\n        ]\n    }; // TBS\n    /* NotOp */ this.rules[48].opcodes = [];\n    this.rules[48].opcodes[0] = {\n        type: 6,\n        string: [\n            33\n        ]\n    }; // TBS\n    /* BkaOp */ this.rules[49].opcodes = [];\n    this.rules[49].opcodes[0] = {\n        type: 6,\n        string: [\n            38,\n            38\n        ]\n    }; // TBS\n    /* BknOp */ this.rules[50].opcodes = [];\n    this.rules[50].opcodes[0] = {\n        type: 6,\n        string: [\n            33,\n            33\n        ]\n    }; // TBS\n    /* AbgOp */ this.rules[51].opcodes = [];\n    this.rules[51].opcodes[0] = {\n        type: 6,\n        string: [\n            37,\n            94\n        ]\n    }; // TBS\n    /* AenOp */ this.rules[52].opcodes = [];\n    this.rules[52].opcodes[0] = {\n        type: 6,\n        string: [\n            37,\n            36\n        ]\n    }; // TBS\n    /* TrgOp */ this.rules[53].opcodes = [];\n    this.rules[53].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2\n        ]\n    }; // CAT\n    this.rules[53].opcodes[1] = {\n        type: 6,\n        string: [\n            37\n        ]\n    }; // TBS\n    this.rules[53].opcodes[2] = {\n        type: 1,\n        children: [\n            3,\n            8,\n            13\n        ]\n    }; // ALT\n    this.rules[53].opcodes[3] = {\n        type: 2,\n        children: [\n            4,\n            5,\n            6,\n            7\n        ]\n    }; // CAT\n    this.rules[53].opcodes[4] = {\n        type: 4,\n        index: 76\n    }; // RNM(Dec)\n    this.rules[53].opcodes[5] = {\n        type: 4,\n        index: 79\n    }; // RNM(dmin)\n    this.rules[53].opcodes[6] = {\n        type: 6,\n        string: [\n            45\n        ]\n    }; // TBS\n    this.rules[53].opcodes[7] = {\n        type: 4,\n        index: 80\n    }; // RNM(dmax)\n    this.rules[53].opcodes[8] = {\n        type: 2,\n        children: [\n            9,\n            10,\n            11,\n            12\n        ]\n    }; // CAT\n    this.rules[53].opcodes[9] = {\n        type: 4,\n        index: 77\n    }; // RNM(Hex)\n    this.rules[53].opcodes[10] = {\n        type: 4,\n        index: 83\n    }; // RNM(xmin)\n    this.rules[53].opcodes[11] = {\n        type: 6,\n        string: [\n            45\n        ]\n    }; // TBS\n    this.rules[53].opcodes[12] = {\n        type: 4,\n        index: 84\n    }; // RNM(xmax)\n    this.rules[53].opcodes[13] = {\n        type: 2,\n        children: [\n            14,\n            15,\n            16,\n            17\n        ]\n    }; // CAT\n    this.rules[53].opcodes[14] = {\n        type: 4,\n        index: 78\n    }; // RNM(Bin)\n    this.rules[53].opcodes[15] = {\n        type: 4,\n        index: 81\n    }; // RNM(bmin)\n    this.rules[53].opcodes[16] = {\n        type: 6,\n        string: [\n            45\n        ]\n    }; // TBS\n    this.rules[53].opcodes[17] = {\n        type: 4,\n        index: 82\n    }; // RNM(bmax)\n    /* TbsOp */ this.rules[54].opcodes = [];\n    this.rules[54].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2\n        ]\n    }; // CAT\n    this.rules[54].opcodes[1] = {\n        type: 6,\n        string: [\n            37\n        ]\n    }; // TBS\n    this.rules[54].opcodes[2] = {\n        type: 1,\n        children: [\n            3,\n            10,\n            17\n        ]\n    }; // ALT\n    this.rules[54].opcodes[3] = {\n        type: 2,\n        children: [\n            4,\n            5,\n            6\n        ]\n    }; // CAT\n    this.rules[54].opcodes[4] = {\n        type: 4,\n        index: 76\n    }; // RNM(Dec)\n    this.rules[54].opcodes[5] = {\n        type: 4,\n        index: 73\n    }; // RNM(dString)\n    this.rules[54].opcodes[6] = {\n        type: 3,\n        min: 0,\n        max: Infinity\n    }; // REP\n    this.rules[54].opcodes[7] = {\n        type: 2,\n        children: [\n            8,\n            9\n        ]\n    }; // CAT\n    this.rules[54].opcodes[8] = {\n        type: 6,\n        string: [\n            46\n        ]\n    }; // TBS\n    this.rules[54].opcodes[9] = {\n        type: 4,\n        index: 73\n    }; // RNM(dString)\n    this.rules[54].opcodes[10] = {\n        type: 2,\n        children: [\n            11,\n            12,\n            13\n        ]\n    }; // CAT\n    this.rules[54].opcodes[11] = {\n        type: 4,\n        index: 77\n    }; // RNM(Hex)\n    this.rules[54].opcodes[12] = {\n        type: 4,\n        index: 74\n    }; // RNM(xString)\n    this.rules[54].opcodes[13] = {\n        type: 3,\n        min: 0,\n        max: Infinity\n    }; // REP\n    this.rules[54].opcodes[14] = {\n        type: 2,\n        children: [\n            15,\n            16\n        ]\n    }; // CAT\n    this.rules[54].opcodes[15] = {\n        type: 6,\n        string: [\n            46\n        ]\n    }; // TBS\n    this.rules[54].opcodes[16] = {\n        type: 4,\n        index: 74\n    }; // RNM(xString)\n    this.rules[54].opcodes[17] = {\n        type: 2,\n        children: [\n            18,\n            19,\n            20\n        ]\n    }; // CAT\n    this.rules[54].opcodes[18] = {\n        type: 4,\n        index: 78\n    }; // RNM(Bin)\n    this.rules[54].opcodes[19] = {\n        type: 4,\n        index: 75\n    }; // RNM(bString)\n    this.rules[54].opcodes[20] = {\n        type: 3,\n        min: 0,\n        max: Infinity\n    }; // REP\n    this.rules[54].opcodes[21] = {\n        type: 2,\n        children: [\n            22,\n            23\n        ]\n    }; // CAT\n    this.rules[54].opcodes[22] = {\n        type: 6,\n        string: [\n            46\n        ]\n    }; // TBS\n    this.rules[54].opcodes[23] = {\n        type: 4,\n        index: 75\n    }; // RNM(bString)\n    /* TlsOp */ this.rules[55].opcodes = [];\n    this.rules[55].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2,\n            3,\n            4\n        ]\n    }; // CAT\n    this.rules[55].opcodes[1] = {\n        type: 4,\n        index: 56\n    }; // RNM(TlsCase)\n    this.rules[55].opcodes[2] = {\n        type: 4,\n        index: 57\n    }; // RNM(TlsOpen)\n    this.rules[55].opcodes[3] = {\n        type: 4,\n        index: 59\n    }; // RNM(TlsString)\n    this.rules[55].opcodes[4] = {\n        type: 4,\n        index: 58\n    }; // RNM(TlsClose)\n    /* TlsCase */ this.rules[56].opcodes = [];\n    this.rules[56].opcodes[0] = {\n        type: 3,\n        min: 0,\n        max: 1\n    }; // REP\n    this.rules[56].opcodes[1] = {\n        type: 1,\n        children: [\n            2,\n            3\n        ]\n    }; // ALT\n    this.rules[56].opcodes[2] = {\n        type: 7,\n        string: [\n            37,\n            105\n        ]\n    }; // TLS\n    this.rules[56].opcodes[3] = {\n        type: 7,\n        string: [\n            37,\n            115\n        ]\n    }; // TLS\n    /* TlsOpen */ this.rules[57].opcodes = [];\n    this.rules[57].opcodes[0] = {\n        type: 6,\n        string: [\n            34\n        ]\n    }; // TBS\n    /* TlsClose */ this.rules[58].opcodes = [];\n    this.rules[58].opcodes[0] = {\n        type: 6,\n        string: [\n            34\n        ]\n    }; // TBS\n    /* TlsString */ this.rules[59].opcodes = [];\n    this.rules[59].opcodes[0] = {\n        type: 3,\n        min: 0,\n        max: Infinity\n    }; // REP\n    this.rules[59].opcodes[1] = {\n        type: 1,\n        children: [\n            2,\n            3,\n            4\n        ]\n    }; // ALT\n    this.rules[59].opcodes[2] = {\n        type: 5,\n        min: 32,\n        max: 33\n    }; // TRG\n    this.rules[59].opcodes[3] = {\n        type: 5,\n        min: 35,\n        max: 126\n    }; // TRG\n    this.rules[59].opcodes[4] = {\n        type: 4,\n        index: 60\n    }; // RNM(StringTab)\n    /* StringTab */ this.rules[60].opcodes = [];\n    this.rules[60].opcodes[0] = {\n        type: 6,\n        string: [\n            9\n        ]\n    }; // TBS\n    /* ClsOp */ this.rules[61].opcodes = [];\n    this.rules[61].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2,\n            3\n        ]\n    }; // CAT\n    this.rules[61].opcodes[1] = {\n        type: 4,\n        index: 62\n    }; // RNM(ClsOpen)\n    this.rules[61].opcodes[2] = {\n        type: 4,\n        index: 64\n    }; // RNM(ClsString)\n    this.rules[61].opcodes[3] = {\n        type: 4,\n        index: 63\n    }; // RNM(ClsClose)\n    /* ClsOpen */ this.rules[62].opcodes = [];\n    this.rules[62].opcodes[0] = {\n        type: 6,\n        string: [\n            39\n        ]\n    }; // TBS\n    /* ClsClose */ this.rules[63].opcodes = [];\n    this.rules[63].opcodes[0] = {\n        type: 6,\n        string: [\n            39\n        ]\n    }; // TBS\n    /* ClsString */ this.rules[64].opcodes = [];\n    this.rules[64].opcodes[0] = {\n        type: 3,\n        min: 0,\n        max: Infinity\n    }; // REP\n    this.rules[64].opcodes[1] = {\n        type: 1,\n        children: [\n            2,\n            3,\n            4\n        ]\n    }; // ALT\n    this.rules[64].opcodes[2] = {\n        type: 5,\n        min: 32,\n        max: 38\n    }; // TRG\n    this.rules[64].opcodes[3] = {\n        type: 5,\n        min: 40,\n        max: 126\n    }; // TRG\n    this.rules[64].opcodes[4] = {\n        type: 4,\n        index: 60\n    }; // RNM(StringTab)\n    /* ProsVal */ this.rules[65].opcodes = [];\n    this.rules[65].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2,\n            3\n        ]\n    }; // CAT\n    this.rules[65].opcodes[1] = {\n        type: 4,\n        index: 66\n    }; // RNM(ProsValOpen)\n    this.rules[65].opcodes[2] = {\n        type: 4,\n        index: 67\n    }; // RNM(ProsValString)\n    this.rules[65].opcodes[3] = {\n        type: 4,\n        index: 68\n    }; // RNM(ProsValClose)\n    /* ProsValOpen */ this.rules[66].opcodes = [];\n    this.rules[66].opcodes[0] = {\n        type: 6,\n        string: [\n            60\n        ]\n    }; // TBS\n    /* ProsValString */ this.rules[67].opcodes = [];\n    this.rules[67].opcodes[0] = {\n        type: 3,\n        min: 0,\n        max: Infinity\n    }; // REP\n    this.rules[67].opcodes[1] = {\n        type: 1,\n        children: [\n            2,\n            3,\n            4\n        ]\n    }; // ALT\n    this.rules[67].opcodes[2] = {\n        type: 5,\n        min: 32,\n        max: 61\n    }; // TRG\n    this.rules[67].opcodes[3] = {\n        type: 5,\n        min: 63,\n        max: 126\n    }; // TRG\n    this.rules[67].opcodes[4] = {\n        type: 4,\n        index: 60\n    }; // RNM(StringTab)\n    /* ProsValClose */ this.rules[68].opcodes = [];\n    this.rules[68].opcodes[0] = {\n        type: 6,\n        string: [\n            62\n        ]\n    }; // TBS\n    /* rep-min */ this.rules[69].opcodes = [];\n    this.rules[69].opcodes[0] = {\n        type: 4,\n        index: 72\n    }; // RNM(rep-num)\n    /* rep-min-max */ this.rules[70].opcodes = [];\n    this.rules[70].opcodes[0] = {\n        type: 4,\n        index: 72\n    }; // RNM(rep-num)\n    /* rep-max */ this.rules[71].opcodes = [];\n    this.rules[71].opcodes[0] = {\n        type: 4,\n        index: 72\n    }; // RNM(rep-num)\n    /* rep-num */ this.rules[72].opcodes = [];\n    this.rules[72].opcodes[0] = {\n        type: 3,\n        min: 1,\n        max: Infinity\n    }; // REP\n    this.rules[72].opcodes[1] = {\n        type: 5,\n        min: 48,\n        max: 57\n    }; // TRG\n    /* dString */ this.rules[73].opcodes = [];\n    this.rules[73].opcodes[0] = {\n        type: 4,\n        index: 85\n    }; // RNM(dnum)\n    /* xString */ this.rules[74].opcodes = [];\n    this.rules[74].opcodes[0] = {\n        type: 4,\n        index: 87\n    }; // RNM(xnum)\n    /* bString */ this.rules[75].opcodes = [];\n    this.rules[75].opcodes[0] = {\n        type: 4,\n        index: 86\n    }; // RNM(bnum)\n    /* Dec */ this.rules[76].opcodes = [];\n    this.rules[76].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            2\n        ]\n    }; // ALT\n    this.rules[76].opcodes[1] = {\n        type: 6,\n        string: [\n            68\n        ]\n    }; // TBS\n    this.rules[76].opcodes[2] = {\n        type: 6,\n        string: [\n            100\n        ]\n    }; // TBS\n    /* Hex */ this.rules[77].opcodes = [];\n    this.rules[77].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            2\n        ]\n    }; // ALT\n    this.rules[77].opcodes[1] = {\n        type: 6,\n        string: [\n            88\n        ]\n    }; // TBS\n    this.rules[77].opcodes[2] = {\n        type: 6,\n        string: [\n            120\n        ]\n    }; // TBS\n    /* Bin */ this.rules[78].opcodes = [];\n    this.rules[78].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            2\n        ]\n    }; // ALT\n    this.rules[78].opcodes[1] = {\n        type: 6,\n        string: [\n            66\n        ]\n    }; // TBS\n    this.rules[78].opcodes[2] = {\n        type: 6,\n        string: [\n            98\n        ]\n    }; // TBS\n    /* dmin */ this.rules[79].opcodes = [];\n    this.rules[79].opcodes[0] = {\n        type: 4,\n        index: 85\n    }; // RNM(dnum)\n    /* dmax */ this.rules[80].opcodes = [];\n    this.rules[80].opcodes[0] = {\n        type: 4,\n        index: 85\n    }; // RNM(dnum)\n    /* bmin */ this.rules[81].opcodes = [];\n    this.rules[81].opcodes[0] = {\n        type: 4,\n        index: 86\n    }; // RNM(bnum)\n    /* bmax */ this.rules[82].opcodes = [];\n    this.rules[82].opcodes[0] = {\n        type: 4,\n        index: 86\n    }; // RNM(bnum)\n    /* xmin */ this.rules[83].opcodes = [];\n    this.rules[83].opcodes[0] = {\n        type: 4,\n        index: 87\n    }; // RNM(xnum)\n    /* xmax */ this.rules[84].opcodes = [];\n    this.rules[84].opcodes[0] = {\n        type: 4,\n        index: 87\n    }; // RNM(xnum)\n    /* dnum */ this.rules[85].opcodes = [];\n    this.rules[85].opcodes[0] = {\n        type: 3,\n        min: 1,\n        max: Infinity\n    }; // REP\n    this.rules[85].opcodes[1] = {\n        type: 5,\n        min: 48,\n        max: 57\n    }; // TRG\n    /* bnum */ this.rules[86].opcodes = [];\n    this.rules[86].opcodes[0] = {\n        type: 3,\n        min: 1,\n        max: Infinity\n    }; // REP\n    this.rules[86].opcodes[1] = {\n        type: 5,\n        min: 48,\n        max: 49\n    }; // TRG\n    /* xnum */ this.rules[87].opcodes = [];\n    this.rules[87].opcodes[0] = {\n        type: 3,\n        min: 1,\n        max: Infinity\n    }; // REP\n    this.rules[87].opcodes[1] = {\n        type: 1,\n        children: [\n            2,\n            3,\n            4\n        ]\n    }; // ALT\n    this.rules[87].opcodes[2] = {\n        type: 5,\n        min: 48,\n        max: 57\n    }; // TRG\n    this.rules[87].opcodes[3] = {\n        type: 5,\n        min: 65,\n        max: 70\n    }; // TRG\n    this.rules[87].opcodes[4] = {\n        type: 5,\n        min: 97,\n        max: 102\n    }; // TRG\n    /* alphanum */ this.rules[88].opcodes = [];\n    this.rules[88].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            4\n        ]\n    }; // CAT\n    this.rules[88].opcodes[1] = {\n        type: 1,\n        children: [\n            2,\n            3\n        ]\n    }; // ALT\n    this.rules[88].opcodes[2] = {\n        type: 5,\n        min: 97,\n        max: 122\n    }; // TRG\n    this.rules[88].opcodes[3] = {\n        type: 5,\n        min: 65,\n        max: 90\n    }; // TRG\n    this.rules[88].opcodes[4] = {\n        type: 3,\n        min: 0,\n        max: Infinity\n    }; // REP\n    this.rules[88].opcodes[5] = {\n        type: 1,\n        children: [\n            6,\n            7,\n            8,\n            9\n        ]\n    }; // ALT\n    this.rules[88].opcodes[6] = {\n        type: 5,\n        min: 97,\n        max: 122\n    }; // TRG\n    this.rules[88].opcodes[7] = {\n        type: 5,\n        min: 65,\n        max: 90\n    }; // TRG\n    this.rules[88].opcodes[8] = {\n        type: 5,\n        min: 48,\n        max: 57\n    }; // TRG\n    this.rules[88].opcodes[9] = {\n        type: 6,\n        string: [\n            45\n        ]\n    }; // TBS\n    /* owsp */ this.rules[89].opcodes = [];\n    this.rules[89].opcodes[0] = {\n        type: 3,\n        min: 0,\n        max: Infinity\n    }; // REP\n    this.rules[89].opcodes[1] = {\n        type: 4,\n        index: 91\n    }; // RNM(space)\n    /* wsp */ this.rules[90].opcodes = [];\n    this.rules[90].opcodes[0] = {\n        type: 3,\n        min: 1,\n        max: Infinity\n    }; // REP\n    this.rules[90].opcodes[1] = {\n        type: 4,\n        index: 91\n    }; // RNM(space)\n    /* space */ this.rules[91].opcodes = [];\n    this.rules[91].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            2,\n            3,\n            4\n        ]\n    }; // ALT\n    this.rules[91].opcodes[1] = {\n        type: 6,\n        string: [\n            32\n        ]\n    }; // TBS\n    this.rules[91].opcodes[2] = {\n        type: 6,\n        string: [\n            9\n        ]\n    }; // TBS\n    this.rules[91].opcodes[3] = {\n        type: 4,\n        index: 92\n    }; // RNM(comment)\n    this.rules[91].opcodes[4] = {\n        type: 4,\n        index: 94\n    }; // RNM(LineContinue)\n    /* comment */ this.rules[92].opcodes = [];\n    this.rules[92].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2\n        ]\n    }; // CAT\n    this.rules[92].opcodes[1] = {\n        type: 6,\n        string: [\n            59\n        ]\n    }; // TBS\n    this.rules[92].opcodes[2] = {\n        type: 3,\n        min: 0,\n        max: Infinity\n    }; // REP\n    this.rules[92].opcodes[3] = {\n        type: 1,\n        children: [\n            4,\n            5\n        ]\n    }; // ALT\n    this.rules[92].opcodes[4] = {\n        type: 5,\n        min: 32,\n        max: 126\n    }; // TRG\n    this.rules[92].opcodes[5] = {\n        type: 6,\n        string: [\n            9\n        ]\n    }; // TBS\n    /* LineEnd */ this.rules[93].opcodes = [];\n    this.rules[93].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            2,\n            3\n        ]\n    }; // ALT\n    this.rules[93].opcodes[1] = {\n        type: 6,\n        string: [\n            13,\n            10\n        ]\n    }; // TBS\n    this.rules[93].opcodes[2] = {\n        type: 6,\n        string: [\n            10\n        ]\n    }; // TBS\n    this.rules[93].opcodes[3] = {\n        type: 6,\n        string: [\n            13\n        ]\n    }; // TBS\n    /* LineContinue */ this.rules[94].opcodes = [];\n    this.rules[94].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            5\n        ]\n    }; // CAT\n    this.rules[94].opcodes[1] = {\n        type: 1,\n        children: [\n            2,\n            3,\n            4\n        ]\n    }; // ALT\n    this.rules[94].opcodes[2] = {\n        type: 6,\n        string: [\n            13,\n            10\n        ]\n    }; // TBS\n    this.rules[94].opcodes[3] = {\n        type: 6,\n        string: [\n            10\n        ]\n    }; // TBS\n    this.rules[94].opcodes[4] = {\n        type: 6,\n        string: [\n            13\n        ]\n    }; // TBS\n    this.rules[94].opcodes[5] = {\n        type: 1,\n        children: [\n            6,\n            7\n        ]\n    }; // ALT\n    this.rules[94].opcodes[6] = {\n        type: 6,\n        string: [\n            32\n        ]\n    }; // TBS\n    this.rules[94].opcodes[7] = {\n        type: 6,\n        string: [\n            9\n        ]\n    }; // TBS\n    // The `toString()` function will display the original grammar file(s) that produced these opcodes.\n    this.toString = function toString() {\n        let str = \"\";\n        str += \";\\n\";\n        str += \"; ABNF for JavaScript APG 2.0 SABNF\\n\";\n        str += \"; RFC 5234 with some restrictions and additions.\\n\";\n        str += \"; Updated 11/24/2015 for RFC 7405 case-sensitive literal string notation\\n\";\n        str += ';  - accepts %s\"string\" as a case-sensitive string\\n';\n        str += ';  - accepts %i\"string\" as a case-insensitive string\\n';\n        str += ';  - accepts \"string\" as a case-insensitive string\\n';\n        str += \";\\n\";\n        str += \"; Some restrictions:\\n\";\n        str += \";   1. Rules must begin at first character of each line.\\n\";\n        str += \";      Indentations on first rule and rules thereafter are not allowed.\\n\";\n        str += \";   2. Relaxed line endings. CRLF, LF or CR are accepted as valid line ending.\\n\";\n        str += \";   3. Prose values, i.e. <prose value>, are accepted as valid grammar syntax.\\n\";\n        str += \";      However, a working parser cannot be generated from them.\\n\";\n        str += \";\\n\";\n        str += \"; Super set (SABNF) additions:\\n\";\n        str += \";   1. Look-ahead (syntactic predicate) operators are accepted as element prefixes.\\n\";\n        str += \";      & is the positive look-ahead operator, succeeds and backtracks if the look-ahead phrase is found\\n\";\n        str += \";      ! is the negative look-ahead operator, succeeds and backtracks if the look-ahead phrase is NOT found\\n\";\n        str += \";      e.g. &%d13 or &rule or !(A / B)\\n\";\n        str += \";   2. User-Defined Terminals (UDT) of the form, u_name and e_name are accepted.\\n\";\n        str += \";      'name' is alpha followed by alpha/num/hyphen just like a rule name.\\n\";\n        str += \";      u_name may be used as an element but no rule definition is given.\\n\";\n        str += \";      e.g. rule = A / u_myUdt\\n\";\n        str += ';           A = \"a\"\\n';\n        str += \";      would be a valid grammar.\\n\";\n        str += \";   3. Case-sensitive, single-quoted strings are accepted.\\n\";\n        str += \";      e.g. 'abc' would be equivalent to %d97.98.99\\n\";\n        str += ';      (kept for backward compatibility, but superseded by %s\"abc\")  \\n';\n        str += \"; New 12/26/2015\\n\";\n        str += \";   4. Look-behind operators are accepted as element prefixes.\\n\";\n        str += \";      && is the positive look-behind operator, succeeds and backtracks if the look-behind phrase is found\\n\";\n        str += \";      !! is the negative look-behind operator, succeeds and backtracks if the look-behind phrase is NOT found\\n\";\n        str += \";      e.g. &&%d13 or &&rule or !!(A / B)\\n\";\n        str += \";   5. Back reference operators, i.e. \\\\rulename, are accepted.\\n\";\n        str += \";      A back reference operator acts like a TLS or TBS terminal except that the phrase it attempts\\n\";\n        str += \";      to match is a phrase previously matched by the rule 'rulename'.\\n\";\n        str += \";      There are two modes of previous phrase matching - the parent-frame mode and the universal mode.\\n\";\n        str += \";      In universal mode, \\\\rulename matches the last match to 'rulename' regardless of where it was found.\\n\";\n        str += \";      In parent-frame mode, \\\\rulename matches only the last match found on the parent's frame or parse tree level.\\n\";\n        str += \";      Back reference modifiers can be used to specify case and mode.\\n\";\n        str += \";      \\\\A defaults to case-insensitive and universal mode, e.g. \\\\A === \\\\%i%uA\\n\";\n        str += \";      Modifiers %i and %s determine case-insensitive and case-sensitive mode, respectively.\\n\";\n        str += \";      Modifiers %u and %p determine universal mode and parent frame mode, respectively.\\n\";\n        str += \";      Case and mode modifiers can appear in any order, e.g. \\\\%s%pA === \\\\%p%sA. \\n\";\n        str += \";   7. String begin anchor, ABG(%^) matches the beginning of the input string location.\\n\";\n        str += \";      Returns EMPTY or NOMATCH. Never consumes any characters.\\n\";\n        str += \";   8. String end anchor, AEN(%$) matches the end of the input string location.\\n\";\n        str += \";      Returns EMPTY or NOMATCH. Never consumes any characters.\\n\";\n        str += \";\\n\";\n        str += \"File            = *(BlankLine / Rule / RuleError)\\n\";\n        str += \"BlankLine       = *(%d32/%d9) [comment] LineEnd\\n\";\n        str += \"Rule            = RuleLookup owsp Alternation ((owsp LineEnd)\\n\";\n        str += \"                / (LineEndError LineEnd))\\n\";\n        str += \"RuleLookup      = RuleNameTest owsp DefinedAsTest\\n\";\n        str += \"RuleNameTest    = RuleName/RuleNameError\\n\";\n        str += \"RuleName        = alphanum\\n\";\n        str += \"RuleNameError   = 1*(%d33-60/%d62-126)\\n\";\n        str += \"DefinedAsTest   = DefinedAs / DefinedAsError\\n\";\n        str += \"DefinedAsError  = 1*2%d33-126\\n\";\n        str += \"DefinedAs       = IncAlt / Defined\\n\";\n        str += \"Defined         = %d61\\n\";\n        str += \"IncAlt          = %d61.47\\n\";\n        str += \"RuleError       = 1*(%d32-126 / %d9  / LineContinue) LineEnd\\n\";\n        str += \"LineEndError    = 1*(%d32-126 / %d9  / LineContinue)\\n\";\n        str += \"Alternation     = Concatenation *(owsp AltOp Concatenation)\\n\";\n        str += \"Concatenation   = Repetition *(CatOp Repetition)\\n\";\n        str += \"Repetition      = [Modifier] (Group / Option / BasicElement / BasicElementErr)\\n\";\n        str += \"Modifier        = (Predicate [RepOp])\\n\";\n        str += \"                / RepOp\\n\";\n        str += \"Predicate       = BkaOp\\n\";\n        str += \"                / BknOp\\n\";\n        str += \"                / AndOp\\n\";\n        str += \"                / NotOp\\n\";\n        str += \"BasicElement    = UdtOp\\n\";\n        str += \"                / RnmOp\\n\";\n        str += \"                / TrgOp\\n\";\n        str += \"                / TbsOp\\n\";\n        str += \"                / TlsOp\\n\";\n        str += \"                / ClsOp\\n\";\n        str += \"                / BkrOp\\n\";\n        str += \"                / AbgOp\\n\";\n        str += \"                / AenOp\\n\";\n        str += \"                / ProsVal\\n\";\n        str += \"BasicElementErr = 1*(%d33-40/%d42-46/%d48-92/%d94-126)\\n\";\n        str += \"Group           = GroupOpen  Alternation (GroupClose / GroupError)\\n\";\n        str += \"GroupError      = 1*(%d33-40/%d42-46/%d48-92/%d94-126) ; same as BasicElementErr\\n\";\n        str += \"GroupOpen       = %d40 owsp\\n\";\n        str += \"GroupClose      = owsp %d41\\n\";\n        str += \"Option          = OptionOpen Alternation (OptionClose / OptionError)\\n\";\n        str += \"OptionError     = 1*(%d33-40/%d42-46/%d48-92/%d94-126) ; same as BasicElementErr\\n\";\n        str += \"OptionOpen      = %d91 owsp\\n\";\n        str += \"OptionClose     = owsp %d93\\n\";\n        str += \"RnmOp           = alphanum\\n\";\n        str += \"BkrOp           = %d92 [bkrModifier] bkr-name\\n\";\n        str += \"bkrModifier     = (cs [um / pm]) / (ci [um / pm]) / (um [cs /ci]) / (pm [cs / ci])\\n\";\n        str += \"cs              = '%s'\\n\";\n        str += \"ci              = '%i'\\n\";\n        str += \"um              = '%u'\\n\";\n        str += \"pm              = '%p'\\n\";\n        str += \"bkr-name        = uname / ename / rname\\n\";\n        str += \"rname           = alphanum\\n\";\n        str += \"uname           = %d117.95 alphanum\\n\";\n        str += \"ename           = %d101.95 alphanum\\n\";\n        str += \"UdtOp           = udt-empty\\n\";\n        str += \"                / udt-non-empty\\n\";\n        str += \"udt-non-empty   = %d117.95 alphanum\\n\";\n        str += \"udt-empty       = %d101.95 alphanum\\n\";\n        str += \"RepOp           = (rep-min StarOp rep-max)\\n\";\n        str += \"                / (rep-min StarOp)\\n\";\n        str += \"                / (StarOp rep-max)\\n\";\n        str += \"                / StarOp\\n\";\n        str += \"                / rep-min-max\\n\";\n        str += \"AltOp           = %d47 owsp\\n\";\n        str += \"CatOp           = wsp\\n\";\n        str += \"StarOp          = %d42\\n\";\n        str += \"AndOp           = %d38\\n\";\n        str += \"NotOp           = %d33\\n\";\n        str += \"BkaOp           = %d38.38\\n\";\n        str += \"BknOp           = %d33.33\\n\";\n        str += \"AbgOp           = %d37.94\\n\";\n        str += \"AenOp           = %d37.36\\n\";\n        str += \"TrgOp           = %d37 ((Dec dmin %d45 dmax) / (Hex xmin %d45 xmax) / (Bin bmin %d45 bmax))\\n\";\n        str += \"TbsOp           = %d37 ((Dec dString *(%d46 dString)) / (Hex xString *(%d46 xString)) / (Bin bString *(%d46 bString)))\\n\";\n        str += \"TlsOp           = TlsCase TlsOpen TlsString TlsClose\\n\";\n        str += 'TlsCase         = [\"%i\" / \"%s\"]\\n';\n        str += \"TlsOpen         = %d34\\n\";\n        str += \"TlsClose        = %d34\\n\";\n        str += \"TlsString       = *(%d32-33/%d35-126/StringTab)\\n\";\n        str += \"StringTab       = %d9\\n\";\n        str += \"ClsOp           = ClsOpen ClsString ClsClose\\n\";\n        str += \"ClsOpen         = %d39\\n\";\n        str += \"ClsClose        = %d39\\n\";\n        str += \"ClsString       = *(%d32-38/%d40-126/StringTab)\\n\";\n        str += \"ProsVal         = ProsValOpen ProsValString ProsValClose\\n\";\n        str += \"ProsValOpen     = %d60\\n\";\n        str += \"ProsValString   = *(%d32-61/%d63-126/StringTab)\\n\";\n        str += \"ProsValClose    = %d62\\n\";\n        str += \"rep-min         = rep-num\\n\";\n        str += \"rep-min-max     = rep-num\\n\";\n        str += \"rep-max         = rep-num\\n\";\n        str += \"rep-num         = 1*(%d48-57)\\n\";\n        str += \"dString         = dnum\\n\";\n        str += \"xString         = xnum\\n\";\n        str += \"bString         = bnum\\n\";\n        str += \"Dec             = (%d68/%d100)\\n\";\n        str += \"Hex             = (%d88/%d120)\\n\";\n        str += \"Bin             = (%d66/%d98)\\n\";\n        str += \"dmin            = dnum\\n\";\n        str += \"dmax            = dnum\\n\";\n        str += \"bmin            = bnum\\n\";\n        str += \"bmax            = bnum\\n\";\n        str += \"xmin            = xnum\\n\";\n        str += \"xmax            = xnum\\n\";\n        str += \"dnum            = 1*(%d48-57)\\n\";\n        str += \"bnum            = 1*%d48-49\\n\";\n        str += \"xnum            = 1*(%d48-57 / %d65-70 / %d97-102)\\n\";\n        str += \";\\n\";\n        str += \"; Basics\\n\";\n        str += \"alphanum        = (%d97-122/%d65-90) *(%d97-122/%d65-90/%d48-57/%d45)\\n\";\n        str += \"owsp            = *space\\n\";\n        str += \"wsp             = 1*space\\n\";\n        str += \"space           = %d32\\n\";\n        str += \"                / %d9\\n\";\n        str += \"                / comment\\n\";\n        str += \"                / LineContinue\\n\";\n        str += \"comment         = %d59 *(%d32-126 / %d9)\\n\";\n        str += \"LineEnd         = %d13.10\\n\";\n        str += \"                / %d10\\n\";\n        str += \"                / %d13\\n\";\n        str += \"LineContinue    = (%d13.10 / %d10 / %d13) (%d32 / %d9)\\n\";\n        return str;\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/sabnf-grammar.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/scanner-callbacks.js":
/*!**************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/scanner-callbacks.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // These are the AST translation callback functions used by the scanner\n// to analyze the characters and lines.\nconst ids = __webpack_require__(/*! ../apg-lib/identifiers */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/identifiers.js\");\nconst utils = __webpack_require__(/*! ../apg-lib/utilities */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/utilities.js\");\nfunction semLine(state, chars, phraseIndex, phraseCount, data) {\n    if (state === ids.SEM_PRE) {\n        data.endLength = 0;\n        data.textLength = 0;\n        data.invalidCount = 0;\n    } else {\n        data.lines.push({\n            lineNo: data.lines.length,\n            beginChar: phraseIndex,\n            length: phraseCount,\n            textLength: data.textLength,\n            endType: data.endType,\n            invalidChars: data.invalidCount\n        });\n    }\n    return ids.SEM_OK;\n}\nfunction semLineText(state, chars, phraseIndex, phraseCount, data) {\n    if (state === ids.SEM_PRE) {\n        data.textLength = phraseCount;\n    }\n    return ids.SEM_OK;\n}\nfunction semLastLine(state, chars, phraseIndex, phraseCount, data) {\n    if (state === ids.SEM_PRE) {\n        data.endLength = 0;\n        data.textLength = 0;\n        data.invalidCount = 0;\n    } else if (data.strict) {\n        data.lines.push({\n            lineNo: data.lines.length,\n            beginChar: phraseIndex,\n            length: phraseCount,\n            textLength: phraseCount,\n            endType: \"none\",\n            invalidChars: data.invalidCount\n        });\n        data.errors.push({\n            line: data.lineNo,\n            char: phraseIndex + phraseCount,\n            msg: \"no line end on last line - strict ABNF specifies CRLF(\\\\r\\\\n, \\\\x0D\\\\x0A)\"\n        });\n    } else {\n        /* add a line ender */ chars.push(10);\n        data.lines.push({\n            lineNo: data.lines.length,\n            beginChar: phraseIndex,\n            length: phraseCount + 1,\n            textLength: phraseCount,\n            endType: \"LF\",\n            invalidChars: data.invalidCount\n        });\n    }\n    return ids.SEM_OK;\n}\nfunction semInvalid(state, chars, phraseIndex, phraseCount, data) {\n    if (state === ids.SEM_PRE) {\n        data.errors.push({\n            line: data.lineNo,\n            char: phraseIndex,\n            msg: `invalid character found '\\\\x${utils.charToHex(chars[phraseIndex])}'`\n        });\n    }\n    return ids.SEM_OK;\n}\nfunction semEnd(state, chars, phraseIndex, phraseCount, data) {\n    if (state === ids.SEM_POST) {\n        data.lineNo += 1;\n    }\n    return ids.SEM_OK;\n}\nfunction semLF(state, chars, phraseIndex, phraseCount, data) {\n    if (state === ids.SEM_PRE) {\n        data.endType = \"LF\";\n        if (data.strict) {\n            data.errors.push({\n                line: data.lineNo,\n                char: phraseIndex,\n                msg: \"line end character LF(\\\\n, \\\\x0A) - strict ABNF specifies CRLF(\\\\r\\\\n, \\\\x0D\\\\x0A)\"\n            });\n        }\n    }\n    return ids.SEM_OK;\n}\nfunction semCR(state, chars, phraseIndex, phraseCount, data) {\n    if (state === ids.SEM_PRE) {\n        data.endType = \"CR\";\n        if (data.strict) {\n            data.errors.push({\n                line: data.lineNo,\n                char: phraseIndex,\n                msg: \"line end character CR(\\\\r, \\\\x0D) - strict ABNF specifies CRLF(\\\\r\\\\n, \\\\x0D\\\\x0A)\"\n            });\n        }\n    }\n    return ids.SEM_OK;\n}\nfunction semCRLF(state, chars, phraseIndex, phraseCount, data) {\n    if (state === ids.SEM_PRE) {\n        data.endType = \"CRLF\";\n    }\n    return ids.SEM_OK;\n}\nconst callbacks = [];\ncallbacks.line = semLine;\ncallbacks[\"line-text\"] = semLineText;\ncallbacks[\"last-line\"] = semLastLine;\ncallbacks.invalid = semInvalid;\ncallbacks.end = semEnd;\ncallbacks.lf = semLF;\ncallbacks.cr = semCR;\ncallbacks.crlf = semCRLF;\nexports.callbacks = callbacks;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/scanner-callbacks.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/scanner-grammar.js":
/*!************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/scanner-grammar.js ***!
  \************************************************************************************************/
/***/ ((module) => {

"use strict";
eval("// copyright: Copyright (c) 2023 Lowell D. Thomas, all rights reserved<br>\n//   license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)<br>\n//\n// Generated by apg-js, Version 4.2.1 [apg-js](https://github.com/ldthomas/apg-js)\n\nmodule.exports = function grammar() {\n    // ```\n    // SUMMARY\n    //      rules = 10\n    //       udts = 0\n    //    opcodes = 31\n    //        ---   ABNF original opcodes\n    //        ALT = 5\n    //        CAT = 2\n    //        REP = 4\n    //        RNM = 11\n    //        TLS = 0\n    //        TBS = 4\n    //        TRG = 5\n    //        ---   SABNF superset opcodes\n    //        UDT = 0\n    //        AND = 0\n    //        NOT = 0\n    //        BKA = 0\n    //        BKN = 0\n    //        BKR = 0\n    //        ABG = 0\n    //        AEN = 0\n    // characters = [0 - 4294967295]\n    // ```\n    /* OBJECT IDENTIFIER (for internal parser use) */ this.grammarObject = \"grammarObject\";\n    /* RULES */ this.rules = [];\n    this.rules[0] = {\n        name: \"file\",\n        lower: \"file\",\n        index: 0,\n        isBkr: false\n    };\n    this.rules[1] = {\n        name: \"line\",\n        lower: \"line\",\n        index: 1,\n        isBkr: false\n    };\n    this.rules[2] = {\n        name: \"line-text\",\n        lower: \"line-text\",\n        index: 2,\n        isBkr: false\n    };\n    this.rules[3] = {\n        name: \"last-line\",\n        lower: \"last-line\",\n        index: 3,\n        isBkr: false\n    };\n    this.rules[4] = {\n        name: \"valid\",\n        lower: \"valid\",\n        index: 4,\n        isBkr: false\n    };\n    this.rules[5] = {\n        name: \"invalid\",\n        lower: \"invalid\",\n        index: 5,\n        isBkr: false\n    };\n    this.rules[6] = {\n        name: \"end\",\n        lower: \"end\",\n        index: 6,\n        isBkr: false\n    };\n    this.rules[7] = {\n        name: \"CRLF\",\n        lower: \"crlf\",\n        index: 7,\n        isBkr: false\n    };\n    this.rules[8] = {\n        name: \"LF\",\n        lower: \"lf\",\n        index: 8,\n        isBkr: false\n    };\n    this.rules[9] = {\n        name: \"CR\",\n        lower: \"cr\",\n        index: 9,\n        isBkr: false\n    };\n    /* UDTS */ this.udts = [];\n    /* OPCODES */ /* file */ this.rules[0].opcodes = [];\n    this.rules[0].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            3\n        ]\n    }; // CAT\n    this.rules[0].opcodes[1] = {\n        type: 3,\n        min: 0,\n        max: Infinity\n    }; // REP\n    this.rules[0].opcodes[2] = {\n        type: 4,\n        index: 1\n    }; // RNM(line)\n    this.rules[0].opcodes[3] = {\n        type: 3,\n        min: 0,\n        max: 1\n    }; // REP\n    this.rules[0].opcodes[4] = {\n        type: 4,\n        index: 3\n    }; // RNM(last-line)\n    /* line */ this.rules[1].opcodes = [];\n    this.rules[1].opcodes[0] = {\n        type: 2,\n        children: [\n            1,\n            2\n        ]\n    }; // CAT\n    this.rules[1].opcodes[1] = {\n        type: 4,\n        index: 2\n    }; // RNM(line-text)\n    this.rules[1].opcodes[2] = {\n        type: 4,\n        index: 6\n    }; // RNM(end)\n    /* line-text */ this.rules[2].opcodes = [];\n    this.rules[2].opcodes[0] = {\n        type: 3,\n        min: 0,\n        max: Infinity\n    }; // REP\n    this.rules[2].opcodes[1] = {\n        type: 1,\n        children: [\n            2,\n            3\n        ]\n    }; // ALT\n    this.rules[2].opcodes[2] = {\n        type: 4,\n        index: 4\n    }; // RNM(valid)\n    this.rules[2].opcodes[3] = {\n        type: 4,\n        index: 5\n    }; // RNM(invalid)\n    /* last-line */ this.rules[3].opcodes = [];\n    this.rules[3].opcodes[0] = {\n        type: 3,\n        min: 1,\n        max: Infinity\n    }; // REP\n    this.rules[3].opcodes[1] = {\n        type: 1,\n        children: [\n            2,\n            3\n        ]\n    }; // ALT\n    this.rules[3].opcodes[2] = {\n        type: 4,\n        index: 4\n    }; // RNM(valid)\n    this.rules[3].opcodes[3] = {\n        type: 4,\n        index: 5\n    }; // RNM(invalid)\n    /* valid */ this.rules[4].opcodes = [];\n    this.rules[4].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            2\n        ]\n    }; // ALT\n    this.rules[4].opcodes[1] = {\n        type: 5,\n        min: 32,\n        max: 126\n    }; // TRG\n    this.rules[4].opcodes[2] = {\n        type: 6,\n        string: [\n            9\n        ]\n    }; // TBS\n    /* invalid */ this.rules[5].opcodes = [];\n    this.rules[5].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            2,\n            3,\n            4\n        ]\n    }; // ALT\n    this.rules[5].opcodes[1] = {\n        type: 5,\n        min: 0,\n        max: 8\n    }; // TRG\n    this.rules[5].opcodes[2] = {\n        type: 5,\n        min: 11,\n        max: 12\n    }; // TRG\n    this.rules[5].opcodes[3] = {\n        type: 5,\n        min: 14,\n        max: 31\n    }; // TRG\n    this.rules[5].opcodes[4] = {\n        type: 5,\n        min: 127,\n        max: 4294967295\n    }; // TRG\n    /* end */ this.rules[6].opcodes = [];\n    this.rules[6].opcodes[0] = {\n        type: 1,\n        children: [\n            1,\n            2,\n            3\n        ]\n    }; // ALT\n    this.rules[6].opcodes[1] = {\n        type: 4,\n        index: 7\n    }; // RNM(CRLF)\n    this.rules[6].opcodes[2] = {\n        type: 4,\n        index: 8\n    }; // RNM(LF)\n    this.rules[6].opcodes[3] = {\n        type: 4,\n        index: 9\n    }; // RNM(CR)\n    /* CRLF */ this.rules[7].opcodes = [];\n    this.rules[7].opcodes[0] = {\n        type: 6,\n        string: [\n            13,\n            10\n        ]\n    }; // TBS\n    /* LF */ this.rules[8].opcodes = [];\n    this.rules[8].opcodes[0] = {\n        type: 6,\n        string: [\n            10\n        ]\n    }; // TBS\n    /* CR */ this.rules[9].opcodes = [];\n    this.rules[9].opcodes[0] = {\n        type: 6,\n        string: [\n            13\n        ]\n    }; // TBS\n    // The `toString()` function will display the original grammar file(s) that produced these opcodes.\n    this.toString = function toString() {\n        let str = \"\";\n        str += \"file = *line [last-line]\\n\";\n        str += \"line = line-text end\\n\";\n        str += \"line-text = *(valid/invalid)\\n\";\n        str += \"last-line = 1*(valid/invalid)\\n\";\n        str += \"valid = %d32-126 / %d9\\n\";\n        str += \"invalid = %d0-8 / %d11-12 /%d14-31 / %x7f-ffffffff\\n\";\n        str += \"end = CRLF / LF / CR\\n\";\n        str += \"CRLF = %d13.10\\n\";\n        str += \"LF = %d10\\n\";\n        str += \"CR = %d13\\n\";\n        return str;\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/scanner-grammar.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/scanner.js":
/*!****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/scanner.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This module reads the input grammar file and does a preliminary analysis\n// before attempting to parse it into a grammar object.\n// See:<br>\n// `./dist/scanner-grammar.bnf`<br>\n// for the grammar file this parser is based on.\n//\n// It has two primary functions.\n// - verify the character codes - no non-printing ASCII characters\n// - catalog the lines - create an array with a line object for each line.\n// The object carries information about the line number and character length which is used\n// by the parser generator primarily for error reporting.\n\nmodule.exports = function exfn(chars, errors, strict, trace) {\n    const thisFileName = \"scanner.js: \";\n    const apglib = __webpack_require__(/*! ../apg-lib/node-exports */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/node-exports.js\");\n    const grammar = new (__webpack_require__(/*! ./scanner-grammar */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/scanner-grammar.js\"))();\n    const { callbacks } = __webpack_require__(/*! ./scanner-callbacks */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/scanner-callbacks.js\");\n    /* Scan the grammar for character code errors and catalog the lines. */ const lines = [];\n    // eslint-disable-next-line new-cap\n    const parser = new apglib.parser();\n    // eslint-disable-next-line new-cap\n    parser.ast = new apglib.ast();\n    parser.ast.callbacks = callbacks;\n    if (trace) {\n        if (trace.traceObject !== \"traceObject\") {\n            throw new TypeError(`${thisFileName}trace argument is not a trace object`);\n        }\n        parser.trace = trace;\n    }\n    /* parse the input SABNF grammar */ const test = parser.parse(grammar, \"file\", chars);\n    if (test.success !== true) {\n        errors.push({\n            line: 0,\n            char: 0,\n            msg: \"syntax analysis error analyzing input SABNF grammar\"\n        });\n        return;\n    }\n    const data = {\n        lines,\n        lineNo: 0,\n        errors,\n        strict: !!strict\n    };\n    /* translate (analyze) the input SABNF grammar */ parser.ast.translate(data);\n    // eslint-disable-next-line consistent-return\n    return lines;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FwZy1qc0A0LjIuMS9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctYXBpL3NjYW5uZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozt1RkFHdUYsR0FDdkYsMkVBQTJFO0FBQzNFLHVEQUF1RDtBQUN2RCxXQUFXO0FBQ1gsbUNBQW1DO0FBQ25DLGdEQUFnRDtBQUNoRCxFQUFFO0FBQ0YsZ0NBQWdDO0FBQ2hDLGtFQUFrRTtBQUNsRSwwRUFBMEU7QUFDMUUsMEZBQTBGO0FBQzFGLHlEQUF5RDs7QUFDekRBLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxLQUFLQyxLQUFLLEVBQUVDLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxLQUFLO0lBQ3pELE1BQU1DLGVBQWU7SUFDckIsTUFBTUMsU0FBU0MsbUJBQU9BLENBQUM7SUFDdkIsTUFBTUMsVUFBVSxJQUFLRCxDQUFBQSxtQkFBT0EsQ0FBQywwSEFBbUI7SUFDaEQsTUFBTSxFQUFFRSxTQUFTLEVBQUUsR0FBR0YsbUJBQU9BLENBQUM7SUFFOUIscUVBQXFFLEdBQ3JFLE1BQU1HLFFBQVEsRUFBRTtJQUNoQixtQ0FBbUM7SUFDbkMsTUFBTUMsU0FBUyxJQUFJTCxPQUFPSyxNQUFNO0lBQ2hDLG1DQUFtQztJQUNuQ0EsT0FBT0MsR0FBRyxHQUFHLElBQUlOLE9BQU9NLEdBQUc7SUFDM0JELE9BQU9DLEdBQUcsQ0FBQ0gsU0FBUyxHQUFHQTtJQUN2QixJQUFJTCxPQUFPO1FBQ1QsSUFBSUEsTUFBTVMsV0FBVyxLQUFLLGVBQWU7WUFDdkMsTUFBTSxJQUFJQyxVQUFVLENBQUMsRUFBRVQsYUFBYSxvQ0FBb0MsQ0FBQztRQUMzRTtRQUNBTSxPQUFPUCxLQUFLLEdBQUdBO0lBQ2pCO0lBRUEsaUNBQWlDLEdBQ2pDLE1BQU1XLE9BQU9KLE9BQU9LLEtBQUssQ0FBQ1IsU0FBUyxRQUFRUDtJQUMzQyxJQUFJYyxLQUFLRSxPQUFPLEtBQUssTUFBTTtRQUN6QmYsT0FBT2dCLElBQUksQ0FBQztZQUNWQyxNQUFNO1lBQ05DLE1BQU07WUFDTkMsS0FBSztRQUNQO1FBQ0E7SUFDRjtJQUNBLE1BQU1DLE9BQU87UUFDWFo7UUFDQWEsUUFBUTtRQUNSckI7UUFDQUMsUUFBUSxDQUFDLENBQUNBO0lBQ1o7SUFFQSwrQ0FBK0MsR0FDL0NRLE9BQU9DLEdBQUcsQ0FBQ1ksU0FBUyxDQUFDRjtJQUNyQiw2Q0FBNkM7SUFDN0MsT0FBT1o7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL0B0b2tlbnN0cmVhbS93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FwZy1qc0A0LjIuMS9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctYXBpL3NjYW5uZXIuanM/MTlhOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogICBjb3B5cmlnaHQ6IENvcHlyaWdodCAoYykgMjAyMSBMb3dlbGwgRC4gVGhvbWFzLCBhbGwgcmlnaHRzIHJlc2VydmVkXG4gKiAgICAgbGljZW5zZTogQlNELTItQ2xhdXNlIChodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0yLUNsYXVzZSlcbiAqICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG4vLyBUaGlzIG1vZHVsZSByZWFkcyB0aGUgaW5wdXQgZ3JhbW1hciBmaWxlIGFuZCBkb2VzIGEgcHJlbGltaW5hcnkgYW5hbHlzaXNcbi8vIGJlZm9yZSBhdHRlbXB0aW5nIHRvIHBhcnNlIGl0IGludG8gYSBncmFtbWFyIG9iamVjdC5cbi8vIFNlZTo8YnI+XG4vLyBgLi9kaXN0L3NjYW5uZXItZ3JhbW1hci5ibmZgPGJyPlxuLy8gZm9yIHRoZSBncmFtbWFyIGZpbGUgdGhpcyBwYXJzZXIgaXMgYmFzZWQgb24uXG4vL1xuLy8gSXQgaGFzIHR3byBwcmltYXJ5IGZ1bmN0aW9ucy5cbi8vIC0gdmVyaWZ5IHRoZSBjaGFyYWN0ZXIgY29kZXMgLSBubyBub24tcHJpbnRpbmcgQVNDSUkgY2hhcmFjdGVyc1xuLy8gLSBjYXRhbG9nIHRoZSBsaW5lcyAtIGNyZWF0ZSBhbiBhcnJheSB3aXRoIGEgbGluZSBvYmplY3QgZm9yIGVhY2ggbGluZS5cbi8vIFRoZSBvYmplY3QgY2FycmllcyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbGluZSBudW1iZXIgYW5kIGNoYXJhY3RlciBsZW5ndGggd2hpY2ggaXMgdXNlZFxuLy8gYnkgdGhlIHBhcnNlciBnZW5lcmF0b3IgcHJpbWFyaWx5IGZvciBlcnJvciByZXBvcnRpbmcuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGV4Zm4oY2hhcnMsIGVycm9ycywgc3RyaWN0LCB0cmFjZSkge1xuICBjb25zdCB0aGlzRmlsZU5hbWUgPSAnc2Nhbm5lci5qczogJztcbiAgY29uc3QgYXBnbGliID0gcmVxdWlyZSgnLi4vYXBnLWxpYi9ub2RlLWV4cG9ydHMnKTtcbiAgY29uc3QgZ3JhbW1hciA9IG5ldyAocmVxdWlyZSgnLi9zY2FubmVyLWdyYW1tYXInKSkoKTtcbiAgY29uc3QgeyBjYWxsYmFja3MgfSA9IHJlcXVpcmUoJy4vc2Nhbm5lci1jYWxsYmFja3MnKTtcblxuICAvKiBTY2FuIHRoZSBncmFtbWFyIGZvciBjaGFyYWN0ZXIgY29kZSBlcnJvcnMgYW5kIGNhdGFsb2cgdGhlIGxpbmVzLiAqL1xuICBjb25zdCBsaW5lcyA9IFtdO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbmV3LWNhcFxuICBjb25zdCBwYXJzZXIgPSBuZXcgYXBnbGliLnBhcnNlcigpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbmV3LWNhcFxuICBwYXJzZXIuYXN0ID0gbmV3IGFwZ2xpYi5hc3QoKTtcbiAgcGFyc2VyLmFzdC5jYWxsYmFja3MgPSBjYWxsYmFja3M7XG4gIGlmICh0cmFjZSkge1xuICAgIGlmICh0cmFjZS50cmFjZU9iamVjdCAhPT0gJ3RyYWNlT2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJHt0aGlzRmlsZU5hbWV9dHJhY2UgYXJndW1lbnQgaXMgbm90IGEgdHJhY2Ugb2JqZWN0YCk7XG4gICAgfVxuICAgIHBhcnNlci50cmFjZSA9IHRyYWNlO1xuICB9XG5cbiAgLyogcGFyc2UgdGhlIGlucHV0IFNBQk5GIGdyYW1tYXIgKi9cbiAgY29uc3QgdGVzdCA9IHBhcnNlci5wYXJzZShncmFtbWFyLCAnZmlsZScsIGNoYXJzKTtcbiAgaWYgKHRlc3Quc3VjY2VzcyAhPT0gdHJ1ZSkge1xuICAgIGVycm9ycy5wdXNoKHtcbiAgICAgIGxpbmU6IDAsXG4gICAgICBjaGFyOiAwLFxuICAgICAgbXNnOiAnc3ludGF4IGFuYWx5c2lzIGVycm9yIGFuYWx5emluZyBpbnB1dCBTQUJORiBncmFtbWFyJyxcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgZGF0YSA9IHtcbiAgICBsaW5lcyxcbiAgICBsaW5lTm86IDAsXG4gICAgZXJyb3JzLFxuICAgIHN0cmljdDogISFzdHJpY3QsXG4gIH07XG5cbiAgLyogdHJhbnNsYXRlIChhbmFseXplKSB0aGUgaW5wdXQgU0FCTkYgZ3JhbW1hciAqL1xuICBwYXJzZXIuYXN0LnRyYW5zbGF0ZShkYXRhKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIHJldHVybiBsaW5lcztcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImV4Zm4iLCJjaGFycyIsImVycm9ycyIsInN0cmljdCIsInRyYWNlIiwidGhpc0ZpbGVOYW1lIiwiYXBnbGliIiwicmVxdWlyZSIsImdyYW1tYXIiLCJjYWxsYmFja3MiLCJsaW5lcyIsInBhcnNlciIsImFzdCIsInRyYWNlT2JqZWN0IiwiVHlwZUVycm9yIiwidGVzdCIsInBhcnNlIiwic3VjY2VzcyIsInB1c2giLCJsaW5lIiwiY2hhciIsIm1zZyIsImRhdGEiLCJsaW5lTm8iLCJ0cmFuc2xhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/scanner.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/semantic-callbacks.js":
/*!***************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/semantic-callbacks.js ***!
  \***************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This module has all of the AST translation callback functions for the semantic analysis\n// phase of the generator.\n// See:<br>\n// `./dist/abnf-for-sabnf-grammar.bnf`<br>\n// for the grammar file these callback functions are based on.\n\nmodule.exports = function exfn() {\n    const apglib = __webpack_require__(/*! ../apg-lib/node-exports */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/node-exports.js\");\n    const id = apglib.ids;\n    /* Some helper functions. */ const NameList = function NameList() {\n        this.names = [];\n        /* Adds a new rule name object to the list. Returns -1 if the name already exists. */ /* Returns the added name object if the name does not already exist. */ this.add = function add(name) {\n            let ret = -1;\n            const find = this.get(name);\n            if (find === -1) {\n                ret = {\n                    name,\n                    lower: name.toLowerCase(),\n                    index: this.names.length\n                };\n                this.names.push(ret);\n            }\n            return ret;\n        };\n        /* Brute-force look up. */ this.get = function get(name) {\n            let ret = -1;\n            const lower = name.toLowerCase();\n            for(let i = 0; i < this.names.length; i += 1){\n                if (this.names[i].lower === lower) {\n                    ret = this.names[i];\n                    break;\n                }\n            }\n            return ret;\n        };\n    };\n    /* converts text decimal numbers from, e.g. %d99, to an integer */ const decnum = function decnum(chars, beg, len) {\n        let num = 0;\n        for(let i = beg; i < beg + len; i += 1){\n            num = 10 * num + chars[i] - 48;\n        }\n        return num;\n    };\n    /* converts text binary numbers from, e.g. %b10, to an integer */ const binnum = function binnum(chars, beg, len) {\n        let num = 0;\n        for(let i = beg; i < beg + len; i += 1){\n            num = 2 * num + chars[i] - 48;\n        }\n        return num;\n    };\n    /* converts text hexadecimal numbers from, e.g. %xff, to an integer */ const hexnum = function hexnum(chars, beg, len) {\n        let num = 0;\n        for(let i = beg; i < beg + len; i += 1){\n            let digit = chars[i];\n            if (digit >= 48 && digit <= 57) {\n                digit -= 48;\n            } else if (digit >= 65 && digit <= 70) {\n                digit -= 55;\n            } else if (digit >= 97 && digit <= 102) {\n                digit -= 87;\n            } else {\n                throw new Error(\"hexnum out of range\");\n            }\n            num = 16 * num + digit;\n        }\n        return num;\n    };\n    // This is the prototype for all semantic analysis callback functions.\n    // ````\n    // state - the translator state\n    //   id.SEM_PRE for downward (pre-branch) traversal of the AST\n    //   id.SEM_POST for upward (post branch) traversal of the AST\n    // chars - the array of character codes for the input string\n    // phraseIndex - index into the chars array to the first\n    //               character of the phrase\n    // phraseCount - the number of characters in the phrase\n    // data - user-defined data passed to the translator\n    //        for use by the callback functions.\n    // @return id.SEM_OK, normal return.\n    //         id.SEM_SKIP in state id.SEM_PRE will\n    //         skip the branch below.\n    //         Any thing else is an error which will\n    //         stop the translation.\n    // ````\n    /*\n  function semCallbackPrototype(state, chars, phraseIndex, phraseCount, data) {\n    let ret = id.SEM_OK;\n    if (state === id.SEM_PRE) {\n    } else if (state === id.SEM_POST) {\n    }\n    return ret;\n  }\n  */ // The AST callback functions.\n    function semFile(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_PRE) {\n            data.ruleNames = new NameList();\n            data.udtNames = new NameList();\n            data.rules = [];\n            data.udts = [];\n            data.rulesLineMap = [];\n            data.opcodes = [];\n            data.altStack = [];\n            data.topStack = null;\n            data.topRule = null;\n        } else if (state === id.SEM_POST) {\n            /* validate RNM rule names and set opcode rule index */ let nameObj;\n            data.rules.forEach((rule)=>{\n                rule.isBkr = false;\n                rule.opcodes.forEach((op)=>{\n                    if (op.type === id.RNM) {\n                        nameObj = data.ruleNames.get(op.index.name);\n                        if (nameObj === -1) {\n                            data.errors.push({\n                                line: data.findLine(data.lines, op.index.phraseIndex, data.charsLength),\n                                char: op.index.phraseIndex,\n                                msg: `Rule name '${op.index.name}' used but not defined.`\n                            });\n                            op.index = -1;\n                        } else {\n                            op.index = nameObj.index;\n                        }\n                    }\n                });\n            });\n            /* validate BKR rule names and set opcode rule index */ data.udts.forEach((udt)=>{\n                udt.isBkr = false;\n            });\n            data.rules.forEach((rule)=>{\n                rule.opcodes.forEach((op)=>{\n                    if (op.type === id.BKR) {\n                        rule.hasBkr = true;\n                        nameObj = data.ruleNames.get(op.index.name);\n                        if (nameObj !== -1) {\n                            data.rules[nameObj.index].isBkr = true;\n                            op.index = nameObj.index;\n                        } else {\n                            nameObj = data.udtNames.get(op.index.name);\n                            if (nameObj !== -1) {\n                                data.udts[nameObj.index].isBkr = true;\n                                op.index = data.rules.length + nameObj.index;\n                            } else {\n                                data.errors.push({\n                                    line: data.findLine(data.lines, op.index.phraseIndex, data.charsLength),\n                                    char: op.index.phraseIndex,\n                                    msg: `Back reference name '${op.index.name}' refers to undefined rule or unamed UDT.`\n                                });\n                                op.index = -1;\n                            }\n                        }\n                    }\n                });\n            });\n        }\n        return ret;\n    }\n    function semRule(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_PRE) {\n            data.altStack.length = 0;\n            data.topStack = null;\n            data.rulesLineMap.push({\n                line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                char: phraseIndex\n            });\n        }\n        return ret;\n    }\n    function semRuleLookup(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_PRE) {\n            data.ruleName = \"\";\n            data.definedas = \"\";\n        } else if (state === id.SEM_POST) {\n            let ruleName;\n            if (data.definedas === \"=\") {\n                ruleName = data.ruleNames.add(data.ruleName);\n                if (ruleName === -1) {\n                    data.definedas = null;\n                    data.errors.push({\n                        line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                        char: phraseIndex,\n                        msg: `Rule name '${data.ruleName}' previously defined.`\n                    });\n                } else {\n                    /* start a new rule */ data.topRule = {\n                        name: ruleName.name,\n                        lower: ruleName.lower,\n                        opcodes: [],\n                        index: ruleName.index\n                    };\n                    data.rules.push(data.topRule);\n                    data.opcodes = data.topRule.opcodes;\n                }\n            } else {\n                ruleName = data.ruleNames.get(data.ruleName);\n                if (ruleName === -1) {\n                    data.definedas = null;\n                    data.errors.push({\n                        line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                        char: phraseIndex,\n                        msg: `Rule name '${data.ruleName}' for incremental alternate not previously defined.`\n                    });\n                } else {\n                    data.topRule = data.rules[ruleName.index];\n                    data.opcodes = data.topRule.opcodes;\n                }\n            }\n        }\n        return ret;\n    }\n    function semAlternation(state, chars, phraseIndex, phraseCount, data) {\n        let ret = id.SEM_OK;\n        if (state === id.SEM_PRE) {\n            const TRUE = true;\n            while(TRUE){\n                if (data.definedas === null) {\n                    /* rule error - skip opcode generation */ ret = id.SEM_SKIP;\n                    break;\n                }\n                if (data.topStack === null) {\n                    /* top-level ALT */ if (data.definedas === \"=\") {\n                        /* \"=\" new rule */ data.topStack = {\n                            alt: {\n                                type: id.ALT,\n                                children: []\n                            },\n                            cat: null\n                        };\n                        data.altStack.push(data.topStack);\n                        data.opcodes.push(data.topStack.alt);\n                        break;\n                    }\n                    /* \"=/\" incremental alternate */ data.topStack = {\n                        alt: data.opcodes[0],\n                        cat: null\n                    };\n                    data.altStack.push(data.topStack);\n                    break;\n                }\n                /* lower-level ALT */ data.topStack = {\n                    alt: {\n                        type: id.ALT,\n                        children: []\n                    },\n                    cat: null\n                };\n                data.altStack.push(data.topStack);\n                data.opcodes.push(data.topStack.alt);\n                break;\n            }\n        } else if (state === id.SEM_POST) {\n            data.altStack.pop();\n            if (data.altStack.length > 0) {\n                data.topStack = data.altStack[data.altStack.length - 1];\n            } else {\n                data.topStack = null;\n            }\n        }\n        return ret;\n    }\n    function semConcatenation(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_PRE) {\n            data.topStack.alt.children.push(data.opcodes.length);\n            data.topStack.cat = {\n                type: id.CAT,\n                children: []\n            };\n            data.opcodes.push(data.topStack.cat);\n        } else if (state === id.SEM_POST) {\n            data.topStack.cat = null;\n        }\n        return ret;\n    }\n    function semRepetition(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_PRE) {\n            data.topStack.cat.children.push(data.opcodes.length);\n        }\n        return ret;\n    }\n    function semOptionOpen(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.opcodes.push({\n                type: id.REP,\n                min: 0,\n                max: 1,\n                char: phraseIndex\n            });\n        }\n        return ret;\n    }\n    function semRuleName(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_PRE) {\n            data.ruleName = apglib.utils.charsToString(chars, phraseIndex, phraseCount);\n        }\n        return ret;\n    }\n    function semDefined(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.definedas = \"=\";\n        }\n        return ret;\n    }\n    function semIncAlt(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.definedas = \"=/\";\n        }\n        return ret;\n    }\n    function semRepOp(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_PRE) {\n            data.min = 0;\n            data.max = Infinity;\n            data.topRep = {\n                type: id.REP,\n                min: 0,\n                max: Infinity\n            };\n            data.opcodes.push(data.topRep);\n        } else if (state === id.SEM_POST) {\n            if (data.min > data.max) {\n                data.errors.push({\n                    line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                    char: phraseIndex,\n                    msg: `repetition min cannot be greater than max: min: ${data.min}: max: ${data.max}`\n                });\n            }\n            data.topRep.min = data.min;\n            data.topRep.max = data.max;\n        }\n        return ret;\n    }\n    function semRepMin(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.min = decnum(chars, phraseIndex, phraseCount);\n        }\n        return ret;\n    }\n    function semRepMax(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.max = decnum(chars, phraseIndex, phraseCount);\n        }\n        return ret;\n    }\n    function semRepMinMax(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.max = decnum(chars, phraseIndex, phraseCount);\n            data.min = data.max;\n        }\n        return ret;\n    }\n    function semAndOp(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.opcodes.push({\n                type: id.AND\n            });\n        }\n        return ret;\n    }\n    function semNotOp(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.opcodes.push({\n                type: id.NOT\n            });\n        }\n        return ret;\n    }\n    function semRnmOp(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.opcodes.push({\n                type: id.RNM,\n                /* NOTE: this is temporary info, index will be replaced with integer later. */ /* Probably not the best coding practice but here you go. */ index: {\n                    phraseIndex,\n                    name: apglib.utils.charsToString(chars, phraseIndex, phraseCount)\n                }\n            });\n        }\n        return ret;\n    }\n    function semAbgOp(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.opcodes.push({\n                type: id.ABG\n            });\n        }\n        return ret;\n    }\n    function semAenOp(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.opcodes.push({\n                type: id.AEN\n            });\n        }\n        return ret;\n    }\n    function semBkaOp(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.opcodes.push({\n                type: id.BKA\n            });\n        }\n        return ret;\n    }\n    function semBknOp(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.opcodes.push({\n                type: id.BKN\n            });\n        }\n        return ret;\n    }\n    function semBkrOp(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_PRE) {\n            data.ci = true; /* default to case insensitive */ \n            data.cs = false;\n            data.um = true;\n            data.pm = false;\n        } else if (state === id.SEM_POST) {\n            data.opcodes.push({\n                type: id.BKR,\n                bkrCase: data.cs === true ? id.BKR_MODE_CS : id.BKR_MODE_CI,\n                bkrMode: data.pm === true ? id.BKR_MODE_PM : id.BKR_MODE_UM,\n                /* NOTE: this is temporary info, index will be replaced with integer later. */ /* Probably not the best coding practice but here you go. */ index: {\n                    phraseIndex: data.bkrname.phraseIndex,\n                    name: apglib.utils.charsToString(chars, data.bkrname.phraseIndex, data.bkrname.phraseLength)\n                }\n            });\n        }\n        return ret;\n    }\n    function semBkrCi(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.ci = true;\n        }\n        return ret;\n    }\n    function semBkrCs(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.cs = true;\n        }\n        return ret;\n    }\n    function semBkrUm(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.um = true;\n        }\n        return ret;\n    }\n    function semBkrPm(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.pm = true;\n        }\n        return ret;\n    }\n    function semBkrName(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.bkrname = {\n                phraseIndex,\n                phraseLength: phraseCount\n            };\n        }\n        return ret;\n    }\n    function semUdtEmpty(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            const name = apglib.utils.charsToString(chars, phraseIndex, phraseCount);\n            let udtName = data.udtNames.add(name);\n            if (udtName === -1) {\n                udtName = data.udtNames.get(name);\n                if (udtName === -1) {\n                    throw new Error(\"semUdtEmpty: name look up error\");\n                }\n            } else {\n                data.udts.push({\n                    name: udtName.name,\n                    lower: udtName.lower,\n                    index: udtName.index,\n                    empty: true\n                });\n            }\n            data.opcodes.push({\n                type: id.UDT,\n                empty: true,\n                index: udtName.index\n            });\n        }\n        return ret;\n    }\n    function semUdtNonEmpty(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            const name = apglib.utils.charsToString(chars, phraseIndex, phraseCount);\n            let udtName = data.udtNames.add(name);\n            if (udtName === -1) {\n                udtName = data.udtNames.get(name);\n                if (udtName === -1) {\n                    throw new Error(\"semUdtNonEmpty: name look up error\");\n                }\n            } else {\n                data.udts.push({\n                    name: udtName.name,\n                    lower: udtName.lower,\n                    index: udtName.index,\n                    empty: false\n                });\n            }\n            data.opcodes.push({\n                type: id.UDT,\n                empty: false,\n                index: udtName.index,\n                syntax: null,\n                semantic: null\n            });\n        }\n        return ret;\n    }\n    function semTlsOp(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_PRE) {\n            data.tlscase = true; /* default to case insensitive */ \n        }\n        return ret;\n    }\n    function semTlsCase(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            if (phraseCount > 0 && (chars[phraseIndex + 1] === 83 || chars[phraseIndex + 1] === 115)) {\n                data.tlscase = false; /* set to case sensitive */ \n            }\n        }\n        return ret;\n    }\n    function semTlsString(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            if (data.tlscase) {\n                const str = chars.slice(phraseIndex, phraseIndex + phraseCount);\n                for(let i = 0; i < str.length; i += 1){\n                    if (str[i] >= 65 && str[i] <= 90) {\n                        str[i] += 32;\n                    }\n                }\n                data.opcodes.push({\n                    type: id.TLS,\n                    string: str\n                });\n            } else {\n                data.opcodes.push({\n                    type: id.TBS,\n                    string: chars.slice(phraseIndex, phraseIndex + phraseCount)\n                });\n            }\n        }\n        return ret;\n    }\n    function semClsOp(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            if (phraseCount <= 2) {\n                /* only TLS is allowed to be empty */ data.opcodes.push({\n                    type: id.TLS,\n                    string: []\n                });\n            } else {\n                data.opcodes.push({\n                    type: id.TBS,\n                    string: chars.slice(phraseIndex + 1, phraseIndex + phraseCount - 1)\n                });\n            }\n        }\n        return ret;\n    }\n    function semTbsOp(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_PRE) {\n            data.tbsstr = [];\n        } else if (state === id.SEM_POST) {\n            data.opcodes.push({\n                type: id.TBS,\n                string: data.tbsstr\n            });\n        }\n        return ret;\n    }\n    function semTrgOp(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_PRE) {\n            data.min = 0;\n            data.max = 0;\n        } else if (state === id.SEM_POST) {\n            if (data.min > data.max) {\n                data.errors.push({\n                    line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                    char: phraseIndex,\n                    msg: `TRG, (%dmin-max), min cannot be greater than max: min: ${data.min}: max: ${data.max}`\n                });\n            }\n            data.opcodes.push({\n                type: id.TRG,\n                min: data.min,\n                max: data.max\n            });\n        }\n        return ret;\n    }\n    function semDmin(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.min = decnum(chars, phraseIndex, phraseCount);\n        }\n        return ret;\n    }\n    function semDmax(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.max = decnum(chars, phraseIndex, phraseCount);\n        }\n        return ret;\n    }\n    function semBmin(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.min = binnum(chars, phraseIndex, phraseCount);\n        }\n        return ret;\n    }\n    function semBmax(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.max = binnum(chars, phraseIndex, phraseCount);\n        }\n        return ret;\n    }\n    function semXmin(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.min = hexnum(chars, phraseIndex, phraseCount);\n        }\n        return ret;\n    }\n    function semXmax(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.max = hexnum(chars, phraseIndex, phraseCount);\n        }\n        return ret;\n    }\n    function semDstring(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.tbsstr.push(decnum(chars, phraseIndex, phraseCount));\n        }\n        return ret;\n    }\n    function semBstring(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.tbsstr.push(binnum(chars, phraseIndex, phraseCount));\n        }\n        return ret;\n    }\n    function semXstring(state, chars, phraseIndex, phraseCount, data) {\n        const ret = id.SEM_OK;\n        if (state === id.SEM_POST) {\n            data.tbsstr.push(hexnum(chars, phraseIndex, phraseCount));\n        }\n        return ret;\n    }\n    // Define the callback functions to the AST object.\n    this.callbacks = [];\n    this.callbacks.abgop = semAbgOp;\n    this.callbacks.aenop = semAenOp;\n    this.callbacks.alternation = semAlternation;\n    this.callbacks.andop = semAndOp;\n    this.callbacks.bmax = semBmax;\n    this.callbacks.bmin = semBmin;\n    this.callbacks.bkaop = semBkaOp;\n    this.callbacks.bknop = semBknOp;\n    this.callbacks.bkrop = semBkrOp;\n    this.callbacks[\"bkr-name\"] = semBkrName;\n    this.callbacks.bstring = semBstring;\n    this.callbacks.clsop = semClsOp;\n    this.callbacks.ci = semBkrCi;\n    this.callbacks.cs = semBkrCs;\n    this.callbacks.um = semBkrUm;\n    this.callbacks.pm = semBkrPm;\n    this.callbacks.concatenation = semConcatenation;\n    this.callbacks.defined = semDefined;\n    this.callbacks.dmax = semDmax;\n    this.callbacks.dmin = semDmin;\n    this.callbacks.dstring = semDstring;\n    this.callbacks.file = semFile;\n    this.callbacks.incalt = semIncAlt;\n    this.callbacks.notop = semNotOp;\n    this.callbacks.optionopen = semOptionOpen;\n    this.callbacks[\"rep-max\"] = semRepMax;\n    this.callbacks[\"rep-min\"] = semRepMin;\n    this.callbacks[\"rep-min-max\"] = semRepMinMax;\n    this.callbacks.repetition = semRepetition;\n    this.callbacks.repop = semRepOp;\n    this.callbacks.rnmop = semRnmOp;\n    this.callbacks.rule = semRule;\n    this.callbacks.rulelookup = semRuleLookup;\n    this.callbacks.rulename = semRuleName;\n    this.callbacks.tbsop = semTbsOp;\n    this.callbacks.tlscase = semTlsCase;\n    this.callbacks.tlsstring = semTlsString;\n    this.callbacks.tlsop = semTlsOp;\n    this.callbacks.trgop = semTrgOp;\n    this.callbacks[\"udt-empty\"] = semUdtEmpty;\n    this.callbacks[\"udt-non-empty\"] = semUdtNonEmpty;\n    this.callbacks.xmax = semXmax;\n    this.callbacks.xmin = semXmin;\n    this.callbacks.xstring = semXstring;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/semantic-callbacks.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/show-rules.js":
/*!*******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/show-rules.js ***!
  \*******************************************************************************************/
/***/ ((module) => {

"use strict";
eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ \nmodule.exports = function exfn() {\n    const thisFileName = \"show-rules.js\";\n    // Display the rules.\n    // This function may be called before the attributes calculation.\n    // Sorting is done independently from the attributes.\n    // - order\n    //      - \"index\" or \"i\", index order (default)\n    //      - \"alpha\" or \"a\", alphabetical order\n    //      - none of above, index order (default)\n    const showRules = function showRules(rulesIn = [], udtsIn = [], order = \"index\") {\n        const thisFuncName = \"showRules\";\n        let alphaArray = [];\n        let udtAlphaArray = [];\n        const indexArray = [];\n        const udtIndexArray = [];\n        const rules = rulesIn;\n        const udts = udtsIn;\n        const ruleCount = rulesIn.length;\n        const udtCount = udtsIn.length;\n        let str = \"RULE/UDT NAMES\";\n        let i;\n        function compRulesAlpha(left, right) {\n            if (rules[left].lower < rules[right].lower) {\n                return -1;\n            }\n            if (rules[left].lower > rules[right].lower) {\n                return 1;\n            }\n            return 0;\n        }\n        function compUdtsAlpha(left, right) {\n            if (udts[left].lower < udts[right].lower) {\n                return -1;\n            }\n            if (udts[left].lower > udts[right].lower) {\n                return 1;\n            }\n            return 0;\n        }\n        if (!(Array.isArray(rulesIn) && rulesIn.length)) {\n            throw new Error(`${thisFileName}:${thisFuncName}: rules arg must be array with length > 0`);\n        }\n        if (!Array.isArray(udtsIn)) {\n            throw new Error(`${thisFileName}:${thisFuncName}: udts arg must be array`);\n        }\n        for(i = 0; i < ruleCount; i += 1){\n            indexArray.push(i);\n        }\n        alphaArray = indexArray.slice(0);\n        alphaArray.sort(compRulesAlpha);\n        if (udtCount) {\n            for(i = 0; i < udtCount; i += 1){\n                udtIndexArray.push(i);\n            }\n            udtAlphaArray = udtIndexArray.slice(0);\n            udtAlphaArray.sort(compUdtsAlpha);\n        }\n        if (order.charCodeAt(0) === 97) {\n            str += \" - alphabetical by rule/UDT name\\n\";\n            for(i = 0; i < ruleCount; i += 1){\n                str += `${i}: ${alphaArray[i]}: ${rules[alphaArray[i]].name}\\n`;\n            }\n            if (udtCount) {\n                for(i = 0; i < udtCount; i += 1){\n                    str += `${i}: ${udtAlphaArray[i]}: ${udts[udtAlphaArray[i]].name}\\n`;\n                }\n            }\n        } else {\n            str += \" - ordered by rule/UDT index\\n\";\n            for(i = 0; i < ruleCount; i += 1){\n                str += `${i}: ${rules[i].name}\\n`;\n            }\n            if (udtCount) {\n                for(i = 0; i < udtCount; i += 1){\n                    str += `${i}: ${udts[i].name}\\n`;\n                }\n            }\n        }\n        return str;\n    };\n    return showRules;\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FwZy1qc0A0LjIuMS9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctYXBpL3Nob3ctcnVsZXMuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozt1RkFHdUY7QUFDdkZBLE9BQU9DLE9BQU8sR0FBRyxTQUFVQztJQUN6QixNQUFNQyxlQUFlO0lBQ3JCLHFCQUFxQjtJQUNyQixpRUFBaUU7SUFDakUscURBQXFEO0lBQ3JELFVBQVU7SUFDViwrQ0FBK0M7SUFDL0MsNENBQTRDO0lBQzVDLDhDQUE4QztJQUM5QyxNQUFNQyxZQUFZLFNBQVNBLFVBQVVDLFVBQVUsRUFBRSxFQUFFQyxTQUFTLEVBQUUsRUFBRUMsUUFBUSxPQUFPO1FBQzdFLE1BQU1DLGVBQWU7UUFDckIsSUFBSUMsYUFBYSxFQUFFO1FBQ25CLElBQUlDLGdCQUFnQixFQUFFO1FBQ3RCLE1BQU1DLGFBQWEsRUFBRTtRQUNyQixNQUFNQyxnQkFBZ0IsRUFBRTtRQUN4QixNQUFNQyxRQUFRUjtRQUNkLE1BQU1TLE9BQU9SO1FBQ2IsTUFBTVMsWUFBWVYsUUFBUVcsTUFBTTtRQUNoQyxNQUFNQyxXQUFXWCxPQUFPVSxNQUFNO1FBQzlCLElBQUlFLE1BQU07UUFDVixJQUFJQztRQUNKLFNBQVNDLGVBQWVDLElBQUksRUFBRUMsS0FBSztZQUNqQyxJQUFJVCxLQUFLLENBQUNRLEtBQUssQ0FBQ0UsS0FBSyxHQUFHVixLQUFLLENBQUNTLE1BQU0sQ0FBQ0MsS0FBSyxFQUFFO2dCQUMxQyxPQUFPLENBQUM7WUFDVjtZQUNBLElBQUlWLEtBQUssQ0FBQ1EsS0FBSyxDQUFDRSxLQUFLLEdBQUdWLEtBQUssQ0FBQ1MsTUFBTSxDQUFDQyxLQUFLLEVBQUU7Z0JBQzFDLE9BQU87WUFDVDtZQUNBLE9BQU87UUFDVDtRQUNBLFNBQVNDLGNBQWNILElBQUksRUFBRUMsS0FBSztZQUNoQyxJQUFJUixJQUFJLENBQUNPLEtBQUssQ0FBQ0UsS0FBSyxHQUFHVCxJQUFJLENBQUNRLE1BQU0sQ0FBQ0MsS0FBSyxFQUFFO2dCQUN4QyxPQUFPLENBQUM7WUFDVjtZQUNBLElBQUlULElBQUksQ0FBQ08sS0FBSyxDQUFDRSxLQUFLLEdBQUdULElBQUksQ0FBQ1EsTUFBTSxDQUFDQyxLQUFLLEVBQUU7Z0JBQ3hDLE9BQU87WUFDVDtZQUNBLE9BQU87UUFDVDtRQUNBLElBQUksQ0FBRUUsQ0FBQUEsTUFBTUMsT0FBTyxDQUFDckIsWUFBWUEsUUFBUVcsTUFBTSxHQUFHO1lBQy9DLE1BQU0sSUFBSVcsTUFBTSxDQUFDLEVBQUV4QixhQUFhLENBQUMsRUFBRUssYUFBYSx5Q0FBeUMsQ0FBQztRQUM1RjtRQUNBLElBQUksQ0FBQ2lCLE1BQU1DLE9BQU8sQ0FBQ3BCLFNBQVM7WUFDMUIsTUFBTSxJQUFJcUIsTUFBTSxDQUFDLEVBQUV4QixhQUFhLENBQUMsRUFBRUssYUFBYSx3QkFBd0IsQ0FBQztRQUMzRTtRQUVBLElBQUtXLElBQUksR0FBR0EsSUFBSUosV0FBV0ksS0FBSyxFQUFHO1lBQ2pDUixXQUFXaUIsSUFBSSxDQUFDVDtRQUNsQjtRQUNBVixhQUFhRSxXQUFXa0IsS0FBSyxDQUFDO1FBQzlCcEIsV0FBV3FCLElBQUksQ0FBQ1Y7UUFDaEIsSUFBSUgsVUFBVTtZQUNaLElBQUtFLElBQUksR0FBR0EsSUFBSUYsVUFBVUUsS0FBSyxFQUFHO2dCQUNoQ1AsY0FBY2dCLElBQUksQ0FBQ1Q7WUFDckI7WUFDQVQsZ0JBQWdCRSxjQUFjaUIsS0FBSyxDQUFDO1lBQ3BDbkIsY0FBY29CLElBQUksQ0FBQ047UUFDckI7UUFDQSxJQUFJakIsTUFBTXdCLFVBQVUsQ0FBQyxPQUFPLElBQUk7WUFDOUJiLE9BQU87WUFDUCxJQUFLQyxJQUFJLEdBQUdBLElBQUlKLFdBQVdJLEtBQUssRUFBRztnQkFDakNELE9BQU8sQ0FBQyxFQUFFQyxFQUFFLEVBQUUsRUFBRVYsVUFBVSxDQUFDVSxFQUFFLENBQUMsRUFBRSxFQUFFTixLQUFLLENBQUNKLFVBQVUsQ0FBQ1UsRUFBRSxDQUFDLENBQUNhLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDakU7WUFDQSxJQUFJZixVQUFVO2dCQUNaLElBQUtFLElBQUksR0FBR0EsSUFBSUYsVUFBVUUsS0FBSyxFQUFHO29CQUNoQ0QsT0FBTyxDQUFDLEVBQUVDLEVBQUUsRUFBRSxFQUFFVCxhQUFhLENBQUNTLEVBQUUsQ0FBQyxFQUFFLEVBQUVMLElBQUksQ0FBQ0osYUFBYSxDQUFDUyxFQUFFLENBQUMsQ0FBQ2EsSUFBSSxDQUFDLEVBQUUsQ0FBQztnQkFDdEU7WUFDRjtRQUNGLE9BQU87WUFDTGQsT0FBTztZQUNQLElBQUtDLElBQUksR0FBR0EsSUFBSUosV0FBV0ksS0FBSyxFQUFHO2dCQUNqQ0QsT0FBTyxDQUFDLEVBQUVDLEVBQUUsRUFBRSxFQUFFTixLQUFLLENBQUNNLEVBQUUsQ0FBQ2EsSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUNuQztZQUNBLElBQUlmLFVBQVU7Z0JBQ1osSUFBS0UsSUFBSSxHQUFHQSxJQUFJRixVQUFVRSxLQUFLLEVBQUc7b0JBQ2hDRCxPQUFPLENBQUMsRUFBRUMsRUFBRSxFQUFFLEVBQUVMLElBQUksQ0FBQ0ssRUFBRSxDQUFDYSxJQUFJLENBQUMsRUFBRSxDQUFDO2dCQUNsQztZQUNGO1FBQ0Y7UUFDQSxPQUFPZDtJQUNUO0lBQ0EsT0FBT2Q7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL0B0b2tlbnN0cmVhbS93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FwZy1qc0A0LjIuMS9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctYXBpL3Nob3ctcnVsZXMuanM/NjVlNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogICBjb3B5cmlnaHQ6IENvcHlyaWdodCAoYykgMjAyMSBMb3dlbGwgRC4gVGhvbWFzLCBhbGwgcmlnaHRzIHJlc2VydmVkXG4gKiAgICAgbGljZW5zZTogQlNELTItQ2xhdXNlIChodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0yLUNsYXVzZSlcbiAqICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiBleGZuKCkge1xuICBjb25zdCB0aGlzRmlsZU5hbWUgPSAnc2hvdy1ydWxlcy5qcyc7XG4gIC8vIERpc3BsYXkgdGhlIHJ1bGVzLlxuICAvLyBUaGlzIGZ1bmN0aW9uIG1heSBiZSBjYWxsZWQgYmVmb3JlIHRoZSBhdHRyaWJ1dGVzIGNhbGN1bGF0aW9uLlxuICAvLyBTb3J0aW5nIGlzIGRvbmUgaW5kZXBlbmRlbnRseSBmcm9tIHRoZSBhdHRyaWJ1dGVzLlxuICAvLyAtIG9yZGVyXG4gIC8vICAgICAgLSBcImluZGV4XCIgb3IgXCJpXCIsIGluZGV4IG9yZGVyIChkZWZhdWx0KVxuICAvLyAgICAgIC0gXCJhbHBoYVwiIG9yIFwiYVwiLCBhbHBoYWJldGljYWwgb3JkZXJcbiAgLy8gICAgICAtIG5vbmUgb2YgYWJvdmUsIGluZGV4IG9yZGVyIChkZWZhdWx0KVxuICBjb25zdCBzaG93UnVsZXMgPSBmdW5jdGlvbiBzaG93UnVsZXMocnVsZXNJbiA9IFtdLCB1ZHRzSW4gPSBbXSwgb3JkZXIgPSAnaW5kZXgnKSB7XG4gICAgY29uc3QgdGhpc0Z1bmNOYW1lID0gJ3Nob3dSdWxlcyc7XG4gICAgbGV0IGFscGhhQXJyYXkgPSBbXTtcbiAgICBsZXQgdWR0QWxwaGFBcnJheSA9IFtdO1xuICAgIGNvbnN0IGluZGV4QXJyYXkgPSBbXTtcbiAgICBjb25zdCB1ZHRJbmRleEFycmF5ID0gW107XG4gICAgY29uc3QgcnVsZXMgPSBydWxlc0luO1xuICAgIGNvbnN0IHVkdHMgPSB1ZHRzSW47XG4gICAgY29uc3QgcnVsZUNvdW50ID0gcnVsZXNJbi5sZW5ndGg7XG4gICAgY29uc3QgdWR0Q291bnQgPSB1ZHRzSW4ubGVuZ3RoO1xuICAgIGxldCBzdHIgPSAnUlVMRS9VRFQgTkFNRVMnO1xuICAgIGxldCBpO1xuICAgIGZ1bmN0aW9uIGNvbXBSdWxlc0FscGhhKGxlZnQsIHJpZ2h0KSB7XG4gICAgICBpZiAocnVsZXNbbGVmdF0ubG93ZXIgPCBydWxlc1tyaWdodF0ubG93ZXIpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgaWYgKHJ1bGVzW2xlZnRdLmxvd2VyID4gcnVsZXNbcmlnaHRdLmxvd2VyKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbXBVZHRzQWxwaGEobGVmdCwgcmlnaHQpIHtcbiAgICAgIGlmICh1ZHRzW2xlZnRdLmxvd2VyIDwgdWR0c1tyaWdodF0ubG93ZXIpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgaWYgKHVkdHNbbGVmdF0ubG93ZXIgPiB1ZHRzW3JpZ2h0XS5sb3dlcikge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBpZiAoIShBcnJheS5pc0FycmF5KHJ1bGVzSW4pICYmIHJ1bGVzSW4ubGVuZ3RoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3RoaXNGaWxlTmFtZX06JHt0aGlzRnVuY05hbWV9OiBydWxlcyBhcmcgbXVzdCBiZSBhcnJheSB3aXRoIGxlbmd0aCA+IDBgKTtcbiAgICB9XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHVkdHNJbikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHt0aGlzRmlsZU5hbWV9OiR7dGhpc0Z1bmNOYW1lfTogdWR0cyBhcmcgbXVzdCBiZSBhcnJheWApO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBydWxlQ291bnQ7IGkgKz0gMSkge1xuICAgICAgaW5kZXhBcnJheS5wdXNoKGkpO1xuICAgIH1cbiAgICBhbHBoYUFycmF5ID0gaW5kZXhBcnJheS5zbGljZSgwKTtcbiAgICBhbHBoYUFycmF5LnNvcnQoY29tcFJ1bGVzQWxwaGEpO1xuICAgIGlmICh1ZHRDb3VudCkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IHVkdENvdW50OyBpICs9IDEpIHtcbiAgICAgICAgdWR0SW5kZXhBcnJheS5wdXNoKGkpO1xuICAgICAgfVxuICAgICAgdWR0QWxwaGFBcnJheSA9IHVkdEluZGV4QXJyYXkuc2xpY2UoMCk7XG4gICAgICB1ZHRBbHBoYUFycmF5LnNvcnQoY29tcFVkdHNBbHBoYSk7XG4gICAgfVxuICAgIGlmIChvcmRlci5jaGFyQ29kZUF0KDApID09PSA5Nykge1xuICAgICAgc3RyICs9ICcgLSBhbHBoYWJldGljYWwgYnkgcnVsZS9VRFQgbmFtZVxcbic7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgcnVsZUNvdW50OyBpICs9IDEpIHtcbiAgICAgICAgc3RyICs9IGAke2l9OiAke2FscGhhQXJyYXlbaV19OiAke3J1bGVzW2FscGhhQXJyYXlbaV1dLm5hbWV9XFxuYDtcbiAgICAgIH1cbiAgICAgIGlmICh1ZHRDb3VudCkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdWR0Q291bnQ7IGkgKz0gMSkge1xuICAgICAgICAgIHN0ciArPSBgJHtpfTogJHt1ZHRBbHBoYUFycmF5W2ldfTogJHt1ZHRzW3VkdEFscGhhQXJyYXlbaV1dLm5hbWV9XFxuYDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgKz0gJyAtIG9yZGVyZWQgYnkgcnVsZS9VRFQgaW5kZXhcXG4nO1xuICAgICAgZm9yIChpID0gMDsgaSA8IHJ1bGVDb3VudDsgaSArPSAxKSB7XG4gICAgICAgIHN0ciArPSBgJHtpfTogJHtydWxlc1tpXS5uYW1lfVxcbmA7XG4gICAgICB9XG4gICAgICBpZiAodWR0Q291bnQpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHVkdENvdW50OyBpICs9IDEpIHtcbiAgICAgICAgICBzdHIgKz0gYCR7aX06ICR7dWR0c1tpXS5uYW1lfVxcbmA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbiAgfTtcbiAgcmV0dXJuIHNob3dSdWxlcztcbn0pKCk7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImV4Zm4iLCJ0aGlzRmlsZU5hbWUiLCJzaG93UnVsZXMiLCJydWxlc0luIiwidWR0c0luIiwib3JkZXIiLCJ0aGlzRnVuY05hbWUiLCJhbHBoYUFycmF5IiwidWR0QWxwaGFBcnJheSIsImluZGV4QXJyYXkiLCJ1ZHRJbmRleEFycmF5IiwicnVsZXMiLCJ1ZHRzIiwicnVsZUNvdW50IiwibGVuZ3RoIiwidWR0Q291bnQiLCJzdHIiLCJpIiwiY29tcFJ1bGVzQWxwaGEiLCJsZWZ0IiwicmlnaHQiLCJsb3dlciIsImNvbXBVZHRzQWxwaGEiLCJBcnJheSIsImlzQXJyYXkiLCJFcnJvciIsInB1c2giLCJzbGljZSIsInNvcnQiLCJjaGFyQ29kZUF0IiwibmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/show-rules.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/syntax-callbacks.js":
/*!*************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/syntax-callbacks.js ***!
  \*************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* eslint-disable func-names */ /*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This module has all of the callback functions for the syntax phase of the generation.\n// See:<br>\n// `./dist/abnf-for-sabnf-grammar.bnf`<br>\n// for the grammar file these callback functions are based on.\n\nmodule.exports = function exfn() {\n    const thisFileName = \"syntax-callbacks.js: \";\n    const apglib = __webpack_require__(/*! ../apg-lib/node-exports */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/node-exports.js\");\n    const id = apglib.ids;\n    let topAlt;\n    /* syntax, RNM, callback functions */ const synFile = function synFile(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                data.altStack = [];\n                data.repCount = 0;\n                break;\n            case id.EMPTY:\n                data.errors.push({\n                    line: 0,\n                    char: 0,\n                    msg: \"grammar file is empty\"\n                });\n                break;\n            case id.MATCH:\n                if (data.ruleCount === 0) {\n                    data.errors.push({\n                        line: 0,\n                        char: 0,\n                        msg: \"no rules defined\"\n                    });\n                }\n                break;\n            case id.NOMATCH:\n                throw new Error(`${thisFileName}synFile: grammar file NOMATCH: design error: should never happen.`);\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    // eslint-disable-next-line func-names\n    const synRule = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                data.altStack.length = 0;\n                topAlt = {\n                    groupOpen: null,\n                    groupError: false,\n                    optionOpen: null,\n                    optionError: false,\n                    tlsOpen: null,\n                    clsOpen: null,\n                    prosValOpen: null,\n                    basicError: false\n                };\n                data.altStack.push(topAlt);\n                break;\n            case id.EMPTY:\n                throw new Error(`${thisFileName}synRule: EMPTY: rule cannot be empty`);\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                data.ruleCount += 1;\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synRuleError = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                data.errors.push({\n                    line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                    char: phraseIndex,\n                    msg: \"Unrecognized SABNF line. Invalid rule, comment or blank line.\"\n                });\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synRuleNameError = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                data.errors.push({\n                    line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                    char: phraseIndex,\n                    msg: \"Rule names must be alphanum and begin with alphabetic character.\"\n                });\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synDefinedAsError = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                data.errors.push({\n                    line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                    char: phraseIndex,\n                    msg: \"Expected '=' or '=/'. Not found.\"\n                });\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synAndOp = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                if (data.strict) {\n                    data.errors.push({\n                        line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                        char: phraseIndex,\n                        msg: \"AND operator(&) found - strict ABNF specified.\"\n                    });\n                }\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synNotOp = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                if (data.strict) {\n                    data.errors.push({\n                        line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                        char: phraseIndex,\n                        msg: \"NOT operator(!) found - strict ABNF specified.\"\n                    });\n                }\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synBkaOp = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                if (data.strict) {\n                    data.errors.push({\n                        line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                        char: phraseIndex,\n                        msg: \"Positive look-behind operator(&&) found - strict ABNF specified.\"\n                    });\n                }\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synBknOp = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                if (data.strict) {\n                    data.errors.push({\n                        line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                        char: phraseIndex,\n                        msg: \"Negative look-behind operator(!!) found - strict ABNF specified.\"\n                    });\n                }\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synAbgOp = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                if (data.strict) {\n                    data.errors.push({\n                        line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                        char: phraseIndex,\n                        msg: \"Beginning of string anchor(%^) found - strict ABNF specified.\"\n                    });\n                }\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synAenOp = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                if (data.strict) {\n                    data.errors.push({\n                        line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                        char: phraseIndex,\n                        msg: \"End of string anchor(%$) found - strict ABNF specified.\"\n                    });\n                }\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synBkrOp = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                if (data.strict) {\n                    const name = apglib.utils.charsToString(chars, phraseIndex, result.phraseLength);\n                    data.errors.push({\n                        line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                        char: phraseIndex,\n                        msg: `Back reference operator(${name}) found - strict ABNF specified.`\n                    });\n                }\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synUdtOp = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                if (data.strict) {\n                    const name = apglib.utils.charsToString(chars, phraseIndex, result.phraseLength);\n                    data.errors.push({\n                        line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                        char: phraseIndex,\n                        msg: `UDT operator found(${name}) - strict ABNF specified.`\n                    });\n                }\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synTlsOpen = function(result, chars, phraseIndex) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                topAlt.tlsOpen = phraseIndex;\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synTlsString = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                data.stringTabChar = false;\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                if (data.stringTabChar !== false) {\n                    data.errors.push({\n                        line: data.findLine(data.lines, data.stringTabChar),\n                        char: data.stringTabChar,\n                        msg: \"Tab character (\\\\t, x09) not allowed in literal string (see 'quoted-string' definition, RFC 7405.)\"\n                    });\n                }\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synStringTab = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                data.stringTabChar = phraseIndex;\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synTlsClose = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                data.errors.push({\n                    line: data.findLine(data.lines, topAlt.tlsOpen),\n                    char: topAlt.tlsOpen,\n                    msg: 'Case-insensitive literal string(\"...\") opened but not closed.'\n                });\n                topAlt.basicError = true;\n                topAlt.tlsOpen = null;\n                break;\n            case id.MATCH:\n                topAlt.tlsOpen = null;\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synClsOpen = function(result, chars, phraseIndex) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                topAlt.clsOpen = phraseIndex;\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synClsString = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                data.stringTabChar = false;\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                if (data.stringTabChar !== false) {\n                    data.errors.push({\n                        line: data.findLine(data.lines, data.stringTabChar),\n                        char: data.stringTabChar,\n                        msg: \"Tab character (\\\\t, x09) not allowed in literal string.\"\n                    });\n                }\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synClsClose = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                data.errors.push({\n                    line: data.findLine(data.lines, topAlt.clsOpen),\n                    char: topAlt.clsOpen,\n                    msg: \"Case-sensitive literal string('...') opened but not closed.\"\n                });\n                topAlt.clsOpen = null;\n                topAlt.basicError = true;\n                break;\n            case id.MATCH:\n                if (data.strict) {\n                    data.errors.push({\n                        line: data.findLine(data.lines, topAlt.clsOpen),\n                        char: topAlt.clsOpen,\n                        msg: \"Case-sensitive string operator('...') found - strict ABNF specified.\"\n                    });\n                }\n                topAlt.clsOpen = null;\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synProsValOpen = function(result, chars, phraseIndex) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                topAlt.prosValOpen = phraseIndex;\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synProsValString = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                data.stringTabChar = false;\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                if (data.stringTabChar !== false) {\n                    data.errors.push({\n                        line: data.findLine(data.lines, data.stringTabChar),\n                        char: data.stringTabChar,\n                        msg: \"Tab character (\\\\t, x09) not allowed in prose value string.\"\n                    });\n                }\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synProsValClose = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                data.errors.push({\n                    line: data.findLine(data.lines, topAlt.prosValOpen),\n                    char: topAlt.prosValOpen,\n                    msg: \"Prose value operator(<...>) opened but not closed.\"\n                });\n                topAlt.basicError = true;\n                topAlt.prosValOpen = null;\n                break;\n            case id.MATCH:\n                data.errors.push({\n                    line: data.findLine(data.lines, topAlt.prosValOpen),\n                    char: topAlt.prosValOpen,\n                    msg: \"Prose value operator(<...>) found. The ABNF syntax is valid, but a parser cannot be generated from this grammar.\"\n                });\n                topAlt.prosValOpen = null;\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synGroupOpen = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                topAlt = {\n                    groupOpen: phraseIndex,\n                    groupError: false,\n                    optionOpen: null,\n                    optionError: false,\n                    tlsOpen: null,\n                    clsOpen: null,\n                    prosValOpen: null,\n                    basicError: false\n                };\n                data.altStack.push(topAlt);\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synGroupClose = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                data.errors.push({\n                    line: data.findLine(data.lines, topAlt.groupOpen),\n                    char: topAlt.groupOpen,\n                    msg: 'Group \"(...)\" opened but not closed.'\n                });\n                topAlt = data.altStack.pop();\n                topAlt.groupError = true;\n                break;\n            case id.MATCH:\n                topAlt = data.altStack.pop();\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synOptionOpen = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                topAlt = {\n                    groupOpen: null,\n                    groupError: false,\n                    optionOpen: phraseIndex,\n                    optionError: false,\n                    tlsOpen: null,\n                    clsOpen: null,\n                    prosValOpen: null,\n                    basicError: false\n                };\n                data.altStack.push(topAlt);\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synOptionClose = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                data.errors.push({\n                    line: data.findLine(data.lines, topAlt.optionOpen),\n                    char: topAlt.optionOpen,\n                    msg: 'Option \"[...]\" opened but not closed.'\n                });\n                topAlt = data.altStack.pop();\n                topAlt.optionError = true;\n                break;\n            case id.MATCH:\n                topAlt = data.altStack.pop();\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synBasicElementError = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                if (topAlt.basicError === false) {\n                    data.errors.push({\n                        line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                        char: phraseIndex,\n                        msg: \"Unrecognized SABNF element.\"\n                    });\n                }\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synLineEnd = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                if (result.phraseLength === 1 && data.strict) {\n                    const end = chars[phraseIndex] === 13 ? \"CR\" : \"LF\";\n                    data.errors.push({\n                        line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                        char: phraseIndex,\n                        msg: `Line end '${end}' found - strict ABNF specified, only CRLF allowed.`\n                    });\n                }\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synLineEndError = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                break;\n            case id.MATCH:\n                data.errors.push({\n                    line: data.findLine(data.lines, phraseIndex, data.charsLength),\n                    char: phraseIndex,\n                    msg: \"Unrecognized grammar element or characters.\"\n                });\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    const synRepetition = function(result, chars, phraseIndex, data) {\n        switch(result.state){\n            case id.ACTIVE:\n                break;\n            case id.EMPTY:\n                break;\n            case id.NOMATCH:\n                data.repCount += 1;\n                break;\n            case id.MATCH:\n                data.repCount += 1;\n                break;\n            default:\n                throw new Error(`${thisFileName}synFile: unrecognized case.`);\n        }\n    };\n    // Define the list of callback functions.\n    this.callbacks = [];\n    this.callbacks.andop = synAndOp;\n    this.callbacks.basicelementerr = synBasicElementError;\n    this.callbacks.clsclose = synClsClose;\n    this.callbacks.clsopen = synClsOpen;\n    this.callbacks.clsstring = synClsString;\n    this.callbacks.definedaserror = synDefinedAsError;\n    this.callbacks.file = synFile;\n    this.callbacks.groupclose = synGroupClose;\n    this.callbacks.groupopen = synGroupOpen;\n    this.callbacks.lineenderror = synLineEndError;\n    this.callbacks.lineend = synLineEnd;\n    this.callbacks.notop = synNotOp;\n    this.callbacks.optionclose = synOptionClose;\n    this.callbacks.optionopen = synOptionOpen;\n    this.callbacks.prosvalclose = synProsValClose;\n    this.callbacks.prosvalopen = synProsValOpen;\n    this.callbacks.prosvalstring = synProsValString;\n    this.callbacks.repetition = synRepetition;\n    this.callbacks.rule = synRule;\n    this.callbacks.ruleerror = synRuleError;\n    this.callbacks.rulenameerror = synRuleNameError;\n    this.callbacks.stringtab = synStringTab;\n    this.callbacks.tlsclose = synTlsClose;\n    this.callbacks.tlsopen = synTlsOpen;\n    this.callbacks.tlsstring = synTlsString;\n    this.callbacks.udtop = synUdtOp;\n    this.callbacks.bkaop = synBkaOp;\n    this.callbacks.bknop = synBknOp;\n    this.callbacks.bkrop = synBkrOp;\n    this.callbacks.abgop = synAbgOp;\n    this.callbacks.aenop = synAenOp;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FwZy1qc0A0LjIuMS9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctYXBpL3N5bnRheC1jYWxsYmFja3MuanMiLCJtYXBwaW5ncyI6IkFBQUEsNkJBQTZCLEdBQzdCOzs7dUZBR3VGLEdBQ3ZGLHdGQUF3RjtBQUN4RixXQUFXO0FBQ1gsMENBQTBDO0FBQzFDLDhEQUE4RDs7QUFDOURBLE9BQU9DLE9BQU8sR0FBRyxTQUFTQztJQUN4QixNQUFNQyxlQUFlO0lBQ3JCLE1BQU1DLFNBQVNDLG1CQUFPQSxDQUFDO0lBQ3ZCLE1BQU1DLEtBQUtGLE9BQU9HLEdBQUc7SUFDckIsSUFBSUM7SUFDSixtQ0FBbUMsR0FDbkMsTUFBTUMsVUFBVSxTQUFTQSxRQUFRQyxNQUFNLEVBQUVDLEtBQUssRUFBRUMsV0FBVyxFQUFFQyxJQUFJO1FBQy9ELE9BQVFILE9BQU9JLEtBQUs7WUFDbEIsS0FBS1IsR0FBR1MsTUFBTTtnQkFDWkYsS0FBS0csUUFBUSxHQUFHLEVBQUU7Z0JBQ2xCSCxLQUFLSSxRQUFRLEdBQUc7Z0JBQ2hCO1lBQ0YsS0FBS1gsR0FBR1ksS0FBSztnQkFDWEwsS0FBS00sTUFBTSxDQUFDQyxJQUFJLENBQUM7b0JBQ2ZDLE1BQU07b0JBQ05DLE1BQU07b0JBQ05DLEtBQUs7Z0JBQ1A7Z0JBQ0E7WUFDRixLQUFLakIsR0FBR2tCLEtBQUs7Z0JBQ1gsSUFBSVgsS0FBS1ksU0FBUyxLQUFLLEdBQUc7b0JBQ3hCWixLQUFLTSxNQUFNLENBQUNDLElBQUksQ0FBQzt3QkFDZkMsTUFBTTt3QkFDTkMsTUFBTTt3QkFDTkMsS0FBSztvQkFDUDtnQkFDRjtnQkFDQTtZQUNGLEtBQUtqQixHQUFHb0IsT0FBTztnQkFDYixNQUFNLElBQUlDLE1BQU0sQ0FBQyxFQUFFeEIsYUFBYSxpRUFBaUUsQ0FBQztZQUNwRztnQkFDRSxNQUFNLElBQUl3QixNQUFNLENBQUMsRUFBRXhCLGFBQWEsMkJBQTJCLENBQUM7UUFDaEU7SUFD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QUNzQixTQUFTLEdBQUd4QztJQUMzQixJQUFJLENBQUNrQixTQUFTLENBQUN1QixRQUFRLEdBQUd4QztJQUMxQixJQUFJLENBQUNpQixTQUFTLENBQUN3QixPQUFPLEdBQUc3QztJQUN6QixJQUFJLENBQUNxQixTQUFTLENBQUN5QixTQUFTLEdBQUc3QztJQUMzQixJQUFJLENBQUNvQixTQUFTLENBQUMwQixLQUFLLEdBQUdoRDtJQUN2QixJQUFJLENBQUNzQixTQUFTLENBQUMyQixLQUFLLEdBQUcxRDtJQUN2QixJQUFJLENBQUMrQixTQUFTLENBQUM0QixLQUFLLEdBQUcxRDtJQUN2QixJQUFJLENBQUM4QixTQUFTLENBQUM2QixLQUFLLEdBQUd4RDtJQUN2QixJQUFJLENBQUMyQixTQUFTLENBQUM4QixLQUFLLEdBQUczRDtJQUN2QixJQUFJLENBQUM2QixTQUFTLENBQUMrQixLQUFLLEdBQUczRDtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL0B0b2tlbnN0cmVhbS93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FwZy1qc0A0LjIuMS9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctYXBpL3N5bnRheC1jYWxsYmFja3MuanM/YmVhZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBmdW5jLW5hbWVzICovXG4vKiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogICBjb3B5cmlnaHQ6IENvcHlyaWdodCAoYykgMjAyMSBMb3dlbGwgRC4gVGhvbWFzLCBhbGwgcmlnaHRzIHJlc2VydmVkXG4gKiAgICAgbGljZW5zZTogQlNELTItQ2xhdXNlIChodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0yLUNsYXVzZSlcbiAqICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG4vLyBUaGlzIG1vZHVsZSBoYXMgYWxsIG9mIHRoZSBjYWxsYmFjayBmdW5jdGlvbnMgZm9yIHRoZSBzeW50YXggcGhhc2Ugb2YgdGhlIGdlbmVyYXRpb24uXG4vLyBTZWU6PGJyPlxuLy8gYC4vZGlzdC9hYm5mLWZvci1zYWJuZi1ncmFtbWFyLmJuZmA8YnI+XG4vLyBmb3IgdGhlIGdyYW1tYXIgZmlsZSB0aGVzZSBjYWxsYmFjayBmdW5jdGlvbnMgYXJlIGJhc2VkIG9uLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBleGZuKCkge1xuICBjb25zdCB0aGlzRmlsZU5hbWUgPSAnc3ludGF4LWNhbGxiYWNrcy5qczogJztcbiAgY29uc3QgYXBnbGliID0gcmVxdWlyZSgnLi4vYXBnLWxpYi9ub2RlLWV4cG9ydHMnKTtcbiAgY29uc3QgaWQgPSBhcGdsaWIuaWRzO1xuICBsZXQgdG9wQWx0O1xuICAvKiBzeW50YXgsIFJOTSwgY2FsbGJhY2sgZnVuY3Rpb25zICovXG4gIGNvbnN0IHN5bkZpbGUgPSBmdW5jdGlvbiBzeW5GaWxlKHJlc3VsdCwgY2hhcnMsIHBocmFzZUluZGV4LCBkYXRhKSB7XG4gICAgc3dpdGNoIChyZXN1bHQuc3RhdGUpIHtcbiAgICAgIGNhc2UgaWQuQUNUSVZFOlxuICAgICAgICBkYXRhLmFsdFN0YWNrID0gW107XG4gICAgICAgIGRhdGEucmVwQ291bnQgPSAwO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuRU1QVFk6XG4gICAgICAgIGRhdGEuZXJyb3JzLnB1c2goe1xuICAgICAgICAgIGxpbmU6IDAsXG4gICAgICAgICAgY2hhcjogMCxcbiAgICAgICAgICBtc2c6ICdncmFtbWFyIGZpbGUgaXMgZW1wdHknLFxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLk1BVENIOlxuICAgICAgICBpZiAoZGF0YS5ydWxlQ291bnQgPT09IDApIHtcbiAgICAgICAgICBkYXRhLmVycm9ycy5wdXNoKHtcbiAgICAgICAgICAgIGxpbmU6IDAsXG4gICAgICAgICAgICBjaGFyOiAwLFxuICAgICAgICAgICAgbXNnOiAnbm8gcnVsZXMgZGVmaW5lZCcsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLk5PTUFUQ0g6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHt0aGlzRmlsZU5hbWV9c3luRmlsZTogZ3JhbW1hciBmaWxlIE5PTUFUQ0g6IGRlc2lnbiBlcnJvcjogc2hvdWxkIG5ldmVyIGhhcHBlbi5gKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHt0aGlzRmlsZU5hbWV9c3luRmlsZTogdW5yZWNvZ25pemVkIGNhc2UuYCk7XG4gICAgfVxuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICBjb25zdCBzeW5SdWxlID0gZnVuY3Rpb24gKHJlc3VsdCwgY2hhcnMsIHBocmFzZUluZGV4LCBkYXRhKSB7XG4gICAgc3dpdGNoIChyZXN1bHQuc3RhdGUpIHtcbiAgICAgIGNhc2UgaWQuQUNUSVZFOlxuICAgICAgICBkYXRhLmFsdFN0YWNrLmxlbmd0aCA9IDA7XG4gICAgICAgIHRvcEFsdCA9IHtcbiAgICAgICAgICBncm91cE9wZW46IG51bGwsXG4gICAgICAgICAgZ3JvdXBFcnJvcjogZmFsc2UsXG4gICAgICAgICAgb3B0aW9uT3BlbjogbnVsbCxcbiAgICAgICAgICBvcHRpb25FcnJvcjogZmFsc2UsXG4gICAgICAgICAgdGxzT3BlbjogbnVsbCxcbiAgICAgICAgICBjbHNPcGVuOiBudWxsLFxuICAgICAgICAgIHByb3NWYWxPcGVuOiBudWxsLFxuICAgICAgICAgIGJhc2ljRXJyb3I6IGZhbHNlLFxuICAgICAgICB9O1xuICAgICAgICBkYXRhLmFsdFN0YWNrLnB1c2godG9wQWx0KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLkVNUFRZOlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dGhpc0ZpbGVOYW1lfXN5blJ1bGU6IEVNUFRZOiBydWxlIGNhbm5vdCBiZSBlbXB0eWApO1xuICAgICAgY2FzZSBpZC5OT01BVENIOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuTUFUQ0g6XG4gICAgICAgIGRhdGEucnVsZUNvdW50ICs9IDE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3RoaXNGaWxlTmFtZX1zeW5GaWxlOiB1bnJlY29nbml6ZWQgY2FzZS5gKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHN5blJ1bGVFcnJvciA9IGZ1bmN0aW9uIChyZXN1bHQsIGNoYXJzLCBwaHJhc2VJbmRleCwgZGF0YSkge1xuICAgIHN3aXRjaCAocmVzdWx0LnN0YXRlKSB7XG4gICAgICBjYXNlIGlkLkFDVElWRTpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLkVNUFRZOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuTk9NQVRDSDpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLk1BVENIOlxuICAgICAgICBkYXRhLmVycm9ycy5wdXNoKHtcbiAgICAgICAgICBsaW5lOiBkYXRhLmZpbmRMaW5lKGRhdGEubGluZXMsIHBocmFzZUluZGV4LCBkYXRhLmNoYXJzTGVuZ3RoKSxcbiAgICAgICAgICBjaGFyOiBwaHJhc2VJbmRleCxcbiAgICAgICAgICBtc2c6ICdVbnJlY29nbml6ZWQgU0FCTkYgbGluZS4gSW52YWxpZCBydWxlLCBjb21tZW50IG9yIGJsYW5rIGxpbmUuJyxcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3RoaXNGaWxlTmFtZX1zeW5GaWxlOiB1bnJlY29nbml6ZWQgY2FzZS5gKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHN5blJ1bGVOYW1lRXJyb3IgPSBmdW5jdGlvbiAocmVzdWx0LCBjaGFycywgcGhyYXNlSW5kZXgsIGRhdGEpIHtcbiAgICBzd2l0Y2ggKHJlc3VsdC5zdGF0ZSkge1xuICAgICAgY2FzZSBpZC5BQ1RJVkU6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBpZC5FTVBUWTpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLk5PTUFUQ0g6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBpZC5NQVRDSDpcbiAgICAgICAgZGF0YS5lcnJvcnMucHVzaCh7XG4gICAgICAgICAgbGluZTogZGF0YS5maW5kTGluZShkYXRhLmxpbmVzLCBwaHJhc2VJbmRleCwgZGF0YS5jaGFyc0xlbmd0aCksXG4gICAgICAgICAgY2hhcjogcGhyYXNlSW5kZXgsXG4gICAgICAgICAgbXNnOiAnUnVsZSBuYW1lcyBtdXN0IGJlIGFscGhhbnVtIGFuZCBiZWdpbiB3aXRoIGFscGhhYmV0aWMgY2hhcmFjdGVyLicsXG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHt0aGlzRmlsZU5hbWV9c3luRmlsZTogdW5yZWNvZ25pemVkIGNhc2UuYCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBzeW5EZWZpbmVkQXNFcnJvciA9IGZ1bmN0aW9uIChyZXN1bHQsIGNoYXJzLCBwaHJhc2VJbmRleCwgZGF0YSkge1xuICAgIHN3aXRjaCAocmVzdWx0LnN0YXRlKSB7XG4gICAgICBjYXNlIGlkLkFDVElWRTpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLkVNUFRZOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuTk9NQVRDSDpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLk1BVENIOlxuICAgICAgICBkYXRhLmVycm9ycy5wdXNoKHtcbiAgICAgICAgICBsaW5lOiBkYXRhLmZpbmRMaW5lKGRhdGEubGluZXMsIHBocmFzZUluZGV4LCBkYXRhLmNoYXJzTGVuZ3RoKSxcbiAgICAgICAgICBjaGFyOiBwaHJhc2VJbmRleCxcbiAgICAgICAgICBtc2c6IFwiRXhwZWN0ZWQgJz0nIG9yICc9LycuIE5vdCBmb3VuZC5cIixcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3RoaXNGaWxlTmFtZX1zeW5GaWxlOiB1bnJlY29nbml6ZWQgY2FzZS5gKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHN5bkFuZE9wID0gZnVuY3Rpb24gKHJlc3VsdCwgY2hhcnMsIHBocmFzZUluZGV4LCBkYXRhKSB7XG4gICAgc3dpdGNoIChyZXN1bHQuc3RhdGUpIHtcbiAgICAgIGNhc2UgaWQuQUNUSVZFOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuRU1QVFk6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBpZC5OT01BVENIOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuTUFUQ0g6XG4gICAgICAgIGlmIChkYXRhLnN0cmljdCkge1xuICAgICAgICAgIGRhdGEuZXJyb3JzLnB1c2goe1xuICAgICAgICAgICAgbGluZTogZGF0YS5maW5kTGluZShkYXRhLmxpbmVzLCBwaHJhc2VJbmRleCwgZGF0YS5jaGFyc0xlbmd0aCksXG4gICAgICAgICAgICBjaGFyOiBwaHJhc2VJbmRleCxcbiAgICAgICAgICAgIG1zZzogJ0FORCBvcGVyYXRvcigmKSBmb3VuZCAtIHN0cmljdCBBQk5GIHNwZWNpZmllZC4nLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3RoaXNGaWxlTmFtZX1zeW5GaWxlOiB1bnJlY29nbml6ZWQgY2FzZS5gKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHN5bk5vdE9wID0gZnVuY3Rpb24gKHJlc3VsdCwgY2hhcnMsIHBocmFzZUluZGV4LCBkYXRhKSB7XG4gICAgc3dpdGNoIChyZXN1bHQuc3RhdGUpIHtcbiAgICAgIGNhc2UgaWQuQUNUSVZFOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuRU1QVFk6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBpZC5OT01BVENIOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuTUFUQ0g6XG4gICAgICAgIGlmIChkYXRhLnN0cmljdCkge1xuICAgICAgICAgIGRhdGEuZXJyb3JzLnB1c2goe1xuICAgICAgICAgICAgbGluZTogZGF0YS5maW5kTGluZShkYXRhLmxpbmVzLCBwaHJhc2VJbmRleCwgZGF0YS5jaGFyc0xlbmd0aCksXG4gICAgICAgICAgICBjaGFyOiBwaHJhc2VJbmRleCxcbiAgICAgICAgICAgIG1zZzogJ05PVCBvcGVyYXRvcighKSBmb3VuZCAtIHN0cmljdCBBQk5GIHNwZWNpZmllZC4nLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3RoaXNGaWxlTmFtZX1zeW5GaWxlOiB1bnJlY29nbml6ZWQgY2FzZS5gKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHN5bkJrYU9wID0gZnVuY3Rpb24gKHJlc3VsdCwgY2hhcnMsIHBocmFzZUluZGV4LCBkYXRhKSB7XG4gICAgc3dpdGNoIChyZXN1bHQuc3RhdGUpIHtcbiAgICAgIGNhc2UgaWQuQUNUSVZFOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuRU1QVFk6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBpZC5OT01BVENIOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuTUFUQ0g6XG4gICAgICAgIGlmIChkYXRhLnN0cmljdCkge1xuICAgICAgICAgIGRhdGEuZXJyb3JzLnB1c2goe1xuICAgICAgICAgICAgbGluZTogZGF0YS5maW5kTGluZShkYXRhLmxpbmVzLCBwaHJhc2VJbmRleCwgZGF0YS5jaGFyc0xlbmd0aCksXG4gICAgICAgICAgICBjaGFyOiBwaHJhc2VJbmRleCxcbiAgICAgICAgICAgIG1zZzogJ1Bvc2l0aXZlIGxvb2stYmVoaW5kIG9wZXJhdG9yKCYmKSBmb3VuZCAtIHN0cmljdCBBQk5GIHNwZWNpZmllZC4nLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3RoaXNGaWxlTmFtZX1zeW5GaWxlOiB1bnJlY29nbml6ZWQgY2FzZS5gKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHN5bkJrbk9wID0gZnVuY3Rpb24gKHJlc3VsdCwgY2hhcnMsIHBocmFzZUluZGV4LCBkYXRhKSB7XG4gICAgc3dpdGNoIChyZXN1bHQuc3RhdGUpIHtcbiAgICAgIGNhc2UgaWQuQUNUSVZFOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuRU1QVFk6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBpZC5OT01BVENIOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuTUFUQ0g6XG4gICAgICAgIGlmIChkYXRhLnN0cmljdCkge1xuICAgICAgICAgIGRhdGEuZXJyb3JzLnB1c2goe1xuICAgICAgICAgICAgbGluZTogZGF0YS5maW5kTGluZShkYXRhLmxpbmVzLCBwaHJhc2VJbmRleCwgZGF0YS5jaGFyc0xlbmd0aCksXG4gICAgICAgICAgICBjaGFyOiBwaHJhc2VJbmRleCxcbiAgICAgICAgICAgIG1zZzogJ05lZ2F0aXZlIGxvb2stYmVoaW5kIG9wZXJhdG9yKCEhKSBmb3VuZCAtIHN0cmljdCBBQk5GIHNwZWNpZmllZC4nLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3RoaXNGaWxlTmFtZX1zeW5GaWxlOiB1bnJlY29nbml6ZWQgY2FzZS5gKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHN5bkFiZ09wID0gZnVuY3Rpb24gKHJlc3VsdCwgY2hhcnMsIHBocmFzZUluZGV4LCBkYXRhKSB7XG4gICAgc3dpdGNoIChyZXN1bHQuc3RhdGUpIHtcbiAgICAgIGNhc2UgaWQuQUNUSVZFOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuRU1QVFk6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBpZC5OT01BVENIOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuTUFUQ0g6XG4gICAgICAgIGlmIChkYXRhLnN0cmljdCkge1xuICAgICAgICAgIGRhdGEuZXJyb3JzLnB1c2goe1xuICAgICAgICAgICAgbGluZTogZGF0YS5maW5kTGluZShkYXRhLmxpbmVzLCBwaHJhc2VJbmRleCwgZGF0YS5jaGFyc0xlbmd0aCksXG4gICAgICAgICAgICBjaGFyOiBwaHJhc2VJbmRleCxcbiAgICAgICAgICAgIG1zZzogJ0JlZ2lubmluZyBvZiBzdHJpbmcgYW5jaG9yKCVeKSBmb3VuZCAtIHN0cmljdCBBQk5GIHNwZWNpZmllZC4nLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3RoaXNGaWxlTmFtZX1zeW5GaWxlOiB1bnJlY29nbml6ZWQgY2FzZS5gKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHN5bkFlbk9wID0gZnVuY3Rpb24gKHJlc3VsdCwgY2hhcnMsIHBocmFzZUluZGV4LCBkYXRhKSB7XG4gICAgc3dpdGNoIChyZXN1bHQuc3RhdGUpIHtcbiAgICAgIGNhc2UgaWQuQUNUSVZFOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuRU1QVFk6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBpZC5OT01BVENIOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuTUFUQ0g6XG4gICAgICAgIGlmIChkYXRhLnN0cmljdCkge1xuICAgICAgICAgIGRhdGEuZXJyb3JzLnB1c2goe1xuICAgICAgICAgICAgbGluZTogZGF0YS5maW5kTGluZShkYXRhLmxpbmVzLCBwaHJhc2VJbmRleCwgZGF0YS5jaGFyc0xlbmd0aCksXG4gICAgICAgICAgICBjaGFyOiBwaHJhc2VJbmRleCxcbiAgICAgICAgICAgIG1zZzogJ0VuZCBvZiBzdHJpbmcgYW5jaG9yKCUkKSBmb3VuZCAtIHN0cmljdCBBQk5GIHNwZWNpZmllZC4nLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3RoaXNGaWxlTmFtZX1zeW5GaWxlOiB1bnJlY29nbml6ZWQgY2FzZS5gKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHN5bkJrck9wID0gZnVuY3Rpb24gKHJlc3VsdCwgY2hhcnMsIHBocmFzZUluZGV4LCBkYXRhKSB7XG4gICAgc3dpdGNoIChyZXN1bHQuc3RhdGUpIHtcbiAgICAgIGNhc2UgaWQuQUNUSVZFOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuRU1QVFk6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBpZC5OT01BVENIOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuTUFUQ0g6XG4gICAgICAgIGlmIChkYXRhLnN0cmljdCkge1xuICAgICAgICAgIGNvbnN0IG5hbWUgPSBhcGdsaWIudXRpbHMuY2hhcnNUb1N0cmluZyhjaGFycywgcGhyYXNlSW5kZXgsIHJlc3VsdC5waHJhc2VMZW5ndGgpO1xuICAgICAgICAgIGRhdGEuZXJyb3JzLnB1c2goe1xuICAgICAgICAgICAgbGluZTogZGF0YS5maW5kTGluZShkYXRhLmxpbmVzLCBwaHJhc2VJbmRleCwgZGF0YS5jaGFyc0xlbmd0aCksXG4gICAgICAgICAgICBjaGFyOiBwaHJhc2VJbmRleCxcbiAgICAgICAgICAgIG1zZzogYEJhY2sgcmVmZXJlbmNlIG9wZXJhdG9yKCR7bmFtZX0pIGZvdW5kIC0gc3RyaWN0IEFCTkYgc3BlY2lmaWVkLmAsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dGhpc0ZpbGVOYW1lfXN5bkZpbGU6IHVucmVjb2duaXplZCBjYXNlLmApO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgc3luVWR0T3AgPSBmdW5jdGlvbiAocmVzdWx0LCBjaGFycywgcGhyYXNlSW5kZXgsIGRhdGEpIHtcbiAgICBzd2l0Y2ggKHJlc3VsdC5zdGF0ZSkge1xuICAgICAgY2FzZSBpZC5BQ1RJVkU6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBpZC5FTVBUWTpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLk5PTUFUQ0g6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBpZC5NQVRDSDpcbiAgICAgICAgaWYgKGRhdGEuc3RyaWN0KSB7XG4gICAgICAgICAgY29uc3QgbmFtZSA9IGFwZ2xpYi51dGlscy5jaGFyc1RvU3RyaW5nKGNoYXJzLCBwaHJhc2VJbmRleCwgcmVzdWx0LnBocmFzZUxlbmd0aCk7XG4gICAgICAgICAgZGF0YS5lcnJvcnMucHVzaCh7XG4gICAgICAgICAgICBsaW5lOiBkYXRhLmZpbmRMaW5lKGRhdGEubGluZXMsIHBocmFzZUluZGV4LCBkYXRhLmNoYXJzTGVuZ3RoKSxcbiAgICAgICAgICAgIGNoYXI6IHBocmFzZUluZGV4LFxuICAgICAgICAgICAgbXNnOiBgVURUIG9wZXJhdG9yIGZvdW5kKCR7bmFtZX0pIC0gc3RyaWN0IEFCTkYgc3BlY2lmaWVkLmAsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dGhpc0ZpbGVOYW1lfXN5bkZpbGU6IHVucmVjb2duaXplZCBjYXNlLmApO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgc3luVGxzT3BlbiA9IGZ1bmN0aW9uIChyZXN1bHQsIGNoYXJzLCBwaHJhc2VJbmRleCkge1xuICAgIHN3aXRjaCAocmVzdWx0LnN0YXRlKSB7XG4gICAgICBjYXNlIGlkLkFDVElWRTpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLkVNUFRZOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuTk9NQVRDSDpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLk1BVENIOlxuICAgICAgICB0b3BBbHQudGxzT3BlbiA9IHBocmFzZUluZGV4O1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHt0aGlzRmlsZU5hbWV9c3luRmlsZTogdW5yZWNvZ25pemVkIGNhc2UuYCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBzeW5UbHNTdHJpbmcgPSBmdW5jdGlvbiAocmVzdWx0LCBjaGFycywgcGhyYXNlSW5kZXgsIGRhdGEpIHtcbiAgICBzd2l0Y2ggKHJlc3VsdC5zdGF0ZSkge1xuICAgICAgY2FzZSBpZC5BQ1RJVkU6XG4gICAgICAgIGRhdGEuc3RyaW5nVGFiQ2hhciA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuRU1QVFk6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBpZC5OT01BVENIOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuTUFUQ0g6XG4gICAgICAgIGlmIChkYXRhLnN0cmluZ1RhYkNoYXIgIT09IGZhbHNlKSB7XG4gICAgICAgICAgZGF0YS5lcnJvcnMucHVzaCh7XG4gICAgICAgICAgICBsaW5lOiBkYXRhLmZpbmRMaW5lKGRhdGEubGluZXMsIGRhdGEuc3RyaW5nVGFiQ2hhciksXG4gICAgICAgICAgICBjaGFyOiBkYXRhLnN0cmluZ1RhYkNoYXIsXG4gICAgICAgICAgICBtc2c6IFwiVGFiIGNoYXJhY3RlciAoXFxcXHQsIHgwOSkgbm90IGFsbG93ZWQgaW4gbGl0ZXJhbCBzdHJpbmcgKHNlZSAncXVvdGVkLXN0cmluZycgZGVmaW5pdGlvbiwgUkZDIDc0MDUuKVwiLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3RoaXNGaWxlTmFtZX1zeW5GaWxlOiB1bnJlY29nbml6ZWQgY2FzZS5gKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHN5blN0cmluZ1RhYiA9IGZ1bmN0aW9uIChyZXN1bHQsIGNoYXJzLCBwaHJhc2VJbmRleCwgZGF0YSkge1xuICAgIHN3aXRjaCAocmVzdWx0LnN0YXRlKSB7XG4gICAgICBjYXNlIGlkLkFDVElWRTpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLkVNUFRZOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuTk9NQVRDSDpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLk1BVENIOlxuICAgICAgICBkYXRhLnN0cmluZ1RhYkNoYXIgPSBwaHJhc2VJbmRleDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dGhpc0ZpbGVOYW1lfXN5bkZpbGU6IHVucmVjb2duaXplZCBjYXNlLmApO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgc3luVGxzQ2xvc2UgPSBmdW5jdGlvbiAocmVzdWx0LCBjaGFycywgcGhyYXNlSW5kZXgsIGRhdGEpIHtcbiAgICBzd2l0Y2ggKHJlc3VsdC5zdGF0ZSkge1xuICAgICAgY2FzZSBpZC5BQ1RJVkU6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBpZC5FTVBUWTpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLk5PTUFUQ0g6XG4gICAgICAgIGRhdGEuZXJyb3JzLnB1c2goe1xuICAgICAgICAgIGxpbmU6IGRhdGEuZmluZExpbmUoZGF0YS5saW5lcywgdG9wQWx0LnRsc09wZW4pLFxuICAgICAgICAgIGNoYXI6IHRvcEFsdC50bHNPcGVuLFxuICAgICAgICAgIG1zZzogJ0Nhc2UtaW5zZW5zaXRpdmUgbGl0ZXJhbCBzdHJpbmcoXCIuLi5cIikgb3BlbmVkIGJ1dCBub3QgY2xvc2VkLicsXG4gICAgICAgIH0pO1xuICAgICAgICB0b3BBbHQuYmFzaWNFcnJvciA9IHRydWU7XG4gICAgICAgIHRvcEFsdC50bHNPcGVuID0gbnVsbDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLk1BVENIOlxuICAgICAgICB0b3BBbHQudGxzT3BlbiA9IG51bGw7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3RoaXNGaWxlTmFtZX1zeW5GaWxlOiB1bnJlY29nbml6ZWQgY2FzZS5gKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHN5bkNsc09wZW4gPSBmdW5jdGlvbiAocmVzdWx0LCBjaGFycywgcGhyYXNlSW5kZXgpIHtcbiAgICBzd2l0Y2ggKHJlc3VsdC5zdGF0ZSkge1xuICAgICAgY2FzZSBpZC5BQ1RJVkU6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBpZC5FTVBUWTpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLk5PTUFUQ0g6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBpZC5NQVRDSDpcbiAgICAgICAgdG9wQWx0LmNsc09wZW4gPSBwaHJhc2VJbmRleDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dGhpc0ZpbGVOYW1lfXN5bkZpbGU6IHVucmVjb2duaXplZCBjYXNlLmApO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgc3luQ2xzU3RyaW5nID0gZnVuY3Rpb24gKHJlc3VsdCwgY2hhcnMsIHBocmFzZUluZGV4LCBkYXRhKSB7XG4gICAgc3dpdGNoIChyZXN1bHQuc3RhdGUpIHtcbiAgICAgIGNhc2UgaWQuQUNUSVZFOlxuICAgICAgICBkYXRhLnN0cmluZ1RhYkNoYXIgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLkVNUFRZOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuTk9NQVRDSDpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLk1BVENIOlxuICAgICAgICBpZiAoZGF0YS5zdHJpbmdUYWJDaGFyICE9PSBmYWxzZSkge1xuICAgICAgICAgIGRhdGEuZXJyb3JzLnB1c2goe1xuICAgICAgICAgICAgbGluZTogZGF0YS5maW5kTGluZShkYXRhLmxpbmVzLCBkYXRhLnN0cmluZ1RhYkNoYXIpLFxuICAgICAgICAgICAgY2hhcjogZGF0YS5zdHJpbmdUYWJDaGFyLFxuICAgICAgICAgICAgbXNnOiAnVGFiIGNoYXJhY3RlciAoXFxcXHQsIHgwOSkgbm90IGFsbG93ZWQgaW4gbGl0ZXJhbCBzdHJpbmcuJyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHt0aGlzRmlsZU5hbWV9c3luRmlsZTogdW5yZWNvZ25pemVkIGNhc2UuYCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBzeW5DbHNDbG9zZSA9IGZ1bmN0aW9uIChyZXN1bHQsIGNoYXJzLCBwaHJhc2VJbmRleCwgZGF0YSkge1xuICAgIHN3aXRjaCAocmVzdWx0LnN0YXRlKSB7XG4gICAgICBjYXNlIGlkLkFDVElWRTpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLkVNUFRZOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuTk9NQVRDSDpcbiAgICAgICAgZGF0YS5lcnJvcnMucHVzaCh7XG4gICAgICAgICAgbGluZTogZGF0YS5maW5kTGluZShkYXRhLmxpbmVzLCB0b3BBbHQuY2xzT3BlbiksXG4gICAgICAgICAgY2hhcjogdG9wQWx0LmNsc09wZW4sXG4gICAgICAgICAgbXNnOiBcIkNhc2Utc2Vuc2l0aXZlIGxpdGVyYWwgc3RyaW5nKCcuLi4nKSBvcGVuZWQgYnV0IG5vdCBjbG9zZWQuXCIsXG4gICAgICAgIH0pO1xuICAgICAgICB0b3BBbHQuY2xzT3BlbiA9IG51bGw7XG4gICAgICAgIHRvcEFsdC5iYXNpY0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLk1BVENIOlxuICAgICAgICBpZiAoZGF0YS5zdHJpY3QpIHtcbiAgICAgICAgICBkYXRhLmVycm9ycy5wdXNoKHtcbiAgICAgICAgICAgIGxpbmU6IGRhdGEuZmluZExpbmUoZGF0YS5saW5lcywgdG9wQWx0LmNsc09wZW4pLFxuICAgICAgICAgICAgY2hhcjogdG9wQWx0LmNsc09wZW4sXG4gICAgICAgICAgICBtc2c6IFwiQ2FzZS1zZW5zaXRpdmUgc3RyaW5nIG9wZXJhdG9yKCcuLi4nKSBmb3VuZCAtIHN0cmljdCBBQk5GIHNwZWNpZmllZC5cIixcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0b3BBbHQuY2xzT3BlbiA9IG51bGw7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3RoaXNGaWxlTmFtZX1zeW5GaWxlOiB1bnJlY29nbml6ZWQgY2FzZS5gKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHN5blByb3NWYWxPcGVuID0gZnVuY3Rpb24gKHJlc3VsdCwgY2hhcnMsIHBocmFzZUluZGV4KSB7XG4gICAgc3dpdGNoIChyZXN1bHQuc3RhdGUpIHtcbiAgICAgIGNhc2UgaWQuQUNUSVZFOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuRU1QVFk6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBpZC5OT01BVENIOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuTUFUQ0g6XG4gICAgICAgIHRvcEFsdC5wcm9zVmFsT3BlbiA9IHBocmFzZUluZGV4O1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHt0aGlzRmlsZU5hbWV9c3luRmlsZTogdW5yZWNvZ25pemVkIGNhc2UuYCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBzeW5Qcm9zVmFsU3RyaW5nID0gZnVuY3Rpb24gKHJlc3VsdCwgY2hhcnMsIHBocmFzZUluZGV4LCBkYXRhKSB7XG4gICAgc3dpdGNoIChyZXN1bHQuc3RhdGUpIHtcbiAgICAgIGNhc2UgaWQuQUNUSVZFOlxuICAgICAgICBkYXRhLnN0cmluZ1RhYkNoYXIgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLkVNUFRZOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuTk9NQVRDSDpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLk1BVENIOlxuICAgICAgICBpZiAoZGF0YS5zdHJpbmdUYWJDaGFyICE9PSBmYWxzZSkge1xuICAgICAgICAgIGRhdGEuZXJyb3JzLnB1c2goe1xuICAgICAgICAgICAgbGluZTogZGF0YS5maW5kTGluZShkYXRhLmxpbmVzLCBkYXRhLnN0cmluZ1RhYkNoYXIpLFxuICAgICAgICAgICAgY2hhcjogZGF0YS5zdHJpbmdUYWJDaGFyLFxuICAgICAgICAgICAgbXNnOiAnVGFiIGNoYXJhY3RlciAoXFxcXHQsIHgwOSkgbm90IGFsbG93ZWQgaW4gcHJvc2UgdmFsdWUgc3RyaW5nLicsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dGhpc0ZpbGVOYW1lfXN5bkZpbGU6IHVucmVjb2duaXplZCBjYXNlLmApO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgc3luUHJvc1ZhbENsb3NlID0gZnVuY3Rpb24gKHJlc3VsdCwgY2hhcnMsIHBocmFzZUluZGV4LCBkYXRhKSB7XG4gICAgc3dpdGNoIChyZXN1bHQuc3RhdGUpIHtcbiAgICAgIGNhc2UgaWQuQUNUSVZFOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuRU1QVFk6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBpZC5OT01BVENIOlxuICAgICAgICBkYXRhLmVycm9ycy5wdXNoKHtcbiAgICAgICAgICBsaW5lOiBkYXRhLmZpbmRMaW5lKGRhdGEubGluZXMsIHRvcEFsdC5wcm9zVmFsT3BlbiksXG4gICAgICAgICAgY2hhcjogdG9wQWx0LnByb3NWYWxPcGVuLFxuICAgICAgICAgIG1zZzogJ1Byb3NlIHZhbHVlIG9wZXJhdG9yKDwuLi4+KSBvcGVuZWQgYnV0IG5vdCBjbG9zZWQuJyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRvcEFsdC5iYXNpY0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgdG9wQWx0LnByb3NWYWxPcGVuID0gbnVsbDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLk1BVENIOlxuICAgICAgICBkYXRhLmVycm9ycy5wdXNoKHtcbiAgICAgICAgICBsaW5lOiBkYXRhLmZpbmRMaW5lKGRhdGEubGluZXMsIHRvcEFsdC5wcm9zVmFsT3BlbiksXG4gICAgICAgICAgY2hhcjogdG9wQWx0LnByb3NWYWxPcGVuLFxuICAgICAgICAgIG1zZzogJ1Byb3NlIHZhbHVlIG9wZXJhdG9yKDwuLi4+KSBmb3VuZC4gVGhlIEFCTkYgc3ludGF4IGlzIHZhbGlkLCBidXQgYSBwYXJzZXIgY2Fubm90IGJlIGdlbmVyYXRlZCBmcm9tIHRoaXMgZ3JhbW1hci4nLFxuICAgICAgICB9KTtcbiAgICAgICAgdG9wQWx0LnByb3NWYWxPcGVuID0gbnVsbDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dGhpc0ZpbGVOYW1lfXN5bkZpbGU6IHVucmVjb2duaXplZCBjYXNlLmApO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgc3luR3JvdXBPcGVuID0gZnVuY3Rpb24gKHJlc3VsdCwgY2hhcnMsIHBocmFzZUluZGV4LCBkYXRhKSB7XG4gICAgc3dpdGNoIChyZXN1bHQuc3RhdGUpIHtcbiAgICAgIGNhc2UgaWQuQUNUSVZFOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuRU1QVFk6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBpZC5OT01BVENIOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuTUFUQ0g6XG4gICAgICAgIHRvcEFsdCA9IHtcbiAgICAgICAgICBncm91cE9wZW46IHBocmFzZUluZGV4LFxuICAgICAgICAgIGdyb3VwRXJyb3I6IGZhbHNlLFxuICAgICAgICAgIG9wdGlvbk9wZW46IG51bGwsXG4gICAgICAgICAgb3B0aW9uRXJyb3I6IGZhbHNlLFxuICAgICAgICAgIHRsc09wZW46IG51bGwsXG4gICAgICAgICAgY2xzT3BlbjogbnVsbCxcbiAgICAgICAgICBwcm9zVmFsT3BlbjogbnVsbCxcbiAgICAgICAgICBiYXNpY0Vycm9yOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICAgICAgZGF0YS5hbHRTdGFjay5wdXNoKHRvcEFsdCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3RoaXNGaWxlTmFtZX1zeW5GaWxlOiB1bnJlY29nbml6ZWQgY2FzZS5gKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHN5bkdyb3VwQ2xvc2UgPSBmdW5jdGlvbiAocmVzdWx0LCBjaGFycywgcGhyYXNlSW5kZXgsIGRhdGEpIHtcbiAgICBzd2l0Y2ggKHJlc3VsdC5zdGF0ZSkge1xuICAgICAgY2FzZSBpZC5BQ1RJVkU6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBpZC5FTVBUWTpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLk5PTUFUQ0g6XG4gICAgICAgIGRhdGEuZXJyb3JzLnB1c2goe1xuICAgICAgICAgIGxpbmU6IGRhdGEuZmluZExpbmUoZGF0YS5saW5lcywgdG9wQWx0Lmdyb3VwT3BlbiksXG4gICAgICAgICAgY2hhcjogdG9wQWx0Lmdyb3VwT3BlbixcbiAgICAgICAgICBtc2c6ICdHcm91cCBcIiguLi4pXCIgb3BlbmVkIGJ1dCBub3QgY2xvc2VkLicsXG4gICAgICAgIH0pO1xuICAgICAgICB0b3BBbHQgPSBkYXRhLmFsdFN0YWNrLnBvcCgpO1xuICAgICAgICB0b3BBbHQuZ3JvdXBFcnJvciA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBpZC5NQVRDSDpcbiAgICAgICAgdG9wQWx0ID0gZGF0YS5hbHRTdGFjay5wb3AoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dGhpc0ZpbGVOYW1lfXN5bkZpbGU6IHVucmVjb2duaXplZCBjYXNlLmApO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgc3luT3B0aW9uT3BlbiA9IGZ1bmN0aW9uIChyZXN1bHQsIGNoYXJzLCBwaHJhc2VJbmRleCwgZGF0YSkge1xuICAgIHN3aXRjaCAocmVzdWx0LnN0YXRlKSB7XG4gICAgICBjYXNlIGlkLkFDVElWRTpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLkVNUFRZOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuTk9NQVRDSDpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLk1BVENIOlxuICAgICAgICB0b3BBbHQgPSB7XG4gICAgICAgICAgZ3JvdXBPcGVuOiBudWxsLFxuICAgICAgICAgIGdyb3VwRXJyb3I6IGZhbHNlLFxuICAgICAgICAgIG9wdGlvbk9wZW46IHBocmFzZUluZGV4LFxuICAgICAgICAgIG9wdGlvbkVycm9yOiBmYWxzZSxcbiAgICAgICAgICB0bHNPcGVuOiBudWxsLFxuICAgICAgICAgIGNsc09wZW46IG51bGwsXG4gICAgICAgICAgcHJvc1ZhbE9wZW46IG51bGwsXG4gICAgICAgICAgYmFzaWNFcnJvcjogZmFsc2UsXG4gICAgICAgIH07XG4gICAgICAgIGRhdGEuYWx0U3RhY2sucHVzaCh0b3BBbHQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHt0aGlzRmlsZU5hbWV9c3luRmlsZTogdW5yZWNvZ25pemVkIGNhc2UuYCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBzeW5PcHRpb25DbG9zZSA9IGZ1bmN0aW9uIChyZXN1bHQsIGNoYXJzLCBwaHJhc2VJbmRleCwgZGF0YSkge1xuICAgIHN3aXRjaCAocmVzdWx0LnN0YXRlKSB7XG4gICAgICBjYXNlIGlkLkFDVElWRTpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLkVNUFRZOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuTk9NQVRDSDpcbiAgICAgICAgZGF0YS5lcnJvcnMucHVzaCh7XG4gICAgICAgICAgbGluZTogZGF0YS5maW5kTGluZShkYXRhLmxpbmVzLCB0b3BBbHQub3B0aW9uT3BlbiksXG4gICAgICAgICAgY2hhcjogdG9wQWx0Lm9wdGlvbk9wZW4sXG4gICAgICAgICAgbXNnOiAnT3B0aW9uIFwiWy4uLl1cIiBvcGVuZWQgYnV0IG5vdCBjbG9zZWQuJyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRvcEFsdCA9IGRhdGEuYWx0U3RhY2sucG9wKCk7XG4gICAgICAgIHRvcEFsdC5vcHRpb25FcnJvciA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBpZC5NQVRDSDpcbiAgICAgICAgdG9wQWx0ID0gZGF0YS5hbHRTdGFjay5wb3AoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dGhpc0ZpbGVOYW1lfXN5bkZpbGU6IHVucmVjb2duaXplZCBjYXNlLmApO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgc3luQmFzaWNFbGVtZW50RXJyb3IgPSBmdW5jdGlvbiAocmVzdWx0LCBjaGFycywgcGhyYXNlSW5kZXgsIGRhdGEpIHtcbiAgICBzd2l0Y2ggKHJlc3VsdC5zdGF0ZSkge1xuICAgICAgY2FzZSBpZC5BQ1RJVkU6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBpZC5FTVBUWTpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLk5PTUFUQ0g6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBpZC5NQVRDSDpcbiAgICAgICAgaWYgKHRvcEFsdC5iYXNpY0Vycm9yID09PSBmYWxzZSkge1xuICAgICAgICAgIGRhdGEuZXJyb3JzLnB1c2goe1xuICAgICAgICAgICAgbGluZTogZGF0YS5maW5kTGluZShkYXRhLmxpbmVzLCBwaHJhc2VJbmRleCwgZGF0YS5jaGFyc0xlbmd0aCksXG4gICAgICAgICAgICBjaGFyOiBwaHJhc2VJbmRleCxcbiAgICAgICAgICAgIG1zZzogJ1VucmVjb2duaXplZCBTQUJORiBlbGVtZW50LicsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dGhpc0ZpbGVOYW1lfXN5bkZpbGU6IHVucmVjb2duaXplZCBjYXNlLmApO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgc3luTGluZUVuZCA9IGZ1bmN0aW9uIChyZXN1bHQsIGNoYXJzLCBwaHJhc2VJbmRleCwgZGF0YSkge1xuICAgIHN3aXRjaCAocmVzdWx0LnN0YXRlKSB7XG4gICAgICBjYXNlIGlkLkFDVElWRTpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLkVNUFRZOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuTk9NQVRDSDpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLk1BVENIOlxuICAgICAgICBpZiAocmVzdWx0LnBocmFzZUxlbmd0aCA9PT0gMSAmJiBkYXRhLnN0cmljdCkge1xuICAgICAgICAgIGNvbnN0IGVuZCA9IGNoYXJzW3BocmFzZUluZGV4XSA9PT0gMTMgPyAnQ1InIDogJ0xGJztcbiAgICAgICAgICBkYXRhLmVycm9ycy5wdXNoKHtcbiAgICAgICAgICAgIGxpbmU6IGRhdGEuZmluZExpbmUoZGF0YS5saW5lcywgcGhyYXNlSW5kZXgsIGRhdGEuY2hhcnNMZW5ndGgpLFxuICAgICAgICAgICAgY2hhcjogcGhyYXNlSW5kZXgsXG4gICAgICAgICAgICBtc2c6IGBMaW5lIGVuZCAnJHtlbmR9JyBmb3VuZCAtIHN0cmljdCBBQk5GIHNwZWNpZmllZCwgb25seSBDUkxGIGFsbG93ZWQuYCxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHt0aGlzRmlsZU5hbWV9c3luRmlsZTogdW5yZWNvZ25pemVkIGNhc2UuYCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBzeW5MaW5lRW5kRXJyb3IgPSBmdW5jdGlvbiAocmVzdWx0LCBjaGFycywgcGhyYXNlSW5kZXgsIGRhdGEpIHtcbiAgICBzd2l0Y2ggKHJlc3VsdC5zdGF0ZSkge1xuICAgICAgY2FzZSBpZC5BQ1RJVkU6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBpZC5FTVBUWTpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlkLk5PTUFUQ0g6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBpZC5NQVRDSDpcbiAgICAgICAgZGF0YS5lcnJvcnMucHVzaCh7XG4gICAgICAgICAgbGluZTogZGF0YS5maW5kTGluZShkYXRhLmxpbmVzLCBwaHJhc2VJbmRleCwgZGF0YS5jaGFyc0xlbmd0aCksXG4gICAgICAgICAgY2hhcjogcGhyYXNlSW5kZXgsXG4gICAgICAgICAgbXNnOiAnVW5yZWNvZ25pemVkIGdyYW1tYXIgZWxlbWVudCBvciBjaGFyYWN0ZXJzLicsXG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHt0aGlzRmlsZU5hbWV9c3luRmlsZTogdW5yZWNvZ25pemVkIGNhc2UuYCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBzeW5SZXBldGl0aW9uID0gZnVuY3Rpb24gKHJlc3VsdCwgY2hhcnMsIHBocmFzZUluZGV4LCBkYXRhKSB7XG4gICAgc3dpdGNoIChyZXN1bHQuc3RhdGUpIHtcbiAgICAgIGNhc2UgaWQuQUNUSVZFOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaWQuRU1QVFk6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBpZC5OT01BVENIOlxuICAgICAgICBkYXRhLnJlcENvdW50ICs9IDE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBpZC5NQVRDSDpcbiAgICAgICAgZGF0YS5yZXBDb3VudCArPSAxO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHt0aGlzRmlsZU5hbWV9c3luRmlsZTogdW5yZWNvZ25pemVkIGNhc2UuYCk7XG4gICAgfVxuICB9O1xuICAvLyBEZWZpbmUgdGhlIGxpc3Qgb2YgY2FsbGJhY2sgZnVuY3Rpb25zLlxuICB0aGlzLmNhbGxiYWNrcyA9IFtdO1xuICB0aGlzLmNhbGxiYWNrcy5hbmRvcCA9IHN5bkFuZE9wO1xuICB0aGlzLmNhbGxiYWNrcy5iYXNpY2VsZW1lbnRlcnIgPSBzeW5CYXNpY0VsZW1lbnRFcnJvcjtcbiAgdGhpcy5jYWxsYmFja3MuY2xzY2xvc2UgPSBzeW5DbHNDbG9zZTtcbiAgdGhpcy5jYWxsYmFja3MuY2xzb3BlbiA9IHN5bkNsc09wZW47XG4gIHRoaXMuY2FsbGJhY2tzLmNsc3N0cmluZyA9IHN5bkNsc1N0cmluZztcbiAgdGhpcy5jYWxsYmFja3MuZGVmaW5lZGFzZXJyb3IgPSBzeW5EZWZpbmVkQXNFcnJvcjtcbiAgdGhpcy5jYWxsYmFja3MuZmlsZSA9IHN5bkZpbGU7XG4gIHRoaXMuY2FsbGJhY2tzLmdyb3VwY2xvc2UgPSBzeW5Hcm91cENsb3NlO1xuICB0aGlzLmNhbGxiYWNrcy5ncm91cG9wZW4gPSBzeW5Hcm91cE9wZW47XG4gIHRoaXMuY2FsbGJhY2tzLmxpbmVlbmRlcnJvciA9IHN5bkxpbmVFbmRFcnJvcjtcbiAgdGhpcy5jYWxsYmFja3MubGluZWVuZCA9IHN5bkxpbmVFbmQ7XG4gIHRoaXMuY2FsbGJhY2tzLm5vdG9wID0gc3luTm90T3A7XG4gIHRoaXMuY2FsbGJhY2tzLm9wdGlvbmNsb3NlID0gc3luT3B0aW9uQ2xvc2U7XG4gIHRoaXMuY2FsbGJhY2tzLm9wdGlvbm9wZW4gPSBzeW5PcHRpb25PcGVuO1xuICB0aGlzLmNhbGxiYWNrcy5wcm9zdmFsY2xvc2UgPSBzeW5Qcm9zVmFsQ2xvc2U7XG4gIHRoaXMuY2FsbGJhY2tzLnByb3N2YWxvcGVuID0gc3luUHJvc1ZhbE9wZW47XG4gIHRoaXMuY2FsbGJhY2tzLnByb3N2YWxzdHJpbmcgPSBzeW5Qcm9zVmFsU3RyaW5nO1xuICB0aGlzLmNhbGxiYWNrcy5yZXBldGl0aW9uID0gc3luUmVwZXRpdGlvbjtcbiAgdGhpcy5jYWxsYmFja3MucnVsZSA9IHN5blJ1bGU7XG4gIHRoaXMuY2FsbGJhY2tzLnJ1bGVlcnJvciA9IHN5blJ1bGVFcnJvcjtcbiAgdGhpcy5jYWxsYmFja3MucnVsZW5hbWVlcnJvciA9IHN5blJ1bGVOYW1lRXJyb3I7XG4gIHRoaXMuY2FsbGJhY2tzLnN0cmluZ3RhYiA9IHN5blN0cmluZ1RhYjtcbiAgdGhpcy5jYWxsYmFja3MudGxzY2xvc2UgPSBzeW5UbHNDbG9zZTtcbiAgdGhpcy5jYWxsYmFja3MudGxzb3BlbiA9IHN5blRsc09wZW47XG4gIHRoaXMuY2FsbGJhY2tzLnRsc3N0cmluZyA9IHN5blRsc1N0cmluZztcbiAgdGhpcy5jYWxsYmFja3MudWR0b3AgPSBzeW5VZHRPcDtcbiAgdGhpcy5jYWxsYmFja3MuYmthb3AgPSBzeW5Ca2FPcDtcbiAgdGhpcy5jYWxsYmFja3MuYmtub3AgPSBzeW5Ca25PcDtcbiAgdGhpcy5jYWxsYmFja3MuYmtyb3AgPSBzeW5Ca3JPcDtcbiAgdGhpcy5jYWxsYmFja3MuYWJnb3AgPSBzeW5BYmdPcDtcbiAgdGhpcy5jYWxsYmFja3MuYWVub3AgPSBzeW5BZW5PcDtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImV4Zm4iLCJ0aGlzRmlsZU5hbWUiLCJhcGdsaWIiLCJyZXF1aXJlIiwiaWQiLCJpZHMiLCJ0b3BBbHQiLCJzeW5GaWxlIiwicmVzdWx0IiwiY2hhcnMiLCJwaHJhc2VJbmRleCIsImRhdGEiLCJzdGF0ZSIsIkFDVElWRSIsImFsdFN0YWNrIiwicmVwQ291bnQiLCJFTVBUWSIsImVycm9ycyIsInB1c2giLCJsaW5lIiwiY2hhciIsIm1zZyIsIk1BVENIIiwicnVsZUNvdW50IiwiTk9NQVRDSCIsIkVycm9yIiwic3luUnVsZSIsImxlbmd0aCIsImdyb3VwT3BlbiIsImdyb3VwRXJyb3IiLCJvcHRpb25PcGVuIiwib3B0aW9uRXJyb3IiLCJ0bHNPcGVuIiwiY2xzT3BlbiIsInByb3NWYWxPcGVuIiwiYmFzaWNFcnJvciIsInN5blJ1bGVFcnJvciIsImZpbmRMaW5lIiwibGluZXMiLCJjaGFyc0xlbmd0aCIsInN5blJ1bGVOYW1lRXJyb3IiLCJzeW5EZWZpbmVkQXNFcnJvciIsInN5bkFuZE9wIiwic3RyaWN0Iiwic3luTm90T3AiLCJzeW5Ca2FPcCIsInN5bkJrbk9wIiwic3luQWJnT3AiLCJzeW5BZW5PcCIsInN5bkJrck9wIiwibmFtZSIsInV0aWxzIiwiY2hhcnNUb1N0cmluZyIsInBocmFzZUxlbmd0aCIsInN5blVkdE9wIiwic3luVGxzT3BlbiIsInN5blRsc1N0cmluZyIsInN0cmluZ1RhYkNoYXIiLCJzeW5TdHJpbmdUYWIiLCJzeW5UbHNDbG9zZSIsInN5bkNsc09wZW4iLCJzeW5DbHNTdHJpbmciLCJzeW5DbHNDbG9zZSIsInN5blByb3NWYWxPcGVuIiwic3luUHJvc1ZhbFN0cmluZyIsInN5blByb3NWYWxDbG9zZSIsInN5bkdyb3VwT3BlbiIsInN5bkdyb3VwQ2xvc2UiLCJwb3AiLCJzeW5PcHRpb25PcGVuIiwic3luT3B0aW9uQ2xvc2UiLCJzeW5CYXNpY0VsZW1lbnRFcnJvciIsInN5bkxpbmVFbmQiLCJlbmQiLCJzeW5MaW5lRW5kRXJyb3IiLCJzeW5SZXBldGl0aW9uIiwiY2FsbGJhY2tzIiwiYW5kb3AiLCJiYXNpY2VsZW1lbnRlcnIiLCJjbHNjbG9zZSIsImNsc29wZW4iLCJjbHNzdHJpbmciLCJkZWZpbmVkYXNlcnJvciIsImZpbGUiLCJncm91cGNsb3NlIiwiZ3JvdXBvcGVuIiwibGluZWVuZGVycm9yIiwibGluZWVuZCIsIm5vdG9wIiwib3B0aW9uY2xvc2UiLCJvcHRpb25vcGVuIiwicHJvc3ZhbGNsb3NlIiwicHJvc3ZhbG9wZW4iLCJwcm9zdmFsc3RyaW5nIiwicmVwZXRpdGlvbiIsInJ1bGUiLCJydWxlZXJyb3IiLCJydWxlbmFtZWVycm9yIiwic3RyaW5ndGFiIiwidGxzY2xvc2UiLCJ0bHNvcGVuIiwidGxzc3RyaW5nIiwidWR0b3AiLCJia2FvcCIsImJrbm9wIiwiYmtyb3AiLCJhYmdvcCIsImFlbm9wIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-api/syntax-callbacks.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-conv-api/converter.js":
/*!***********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-conv-api/converter.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This module exposes the public encoding, decoding and conversion functions.\n// Its private functions provide the disassembling and interpetation of the source and destination encoding types.\n// In the case of Unicode encodings, private functions determine the presence of Byte Order Marks (BOMs), if any.\n//\n// Throws \"TypeError\" exceptions on input errors.\n//\n\"use strict;\";\nconst { Buffer } = __webpack_require__(/*! buffer */ \"buffer\");\nconst trans = __webpack_require__(/*! ./transformers */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-conv-api/transformers.js\");\n/* types */ const UTF8 = \"UTF8\";\nconst UTF16 = \"UTF16\";\nconst UTF16BE = \"UTF16BE\";\nconst UTF16LE = \"UTF16LE\";\nconst UTF32 = \"UTF32\";\nconst UTF32BE = \"UTF32BE\";\nconst UTF32LE = \"UTF32LE\";\nconst UINT7 = \"UINT7\";\nconst ASCII = \"ASCII\";\nconst BINARY = \"BINARY\";\nconst UINT8 = \"UINT8\";\nconst UINT16 = \"UINT16\";\nconst UINT16LE = \"UINT16LE\";\nconst UINT16BE = \"UINT16BE\";\nconst UINT32 = \"UINT32\";\nconst UINT32LE = \"UINT32LE\";\nconst UINT32BE = \"UINT32BE\";\nconst ESCAPED = \"ESCAPED\";\nconst STRING = \"STRING\";\n/* private functions */ // Find the UTF8 BOM, if any.\nconst bom8 = function bom8(src) {\n    src.type = UTF8;\n    const buf = src.data;\n    src.bom = 0;\n    if (buf.length >= 3) {\n        if (buf[0] === 0xef && buf[1] === 0xbb && buf[2] === 0xbf) {\n            src.bom = 3;\n        }\n    }\n};\n// Find the UTF16 BOM, if any, and determine the UTF16 type.\n// Defaults to UTF16BE.\n// Throws TypeError exception if BOM does not match the specified type.\nconst bom16 = function bom16(src) {\n    const buf = src.data;\n    src.bom = 0;\n    switch(src.type){\n        case UTF16:\n            src.type = UTF16BE;\n            if (buf.length >= 2) {\n                if (buf[0] === 0xfe && buf[1] === 0xff) {\n                    src.bom = 2;\n                } else if (buf[0] === 0xff && buf[1] === 0xfe) {\n                    src.type = UTF16LE;\n                    src.bom = 2;\n                }\n            }\n            break;\n        case UTF16BE:\n            src.type = UTF16BE;\n            if (buf.length >= 2) {\n                if (buf[0] === 0xfe && buf[1] === 0xff) {\n                    src.bom = 2;\n                } else if (buf[0] === 0xff && buf[1] === 0xfe) {\n                    throw new TypeError(`src type: \"${UTF16BE}\" specified but BOM is for \"${UTF16LE}\"`);\n                }\n            }\n            break;\n        case UTF16LE:\n            src.type = UTF16LE;\n            if (buf.length >= 0) {\n                if (buf[0] === 0xfe && buf[1] === 0xff) {\n                    throw new TypeError(`src type: \"${UTF16LE}\" specified but BOM is for \"${UTF16BE}\"`);\n                } else if (buf[0] === 0xff && buf[1] === 0xfe) {\n                    src.bom = 2;\n                }\n            }\n            break;\n        default:\n            throw new TypeError(`UTF16 BOM: src type \"${src.type}\" unrecognized`);\n    }\n};\n// Find the UTF32 BOM, if any, and determine the UTF32 type.\n// Defaults to UTF32BE.\n// Throws exception if BOM does not match the specified type.\nconst bom32 = function bom32(src) {\n    const buf = src.data;\n    src.bom = 0;\n    switch(src.type){\n        case UTF32:\n            src.type = UTF32BE;\n            if (buf.length >= 4) {\n                if (buf[0] === 0 && buf[1] === 0 && buf[2] === 0xfe && buf[3] === 0xff) {\n                    src.bom = 4;\n                }\n                if (buf[0] === 0xff && buf[1] === 0xfe && buf[2] === 0 && buf[3] === 0) {\n                    src.type = UTF32LE;\n                    src.bom = 4;\n                }\n            }\n            break;\n        case UTF32BE:\n            src.type = UTF32BE;\n            if (buf.length >= 4) {\n                if (buf[0] === 0 && buf[1] === 0 && buf[2] === 0xfe && buf[3] === 0xff) {\n                    src.bom = 4;\n                }\n                if (buf[0] === 0xff && buf[1] === 0xfe && buf[2] === 0 && buf[3] === 0) {\n                    throw new TypeError(`src type: ${UTF32BE} specified but BOM is for ${UTF32LE}\"`);\n                }\n            }\n            break;\n        case UTF32LE:\n            src.type = UTF32LE;\n            if (buf.length >= 4) {\n                if (buf[0] === 0 && buf[1] === 0 && buf[2] === 0xfe && buf[3] === 0xff) {\n                    throw new TypeError(`src type: \"${UTF32LE}\" specified but BOM is for \"${UTF32BE}\"`);\n                }\n                if (buf[0] === 0xff && buf[1] === 0xfe && buf[2] === 0 && buf[3] === 0) {\n                    src.bom = 4;\n                }\n            }\n            break;\n        default:\n            throw new TypeError(`UTF32 BOM: src type \"${src.type}\" unrecognized`);\n    }\n};\n// Validates the source encoding type and matching data.\n// If the BASE64: prefix is present, the base 64 decoding is done here as the initial step.\n// - For type STRING, data must be a JavaScript string.\n// - For type BASE64:*, data may be a string or Buffer.\n// - For all other types, data must be a Buffer.\n// - The BASE64: prefix is not allowed for type STRING.\nconst validateSrc = function validateSrc(type, data) {\n    function getType(typeArg) {\n        const ret = {\n            type: \"\",\n            base64: false\n        };\n        const rx = /^(base64:)?([a-zA-Z0-9]+)$/i;\n        const result = rx.exec(typeArg);\n        if (result) {\n            if (result[2]) {\n                ret.type = result[2].toUpperCase();\n            }\n            if (result[1]) {\n                ret.base64 = true;\n            }\n        }\n        return ret;\n    }\n    const ret = getType(type.toUpperCase());\n    if (ret.base64) {\n        /* handle base 64 */ if (ret.type === STRING) {\n            throw new TypeError(`type: \"${type} \"BASE64:\" prefix not allowed with type ${STRING}`);\n        }\n        if (Buffer.isBuffer(data)) {\n            ret.data = trans.base64.decode(data);\n        } else if (typeof data === \"string\") {\n            const buf = Buffer.from(data, \"ascii\");\n            ret.data = trans.base64.decode(buf);\n        } else {\n            throw new TypeError(`type: \"${type} unrecognized data type: typeof(data): ${typeof data}`);\n        }\n    } else {\n        ret.data = data;\n    }\n    switch(ret.type){\n        case UTF8:\n            bom8(ret);\n            break;\n        case UTF16:\n        case UTF16BE:\n        case UTF16LE:\n            bom16(ret);\n            break;\n        case UTF32:\n        case UTF32BE:\n        case UTF32LE:\n            bom32(ret);\n            break;\n        case UINT16:\n            ret.type = UINT16BE;\n            break;\n        case UINT32:\n            ret.type = UINT32BE;\n            break;\n        case ASCII:\n            ret.type = UINT7;\n            break;\n        case BINARY:\n            ret.type = UINT8;\n            break;\n        case UINT7:\n        case UINT8:\n        case UINT16LE:\n        case UINT16BE:\n        case UINT32LE:\n        case UINT32BE:\n        case STRING:\n        case ESCAPED:\n            break;\n        default:\n            throw new TypeError(`type: \"${type}\" not recognized`);\n    }\n    if (ret.type === STRING) {\n        if (typeof ret.data !== \"string\") {\n            throw new TypeError(`type: \"${type}\" but data is not a string`);\n        }\n    } else if (!Buffer.isBuffer(ret.data)) {\n        throw new TypeError(`type: \"${type}\" but data is not a Buffer`);\n    }\n    return ret;\n};\n// Disassembles and validates the destination type.\n// `chars` must be an Array of integers.\n// The :BASE64 suffix is not allowed for type STRING.\nconst validateDst = function validateDst(type, chars) {\n    function getType(typeArg) {\n        let fix;\n        let rem;\n        const ret = {\n            crlf: false,\n            lf: false,\n            base64: false,\n            type: \"\"\n        };\n        /* prefix, if any */ const TRUE = true;\n        while(TRUE){\n            rem = typeArg;\n            fix = typeArg.slice(0, 5);\n            if (fix === \"CRLF:\") {\n                ret.crlf = true;\n                rem = typeArg.slice(5);\n                break;\n            }\n            fix = typeArg.slice(0, 3);\n            if (fix === \"LF:\") {\n                ret.lf = true;\n                rem = typeArg.slice(3);\n                break;\n            }\n            break;\n        }\n        /* suffix, if any */ fix = rem.split(\":\");\n        if (fix.length === 1) {\n            // eslint-disable-next-line prefer-destructuring\n            ret.type = fix[0];\n        } else if (fix.length === 2 && fix[1] === \"BASE64\") {\n            ret.base64 = true;\n            // eslint-disable-next-line prefer-destructuring\n            ret.type = fix[0];\n        }\n        return ret;\n    }\n    if (!Array.isArray(chars)) {\n        throw new TypeError(`dst chars: not array: \"${typeof chars}`);\n    }\n    if (typeof type !== \"string\") {\n        throw new TypeError(`dst type: not string: \"${typeof type}`);\n    }\n    const ret = getType(type.toUpperCase());\n    switch(ret.type){\n        case UTF8:\n        case UTF16BE:\n        case UTF16LE:\n        case UTF32BE:\n        case UTF32LE:\n        case UINT7:\n        case UINT8:\n        case UINT16LE:\n        case UINT16BE:\n        case UINT32LE:\n        case UINT32BE:\n        case ESCAPED:\n            break;\n        case STRING:\n            if (ret.base64) {\n                throw new TypeError(`\":BASE64\" suffix not allowed with type ${STRING}`);\n            }\n            break;\n        case ASCII:\n            ret.type = UINT7;\n            break;\n        case BINARY:\n            ret.type = UINT8;\n            break;\n        case UTF16:\n            ret.type = UTF16BE;\n            break;\n        case UTF32:\n            ret.type = UTF32BE;\n            break;\n        case UINT16:\n            ret.type = UINT16BE;\n            break;\n        case UINT32:\n            ret.type = UINT32BE;\n            break;\n        default:\n            throw new TypeError(`dst type unrecognized: \"${type}\" : must have form [crlf:|lf:]type[:base64]`);\n    }\n    return ret;\n};\n// Select and call the requested encoding function.\nconst encode = function encode(type, chars) {\n    switch(type){\n        case UTF8:\n            return trans.utf8.encode(chars);\n        case UTF16BE:\n            return trans.utf16be.encode(chars);\n        case UTF16LE:\n            return trans.utf16le.encode(chars);\n        case UTF32BE:\n            return trans.utf32be.encode(chars);\n        case UTF32LE:\n            return trans.utf32le.encode(chars);\n        case UINT7:\n            return trans.uint7.encode(chars);\n        case UINT8:\n            return trans.uint8.encode(chars);\n        case UINT16BE:\n            return trans.uint16be.encode(chars);\n        case UINT16LE:\n            return trans.uint16le.encode(chars);\n        case UINT32BE:\n            return trans.uint32be.encode(chars);\n        case UINT32LE:\n            return trans.uint32le.encode(chars);\n        case STRING:\n            return trans.string.encode(chars);\n        case ESCAPED:\n            return trans.escaped.encode(chars);\n        default:\n            throw new TypeError(`encode type \"${type}\" not recognized`);\n    }\n};\n// Select and call the requested decoding function.\n// `src` contains BOM information as well as the source type and data.\nconst decode = function decode(src) {\n    switch(src.type){\n        case UTF8:\n            return trans.utf8.decode(src.data, src.bom);\n        case UTF16LE:\n            return trans.utf16le.decode(src.data, src.bom);\n        case UTF16BE:\n            return trans.utf16be.decode(src.data, src.bom);\n        case UTF32BE:\n            return trans.utf32be.decode(src.data, src.bom);\n        case UTF32LE:\n            return trans.utf32le.decode(src.data, src.bom);\n        case UINT7:\n            return trans.uint7.decode(src.data);\n        case UINT8:\n            return trans.uint8.decode(src.data);\n        case UINT16BE:\n            return trans.uint16be.decode(src.data);\n        case UINT16LE:\n            return trans.uint16le.decode(src.data);\n        case UINT32BE:\n            return trans.uint32be.decode(src.data);\n        case UINT32LE:\n            return trans.uint32le.decode(src.data);\n        case STRING:\n            return trans.string.decode(src.data);\n        case ESCAPED:\n            return trans.escaped.decode(src.data);\n        default:\n            throw new TypeError(`decode type \"${src.type}\" not recognized`);\n    }\n};\n// The public decoding function. Returns an array of integers.\nexports.decode = function exportsDecode(type, data) {\n    const src = validateSrc(type, data);\n    return decode(src);\n};\n// The public encoding function. Returns a Buffer-typed byte array.\nexports.encode = function exportsEncode(type, chars) {\n    let c;\n    let buf;\n    const dst = validateDst(type, chars);\n    if (dst.crlf) {\n        /* prefix with CRLF line end conversion, don't contaminate caller's chars array */ c = trans.lineEnds.crlf(chars);\n        buf = encode(dst.type, c);\n    } else if (dst.lf) {\n        /* prefix with LF line end conversion, don't contaminate caller's chars array */ c = trans.lineEnds.lf(chars);\n        buf = encode(dst.type, c);\n    } else {\n        buf = encode(dst.type, chars);\n    }\n    if (dst.base64) {\n        /* post base 64 encoding */ buf = trans.base64.encode(buf);\n    }\n    return buf;\n};\n// Converts data of type `srcType` to data of type `dstType`.\n// `srcData` may be a JavaScript String, or node.js Buffer, depending on the corresponding type.\nconst convert = function convert(srcType, srcData, dstType) {\n    return exports.encode(dstType, exports.decode(srcType, srcData));\n};\nexports.convert = convert;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-conv-api/converter.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-conv-api/transformers.js":
/*!**************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-conv-api/transformers.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* eslint-disable prefer-destructuring */ /* eslint-disable no-plusplus */ /* eslint-disable no-bitwise */ /*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This module contains the actual encoding and decoding algorithms.\n// Throws \"RangeError\" exceptions on characters or bytes out of range for the given encoding.\n\"use strict;\";\nconst { Buffer } = __webpack_require__(/*! buffer */ \"buffer\");\n/* decoding error codes */ const NON_SHORTEST = 0xfffffffc;\nconst TRAILING = 0xfffffffd;\nconst RANGE = 0xfffffffe;\nconst ILL_FORMED = 0xffffffff;\n/* mask[n] = 2**n - 1, ie. mask[n] = n bits on. e.g. mask[6] = %b111111 */ const mask = [\n    0,\n    1,\n    3,\n    7,\n    15,\n    31,\n    63,\n    127,\n    255,\n    511,\n    1023\n];\n/* ascii[n] = 'HH', where 0xHH = n, eg. ascii[254] = 'FE' */ const ascii = [\n    \"00\",\n    \"01\",\n    \"02\",\n    \"03\",\n    \"04\",\n    \"05\",\n    \"06\",\n    \"07\",\n    \"08\",\n    \"09\",\n    \"0A\",\n    \"0B\",\n    \"0C\",\n    \"0D\",\n    \"0E\",\n    \"0F\",\n    \"10\",\n    \"11\",\n    \"12\",\n    \"13\",\n    \"14\",\n    \"15\",\n    \"16\",\n    \"17\",\n    \"18\",\n    \"19\",\n    \"1A\",\n    \"1B\",\n    \"1C\",\n    \"1D\",\n    \"1E\",\n    \"1F\",\n    \"20\",\n    \"21\",\n    \"22\",\n    \"23\",\n    \"24\",\n    \"25\",\n    \"26\",\n    \"27\",\n    \"28\",\n    \"29\",\n    \"2A\",\n    \"2B\",\n    \"2C\",\n    \"2D\",\n    \"2E\",\n    \"2F\",\n    \"30\",\n    \"31\",\n    \"32\",\n    \"33\",\n    \"34\",\n    \"35\",\n    \"36\",\n    \"37\",\n    \"38\",\n    \"39\",\n    \"3A\",\n    \"3B\",\n    \"3C\",\n    \"3D\",\n    \"3E\",\n    \"3F\",\n    \"40\",\n    \"41\",\n    \"42\",\n    \"43\",\n    \"44\",\n    \"45\",\n    \"46\",\n    \"47\",\n    \"48\",\n    \"49\",\n    \"4A\",\n    \"4B\",\n    \"4C\",\n    \"4D\",\n    \"4E\",\n    \"4F\",\n    \"50\",\n    \"51\",\n    \"52\",\n    \"53\",\n    \"54\",\n    \"55\",\n    \"56\",\n    \"57\",\n    \"58\",\n    \"59\",\n    \"5A\",\n    \"5B\",\n    \"5C\",\n    \"5D\",\n    \"5E\",\n    \"5F\",\n    \"60\",\n    \"61\",\n    \"62\",\n    \"63\",\n    \"64\",\n    \"65\",\n    \"66\",\n    \"67\",\n    \"68\",\n    \"69\",\n    \"6A\",\n    \"6B\",\n    \"6C\",\n    \"6D\",\n    \"6E\",\n    \"6F\",\n    \"70\",\n    \"71\",\n    \"72\",\n    \"73\",\n    \"74\",\n    \"75\",\n    \"76\",\n    \"77\",\n    \"78\",\n    \"79\",\n    \"7A\",\n    \"7B\",\n    \"7C\",\n    \"7D\",\n    \"7E\",\n    \"7F\",\n    \"80\",\n    \"81\",\n    \"82\",\n    \"83\",\n    \"84\",\n    \"85\",\n    \"86\",\n    \"87\",\n    \"88\",\n    \"89\",\n    \"8A\",\n    \"8B\",\n    \"8C\",\n    \"8D\",\n    \"8E\",\n    \"8F\",\n    \"90\",\n    \"91\",\n    \"92\",\n    \"93\",\n    \"94\",\n    \"95\",\n    \"96\",\n    \"97\",\n    \"98\",\n    \"99\",\n    \"9A\",\n    \"9B\",\n    \"9C\",\n    \"9D\",\n    \"9E\",\n    \"9F\",\n    \"A0\",\n    \"A1\",\n    \"A2\",\n    \"A3\",\n    \"A4\",\n    \"A5\",\n    \"A6\",\n    \"A7\",\n    \"A8\",\n    \"A9\",\n    \"AA\",\n    \"AB\",\n    \"AC\",\n    \"AD\",\n    \"AE\",\n    \"AF\",\n    \"B0\",\n    \"B1\",\n    \"B2\",\n    \"B3\",\n    \"B4\",\n    \"B5\",\n    \"B6\",\n    \"B7\",\n    \"B8\",\n    \"B9\",\n    \"BA\",\n    \"BB\",\n    \"BC\",\n    \"BD\",\n    \"BE\",\n    \"BF\",\n    \"C0\",\n    \"C1\",\n    \"C2\",\n    \"C3\",\n    \"C4\",\n    \"C5\",\n    \"C6\",\n    \"C7\",\n    \"C8\",\n    \"C9\",\n    \"CA\",\n    \"CB\",\n    \"CC\",\n    \"CD\",\n    \"CE\",\n    \"CF\",\n    \"D0\",\n    \"D1\",\n    \"D2\",\n    \"D3\",\n    \"D4\",\n    \"D5\",\n    \"D6\",\n    \"D7\",\n    \"D8\",\n    \"D9\",\n    \"DA\",\n    \"DB\",\n    \"DC\",\n    \"DD\",\n    \"DE\",\n    \"DF\",\n    \"E0\",\n    \"E1\",\n    \"E2\",\n    \"E3\",\n    \"E4\",\n    \"E5\",\n    \"E6\",\n    \"E7\",\n    \"E8\",\n    \"E9\",\n    \"EA\",\n    \"EB\",\n    \"EC\",\n    \"ED\",\n    \"EE\",\n    \"EF\",\n    \"F0\",\n    \"F1\",\n    \"F2\",\n    \"F3\",\n    \"F4\",\n    \"F5\",\n    \"F6\",\n    \"F7\",\n    \"F8\",\n    \"F9\",\n    \"FA\",\n    \"FB\",\n    \"FC\",\n    \"FD\",\n    \"FE\",\n    \"FF\"\n];\n/* vector of base 64 characters */ const base64chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".split(\"\");\n/* vector of base 64 character codes */ const base64codes = [];\nbase64chars.forEach((char)=>{\n    base64codes.push(char.charCodeAt(0));\n});\n// The UTF8 algorithms.\nexports.utf8 = {\n    encode (chars) {\n        const bytes = [];\n        chars.forEach((char)=>{\n            if (char >= 0 && char <= 0x7f) {\n                bytes.push(char);\n            } else if (char <= 0x7ff) {\n                bytes.push(0xc0 + (char >> 6 & mask[5]));\n                bytes.push(0x80 + (char & mask[6]));\n            } else if (char < 0xd800 || char > 0xdfff && char <= 0xffff) {\n                bytes.push(0xe0 + (char >> 12 & mask[4]));\n                bytes.push(0x80 + (char >> 6 & mask[6]));\n                bytes.push(0x80 + (char & mask[6]));\n            } else if (char >= 0x10000 && char <= 0x10ffff) {\n                const u = char >> 16 & mask[5];\n                bytes.push(0xf0 + (u >> 2));\n                bytes.push(0x80 + ((u & mask[2]) << 4) + (char >> 12 & mask[4]));\n                bytes.push(0x80 + (char >> 6 & mask[6]));\n                bytes.push(0x80 + (char & mask[6]));\n            } else {\n                throw new RangeError(`utf8.encode: character out of range: char: ${char}`);\n            }\n        });\n        return Buffer.from(bytes);\n    },\n    decode (buf, bom) {\n        /* bytes functions return error for non-shortest forms & values out of range */ function bytes2(b1, b2) {\n            /* U+0080..U+07FF */ /* 00000000 00000yyy yyxxxxxx | 110yyyyy 10xxxxxx */ if ((b2 & 0xc0) !== 0x80) {\n                return TRAILING;\n            }\n            const x = ((b1 & mask[5]) << 6) + (b2 & mask[6]);\n            if (x < 0x80) {\n                return NON_SHORTEST;\n            }\n            return x;\n        }\n        function bytes3(b1, b2, b3) {\n            /* U+0800..U+FFFF */ /* 00000000 zzzzyyyy yyxxxxxx | 1110zzzz 10yyyyyy 10xxxxxx */ if ((b3 & 0xc0) !== 0x80 || (b2 & 0xc0) !== 0x80) {\n                return TRAILING;\n            }\n            const x = ((b1 & mask[4]) << 12) + ((b2 & mask[6]) << 6) + (b3 & mask[6]);\n            if (x < 0x800) {\n                return NON_SHORTEST;\n            }\n            if (x >= 0xd800 && x <= 0xdfff) {\n                return RANGE;\n            }\n            return x;\n        }\n        function bytes4(b1, b2, b3, b4) {\n            /* U+10000..U+10FFFF */ /* 000uuuuu zzzzyyyy yyxxxxxx | 11110uuu 10uuzzzz 10yyyyyy 10xxxxxx */ if ((b4 & 0xc0) !== 0x80 || (b3 & 0xc0) !== 0x80 || (b2 & 0xc0) !== 0x80) {\n                return TRAILING;\n            }\n            const x = (((b1 & mask[3]) << 2) + (b2 >> 4 & mask[2]) << 16) + ((b2 & mask[4]) << 12) + ((b3 & mask[6]) << 6) + (b4 & mask[6]);\n            if (x < 0x10000) {\n                return NON_SHORTEST;\n            }\n            if (x > 0x10ffff) {\n                return RANGE;\n            }\n            return x;\n        }\n        let c;\n        let b1;\n        let i1;\n        let i2;\n        let i3;\n        let inc;\n        const len = buf.length;\n        let i = bom ? 3 : 0;\n        const chars = [];\n        while(i < len){\n            b1 = buf[i];\n            c = ILL_FORMED;\n            const TRUE = true;\n            while(TRUE){\n                if (b1 >= 0 && b1 <= 0x7f) {\n                    /* U+0000..U+007F 00..7F */ c = b1;\n                    inc = 1;\n                    break;\n                }\n                i1 = i + 1;\n                if (i1 < len && b1 >= 0xc2 && b1 <= 0xdf) {\n                    /* U+0080..U+07FF C2..DF 80..BF */ c = bytes2(b1, buf[i1]);\n                    inc = 2;\n                    break;\n                }\n                i2 = i + 2;\n                if (i2 < len && b1 >= 0xe0 && b1 <= 0xef) {\n                    /* U+0800..U+FFFF */ c = bytes3(b1, buf[i1], buf[i2]);\n                    inc = 3;\n                    break;\n                }\n                i3 = i + 3;\n                if (i3 < len && b1 >= 0xf0 && b1 <= 0xf4) {\n                    /* U+10000..U+10FFFF */ c = bytes4(b1, buf[i1], buf[i2], buf[i3]);\n                    inc = 4;\n                    break;\n                }\n                break;\n            }\n            if (c > 0x10ffff) {\n                const at = `byte[${i}]`;\n                if (c === ILL_FORMED) {\n                    throw new RangeError(`utf8.decode: ill-formed UTF8 byte sequence found at: ${at}`);\n                }\n                if (c === TRAILING) {\n                    throw new RangeError(`utf8.decode: illegal trailing byte found at: ${at}`);\n                }\n                if (c === RANGE) {\n                    throw new RangeError(`utf8.decode: code point out of range found at: ${at}`);\n                }\n                if (c === NON_SHORTEST) {\n                    throw new RangeError(`utf8.decode: non-shortest form found at: ${at}`);\n                }\n                throw new RangeError(`utf8.decode: unrecognized error found at: ${at}`);\n            }\n            chars.push(c);\n            i += inc;\n        }\n        return chars;\n    }\n};\n// The UTF16BE algorithms.\nexports.utf16be = {\n    encode (chars) {\n        const bytes = [];\n        let char;\n        let h;\n        let l;\n        for(let i = 0; i < chars.length; i += 1){\n            char = chars[i];\n            if (char >= 0 && char <= 0xd7ff || char >= 0xe000 && char <= 0xffff) {\n                bytes.push(char >> 8 & mask[8]);\n                bytes.push(char & mask[8]);\n            } else if (char >= 0x10000 && char <= 0x10ffff) {\n                l = char - 0x10000;\n                h = 0xd800 + (l >> 10);\n                l = 0xdc00 + (l & mask[10]);\n                bytes.push(h >> 8 & mask[8]);\n                bytes.push(h & mask[8]);\n                bytes.push(l >> 8 & mask[8]);\n                bytes.push(l & mask[8]);\n            } else {\n                throw new RangeError(`utf16be.encode: UTF16BE value out of range: char[${i}]: ${char}`);\n            }\n        }\n        return Buffer.from(bytes);\n    },\n    decode (buf, bom) {\n        /* assumes caller has insured that buf is a Buffer of bytes */ if (buf.length % 2 > 0) {\n            throw new RangeError(`utf16be.decode: data length must be even multiple of 2: length: ${buf.length}`);\n        }\n        const chars = [];\n        const len = buf.length;\n        let i = bom ? 2 : 0;\n        let j = 0;\n        let c;\n        let inc;\n        let i1;\n        let i3;\n        let high;\n        let low;\n        while(i < len){\n            const TRUE = true;\n            while(TRUE){\n                i1 = i + 1;\n                if (i1 < len) {\n                    high = (buf[i] << 8) + buf[i1];\n                    if (high < 0xd800 || high > 0xdfff) {\n                        c = high;\n                        inc = 2;\n                        break;\n                    }\n                    i3 = i + 3;\n                    if (i3 < len) {\n                        low = (buf[i + 2] << 8) + buf[i3];\n                        if (high <= 0xdbff && low >= 0xdc00 && low <= 0xdfff) {\n                            c = 0x10000 + (high - 0xd800 << 10) + (low - 0xdc00);\n                            inc = 4;\n                            break;\n                        }\n                    }\n                }\n                /* if we fall through to here, it is an ill-formed sequence */ throw new RangeError(`utf16be.decode: ill-formed UTF16BE byte sequence found: byte[${i}]`);\n            }\n            chars[j++] = c;\n            i += inc;\n        }\n        return chars;\n    }\n};\n// The UTF16LE algorithms.\nexports.utf16le = {\n    encode (chars) {\n        const bytes = [];\n        let char;\n        let h;\n        let l;\n        for(let i = 0; i < chars.length; i += 1){\n            char = chars[i];\n            if (char >= 0 && char <= 0xd7ff || char >= 0xe000 && char <= 0xffff) {\n                bytes.push(char & mask[8]);\n                bytes.push(char >> 8 & mask[8]);\n            } else if (char >= 0x10000 && char <= 0x10ffff) {\n                l = char - 0x10000;\n                h = 0xd800 + (l >> 10);\n                l = 0xdc00 + (l & mask[10]);\n                bytes.push(h & mask[8]);\n                bytes.push(h >> 8 & mask[8]);\n                bytes.push(l & mask[8]);\n                bytes.push(l >> 8 & mask[8]);\n            } else {\n                throw new RangeError(`utf16le.encode: UTF16LE value out of range: char[${i}]: ${char}`);\n            }\n        }\n        return Buffer.from(bytes);\n    },\n    decode (buf, bom) {\n        /* assumes caller has insured that buf is a Buffer of bytes */ if (buf.length % 2 > 0) {\n            throw new RangeError(`utf16le.decode: data length must be even multiple of 2: length: ${buf.length}`);\n        }\n        const chars = [];\n        const len = buf.length;\n        let i = bom ? 2 : 0;\n        let j = 0;\n        let c;\n        let inc;\n        let i1;\n        let i3;\n        let high;\n        let low;\n        while(i < len){\n            const TRUE = true;\n            while(TRUE){\n                i1 = i + 1;\n                if (i1 < len) {\n                    high = (buf[i1] << 8) + buf[i];\n                    if (high < 0xd800 || high > 0xdfff) {\n                        c = high;\n                        inc = 2;\n                        break;\n                    }\n                    i3 = i + 3;\n                    if (i3 < len) {\n                        low = (buf[i3] << 8) + buf[i + 2];\n                        if (high <= 0xdbff && low >= 0xdc00 && low <= 0xdfff) {\n                            c = 0x10000 + (high - 0xd800 << 10) + (low - 0xdc00);\n                            inc = 4;\n                            break;\n                        }\n                    }\n                }\n                /* if we fall through to here, it is an ill-formed sequence */ throw new RangeError(`utf16le.decode: ill-formed UTF16LE byte sequence found: byte[${i}]`);\n            }\n            chars[j++] = c;\n            i += inc;\n        }\n        return chars;\n    }\n};\n// The UTF32BE algorithms.\nexports.utf32be = {\n    encode (chars) {\n        const buf = Buffer.alloc(chars.length * 4);\n        let i = 0;\n        chars.forEach((char)=>{\n            if (char >= 0xd800 && char <= 0xdfff || char > 0x10ffff) {\n                throw new RangeError(`utf32be.encode: UTF32BE character code out of range: char[${i / 4}]: ${char}`);\n            }\n            buf[i++] = char >> 24 & mask[8];\n            buf[i++] = char >> 16 & mask[8];\n            buf[i++] = char >> 8 & mask[8];\n            buf[i++] = char & mask[8];\n        });\n        return buf;\n    },\n    decode (buf, bom) {\n        /* caller to insure buf is a Buffer of bytes */ if (buf.length % 4 > 0) {\n            throw new RangeError(`utf32be.decode: UTF32BE byte length must be even multiple of 4: length: ${buf.length}`);\n        }\n        const chars = [];\n        let i = bom ? 4 : 0;\n        for(; i < buf.length; i += 4){\n            const char = (buf[i] << 24) + (buf[i + 1] << 16) + (buf[i + 2] << 8) + buf[i + 3];\n            if (char >= 0xd800 && char <= 0xdfff || char > 0x10ffff) {\n                throw new RangeError(`utf32be.decode: UTF32BE character code out of range: char[${i / 4}]: ${char}`);\n            }\n            chars.push(char);\n        }\n        return chars;\n    }\n};\n// The UTF32LE algorithms.\nexports.utf32le = {\n    encode (chars) {\n        const buf = Buffer.alloc(chars.length * 4);\n        let i = 0;\n        chars.forEach((char)=>{\n            if (char >= 0xd800 && char <= 0xdfff || char > 0x10ffff) {\n                throw new RangeError(`utf32le.encode: UTF32LE character code out of range: char[${i / 4}]: ${char}`);\n            }\n            buf[i++] = char & mask[8];\n            buf[i++] = char >> 8 & mask[8];\n            buf[i++] = char >> 16 & mask[8];\n            buf[i++] = char >> 24 & mask[8];\n        });\n        return buf;\n    },\n    decode (buf, bom) {\n        /* caller to insure buf is a Buffer of bytes */ if (buf.length % 4 > 0) {\n            throw new RangeError(`utf32be.decode: UTF32LE byte length must be even multiple of 4: length: ${buf.length}`);\n        }\n        const chars = [];\n        let i = bom ? 4 : 0;\n        for(; i < buf.length; i += 4){\n            const char = (buf[i + 3] << 24) + (buf[i + 2] << 16) + (buf[i + 1] << 8) + buf[i];\n            if (char >= 0xd800 && char <= 0xdfff || char > 0x10ffff) {\n                throw new RangeError(`utf32le.encode: UTF32LE character code out of range: char[${i / 4}]: ${char}`);\n            }\n            chars.push(char);\n        }\n        return chars;\n    }\n};\n// The UINT7 algorithms. ASCII or 7-bit unsigned integers.\nexports.uint7 = {\n    encode (chars) {\n        const buf = Buffer.alloc(chars.length);\n        for(let i = 0; i < chars.length; i += 1){\n            if (chars[i] > 0x7f) {\n                throw new RangeError(`uint7.encode: UINT7 character code out of range: char[${i}]: ${chars[i]}`);\n            }\n            buf[i] = chars[i];\n        }\n        return buf;\n    },\n    decode (buf) {\n        const chars = [];\n        for(let i = 0; i < buf.length; i += 1){\n            if (buf[i] > 0x7f) {\n                throw new RangeError(`uint7.decode: UINT7 character code out of range: byte[${i}]: ${buf[i]}`);\n            }\n            chars[i] = buf[i];\n        }\n        return chars;\n    }\n};\n// The UINT8 algorithms. BINARY, Latin 1 or 8-bit unsigned integers.\nexports.uint8 = {\n    encode (chars) {\n        const buf = Buffer.alloc(chars.length);\n        for(let i = 0; i < chars.length; i += 1){\n            if (chars[i] > 0xff) {\n                throw new RangeError(`uint8.encode: UINT8 character code out of range: char[${i}]: ${chars[i]}`);\n            }\n            buf[i] = chars[i];\n        }\n        return buf;\n    },\n    decode (buf) {\n        const chars = [];\n        for(let i = 0; i < buf.length; i += 1){\n            chars[i] = buf[i];\n        }\n        return chars;\n    }\n};\n// The UINT16BE algorithms. Big-endian 16-bit unsigned integers.\nexports.uint16be = {\n    encode (chars) {\n        const buf = Buffer.alloc(chars.length * 2);\n        let i = 0;\n        chars.forEach((char)=>{\n            if (char > 0xffff) {\n                throw new RangeError(`uint16be.encode: UINT16BE character code out of range: char[${i / 2}]: ${char}`);\n            }\n            buf[i++] = char >> 8 & mask[8];\n            buf[i++] = char & mask[8];\n        });\n        return buf;\n    },\n    decode (buf) {\n        if (buf.length % 2 > 0) {\n            throw new RangeError(`uint16be.decode: UINT16BE byte length must be even multiple of 2: length: ${buf.length}`);\n        }\n        const chars = [];\n        for(let i = 0; i < buf.length; i += 2){\n            chars.push((buf[i] << 8) + buf[i + 1]);\n        }\n        return chars;\n    }\n};\n// The UINT16LE algorithms. Little-endian 16-bit unsigned integers.\nexports.uint16le = {\n    encode (chars) {\n        const buf = Buffer.alloc(chars.length * 2);\n        let i = 0;\n        chars.forEach((char)=>{\n            if (char > 0xffff) {\n                throw new RangeError(`uint16le.encode: UINT16LE character code out of range: char[${i / 2}]: ${char}`);\n            }\n            buf[i++] = char & mask[8];\n            buf[i++] = char >> 8 & mask[8];\n        });\n        return buf;\n    },\n    decode (buf) {\n        if (buf.length % 2 > 0) {\n            throw new RangeError(`uint16le.decode: UINT16LE byte length must be even multiple of 2: length: ${buf.length}`);\n        }\n        const chars = [];\n        for(let i = 0; i < buf.length; i += 2){\n            chars.push((buf[i + 1] << 8) + buf[i]);\n        }\n        return chars;\n    }\n};\n// The UINT32BE algorithms. Big-endian 32-bit unsigned integers.\nexports.uint32be = {\n    encode (chars) {\n        const buf = Buffer.alloc(chars.length * 4);\n        let i = 0;\n        chars.forEach((char)=>{\n            buf[i++] = char >> 24 & mask[8];\n            buf[i++] = char >> 16 & mask[8];\n            buf[i++] = char >> 8 & mask[8];\n            buf[i++] = char & mask[8];\n        });\n        return buf;\n    },\n    decode (buf) {\n        if (buf.length % 4 > 0) {\n            throw new RangeError(`uint32be.decode: UINT32BE byte length must be even multiple of 4: length: ${buf.length}`);\n        }\n        const chars = [];\n        for(let i = 0; i < buf.length; i += 4){\n            chars.push((buf[i] << 24) + (buf[i + 1] << 16) + (buf[i + 2] << 8) + buf[i + 3]);\n        }\n        return chars;\n    }\n};\n// The UINT32LE algorithms. Little-endian 32-bit unsigned integers.\nexports.uint32le = {\n    encode (chars) {\n        const buf = Buffer.alloc(chars.length * 4);\n        let i = 0;\n        chars.forEach((char)=>{\n            buf[i++] = char & mask[8];\n            buf[i++] = char >> 8 & mask[8];\n            buf[i++] = char >> 16 & mask[8];\n            buf[i++] = char >> 24 & mask[8];\n        });\n        return buf;\n    },\n    decode (buf) {\n        /* caller to insure buf is a Buffer of bytes */ if (buf.length % 4 > 0) {\n            throw new RangeError(`uint32le.decode: UINT32LE byte length must be even multiple of 4: length: ${buf.length}`);\n        }\n        const chars = [];\n        for(let i = 0; i < buf.length; i += 4){\n            chars.push((buf[i + 3] << 24) + (buf[i + 2] << 16) + (buf[i + 1] << 8) + buf[i]);\n        }\n        return chars;\n    }\n};\n// The STRING algorithms. Converts JavaScript strings to Array of 32-bit integers and vice versa.\n// Uses the node.js Buffer's native \"utf16le\" capabilites.\nexports.string = {\n    encode (chars) {\n        return exports.utf16le.encode(chars).toString(\"utf16le\");\n    },\n    decode (str) {\n        return exports.utf16le.decode(Buffer.from(str, \"utf16le\"), 0);\n    }\n};\n// The ESCAPED algorithms.\n// Note that ESCAPED format contains only ASCII characters.\n// The characters are always in the form of a Buffer of bytes.\nexports.escaped = {\n    // Encodes an Array of 32-bit integers into ESCAPED format.\n    encode (chars) {\n        const bytes = [];\n        for(let i = 0; i < chars.length; i += 1){\n            const char = chars[i];\n            if (char === 96) {\n                bytes.push(char);\n                bytes.push(char);\n            } else if (char === 10) {\n                bytes.push(char);\n            } else if (char >= 32 && char <= 126) {\n                bytes.push(char);\n            } else {\n                let str = \"\";\n                if (char >= 0 && char <= 31) {\n                    str += `\\`x${ascii[char]}`;\n                } else if (char >= 127 && char <= 255) {\n                    str += `\\`x${ascii[char]}`;\n                } else if (char >= 0x100 && char <= 0xffff) {\n                    str += `\\`u${ascii[char >> 8 & mask[8]]}${ascii[char & mask[8]]}`;\n                } else if (char >= 0x10000 && char <= 0xffffffff) {\n                    str += \"`u{\";\n                    const digit = char >> 24 & mask[8];\n                    if (digit > 0) {\n                        str += ascii[digit];\n                    }\n                    str += `${ascii[char >> 16 & mask[8]] + ascii[char >> 8 & mask[8]] + ascii[char & mask[8]]}}`;\n                } else {\n                    throw new Error(\"escape.encode(char): char > 0xffffffff not allowed\");\n                }\n                const buf = Buffer.from(str);\n                buf.forEach((b)=>{\n                    bytes.push(b);\n                });\n            }\n        }\n        return Buffer.from(bytes);\n    },\n    // Decodes ESCAPED format from a Buffer of bytes to an Array of 32-bit integers.\n    decode (buf) {\n        function isHex(hex) {\n            if (hex >= 48 && hex <= 57 || hex >= 65 && hex <= 70 || hex >= 97 && hex <= 102) {\n                return true;\n            }\n            return false;\n        }\n        function getx(i, len, bufArg) {\n            const ret = {\n                char: null,\n                nexti: i + 2,\n                error: true\n            };\n            if (i + 1 < len) {\n                if (isHex(bufArg[i]) && isHex(bufArg[i + 1])) {\n                    const str = String.fromCodePoint(bufArg[i], bufArg[i + 1]);\n                    ret.char = parseInt(str, 16);\n                    if (!Number.isNaN(ret.char)) {\n                        ret.error = false;\n                    }\n                }\n            }\n            return ret;\n        }\n        function getu(i, len, bufArg) {\n            const ret = {\n                char: null,\n                nexti: i + 4,\n                error: true\n            };\n            if (i + 3 < len) {\n                if (isHex(bufArg[i]) && isHex(bufArg[i + 1]) && isHex(bufArg[i + 2]) && isHex(bufArg[i + 3])) {\n                    const str = String.fromCodePoint(bufArg[i], bufArg[i + 1], bufArg[i + 2], bufArg[i + 3]);\n                    ret.char = parseInt(str, 16);\n                    if (!Number.isNaN(ret.char)) {\n                        ret.error = false;\n                    }\n                }\n            }\n            return ret;\n        }\n        function getU(i, len, bufArg) {\n            const ret = {\n                char: null,\n                nexti: i + 4,\n                error: true\n            };\n            let str = \"\";\n            while(i < len && isHex(bufArg[i])){\n                str += String.fromCodePoint(bufArg[i]);\n                // eslint-disable-next-line no-param-reassign\n                i += 1;\n            }\n            ret.char = parseInt(str, 16);\n            if (bufArg[i] === 125 && !Number.isNaN(ret.char)) {\n                ret.error = false;\n            }\n            ret.nexti = i + 1;\n            return ret;\n        }\n        const chars = [];\n        const len = buf.length;\n        let i1;\n        let ret;\n        let error;\n        let i = 0;\n        while(i < len){\n            const TRUE = true;\n            while(TRUE){\n                error = true;\n                if (buf[i] !== 96) {\n                    /* unescaped character */ chars.push(buf[i]);\n                    i += 1;\n                    error = false;\n                    break;\n                }\n                i1 = i + 1;\n                if (i1 >= len) {\n                    break;\n                }\n                if (buf[i1] === 96) {\n                    /* escaped grave accent */ chars.push(96);\n                    i += 2;\n                    error = false;\n                    break;\n                }\n                if (buf[i1] === 120) {\n                    ret = getx(i1 + 1, len, buf);\n                    if (ret.error) {\n                        break;\n                    }\n                    /* escaped hex */ chars.push(ret.char);\n                    i = ret.nexti;\n                    error = false;\n                    break;\n                }\n                if (buf[i1] === 117) {\n                    if (buf[i1 + 1] === 123) {\n                        ret = getU(i1 + 2, len, buf);\n                        if (ret.error) {\n                            break;\n                        }\n                        /* escaped utf-32 */ chars.push(ret.char);\n                        i = ret.nexti;\n                        error = false;\n                        break;\n                    }\n                    ret = getu(i1 + 1, len, buf);\n                    if (ret.error) {\n                        break;\n                    }\n                    /* escaped utf-16 */ chars.push(ret.char);\n                    i = ret.nexti;\n                    error = false;\n                    break;\n                }\n                break;\n            }\n            if (error) {\n                throw new Error(`escaped.decode: ill-formed escape sequence at buf[${i}]`);\n            }\n        }\n        return chars;\n    }\n};\n// The line end conversion algorigthms.\nconst CR = 13;\nconst LF = 10;\nexports.lineEnds = {\n    crlf (chars) {\n        const lfchars = [];\n        let i = 0;\n        while(i < chars.length){\n            switch(chars[i]){\n                case CR:\n                    if (i + 1 < chars.length && chars[i + 1] === LF) {\n                        i += 2;\n                    } else {\n                        i += 1;\n                    }\n                    lfchars.push(CR);\n                    lfchars.push(LF);\n                    break;\n                case LF:\n                    lfchars.push(CR);\n                    lfchars.push(LF);\n                    i += 1;\n                    break;\n                default:\n                    lfchars.push(chars[i]);\n                    i += 1;\n                    break;\n            }\n        }\n        if (lfchars.length > 0 && lfchars[lfchars.length - 1] !== LF) {\n            lfchars.push(CR);\n            lfchars.push(LF);\n        }\n        return lfchars;\n    },\n    lf (chars) {\n        const lfchars = [];\n        let i = 0;\n        while(i < chars.length){\n            switch(chars[i]){\n                case CR:\n                    if (i + 1 < chars.length && chars[i + 1] === LF) {\n                        i += 2;\n                    } else {\n                        i += 1;\n                    }\n                    lfchars.push(LF);\n                    break;\n                case LF:\n                    lfchars.push(LF);\n                    i += 1;\n                    break;\n                default:\n                    lfchars.push(chars[i]);\n                    i += 1;\n                    break;\n            }\n        }\n        if (lfchars.length > 0 && lfchars[lfchars.length - 1] !== LF) {\n            lfchars.push(LF);\n        }\n        return lfchars;\n    }\n};\n// The base 64 algorithms.\nexports.base64 = {\n    encode (buf) {\n        if (buf.length === 0) {\n            return Buffer.alloc(0);\n        }\n        let i;\n        let j;\n        let n;\n        let tail = buf.length % 3;\n        tail = tail > 0 ? 3 - tail : 0;\n        let units = (buf.length + tail) / 3;\n        const base64 = Buffer.alloc(units * 4);\n        if (tail > 0) {\n            units -= 1;\n        }\n        i = 0;\n        j = 0;\n        for(let u = 0; u < units; u += 1){\n            n = buf[i++] << 16;\n            n += buf[i++] << 8;\n            n += buf[i++];\n            base64[j++] = base64codes[n >> 18 & mask[6]];\n            base64[j++] = base64codes[n >> 12 & mask[6]];\n            base64[j++] = base64codes[n >> 6 & mask[6]];\n            base64[j++] = base64codes[n & mask[6]];\n        }\n        if (tail === 0) {\n            return base64;\n        }\n        if (tail === 1) {\n            n = buf[i++] << 16;\n            n += buf[i] << 8;\n            base64[j++] = base64codes[n >> 18 & mask[6]];\n            base64[j++] = base64codes[n >> 12 & mask[6]];\n            base64[j++] = base64codes[n >> 6 & mask[6]];\n            base64[j] = base64codes[64];\n            return base64;\n        }\n        if (tail === 2) {\n            n = buf[i] << 16;\n            base64[j++] = base64codes[n >> 18 & mask[6]];\n            base64[j++] = base64codes[n >> 12 & mask[6]];\n            base64[j++] = base64codes[64];\n            base64[j] = base64codes[64];\n            return base64;\n        }\n        return undefined;\n    },\n    decode (codes) {\n        /* remove white space and ctrl characters, validate & translate characters */ function validate(buf) {\n            const chars = [];\n            let tail = 0;\n            for(let i = 0; i < buf.length; i += 1){\n                const char = buf[i];\n                const TRUE = true;\n                while(TRUE){\n                    if (char === 32 || char === 9 || char === 10 || char === 13) {\n                        break;\n                    }\n                    if (char >= 65 && char <= 90) {\n                        chars.push(char - 65);\n                        break;\n                    }\n                    if (char >= 97 && char <= 122) {\n                        chars.push(char - 71);\n                        break;\n                    }\n                    if (char >= 48 && char <= 57) {\n                        chars.push(char + 4);\n                        break;\n                    }\n                    if (char === 43) {\n                        chars.push(62);\n                        break;\n                    }\n                    if (char === 47) {\n                        chars.push(63);\n                        break;\n                    }\n                    if (char === 61) {\n                        chars.push(64);\n                        tail += 1;\n                        break;\n                    }\n                    /* invalid character */ throw new RangeError(`base64.decode: invalid character buf[${i}]: ${char}`);\n                }\n            }\n            /* validate length */ if (chars.length % 4 > 0) {\n                throw new RangeError(`base64.decode: string length not integral multiple of 4: ${chars.length}`);\n            }\n            /* validate tail */ switch(tail){\n                case 0:\n                    break;\n                case 1:\n                    if (chars[chars.length - 1] !== 64) {\n                        throw new RangeError(\"base64.decode: one tail character found: not last character\");\n                    }\n                    break;\n                case 2:\n                    if (chars[chars.length - 1] !== 64 || chars[chars.length - 2] !== 64) {\n                        throw new RangeError(\"base64.decode: two tail characters found: not last characters\");\n                    }\n                    break;\n                default:\n                    throw new RangeError(`base64.decode: more than two tail characters found: ${tail}`);\n            }\n            return {\n                tail,\n                buf: Buffer.from(chars)\n            };\n        }\n        if (codes.length === 0) {\n            return Buffer.alloc(0);\n        }\n        const val = validate(codes);\n        const { tail } = val;\n        const base64 = val.buf;\n        let i;\n        let j;\n        let n;\n        let units = base64.length / 4;\n        const buf = Buffer.alloc(units * 3 - tail);\n        if (tail > 0) {\n            units -= 1;\n        }\n        j = 0;\n        i = 0;\n        for(let u = 0; u < units; u += 1){\n            n = base64[i++] << 18;\n            n += base64[i++] << 12;\n            n += base64[i++] << 6;\n            n += base64[i++];\n            buf[j++] = n >> 16 & mask[8];\n            buf[j++] = n >> 8 & mask[8];\n            buf[j++] = n & mask[8];\n        }\n        if (tail === 1) {\n            n = base64[i++] << 18;\n            n += base64[i++] << 12;\n            n += base64[i] << 6;\n            buf[j++] = n >> 16 & mask[8];\n            buf[j] = n >> 8 & mask[8];\n        }\n        if (tail === 2) {\n            n = base64[i++] << 18;\n            n += base64[i++] << 12;\n            buf[j] = n >> 16 & mask[8];\n        }\n        return buf;\n    },\n    // Converts a base 64 Buffer of bytes to a JavaScript string with line breaks.\n    toString (buf) {\n        if (buf.length % 4 > 0) {\n            throw new RangeError(`base64.toString: input buffer length not multiple of 4: ${buf.length}`);\n        }\n        let str = \"\";\n        let lineLen = 0;\n        function buildLine(c1, c2, c3, c4) {\n            switch(lineLen){\n                case 76:\n                    str += `\\r\\n${c1}${c2}${c3}${c4}`;\n                    lineLen = 4;\n                    break;\n                case 75:\n                    str += `${c1}\\r\\n${c2}${c3}${c4}`;\n                    lineLen = 3;\n                    break;\n                case 74:\n                    str += `${c1 + c2}\\r\\n${c3}${c4}`;\n                    lineLen = 2;\n                    break;\n                case 73:\n                    str += `${c1 + c2 + c3}\\r\\n${c4}`;\n                    lineLen = 1;\n                    break;\n                default:\n                    str += c1 + c2 + c3 + c4;\n                    lineLen += 4;\n                    break;\n            }\n        }\n        function validate(c) {\n            if (c >= 65 && c <= 90) {\n                return true;\n            }\n            if (c >= 97 && c <= 122) {\n                return true;\n            }\n            if (c >= 48 && c <= 57) {\n                return true;\n            }\n            if (c === 43) {\n                return true;\n            }\n            if (c === 47) {\n                return true;\n            }\n            if (c === 61) {\n                return true;\n            }\n            return false;\n        }\n        for(let i = 0; i < buf.length; i += 4){\n            for(let j = i; j < i + 4; j += 1){\n                if (!validate(buf[j])) {\n                    throw new RangeError(`base64.toString: buf[${j}]: ${buf[j]} : not valid base64 character code`);\n                }\n            }\n            buildLine(String.fromCharCode(buf[i]), String.fromCharCode(buf[i + 1]), String.fromCharCode(buf[i + 2]), String.fromCharCode(buf[i + 3]));\n        }\n        return str;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FwZy1qc0A0LjIuMS9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctY29udi1hcGkvdHJhbnNmb3JtZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHVDQUF1QyxHQUN2Qyw4QkFBOEIsR0FDOUIsNkJBQTZCLEdBQzdCOzs7dUZBR3VGLEdBQ3ZGLG9FQUFvRTtBQUNwRSw2RkFBNkY7QUFFN0Y7QUFFQSxNQUFNLEVBQUVBLE1BQU0sRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQztBQUUzQix3QkFBd0IsR0FDeEIsTUFBTUMsZUFBZTtBQUNyQixNQUFNQyxXQUFXO0FBQ2pCLE1BQU1DLFFBQVE7QUFDZCxNQUFNQyxhQUFhO0FBRW5CLHdFQUF3RSxHQUN4RSxNQUFNQyxPQUFPO0lBQUM7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFJO0lBQUk7SUFBSTtJQUFLO0lBQUs7SUFBSztDQUFLO0FBRTFELDBEQUEwRCxHQUMxRCxNQUFNQyxRQUFRO0lBQ1o7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDRDtBQUVELGdDQUFnQyxHQUNoQyxNQUFNQyxjQUFjLG9FQUFvRUMsS0FBSyxDQUFDO0FBRTlGLHFD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LE1BQU0sRUFBRUMsS0FBSyxFQUFHO1lBQ3RDLElBQUssSUFBSU0sSUFBSU4sR0FBR00sSUFBSU4sSUFBSSxHQUFHTSxLQUFLLEVBQUc7Z0JBQ2pDLElBQUksQ0FBQzhDLFNBQVNyRSxHQUFHLENBQUN1QixFQUFFLEdBQUc7b0JBQ3JCLE1BQU0sSUFBSTFCLFdBQVcsQ0FBQyxxQkFBcUIsRUFBRTBCLEVBQUUsR0FBRyxFQUFFdkIsR0FBRyxDQUFDdUIsRUFBRSxDQUFDLGtDQUFrQyxDQUFDO2dCQUNoRztZQUNGO1lBQ0FpRCxVQUNFdEIsT0FBTzJCLFlBQVksQ0FBQzdFLEdBQUcsQ0FBQ2lCLEVBQUUsR0FDMUJpQyxPQUFPMkIsWUFBWSxDQUFDN0UsR0FBRyxDQUFDaUIsSUFBSSxFQUFFLEdBQzlCaUMsT0FBTzJCLFlBQVksQ0FBQzdFLEdBQUcsQ0FBQ2lCLElBQUksRUFBRSxHQUM5QmlDLE9BQU8yQixZQUFZLENBQUM3RSxHQUFHLENBQUNpQixJQUFJLEVBQUU7UUFFbEM7UUFDQSxPQUFPcUI7SUFDVDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHRva2Vuc3RyZWFtL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vYXBnLWpzQDQuMi4xL25vZGVfbW9kdWxlcy9hcGctanMvc3JjL2FwZy1jb252LWFwaS90cmFuc2Zvcm1lcnMuanM/NmMzNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItZGVzdHJ1Y3R1cmluZyAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcGx1c3BsdXMgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UgKi9cbi8qICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgIGNvcHlyaWdodDogQ29weXJpZ2h0IChjKSAyMDIxIExvd2VsbCBELiBUaG9tYXMsIGFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqICAgICBsaWNlbnNlOiBCU0QtMi1DbGF1c2UgKGh0dHBzOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTItQ2xhdXNlKVxuICogICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cbi8vIFRoaXMgbW9kdWxlIGNvbnRhaW5zIHRoZSBhY3R1YWwgZW5jb2RpbmcgYW5kIGRlY29kaW5nIGFsZ29yaXRobXMuXG4vLyBUaHJvd3MgXCJSYW5nZUVycm9yXCIgZXhjZXB0aW9ucyBvbiBjaGFyYWN0ZXJzIG9yIGJ5dGVzIG91dCBvZiByYW5nZSBmb3IgdGhlIGdpdmVuIGVuY29kaW5nLlxuXG4ndXNlIHN0cmljdDsnO1xuXG5jb25zdCB7IEJ1ZmZlciB9ID0gcmVxdWlyZSgnYnVmZmVyJyk7XG5cbi8qIGRlY29kaW5nIGVycm9yIGNvZGVzICovXG5jb25zdCBOT05fU0hPUlRFU1QgPSAweGZmZmZmZmZjO1xuY29uc3QgVFJBSUxJTkcgPSAweGZmZmZmZmZkO1xuY29uc3QgUkFOR0UgPSAweGZmZmZmZmZlO1xuY29uc3QgSUxMX0ZPUk1FRCA9IDB4ZmZmZmZmZmY7XG5cbi8qIG1hc2tbbl0gPSAyKipuIC0gMSwgaWUuIG1hc2tbbl0gPSBuIGJpdHMgb24uIGUuZy4gbWFza1s2XSA9ICViMTExMTExICovXG5jb25zdCBtYXNrID0gWzAsIDEsIDMsIDcsIDE1LCAzMSwgNjMsIDEyNywgMjU1LCA1MTEsIDEwMjNdO1xuXG4vKiBhc2NpaVtuXSA9ICdISCcsIHdoZXJlIDB4SEggPSBuLCBlZy4gYXNjaWlbMjU0XSA9ICdGRScgKi9cbmNvbnN0IGFzY2lpID0gW1xuICAnMDAnLFxuICAnMDEnLFxuICAnMDInLFxuICAnMDMnLFxuICAnMDQnLFxuICAnMDUnLFxuICAnMDYnLFxuICAnMDcnLFxuICAnMDgnLFxuICAnMDknLFxuICAnMEEnLFxuICAnMEInLFxuICAnMEMnLFxuICAnMEQnLFxuICAnMEUnLFxuICAnMEYnLFxuICAnMTAnLFxuICAnMTEnLFxuICAnMTInLFxuICAnMTMnLFxuICAnMTQnLFxuICAnMTUnLFxuICAnMTYnLFxuICAnMTcnLFxuICAnMTgnLFxuICAnMTknLFxuICAnMUEnLFxuICAnMUInLFxuICAnMUMnLFxuICAnMUQnLFxuICAnMUUnLFxuICAnMUYnLFxuICAnMjAnLFxuICAnMjEnLFxuICAnMjInLFxuICAnMjMnLFxuICAnMjQnLFxuICAnMjUnLFxuICAnMjYnLFxuICAnMjcnLFxuICAnMjgnLFxuICAnMjknLFxuICAnMkEnLFxuICAnMkInLFxuICAnMkMnLFxuICAnMkQnLFxuICAnMkUnLFxuICAnMkYnLFxuICAnMzAnLFxuICAnMzEnLFxuICAnMzInLFxuICAnMzMnLFxuICAnMzQnLFxuICAnMzUnLFxuICAnMzYnLFxuICAnMzcnLFxuICAnMzgnLFxuICAnMzknLFxuICAnM0EnLFxuICAnM0InLFxuICAnM0MnLFxuICAnM0QnLFxuICAnM0UnLFxuICAnM0YnLFxuICAnNDAnLFxuICAnNDEnLFxuICAnNDInLFxuICAnNDMnLFxuICAnNDQnLFxuICAnNDUnLFxuICAnNDYnLFxuICAnNDcnLFxuICAnNDgnLFxuICAnNDknLFxuICAnNEEnLFxuICAnNEInLFxuICAnNEMnLFxuICAnNEQnLFxuICAnNEUnLFxuICAnNEYnLFxuICAnNTAnLFxuICAnNTEnLFxuICAnNTInLFxuICAnNTMnLFxuICAnNTQnLFxuICAnNTUnLFxuICAnNTYnLFxuICAnNTcnLFxuICAnNTgnLFxuICAnNTknLFxuICAnNUEnLFxuICAnNUInLFxuICAnNUMnLFxuICAnNUQnLFxuICAnNUUnLFxuICAnNUYnLFxuICAnNjAnLFxuICAnNjEnLFxuICAnNjInLFxuICAnNjMnLFxuICAnNjQnLFxuICAnNjUnLFxuICAnNjYnLFxuICAnNjcnLFxuICAnNjgnLFxuICAnNjknLFxuICAnNkEnLFxuICAnNkInLFxuICAnNkMnLFxuICAnNkQnLFxuICAnNkUnLFxuICAnNkYnLFxuICAnNzAnLFxuICAnNzEnLFxuICAnNzInLFxuICAnNzMnLFxuICAnNzQnLFxuICAnNzUnLFxuICAnNzYnLFxuICAnNzcnLFxuICAnNzgnLFxuICAnNzknLFxuICAnN0EnLFxuICAnN0InLFxuICAnN0MnLFxuICAnN0QnLFxuICAnN0UnLFxuICAnN0YnLFxuICAnODAnLFxuICAnODEnLFxuICAnODInLFxuICAnODMnLFxuICAnODQnLFxuICAnODUnLFxuICAnODYnLFxuICAnODcnLFxuICAnODgnLFxuICAnODknLFxuICAnOEEnLFxuICAnOEInLFxuICAnOEMnLFxuICAnOEQnLFxuICAnOEUnLFxuICAnOEYnLFxuICAnOTAnLFxuICAnOTEnLFxuICAnOTInLFxuICAnOTMnLFxuICAnOTQnLFxuICAnOTUnLFxuICAnOTYnLFxuICAnOTcnLFxuICAnOTgnLFxuICAnOTknLFxuICAnOUEnLFxuICAnOUInLFxuICAnOUMnLFxuICAnOUQnLFxuICAnOUUnLFxuICAnOUYnLFxuICAnQTAnLFxuICAnQTEnLFxuICAnQTInLFxuICAnQTMnLFxuICAnQTQnLFxuICAnQTUnLFxuICAnQTYnLFxuICAnQTcnLFxuICAnQTgnLFxuICAnQTknLFxuICAnQUEnLFxuICAnQUInLFxuICAnQUMnLFxuICAnQUQnLFxuICAnQUUnLFxuICAnQUYnLFxuICAnQjAnLFxuICAnQjEnLFxuICAnQjInLFxuICAnQjMnLFxuICAnQjQnLFxuICAnQjUnLFxuICAnQjYnLFxuICAnQjcnLFxuICAnQjgnLFxuICAnQjknLFxuICAnQkEnLFxuICAnQkInLFxuICAnQkMnLFxuICAnQkQnLFxuICAnQkUnLFxuICAnQkYnLFxuICAnQzAnLFxuICAnQzEnLFxuICAnQzInLFxuICAnQzMnLFxuICAnQzQnLFxuICAnQzUnLFxuICAnQzYnLFxuICAnQzcnLFxuICAnQzgnLFxuICAnQzknLFxuICAnQ0EnLFxuICAnQ0InLFxuICAnQ0MnLFxuICAnQ0QnLFxuICAnQ0UnLFxuICAnQ0YnLFxuICAnRDAnLFxuICAnRDEnLFxuICAnRDInLFxuICAnRDMnLFxuICAnRDQnLFxuICAnRDUnLFxuICAnRDYnLFxuICAnRDcnLFxuICAnRDgnLFxuICAnRDknLFxuICAnREEnLFxuICAnREInLFxuICAnREMnLFxuICAnREQnLFxuICAnREUnLFxuICAnREYnLFxuICAnRTAnLFxuICAnRTEnLFxuICAnRTInLFxuICAnRTMnLFxuICAnRTQnLFxuICAnRTUnLFxuICAnRTYnLFxuICAnRTcnLFxuICAnRTgnLFxuICAnRTknLFxuICAnRUEnLFxuICAnRUInLFxuICAnRUMnLFxuICAnRUQnLFxuICAnRUUnLFxuICAnRUYnLFxuICAnRjAnLFxuICAnRjEnLFxuICAnRjInLFxuICAnRjMnLFxuICAnRjQnLFxuICAnRjUnLFxuICAnRjYnLFxuICAnRjcnLFxuICAnRjgnLFxuICAnRjknLFxuICAnRkEnLFxuICAnRkInLFxuICAnRkMnLFxuICAnRkQnLFxuICAnRkUnLFxuICAnRkYnLFxuXTtcblxuLyogdmVjdG9yIG9mIGJhc2UgNjQgY2hhcmFjdGVycyAqL1xuY29uc3QgYmFzZTY0Y2hhcnMgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0nLnNwbGl0KCcnKTtcblxuLyogdmVjdG9yIG9mIGJhc2UgNjQgY2hhcmFjdGVyIGNvZGVzICovXG5jb25zdCBiYXNlNjRjb2RlcyA9IFtdO1xuYmFzZTY0Y2hhcnMuZm9yRWFjaCgoY2hhcikgPT4ge1xuICBiYXNlNjRjb2Rlcy5wdXNoKGNoYXIuY2hhckNvZGVBdCgwKSk7XG59KTtcblxuLy8gVGhlIFVURjggYWxnb3JpdGhtcy5cbmV4cG9ydHMudXRmOCA9IHtcbiAgZW5jb2RlKGNoYXJzKSB7XG4gICAgY29uc3QgYnl0ZXMgPSBbXTtcbiAgICBjaGFycy5mb3JFYWNoKChjaGFyKSA9PiB7XG4gICAgICBpZiAoY2hhciA+PSAwICYmIGNoYXIgPD0gMHg3Zikge1xuICAgICAgICBieXRlcy5wdXNoKGNoYXIpO1xuICAgICAgfSBlbHNlIGlmIChjaGFyIDw9IDB4N2ZmKSB7XG4gICAgICAgIGJ5dGVzLnB1c2goMHhjMCArICgoY2hhciA+PiA2KSAmIG1hc2tbNV0pKTtcbiAgICAgICAgYnl0ZXMucHVzaCgweDgwICsgKGNoYXIgJiBtYXNrWzZdKSk7XG4gICAgICB9IGVsc2UgaWYgKGNoYXIgPCAweGQ4MDAgfHwgKGNoYXIgPiAweGRmZmYgJiYgY2hhciA8PSAweGZmZmYpKSB7XG4gICAgICAgIGJ5dGVzLnB1c2goMHhlMCArICgoY2hhciA+PiAxMikgJiBtYXNrWzRdKSk7XG4gICAgICAgIGJ5dGVzLnB1c2goMHg4MCArICgoY2hhciA+PiA2KSAmIG1hc2tbNl0pKTtcbiAgICAgICAgYnl0ZXMucHVzaCgweDgwICsgKGNoYXIgJiBtYXNrWzZdKSk7XG4gICAgICB9IGVsc2UgaWYgKGNoYXIgPj0gMHgxMDAwMCAmJiBjaGFyIDw9IDB4MTBmZmZmKSB7XG4gICAgICAgIGNvbnN0IHUgPSAoY2hhciA+PiAxNikgJiBtYXNrWzVdO1xuICAgICAgICBieXRlcy5wdXNoKDB4ZjAgKyAodSA+PiAyKSk7XG4gICAgICAgIGJ5dGVzLnB1c2goMHg4MCArICgodSAmIG1hc2tbMl0pIDw8IDQpICsgKChjaGFyID4+IDEyKSAmIG1hc2tbNF0pKTtcbiAgICAgICAgYnl0ZXMucHVzaCgweDgwICsgKChjaGFyID4+IDYpICYgbWFza1s2XSkpO1xuICAgICAgICBieXRlcy5wdXNoKDB4ODAgKyAoY2hhciAmIG1hc2tbNl0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGB1dGY4LmVuY29kZTogY2hhcmFjdGVyIG91dCBvZiByYW5nZTogY2hhcjogJHtjaGFyfWApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShieXRlcyk7XG4gIH0sXG4gIGRlY29kZShidWYsIGJvbSkge1xuICAgIC8qIGJ5dGVzIGZ1bmN0aW9ucyByZXR1cm4gZXJyb3IgZm9yIG5vbi1zaG9ydGVzdCBmb3JtcyAmIHZhbHVlcyBvdXQgb2YgcmFuZ2UgKi9cbiAgICBmdW5jdGlvbiBieXRlczIoYjEsIGIyKSB7XG4gICAgICAvKiBVKzAwODAuLlUrMDdGRiAqL1xuICAgICAgLyogMDAwMDAwMDAgMDAwMDB5eXkgeXl4eHh4eHggfCAxMTB5eXl5eSAxMHh4eHh4eCAqL1xuICAgICAgaWYgKChiMiAmIDB4YzApICE9PSAweDgwKSB7XG4gICAgICAgIHJldHVybiBUUkFJTElORztcbiAgICAgIH1cbiAgICAgIGNvbnN0IHggPSAoKGIxICYgbWFza1s1XSkgPDwgNikgKyAoYjIgJiBtYXNrWzZdKTtcbiAgICAgIGlmICh4IDwgMHg4MCkge1xuICAgICAgICByZXR1cm4gTk9OX1NIT1JURVNUO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHg7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJ5dGVzMyhiMSwgYjIsIGIzKSB7XG4gICAgICAvKiBVKzA4MDAuLlUrRkZGRiAqL1xuICAgICAgLyogMDAwMDAwMDAgenp6enl5eXkgeXl4eHh4eHggfCAxMTEwenp6eiAxMHl5eXl5eSAxMHh4eHh4eCAqL1xuICAgICAgaWYgKChiMyAmIDB4YzApICE9PSAweDgwIHx8IChiMiAmIDB4YzApICE9PSAweDgwKSB7XG4gICAgICAgIHJldHVybiBUUkFJTElORztcbiAgICAgIH1cbiAgICAgIGNvbnN0IHggPSAoKGIxICYgbWFza1s0XSkgPDwgMTIpICsgKChiMiAmIG1hc2tbNl0pIDw8IDYpICsgKGIzICYgbWFza1s2XSk7XG4gICAgICBpZiAoeCA8IDB4ODAwKSB7XG4gICAgICAgIHJldHVybiBOT05fU0hPUlRFU1Q7XG4gICAgICB9XG4gICAgICBpZiAoeCA+PSAweGQ4MDAgJiYgeCA8PSAweGRmZmYpIHtcbiAgICAgICAgcmV0dXJuIFJBTkdFO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHg7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJ5dGVzNChiMSwgYjIsIGIzLCBiNCkge1xuICAgICAgLyogVSsxMDAwMC4uVSsxMEZGRkYgKi9cbiAgICAgIC8qIDAwMHV1dXV1IHp6enp5eXl5IHl5eHh4eHh4IHwgMTExMTB1dXUgMTB1dXp6enogMTB5eXl5eXkgMTB4eHh4eHggKi9cbiAgICAgIGlmICgoYjQgJiAweGMwKSAhPT0gMHg4MCB8fCAoYjMgJiAweGMwKSAhPT0gMHg4MCB8fCAoYjIgJiAweGMwKSAhPT0gMHg4MCkge1xuICAgICAgICByZXR1cm4gVFJBSUxJTkc7XG4gICAgICB9XG4gICAgICBjb25zdCB4ID1cbiAgICAgICAgKCgoKGIxICYgbWFza1szXSkgPDwgMikgKyAoKGIyID4+IDQpICYgbWFza1syXSkpIDw8IDE2KSArXG4gICAgICAgICgoYjIgJiBtYXNrWzRdKSA8PCAxMikgK1xuICAgICAgICAoKGIzICYgbWFza1s2XSkgPDwgNikgK1xuICAgICAgICAoYjQgJiBtYXNrWzZdKTtcbiAgICAgIGlmICh4IDwgMHgxMDAwMCkge1xuICAgICAgICByZXR1cm4gTk9OX1NIT1JURVNUO1xuICAgICAgfVxuICAgICAgaWYgKHggPiAweDEwZmZmZikge1xuICAgICAgICByZXR1cm4gUkFOR0U7XG4gICAgICB9XG4gICAgICByZXR1cm4geDtcbiAgICB9XG4gICAgbGV0IGM7XG4gICAgbGV0IGIxO1xuICAgIGxldCBpMTtcbiAgICBsZXQgaTI7XG4gICAgbGV0IGkzO1xuICAgIGxldCBpbmM7XG4gICAgY29uc3QgbGVuID0gYnVmLmxlbmd0aDtcbiAgICBsZXQgaSA9IGJvbSA/IDMgOiAwO1xuICAgIGNvbnN0IGNoYXJzID0gW107XG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGIxID0gYnVmW2ldO1xuICAgICAgYyA9IElMTF9GT1JNRUQ7XG4gICAgICBjb25zdCBUUlVFID0gdHJ1ZTtcbiAgICAgIHdoaWxlIChUUlVFKSB7XG4gICAgICAgIGlmIChiMSA+PSAwICYmIGIxIDw9IDB4N2YpIHtcbiAgICAgICAgICAvKiBVKzAwMDAuLlUrMDA3RiAwMC4uN0YgKi9cbiAgICAgICAgICBjID0gYjE7XG4gICAgICAgICAgaW5jID0gMTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpMSA9IGkgKyAxO1xuICAgICAgICBpZiAoaTEgPCBsZW4gJiYgYjEgPj0gMHhjMiAmJiBiMSA8PSAweGRmKSB7XG4gICAgICAgICAgLyogVSswMDgwLi5VKzA3RkYgQzIuLkRGIDgwLi5CRiAqL1xuICAgICAgICAgIGMgPSBieXRlczIoYjEsIGJ1ZltpMV0pO1xuICAgICAgICAgIGluYyA9IDI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaTIgPSBpICsgMjtcbiAgICAgICAgaWYgKGkyIDwgbGVuICYmIGIxID49IDB4ZTAgJiYgYjEgPD0gMHhlZikge1xuICAgICAgICAgIC8qIFUrMDgwMC4uVStGRkZGICovXG4gICAgICAgICAgYyA9IGJ5dGVzMyhiMSwgYnVmW2kxXSwgYnVmW2kyXSk7XG4gICAgICAgICAgaW5jID0gMztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpMyA9IGkgKyAzO1xuICAgICAgICBpZiAoaTMgPCBsZW4gJiYgYjEgPj0gMHhmMCAmJiBiMSA8PSAweGY0KSB7XG4gICAgICAgICAgLyogVSsxMDAwMC4uVSsxMEZGRkYgKi9cbiAgICAgICAgICBjID0gYnl0ZXM0KGIxLCBidWZbaTFdLCBidWZbaTJdLCBidWZbaTNdKTtcbiAgICAgICAgICBpbmMgPSA0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8qIGlmIHdlIGZhbGwgdGhyb3VnaCB0byBoZXJlLCBpdCBpcyBhbiBpbGwtZm9ybWVkIHNlcXVlbmNlICovXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKGMgPiAweDEwZmZmZikge1xuICAgICAgICBjb25zdCBhdCA9IGBieXRlWyR7aX1dYDtcbiAgICAgICAgaWYgKGMgPT09IElMTF9GT1JNRUQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgdXRmOC5kZWNvZGU6IGlsbC1mb3JtZWQgVVRGOCBieXRlIHNlcXVlbmNlIGZvdW5kIGF0OiAke2F0fWApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjID09PSBUUkFJTElORykge1xuICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGB1dGY4LmRlY29kZTogaWxsZWdhbCB0cmFpbGluZyBieXRlIGZvdW5kIGF0OiAke2F0fWApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjID09PSBSQU5HRSkge1xuICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGB1dGY4LmRlY29kZTogY29kZSBwb2ludCBvdXQgb2YgcmFuZ2UgZm91bmQgYXQ6ICR7YXR9YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGMgPT09IE5PTl9TSE9SVEVTVCkge1xuICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGB1dGY4LmRlY29kZTogbm9uLXNob3J0ZXN0IGZvcm0gZm91bmQgYXQ6ICR7YXR9YCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYHV0ZjguZGVjb2RlOiB1bnJlY29nbml6ZWQgZXJyb3IgZm91bmQgYXQ6ICR7YXR9YCk7XG4gICAgICB9XG4gICAgICBjaGFycy5wdXNoKGMpO1xuICAgICAgaSArPSBpbmM7XG4gICAgfVxuICAgIHJldHVybiBjaGFycztcbiAgfSxcbn07XG5cbi8vIFRoZSBVVEYxNkJFIGFsZ29yaXRobXMuXG5leHBvcnRzLnV0ZjE2YmUgPSB7XG4gIGVuY29kZShjaGFycykge1xuICAgIGNvbnN0IGJ5dGVzID0gW107XG4gICAgbGV0IGNoYXI7XG4gICAgbGV0IGg7XG4gICAgbGV0IGw7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFycy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY2hhciA9IGNoYXJzW2ldO1xuICAgICAgaWYgKChjaGFyID49IDAgJiYgY2hhciA8PSAweGQ3ZmYpIHx8IChjaGFyID49IDB4ZTAwMCAmJiBjaGFyIDw9IDB4ZmZmZikpIHtcbiAgICAgICAgYnl0ZXMucHVzaCgoY2hhciA+PiA4KSAmIG1hc2tbOF0pO1xuICAgICAgICBieXRlcy5wdXNoKGNoYXIgJiBtYXNrWzhdKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hhciA+PSAweDEwMDAwICYmIGNoYXIgPD0gMHgxMGZmZmYpIHtcbiAgICAgICAgbCA9IGNoYXIgLSAweDEwMDAwO1xuICAgICAgICBoID0gMHhkODAwICsgKGwgPj4gMTApO1xuICAgICAgICBsID0gMHhkYzAwICsgKGwgJiBtYXNrWzEwXSk7XG4gICAgICAgIGJ5dGVzLnB1c2goKGggPj4gOCkgJiBtYXNrWzhdKTtcbiAgICAgICAgYnl0ZXMucHVzaChoICYgbWFza1s4XSk7XG4gICAgICAgIGJ5dGVzLnB1c2goKGwgPj4gOCkgJiBtYXNrWzhdKTtcbiAgICAgICAgYnl0ZXMucHVzaChsICYgbWFza1s4XSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgdXRmMTZiZS5lbmNvZGU6IFVURjE2QkUgdmFsdWUgb3V0IG9mIHJhbmdlOiBjaGFyWyR7aX1dOiAke2NoYXJ9YCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBCdWZmZXIuZnJvbShieXRlcyk7XG4gIH0sXG4gIGRlY29kZShidWYsIGJvbSkge1xuICAgIC8qIGFzc3VtZXMgY2FsbGVyIGhhcyBpbnN1cmVkIHRoYXQgYnVmIGlzIGEgQnVmZmVyIG9mIGJ5dGVzICovXG4gICAgaWYgKGJ1Zi5sZW5ndGggJSAyID4gMCkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYHV0ZjE2YmUuZGVjb2RlOiBkYXRhIGxlbmd0aCBtdXN0IGJlIGV2ZW4gbXVsdGlwbGUgb2YgMjogbGVuZ3RoOiAke2J1Zi5sZW5ndGh9YCk7XG4gICAgfVxuICAgIGNvbnN0IGNoYXJzID0gW107XG4gICAgY29uc3QgbGVuID0gYnVmLmxlbmd0aDtcbiAgICBsZXQgaSA9IGJvbSA/IDIgOiAwO1xuICAgIGxldCBqID0gMDtcbiAgICBsZXQgYztcbiAgICBsZXQgaW5jO1xuICAgIGxldCBpMTtcbiAgICBsZXQgaTM7XG4gICAgbGV0IGhpZ2g7XG4gICAgbGV0IGxvdztcbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgY29uc3QgVFJVRSA9IHRydWU7XG4gICAgICB3aGlsZSAoVFJVRSkge1xuICAgICAgICBpMSA9IGkgKyAxO1xuICAgICAgICBpZiAoaTEgPCBsZW4pIHtcbiAgICAgICAgICBoaWdoID0gKGJ1ZltpXSA8PCA4KSArIGJ1ZltpMV07XG4gICAgICAgICAgaWYgKGhpZ2ggPCAweGQ4MDAgfHwgaGlnaCA+IDB4ZGZmZikge1xuICAgICAgICAgICAgYyA9IGhpZ2g7XG4gICAgICAgICAgICBpbmMgPSAyO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGkzID0gaSArIDM7XG4gICAgICAgICAgaWYgKGkzIDwgbGVuKSB7XG4gICAgICAgICAgICBsb3cgPSAoYnVmW2kgKyAyXSA8PCA4KSArIGJ1ZltpM107XG4gICAgICAgICAgICBpZiAoaGlnaCA8PSAweGRiZmYgJiYgbG93ID49IDB4ZGMwMCAmJiBsb3cgPD0gMHhkZmZmKSB7XG4gICAgICAgICAgICAgIGMgPSAweDEwMDAwICsgKChoaWdoIC0gMHhkODAwKSA8PCAxMCkgKyAobG93IC0gMHhkYzAwKTtcbiAgICAgICAgICAgICAgaW5jID0gNDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qIGlmIHdlIGZhbGwgdGhyb3VnaCB0byBoZXJlLCBpdCBpcyBhbiBpbGwtZm9ybWVkIHNlcXVlbmNlICovXG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGB1dGYxNmJlLmRlY29kZTogaWxsLWZvcm1lZCBVVEYxNkJFIGJ5dGUgc2VxdWVuY2UgZm91bmQ6IGJ5dGVbJHtpfV1gKTtcbiAgICAgIH1cbiAgICAgIGNoYXJzW2orK10gPSBjO1xuICAgICAgaSArPSBpbmM7XG4gICAgfVxuICAgIHJldHVybiBjaGFycztcbiAgfSxcbn07XG5cbi8vIFRoZSBVVEYxNkxFIGFsZ29yaXRobXMuXG5leHBvcnRzLnV0ZjE2bGUgPSB7XG4gIGVuY29kZShjaGFycykge1xuICAgIGNvbnN0IGJ5dGVzID0gW107XG4gICAgbGV0IGNoYXI7XG4gICAgbGV0IGg7XG4gICAgbGV0IGw7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFycy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY2hhciA9IGNoYXJzW2ldO1xuICAgICAgaWYgKChjaGFyID49IDAgJiYgY2hhciA8PSAweGQ3ZmYpIHx8IChjaGFyID49IDB4ZTAwMCAmJiBjaGFyIDw9IDB4ZmZmZikpIHtcbiAgICAgICAgYnl0ZXMucHVzaChjaGFyICYgbWFza1s4XSk7XG4gICAgICAgIGJ5dGVzLnB1c2goKGNoYXIgPj4gOCkgJiBtYXNrWzhdKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hhciA+PSAweDEwMDAwICYmIGNoYXIgPD0gMHgxMGZmZmYpIHtcbiAgICAgICAgbCA9IGNoYXIgLSAweDEwMDAwO1xuICAgICAgICBoID0gMHhkODAwICsgKGwgPj4gMTApO1xuICAgICAgICBsID0gMHhkYzAwICsgKGwgJiBtYXNrWzEwXSk7XG4gICAgICAgIGJ5dGVzLnB1c2goaCAmIG1hc2tbOF0pO1xuICAgICAgICBieXRlcy5wdXNoKChoID4+IDgpICYgbWFza1s4XSk7XG4gICAgICAgIGJ5dGVzLnB1c2gobCAmIG1hc2tbOF0pO1xuICAgICAgICBieXRlcy5wdXNoKChsID4+IDgpICYgbWFza1s4XSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgdXRmMTZsZS5lbmNvZGU6IFVURjE2TEUgdmFsdWUgb3V0IG9mIHJhbmdlOiBjaGFyWyR7aX1dOiAke2NoYXJ9YCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBCdWZmZXIuZnJvbShieXRlcyk7XG4gIH0sXG4gIGRlY29kZShidWYsIGJvbSkge1xuICAgIC8qIGFzc3VtZXMgY2FsbGVyIGhhcyBpbnN1cmVkIHRoYXQgYnVmIGlzIGEgQnVmZmVyIG9mIGJ5dGVzICovXG4gICAgaWYgKGJ1Zi5sZW5ndGggJSAyID4gMCkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYHV0ZjE2bGUuZGVjb2RlOiBkYXRhIGxlbmd0aCBtdXN0IGJlIGV2ZW4gbXVsdGlwbGUgb2YgMjogbGVuZ3RoOiAke2J1Zi5sZW5ndGh9YCk7XG4gICAgfVxuICAgIGNvbnN0IGNoYXJzID0gW107XG4gICAgY29uc3QgbGVuID0gYnVmLmxlbmd0aDtcbiAgICBsZXQgaSA9IGJvbSA/IDIgOiAwO1xuICAgIGxldCBqID0gMDtcbiAgICBsZXQgYztcbiAgICBsZXQgaW5jO1xuICAgIGxldCBpMTtcbiAgICBsZXQgaTM7XG4gICAgbGV0IGhpZ2g7XG4gICAgbGV0IGxvdztcbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgY29uc3QgVFJVRSA9IHRydWU7XG4gICAgICB3aGlsZSAoVFJVRSkge1xuICAgICAgICBpMSA9IGkgKyAxO1xuICAgICAgICBpZiAoaTEgPCBsZW4pIHtcbiAgICAgICAgICBoaWdoID0gKGJ1ZltpMV0gPDwgOCkgKyBidWZbaV07XG4gICAgICAgICAgaWYgKGhpZ2ggPCAweGQ4MDAgfHwgaGlnaCA+IDB4ZGZmZikge1xuICAgICAgICAgICAgYyA9IGhpZ2g7XG4gICAgICAgICAgICBpbmMgPSAyO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGkzID0gaSArIDM7XG4gICAgICAgICAgaWYgKGkzIDwgbGVuKSB7XG4gICAgICAgICAgICBsb3cgPSAoYnVmW2kzXSA8PCA4KSArIGJ1ZltpICsgMl07XG4gICAgICAgICAgICBpZiAoaGlnaCA8PSAweGRiZmYgJiYgbG93ID49IDB4ZGMwMCAmJiBsb3cgPD0gMHhkZmZmKSB7XG4gICAgICAgICAgICAgIGMgPSAweDEwMDAwICsgKChoaWdoIC0gMHhkODAwKSA8PCAxMCkgKyAobG93IC0gMHhkYzAwKTtcbiAgICAgICAgICAgICAgaW5jID0gNDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qIGlmIHdlIGZhbGwgdGhyb3VnaCB0byBoZXJlLCBpdCBpcyBhbiBpbGwtZm9ybWVkIHNlcXVlbmNlICovXG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGB1dGYxNmxlLmRlY29kZTogaWxsLWZvcm1lZCBVVEYxNkxFIGJ5dGUgc2VxdWVuY2UgZm91bmQ6IGJ5dGVbJHtpfV1gKTtcbiAgICAgIH1cbiAgICAgIGNoYXJzW2orK10gPSBjO1xuICAgICAgaSArPSBpbmM7XG4gICAgfVxuICAgIHJldHVybiBjaGFycztcbiAgfSxcbn07XG5cbi8vIFRoZSBVVEYzMkJFIGFsZ29yaXRobXMuXG5leHBvcnRzLnV0ZjMyYmUgPSB7XG4gIGVuY29kZShjaGFycykge1xuICAgIGNvbnN0IGJ1ZiA9IEJ1ZmZlci5hbGxvYyhjaGFycy5sZW5ndGggKiA0KTtcbiAgICBsZXQgaSA9IDA7XG4gICAgY2hhcnMuZm9yRWFjaCgoY2hhcikgPT4ge1xuICAgICAgaWYgKChjaGFyID49IDB4ZDgwMCAmJiBjaGFyIDw9IDB4ZGZmZikgfHwgY2hhciA+IDB4MTBmZmZmKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGB1dGYzMmJlLmVuY29kZTogVVRGMzJCRSBjaGFyYWN0ZXIgY29kZSBvdXQgb2YgcmFuZ2U6IGNoYXJbJHtpIC8gNH1dOiAke2NoYXJ9YCk7XG4gICAgICB9XG4gICAgICBidWZbaSsrXSA9IChjaGFyID4+IDI0KSAmIG1hc2tbOF07XG4gICAgICBidWZbaSsrXSA9IChjaGFyID4+IDE2KSAmIG1hc2tbOF07XG4gICAgICBidWZbaSsrXSA9IChjaGFyID4+IDgpICYgbWFza1s4XTtcbiAgICAgIGJ1ZltpKytdID0gY2hhciAmIG1hc2tbOF07XG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1ZjtcbiAgfSxcbiAgZGVjb2RlKGJ1ZiwgYm9tKSB7XG4gICAgLyogY2FsbGVyIHRvIGluc3VyZSBidWYgaXMgYSBCdWZmZXIgb2YgYnl0ZXMgKi9cbiAgICBpZiAoYnVmLmxlbmd0aCAlIDQgPiAwKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgdXRmMzJiZS5kZWNvZGU6IFVURjMyQkUgYnl0ZSBsZW5ndGggbXVzdCBiZSBldmVuIG11bHRpcGxlIG9mIDQ6IGxlbmd0aDogJHtidWYubGVuZ3RofWApO1xuICAgIH1cbiAgICBjb25zdCBjaGFycyA9IFtdO1xuICAgIGxldCBpID0gYm9tID8gNCA6IDA7XG4gICAgZm9yICg7IGkgPCBidWYubGVuZ3RoOyBpICs9IDQpIHtcbiAgICAgIGNvbnN0IGNoYXIgPSAoYnVmW2ldIDw8IDI0KSArIChidWZbaSArIDFdIDw8IDE2KSArIChidWZbaSArIDJdIDw8IDgpICsgYnVmW2kgKyAzXTtcbiAgICAgIGlmICgoY2hhciA+PSAweGQ4MDAgJiYgY2hhciA8PSAweGRmZmYpIHx8IGNoYXIgPiAweDEwZmZmZikge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgdXRmMzJiZS5kZWNvZGU6IFVURjMyQkUgY2hhcmFjdGVyIGNvZGUgb3V0IG9mIHJhbmdlOiBjaGFyWyR7aSAvIDR9XTogJHtjaGFyfWApO1xuICAgICAgfVxuICAgICAgY2hhcnMucHVzaChjaGFyKTtcbiAgICB9XG4gICAgcmV0dXJuIGNoYXJzO1xuICB9LFxufTtcblxuLy8gVGhlIFVURjMyTEUgYWxnb3JpdGhtcy5cbmV4cG9ydHMudXRmMzJsZSA9IHtcbiAgZW5jb2RlKGNoYXJzKSB7XG4gICAgY29uc3QgYnVmID0gQnVmZmVyLmFsbG9jKGNoYXJzLmxlbmd0aCAqIDQpO1xuICAgIGxldCBpID0gMDtcbiAgICBjaGFycy5mb3JFYWNoKChjaGFyKSA9PiB7XG4gICAgICBpZiAoKGNoYXIgPj0gMHhkODAwICYmIGNoYXIgPD0gMHhkZmZmKSB8fCBjaGFyID4gMHgxMGZmZmYpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYHV0ZjMybGUuZW5jb2RlOiBVVEYzMkxFIGNoYXJhY3RlciBjb2RlIG91dCBvZiByYW5nZTogY2hhclske2kgLyA0fV06ICR7Y2hhcn1gKTtcbiAgICAgIH1cbiAgICAgIGJ1ZltpKytdID0gY2hhciAmIG1hc2tbOF07XG4gICAgICBidWZbaSsrXSA9IChjaGFyID4+IDgpICYgbWFza1s4XTtcbiAgICAgIGJ1ZltpKytdID0gKGNoYXIgPj4gMTYpICYgbWFza1s4XTtcbiAgICAgIGJ1ZltpKytdID0gKGNoYXIgPj4gMjQpICYgbWFza1s4XTtcbiAgICB9KTtcbiAgICByZXR1cm4gYnVmO1xuICB9LFxuICBkZWNvZGUoYnVmLCBib20pIHtcbiAgICAvKiBjYWxsZXIgdG8gaW5zdXJlIGJ1ZiBpcyBhIEJ1ZmZlciBvZiBieXRlcyAqL1xuICAgIGlmIChidWYubGVuZ3RoICUgNCA+IDApIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGB1dGYzMmJlLmRlY29kZTogVVRGMzJMRSBieXRlIGxlbmd0aCBtdXN0IGJlIGV2ZW4gbXVsdGlwbGUgb2YgNDogbGVuZ3RoOiAke2J1Zi5sZW5ndGh9YCk7XG4gICAgfVxuICAgIGNvbnN0IGNoYXJzID0gW107XG4gICAgbGV0IGkgPSBib20gPyA0IDogMDtcbiAgICBmb3IgKDsgaSA8IGJ1Zi5sZW5ndGg7IGkgKz0gNCkge1xuICAgICAgY29uc3QgY2hhciA9IChidWZbaSArIDNdIDw8IDI0KSArIChidWZbaSArIDJdIDw8IDE2KSArIChidWZbaSArIDFdIDw8IDgpICsgYnVmW2ldO1xuICAgICAgaWYgKChjaGFyID49IDB4ZDgwMCAmJiBjaGFyIDw9IDB4ZGZmZikgfHwgY2hhciA+IDB4MTBmZmZmKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGB1dGYzMmxlLmVuY29kZTogVVRGMzJMRSBjaGFyYWN0ZXIgY29kZSBvdXQgb2YgcmFuZ2U6IGNoYXJbJHtpIC8gNH1dOiAke2NoYXJ9YCk7XG4gICAgICB9XG4gICAgICBjaGFycy5wdXNoKGNoYXIpO1xuICAgIH1cbiAgICByZXR1cm4gY2hhcnM7XG4gIH0sXG59O1xuXG4vLyBUaGUgVUlOVDcgYWxnb3JpdGhtcy4gQVNDSUkgb3IgNy1iaXQgdW5zaWduZWQgaW50ZWdlcnMuXG5leHBvcnRzLnVpbnQ3ID0ge1xuICBlbmNvZGUoY2hhcnMpIHtcbiAgICBjb25zdCBidWYgPSBCdWZmZXIuYWxsb2MoY2hhcnMubGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXJzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoY2hhcnNbaV0gPiAweDdmKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGB1aW50Ny5lbmNvZGU6IFVJTlQ3IGNoYXJhY3RlciBjb2RlIG91dCBvZiByYW5nZTogY2hhclske2l9XTogJHtjaGFyc1tpXX1gKTtcbiAgICAgIH1cbiAgICAgIGJ1ZltpXSA9IGNoYXJzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gYnVmO1xuICB9LFxuICBkZWNvZGUoYnVmKSB7XG4gICAgY29uc3QgY2hhcnMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1Zi5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGJ1ZltpXSA+IDB4N2YpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYHVpbnQ3LmRlY29kZTogVUlOVDcgY2hhcmFjdGVyIGNvZGUgb3V0IG9mIHJhbmdlOiBieXRlWyR7aX1dOiAke2J1ZltpXX1gKTtcbiAgICAgIH1cbiAgICAgIGNoYXJzW2ldID0gYnVmW2ldO1xuICAgIH1cbiAgICByZXR1cm4gY2hhcnM7XG4gIH0sXG59O1xuXG4vLyBUaGUgVUlOVDggYWxnb3JpdGhtcy4gQklOQVJZLCBMYXRpbiAxIG9yIDgtYml0IHVuc2lnbmVkIGludGVnZXJzLlxuZXhwb3J0cy51aW50OCA9IHtcbiAgZW5jb2RlKGNoYXJzKSB7XG4gICAgY29uc3QgYnVmID0gQnVmZmVyLmFsbG9jKGNoYXJzLmxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFycy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGNoYXJzW2ldID4gMHhmZikge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgdWludDguZW5jb2RlOiBVSU5UOCBjaGFyYWN0ZXIgY29kZSBvdXQgb2YgcmFuZ2U6IGNoYXJbJHtpfV06ICR7Y2hhcnNbaV19YCk7XG4gICAgICB9XG4gICAgICBidWZbaV0gPSBjaGFyc1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGJ1ZjtcbiAgfSxcbiAgZGVjb2RlKGJ1Zikge1xuICAgIGNvbnN0IGNoYXJzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWYubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNoYXJzW2ldID0gYnVmW2ldO1xuICAgIH1cbiAgICByZXR1cm4gY2hhcnM7XG4gIH0sXG59O1xuXG4vLyBUaGUgVUlOVDE2QkUgYWxnb3JpdGhtcy4gQmlnLWVuZGlhbiAxNi1iaXQgdW5zaWduZWQgaW50ZWdlcnMuXG5leHBvcnRzLnVpbnQxNmJlID0ge1xuICBlbmNvZGUoY2hhcnMpIHtcbiAgICBjb25zdCBidWYgPSBCdWZmZXIuYWxsb2MoY2hhcnMubGVuZ3RoICogMik7XG4gICAgbGV0IGkgPSAwO1xuICAgIGNoYXJzLmZvckVhY2goKGNoYXIpID0+IHtcbiAgICAgIGlmIChjaGFyID4gMHhmZmZmKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGB1aW50MTZiZS5lbmNvZGU6IFVJTlQxNkJFIGNoYXJhY3RlciBjb2RlIG91dCBvZiByYW5nZTogY2hhclske2kgLyAyfV06ICR7Y2hhcn1gKTtcbiAgICAgIH1cbiAgICAgIGJ1ZltpKytdID0gKGNoYXIgPj4gOCkgJiBtYXNrWzhdO1xuICAgICAgYnVmW2krK10gPSBjaGFyICYgbWFza1s4XTtcbiAgICB9KTtcbiAgICByZXR1cm4gYnVmO1xuICB9LFxuICBkZWNvZGUoYnVmKSB7XG4gICAgaWYgKGJ1Zi5sZW5ndGggJSAyID4gMCkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYHVpbnQxNmJlLmRlY29kZTogVUlOVDE2QkUgYnl0ZSBsZW5ndGggbXVzdCBiZSBldmVuIG11bHRpcGxlIG9mIDI6IGxlbmd0aDogJHtidWYubGVuZ3RofWApO1xuICAgIH1cbiAgICBjb25zdCBjaGFycyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICBjaGFycy5wdXNoKChidWZbaV0gPDwgOCkgKyBidWZbaSArIDFdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNoYXJzO1xuICB9LFxufTtcblxuLy8gVGhlIFVJTlQxNkxFIGFsZ29yaXRobXMuIExpdHRsZS1lbmRpYW4gMTYtYml0IHVuc2lnbmVkIGludGVnZXJzLlxuZXhwb3J0cy51aW50MTZsZSA9IHtcbiAgZW5jb2RlKGNoYXJzKSB7XG4gICAgY29uc3QgYnVmID0gQnVmZmVyLmFsbG9jKGNoYXJzLmxlbmd0aCAqIDIpO1xuICAgIGxldCBpID0gMDtcbiAgICBjaGFycy5mb3JFYWNoKChjaGFyKSA9PiB7XG4gICAgICBpZiAoY2hhciA+IDB4ZmZmZikge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgdWludDE2bGUuZW5jb2RlOiBVSU5UMTZMRSBjaGFyYWN0ZXIgY29kZSBvdXQgb2YgcmFuZ2U6IGNoYXJbJHtpIC8gMn1dOiAke2NoYXJ9YCk7XG4gICAgICB9XG4gICAgICBidWZbaSsrXSA9IGNoYXIgJiBtYXNrWzhdO1xuICAgICAgYnVmW2krK10gPSAoY2hhciA+PiA4KSAmIG1hc2tbOF07XG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1ZjtcbiAgfSxcbiAgZGVjb2RlKGJ1Zikge1xuICAgIGlmIChidWYubGVuZ3RoICUgMiA+IDApIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGB1aW50MTZsZS5kZWNvZGU6IFVJTlQxNkxFIGJ5dGUgbGVuZ3RoIG11c3QgYmUgZXZlbiBtdWx0aXBsZSBvZiAyOiBsZW5ndGg6ICR7YnVmLmxlbmd0aH1gKTtcbiAgICB9XG4gICAgY29uc3QgY2hhcnMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1Zi5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgY2hhcnMucHVzaCgoYnVmW2kgKyAxXSA8PCA4KSArIGJ1ZltpXSk7XG4gICAgfVxuICAgIHJldHVybiBjaGFycztcbiAgfSxcbn07XG5cbi8vIFRoZSBVSU5UMzJCRSBhbGdvcml0aG1zLiBCaWctZW5kaWFuIDMyLWJpdCB1bnNpZ25lZCBpbnRlZ2Vycy5cbmV4cG9ydHMudWludDMyYmUgPSB7XG4gIGVuY29kZShjaGFycykge1xuICAgIGNvbnN0IGJ1ZiA9IEJ1ZmZlci5hbGxvYyhjaGFycy5sZW5ndGggKiA0KTtcbiAgICBsZXQgaSA9IDA7XG4gICAgY2hhcnMuZm9yRWFjaCgoY2hhcikgPT4ge1xuICAgICAgYnVmW2krK10gPSAoY2hhciA+PiAyNCkgJiBtYXNrWzhdO1xuICAgICAgYnVmW2krK10gPSAoY2hhciA+PiAxNikgJiBtYXNrWzhdO1xuICAgICAgYnVmW2krK10gPSAoY2hhciA+PiA4KSAmIG1hc2tbOF07XG4gICAgICBidWZbaSsrXSA9IGNoYXIgJiBtYXNrWzhdO1xuICAgIH0pO1xuICAgIHJldHVybiBidWY7XG4gIH0sXG4gIGRlY29kZShidWYpIHtcbiAgICBpZiAoYnVmLmxlbmd0aCAlIDQgPiAwKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgdWludDMyYmUuZGVjb2RlOiBVSU5UMzJCRSBieXRlIGxlbmd0aCBtdXN0IGJlIGV2ZW4gbXVsdGlwbGUgb2YgNDogbGVuZ3RoOiAke2J1Zi5sZW5ndGh9YCk7XG4gICAgfVxuICAgIGNvbnN0IGNoYXJzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWYubGVuZ3RoOyBpICs9IDQpIHtcbiAgICAgIGNoYXJzLnB1c2goKGJ1ZltpXSA8PCAyNCkgKyAoYnVmW2kgKyAxXSA8PCAxNikgKyAoYnVmW2kgKyAyXSA8PCA4KSArIGJ1ZltpICsgM10pO1xuICAgIH1cbiAgICByZXR1cm4gY2hhcnM7XG4gIH0sXG59O1xuXG4vLyBUaGUgVUlOVDMyTEUgYWxnb3JpdGhtcy4gTGl0dGxlLWVuZGlhbiAzMi1iaXQgdW5zaWduZWQgaW50ZWdlcnMuXG5leHBvcnRzLnVpbnQzMmxlID0ge1xuICBlbmNvZGUoY2hhcnMpIHtcbiAgICBjb25zdCBidWYgPSBCdWZmZXIuYWxsb2MoY2hhcnMubGVuZ3RoICogNCk7XG4gICAgbGV0IGkgPSAwO1xuICAgIGNoYXJzLmZvckVhY2goKGNoYXIpID0+IHtcbiAgICAgIGJ1ZltpKytdID0gY2hhciAmIG1hc2tbOF07XG4gICAgICBidWZbaSsrXSA9IChjaGFyID4+IDgpICYgbWFza1s4XTtcbiAgICAgIGJ1ZltpKytdID0gKGNoYXIgPj4gMTYpICYgbWFza1s4XTtcbiAgICAgIGJ1ZltpKytdID0gKGNoYXIgPj4gMjQpICYgbWFza1s4XTtcbiAgICB9KTtcbiAgICByZXR1cm4gYnVmO1xuICB9LFxuICBkZWNvZGUoYnVmKSB7XG4gICAgLyogY2FsbGVyIHRvIGluc3VyZSBidWYgaXMgYSBCdWZmZXIgb2YgYnl0ZXMgKi9cbiAgICBpZiAoYnVmLmxlbmd0aCAlIDQgPiAwKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgdWludDMybGUuZGVjb2RlOiBVSU5UMzJMRSBieXRlIGxlbmd0aCBtdXN0IGJlIGV2ZW4gbXVsdGlwbGUgb2YgNDogbGVuZ3RoOiAke2J1Zi5sZW5ndGh9YCk7XG4gICAgfVxuICAgIGNvbnN0IGNoYXJzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWYubGVuZ3RoOyBpICs9IDQpIHtcbiAgICAgIGNoYXJzLnB1c2goKGJ1ZltpICsgM10gPDwgMjQpICsgKGJ1ZltpICsgMl0gPDwgMTYpICsgKGJ1ZltpICsgMV0gPDwgOCkgKyBidWZbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gY2hhcnM7XG4gIH0sXG59O1xuXG4vLyBUaGUgU1RSSU5HIGFsZ29yaXRobXMuIENvbnZlcnRzIEphdmFTY3JpcHQgc3RyaW5ncyB0byBBcnJheSBvZiAzMi1iaXQgaW50ZWdlcnMgYW5kIHZpY2UgdmVyc2EuXG4vLyBVc2VzIHRoZSBub2RlLmpzIEJ1ZmZlcidzIG5hdGl2ZSBcInV0ZjE2bGVcIiBjYXBhYmlsaXRlcy5cbmV4cG9ydHMuc3RyaW5nID0ge1xuICBlbmNvZGUoY2hhcnMpIHtcbiAgICByZXR1cm4gZXhwb3J0cy51dGYxNmxlLmVuY29kZShjaGFycykudG9TdHJpbmcoJ3V0ZjE2bGUnKTtcbiAgfSxcbiAgZGVjb2RlKHN0cikge1xuICAgIHJldHVybiBleHBvcnRzLnV0ZjE2bGUuZGVjb2RlKEJ1ZmZlci5mcm9tKHN0ciwgJ3V0ZjE2bGUnKSwgMCk7XG4gIH0sXG59O1xuXG4vLyBUaGUgRVNDQVBFRCBhbGdvcml0aG1zLlxuLy8gTm90ZSB0aGF0IEVTQ0FQRUQgZm9ybWF0IGNvbnRhaW5zIG9ubHkgQVNDSUkgY2hhcmFjdGVycy5cbi8vIFRoZSBjaGFyYWN0ZXJzIGFyZSBhbHdheXMgaW4gdGhlIGZvcm0gb2YgYSBCdWZmZXIgb2YgYnl0ZXMuXG5leHBvcnRzLmVzY2FwZWQgPSB7XG4gIC8vIEVuY29kZXMgYW4gQXJyYXkgb2YgMzItYml0IGludGVnZXJzIGludG8gRVNDQVBFRCBmb3JtYXQuXG4gIGVuY29kZShjaGFycykge1xuICAgIGNvbnN0IGJ5dGVzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFycy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3QgY2hhciA9IGNoYXJzW2ldO1xuICAgICAgaWYgKGNoYXIgPT09IDk2KSB7XG4gICAgICAgIGJ5dGVzLnB1c2goY2hhcik7XG4gICAgICAgIGJ5dGVzLnB1c2goY2hhcik7XG4gICAgICB9IGVsc2UgaWYgKGNoYXIgPT09IDEwKSB7XG4gICAgICAgIGJ5dGVzLnB1c2goY2hhcik7XG4gICAgICB9IGVsc2UgaWYgKGNoYXIgPj0gMzIgJiYgY2hhciA8PSAxMjYpIHtcbiAgICAgICAgYnl0ZXMucHVzaChjaGFyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBzdHIgPSAnJztcbiAgICAgICAgaWYgKGNoYXIgPj0gMCAmJiBjaGFyIDw9IDMxKSB7XG4gICAgICAgICAgc3RyICs9IGBcXGB4JHthc2NpaVtjaGFyXX1gO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPj0gMTI3ICYmIGNoYXIgPD0gMjU1KSB7XG4gICAgICAgICAgc3RyICs9IGBcXGB4JHthc2NpaVtjaGFyXX1gO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPj0gMHgxMDAgJiYgY2hhciA8PSAweGZmZmYpIHtcbiAgICAgICAgICBzdHIgKz0gYFxcYHUke2FzY2lpWyhjaGFyID4+IDgpICYgbWFza1s4XV19JHthc2NpaVtjaGFyICYgbWFza1s4XV19YDtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyID49IDB4MTAwMDAgJiYgY2hhciA8PSAweGZmZmZmZmZmKSB7XG4gICAgICAgICAgc3RyICs9ICdgdXsnO1xuICAgICAgICAgIGNvbnN0IGRpZ2l0ID0gKGNoYXIgPj4gMjQpICYgbWFza1s4XTtcbiAgICAgICAgICBpZiAoZGlnaXQgPiAwKSB7XG4gICAgICAgICAgICBzdHIgKz0gYXNjaWlbZGlnaXRdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdHIgKz0gYCR7YXNjaWlbKGNoYXIgPj4gMTYpICYgbWFza1s4XV0gKyBhc2NpaVsoY2hhciA+PiA4KSAmIG1hc2tbOF1dICsgYXNjaWlbY2hhciAmIG1hc2tbOF1dfX1gO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZXNjYXBlLmVuY29kZShjaGFyKTogY2hhciA+IDB4ZmZmZmZmZmYgbm90IGFsbG93ZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBidWYgPSBCdWZmZXIuZnJvbShzdHIpO1xuICAgICAgICBidWYuZm9yRWFjaCgoYikgPT4ge1xuICAgICAgICAgIGJ5dGVzLnB1c2goYik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gQnVmZmVyLmZyb20oYnl0ZXMpO1xuICB9LFxuICAvLyBEZWNvZGVzIEVTQ0FQRUQgZm9ybWF0IGZyb20gYSBCdWZmZXIgb2YgYnl0ZXMgdG8gYW4gQXJyYXkgb2YgMzItYml0IGludGVnZXJzLlxuICBkZWNvZGUoYnVmKSB7XG4gICAgZnVuY3Rpb24gaXNIZXgoaGV4KSB7XG4gICAgICBpZiAoKGhleCA+PSA0OCAmJiBoZXggPD0gNTcpIHx8IChoZXggPj0gNjUgJiYgaGV4IDw9IDcwKSB8fCAoaGV4ID49IDk3ICYmIGhleCA8PSAxMDIpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXR4KGksIGxlbiwgYnVmQXJnKSB7XG4gICAgICBjb25zdCByZXQgPSB7IGNoYXI6IG51bGwsIG5leHRpOiBpICsgMiwgZXJyb3I6IHRydWUgfTtcbiAgICAgIGlmIChpICsgMSA8IGxlbikge1xuICAgICAgICBpZiAoaXNIZXgoYnVmQXJnW2ldKSAmJiBpc0hleChidWZBcmdbaSArIDFdKSkge1xuICAgICAgICAgIGNvbnN0IHN0ciA9IFN0cmluZy5mcm9tQ29kZVBvaW50KGJ1ZkFyZ1tpXSwgYnVmQXJnW2kgKyAxXSk7XG4gICAgICAgICAgcmV0LmNoYXIgPSBwYXJzZUludChzdHIsIDE2KTtcbiAgICAgICAgICBpZiAoIU51bWJlci5pc05hTihyZXQuY2hhcikpIHtcbiAgICAgICAgICAgIHJldC5lcnJvciA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0dShpLCBsZW4sIGJ1ZkFyZykge1xuICAgICAgY29uc3QgcmV0ID0geyBjaGFyOiBudWxsLCBuZXh0aTogaSArIDQsIGVycm9yOiB0cnVlIH07XG4gICAgICBpZiAoaSArIDMgPCBsZW4pIHtcbiAgICAgICAgaWYgKGlzSGV4KGJ1ZkFyZ1tpXSkgJiYgaXNIZXgoYnVmQXJnW2kgKyAxXSkgJiYgaXNIZXgoYnVmQXJnW2kgKyAyXSkgJiYgaXNIZXgoYnVmQXJnW2kgKyAzXSkpIHtcbiAgICAgICAgICBjb25zdCBzdHIgPSBTdHJpbmcuZnJvbUNvZGVQb2ludChidWZBcmdbaV0sIGJ1ZkFyZ1tpICsgMV0sIGJ1ZkFyZ1tpICsgMl0sIGJ1ZkFyZ1tpICsgM10pO1xuICAgICAgICAgIHJldC5jaGFyID0gcGFyc2VJbnQoc3RyLCAxNik7XG4gICAgICAgICAgaWYgKCFOdW1iZXIuaXNOYU4ocmV0LmNoYXIpKSB7XG4gICAgICAgICAgICByZXQuZXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFUoaSwgbGVuLCBidWZBcmcpIHtcbiAgICAgIGNvbnN0IHJldCA9IHsgY2hhcjogbnVsbCwgbmV4dGk6IGkgKyA0LCBlcnJvcjogdHJ1ZSB9O1xuICAgICAgbGV0IHN0ciA9ICcnO1xuICAgICAgd2hpbGUgKGkgPCBsZW4gJiYgaXNIZXgoYnVmQXJnW2ldKSkge1xuICAgICAgICBzdHIgKz0gU3RyaW5nLmZyb21Db2RlUG9pbnQoYnVmQXJnW2ldKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIGkgKz0gMTtcbiAgICAgIH1cbiAgICAgIHJldC5jaGFyID0gcGFyc2VJbnQoc3RyLCAxNik7XG4gICAgICBpZiAoYnVmQXJnW2ldID09PSAxMjUgJiYgIU51bWJlci5pc05hTihyZXQuY2hhcikpIHtcbiAgICAgICAgcmV0LmVycm9yID0gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXQubmV4dGkgPSBpICsgMTtcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICAgIGNvbnN0IGNoYXJzID0gW107XG4gICAgY29uc3QgbGVuID0gYnVmLmxlbmd0aDtcbiAgICBsZXQgaTE7XG4gICAgbGV0IHJldDtcbiAgICBsZXQgZXJyb3I7XG4gICAgbGV0IGkgPSAwO1xuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBjb25zdCBUUlVFID0gdHJ1ZTtcbiAgICAgIHdoaWxlIChUUlVFKSB7XG4gICAgICAgIGVycm9yID0gdHJ1ZTtcbiAgICAgICAgaWYgKGJ1ZltpXSAhPT0gOTYpIHtcbiAgICAgICAgICAvKiB1bmVzY2FwZWQgY2hhcmFjdGVyICovXG4gICAgICAgICAgY2hhcnMucHVzaChidWZbaV0pO1xuICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICBlcnJvciA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGkxID0gaSArIDE7XG4gICAgICAgIGlmIChpMSA+PSBsZW4pIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoYnVmW2kxXSA9PT0gOTYpIHtcbiAgICAgICAgICAvKiBlc2NhcGVkIGdyYXZlIGFjY2VudCAqL1xuICAgICAgICAgIGNoYXJzLnB1c2goOTYpO1xuICAgICAgICAgIGkgKz0gMjtcbiAgICAgICAgICBlcnJvciA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChidWZbaTFdID09PSAxMjApIHtcbiAgICAgICAgICByZXQgPSBnZXR4KGkxICsgMSwgbGVuLCBidWYpO1xuICAgICAgICAgIGlmIChyZXQuZXJyb3IpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvKiBlc2NhcGVkIGhleCAqL1xuICAgICAgICAgIGNoYXJzLnB1c2gocmV0LmNoYXIpO1xuICAgICAgICAgIGkgPSByZXQubmV4dGk7XG4gICAgICAgICAgZXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoYnVmW2kxXSA9PT0gMTE3KSB7XG4gICAgICAgICAgaWYgKGJ1ZltpMSArIDFdID09PSAxMjMpIHtcbiAgICAgICAgICAgIHJldCA9IGdldFUoaTEgKyAyLCBsZW4sIGJ1Zik7XG4gICAgICAgICAgICBpZiAocmV0LmVycm9yKSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyogZXNjYXBlZCB1dGYtMzIgKi9cbiAgICAgICAgICAgIGNoYXJzLnB1c2gocmV0LmNoYXIpO1xuICAgICAgICAgICAgaSA9IHJldC5uZXh0aTtcbiAgICAgICAgICAgIGVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0ID0gZ2V0dShpMSArIDEsIGxlbiwgYnVmKTtcbiAgICAgICAgICBpZiAocmV0LmVycm9yKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgLyogZXNjYXBlZCB1dGYtMTYgKi9cbiAgICAgICAgICBjaGFycy5wdXNoKHJldC5jaGFyKTtcbiAgICAgICAgICBpID0gcmV0Lm5leHRpO1xuICAgICAgICAgIGVycm9yID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBlc2NhcGVkLmRlY29kZTogaWxsLWZvcm1lZCBlc2NhcGUgc2VxdWVuY2UgYXQgYnVmWyR7aX1dYCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjaGFycztcbiAgfSxcbn07XG5cbi8vIFRoZSBsaW5lIGVuZCBjb252ZXJzaW9uIGFsZ29yaWd0aG1zLlxuY29uc3QgQ1IgPSAxMztcbmNvbnN0IExGID0gMTA7XG5leHBvcnRzLmxpbmVFbmRzID0ge1xuICBjcmxmKGNoYXJzKSB7XG4gICAgY29uc3QgbGZjaGFycyA9IFtdO1xuICAgIGxldCBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGNoYXJzLmxlbmd0aCkge1xuICAgICAgc3dpdGNoIChjaGFyc1tpXSkge1xuICAgICAgICBjYXNlIENSOlxuICAgICAgICAgIGlmIChpICsgMSA8IGNoYXJzLmxlbmd0aCAmJiBjaGFyc1tpICsgMV0gPT09IExGKSB7XG4gICAgICAgICAgICBpICs9IDI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGZjaGFycy5wdXNoKENSKTtcbiAgICAgICAgICBsZmNoYXJzLnB1c2goTEYpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIExGOlxuICAgICAgICAgIGxmY2hhcnMucHVzaChDUik7XG4gICAgICAgICAgbGZjaGFycy5wdXNoKExGKTtcbiAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgbGZjaGFycy5wdXNoKGNoYXJzW2ldKTtcbiAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChsZmNoYXJzLmxlbmd0aCA+IDAgJiYgbGZjaGFyc1tsZmNoYXJzLmxlbmd0aCAtIDFdICE9PSBMRikge1xuICAgICAgbGZjaGFycy5wdXNoKENSKTtcbiAgICAgIGxmY2hhcnMucHVzaChMRik7XG4gICAgfVxuICAgIHJldHVybiBsZmNoYXJzO1xuICB9LFxuICBsZihjaGFycykge1xuICAgIGNvbnN0IGxmY2hhcnMgPSBbXTtcbiAgICBsZXQgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBjaGFycy5sZW5ndGgpIHtcbiAgICAgIHN3aXRjaCAoY2hhcnNbaV0pIHtcbiAgICAgICAgY2FzZSBDUjpcbiAgICAgICAgICBpZiAoaSArIDEgPCBjaGFycy5sZW5ndGggJiYgY2hhcnNbaSArIDFdID09PSBMRikge1xuICAgICAgICAgICAgaSArPSAyO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxmY2hhcnMucHVzaChMRik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgTEY6XG4gICAgICAgICAgbGZjaGFycy5wdXNoKExGKTtcbiAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgbGZjaGFycy5wdXNoKGNoYXJzW2ldKTtcbiAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChsZmNoYXJzLmxlbmd0aCA+IDAgJiYgbGZjaGFyc1tsZmNoYXJzLmxlbmd0aCAtIDFdICE9PSBMRikge1xuICAgICAgbGZjaGFycy5wdXNoKExGKTtcbiAgICB9XG4gICAgcmV0dXJuIGxmY2hhcnM7XG4gIH0sXG59O1xuXG4vLyBUaGUgYmFzZSA2NCBhbGdvcml0aG1zLlxuZXhwb3J0cy5iYXNlNjQgPSB7XG4gIGVuY29kZShidWYpIHtcbiAgICBpZiAoYnVmLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKTtcbiAgICB9XG4gICAgbGV0IGk7XG4gICAgbGV0IGo7XG4gICAgbGV0IG47XG4gICAgbGV0IHRhaWwgPSBidWYubGVuZ3RoICUgMztcbiAgICB0YWlsID0gdGFpbCA+IDAgPyAzIC0gdGFpbCA6IDA7XG4gICAgbGV0IHVuaXRzID0gKGJ1Zi5sZW5ndGggKyB0YWlsKSAvIDM7XG4gICAgY29uc3QgYmFzZTY0ID0gQnVmZmVyLmFsbG9jKHVuaXRzICogNCk7XG4gICAgaWYgKHRhaWwgPiAwKSB7XG4gICAgICB1bml0cyAtPSAxO1xuICAgIH1cbiAgICBpID0gMDtcbiAgICBqID0gMDtcbiAgICBmb3IgKGxldCB1ID0gMDsgdSA8IHVuaXRzOyB1ICs9IDEpIHtcbiAgICAgIG4gPSBidWZbaSsrXSA8PCAxNjtcbiAgICAgIG4gKz0gYnVmW2krK10gPDwgODtcbiAgICAgIG4gKz0gYnVmW2krK107XG4gICAgICBiYXNlNjRbaisrXSA9IGJhc2U2NGNvZGVzWyhuID4+IDE4KSAmIG1hc2tbNl1dO1xuICAgICAgYmFzZTY0W2orK10gPSBiYXNlNjRjb2Rlc1sobiA+PiAxMikgJiBtYXNrWzZdXTtcbiAgICAgIGJhc2U2NFtqKytdID0gYmFzZTY0Y29kZXNbKG4gPj4gNikgJiBtYXNrWzZdXTtcbiAgICAgIGJhc2U2NFtqKytdID0gYmFzZTY0Y29kZXNbbiAmIG1hc2tbNl1dO1xuICAgIH1cbiAgICBpZiAodGFpbCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGJhc2U2NDtcbiAgICB9XG4gICAgaWYgKHRhaWwgPT09IDEpIHtcbiAgICAgIG4gPSBidWZbaSsrXSA8PCAxNjtcbiAgICAgIG4gKz0gYnVmW2ldIDw8IDg7XG4gICAgICBiYXNlNjRbaisrXSA9IGJhc2U2NGNvZGVzWyhuID4+IDE4KSAmIG1hc2tbNl1dO1xuICAgICAgYmFzZTY0W2orK10gPSBiYXNlNjRjb2Rlc1sobiA+PiAxMikgJiBtYXNrWzZdXTtcbiAgICAgIGJhc2U2NFtqKytdID0gYmFzZTY0Y29kZXNbKG4gPj4gNikgJiBtYXNrWzZdXTtcbiAgICAgIGJhc2U2NFtqXSA9IGJhc2U2NGNvZGVzWzY0XTtcbiAgICAgIHJldHVybiBiYXNlNjQ7XG4gICAgfVxuICAgIGlmICh0YWlsID09PSAyKSB7XG4gICAgICBuID0gYnVmW2ldIDw8IDE2O1xuICAgICAgYmFzZTY0W2orK10gPSBiYXNlNjRjb2Rlc1sobiA+PiAxOCkgJiBtYXNrWzZdXTtcbiAgICAgIGJhc2U2NFtqKytdID0gYmFzZTY0Y29kZXNbKG4gPj4gMTIpICYgbWFza1s2XV07XG4gICAgICBiYXNlNjRbaisrXSA9IGJhc2U2NGNvZGVzWzY0XTtcbiAgICAgIGJhc2U2NFtqXSA9IGJhc2U2NGNvZGVzWzY0XTtcbiAgICAgIHJldHVybiBiYXNlNjQ7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0sXG4gIGRlY29kZShjb2Rlcykge1xuICAgIC8qIHJlbW92ZSB3aGl0ZSBzcGFjZSBhbmQgY3RybCBjaGFyYWN0ZXJzLCB2YWxpZGF0ZSAmIHRyYW5zbGF0ZSBjaGFyYWN0ZXJzICovXG4gICAgZnVuY3Rpb24gdmFsaWRhdGUoYnVmKSB7XG4gICAgICBjb25zdCBjaGFycyA9IFtdO1xuICAgICAgbGV0IHRhaWwgPSAwO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWYubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgY2hhciA9IGJ1ZltpXTtcbiAgICAgICAgY29uc3QgVFJVRSA9IHRydWU7XG4gICAgICAgIHdoaWxlIChUUlVFKSB7XG4gICAgICAgICAgaWYgKGNoYXIgPT09IDMyIHx8IGNoYXIgPT09IDkgfHwgY2hhciA9PT0gMTAgfHwgY2hhciA9PT0gMTMpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2hhciA+PSA2NSAmJiBjaGFyIDw9IDkwKSB7XG4gICAgICAgICAgICBjaGFycy5wdXNoKGNoYXIgLSA2NSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNoYXIgPj0gOTcgJiYgY2hhciA8PSAxMjIpIHtcbiAgICAgICAgICAgIGNoYXJzLnB1c2goY2hhciAtIDcxKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2hhciA+PSA0OCAmJiBjaGFyIDw9IDU3KSB7XG4gICAgICAgICAgICBjaGFycy5wdXNoKGNoYXIgKyA0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2hhciA9PT0gNDMpIHtcbiAgICAgICAgICAgIGNoYXJzLnB1c2goNjIpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjaGFyID09PSA0Nykge1xuICAgICAgICAgICAgY2hhcnMucHVzaCg2Myk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNoYXIgPT09IDYxKSB7XG4gICAgICAgICAgICBjaGFycy5wdXNoKDY0KTtcbiAgICAgICAgICAgIHRhaWwgKz0gMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvKiBpbnZhbGlkIGNoYXJhY3RlciAqL1xuICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBiYXNlNjQuZGVjb2RlOiBpbnZhbGlkIGNoYXJhY3RlciBidWZbJHtpfV06ICR7Y2hhcn1gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLyogdmFsaWRhdGUgbGVuZ3RoICovXG4gICAgICBpZiAoY2hhcnMubGVuZ3RoICUgNCA+IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYGJhc2U2NC5kZWNvZGU6IHN0cmluZyBsZW5ndGggbm90IGludGVncmFsIG11bHRpcGxlIG9mIDQ6ICR7Y2hhcnMubGVuZ3RofWApO1xuICAgICAgfVxuICAgICAgLyogdmFsaWRhdGUgdGFpbCAqL1xuICAgICAgc3dpdGNoICh0YWlsKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChjaGFyc1tjaGFycy5sZW5ndGggLSAxXSAhPT0gNjQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdiYXNlNjQuZGVjb2RlOiBvbmUgdGFpbCBjaGFyYWN0ZXIgZm91bmQ6IG5vdCBsYXN0IGNoYXJhY3RlcicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIGlmIChjaGFyc1tjaGFycy5sZW5ndGggLSAxXSAhPT0gNjQgfHwgY2hhcnNbY2hhcnMubGVuZ3RoIC0gMl0gIT09IDY0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignYmFzZTY0LmRlY29kZTogdHdvIHRhaWwgY2hhcmFjdGVycyBmb3VuZDogbm90IGxhc3QgY2hhcmFjdGVycycpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgYmFzZTY0LmRlY29kZTogbW9yZSB0aGFuIHR3byB0YWlsIGNoYXJhY3RlcnMgZm91bmQ6ICR7dGFpbH1gKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IHRhaWwsIGJ1ZjogQnVmZmVyLmZyb20oY2hhcnMpIH07XG4gICAgfVxuXG4gICAgaWYgKGNvZGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKTtcbiAgICB9XG4gICAgY29uc3QgdmFsID0gdmFsaWRhdGUoY29kZXMpO1xuICAgIGNvbnN0IHsgdGFpbCB9ID0gdmFsO1xuICAgIGNvbnN0IGJhc2U2NCA9IHZhbC5idWY7XG4gICAgbGV0IGk7XG4gICAgbGV0IGo7XG4gICAgbGV0IG47XG4gICAgbGV0IHVuaXRzID0gYmFzZTY0Lmxlbmd0aCAvIDQ7XG4gICAgY29uc3QgYnVmID0gQnVmZmVyLmFsbG9jKHVuaXRzICogMyAtIHRhaWwpO1xuICAgIGlmICh0YWlsID4gMCkge1xuICAgICAgdW5pdHMgLT0gMTtcbiAgICB9XG4gICAgaiA9IDA7XG4gICAgaSA9IDA7XG4gICAgZm9yIChsZXQgdSA9IDA7IHUgPCB1bml0czsgdSArPSAxKSB7XG4gICAgICBuID0gYmFzZTY0W2krK10gPDwgMTg7XG4gICAgICBuICs9IGJhc2U2NFtpKytdIDw8IDEyO1xuICAgICAgbiArPSBiYXNlNjRbaSsrXSA8PCA2O1xuICAgICAgbiArPSBiYXNlNjRbaSsrXTtcbiAgICAgIGJ1ZltqKytdID0gKG4gPj4gMTYpICYgbWFza1s4XTtcbiAgICAgIGJ1ZltqKytdID0gKG4gPj4gOCkgJiBtYXNrWzhdO1xuICAgICAgYnVmW2orK10gPSBuICYgbWFza1s4XTtcbiAgICB9XG4gICAgaWYgKHRhaWwgPT09IDEpIHtcbiAgICAgIG4gPSBiYXNlNjRbaSsrXSA8PCAxODtcbiAgICAgIG4gKz0gYmFzZTY0W2krK10gPDwgMTI7XG4gICAgICBuICs9IGJhc2U2NFtpXSA8PCA2O1xuICAgICAgYnVmW2orK10gPSAobiA+PiAxNikgJiBtYXNrWzhdO1xuICAgICAgYnVmW2pdID0gKG4gPj4gOCkgJiBtYXNrWzhdO1xuICAgIH1cbiAgICBpZiAodGFpbCA9PT0gMikge1xuICAgICAgbiA9IGJhc2U2NFtpKytdIDw8IDE4O1xuICAgICAgbiArPSBiYXNlNjRbaSsrXSA8PCAxMjtcbiAgICAgIGJ1ZltqXSA9IChuID4+IDE2KSAmIG1hc2tbOF07XG4gICAgfVxuICAgIHJldHVybiBidWY7XG4gIH0sXG4gIC8vIENvbnZlcnRzIGEgYmFzZSA2NCBCdWZmZXIgb2YgYnl0ZXMgdG8gYSBKYXZhU2NyaXB0IHN0cmluZyB3aXRoIGxpbmUgYnJlYWtzLlxuICB0b1N0cmluZyhidWYpIHtcbiAgICBpZiAoYnVmLmxlbmd0aCAlIDQgPiAwKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgYmFzZTY0LnRvU3RyaW5nOiBpbnB1dCBidWZmZXIgbGVuZ3RoIG5vdCBtdWx0aXBsZSBvZiA0OiAke2J1Zi5sZW5ndGh9YCk7XG4gICAgfVxuICAgIGxldCBzdHIgPSAnJztcbiAgICBsZXQgbGluZUxlbiA9IDA7XG4gICAgZnVuY3Rpb24gYnVpbGRMaW5lKGMxLCBjMiwgYzMsIGM0KSB7XG4gICAgICBzd2l0Y2ggKGxpbmVMZW4pIHtcbiAgICAgICAgY2FzZSA3NjpcbiAgICAgICAgICBzdHIgKz0gYFxcclxcbiR7YzF9JHtjMn0ke2MzfSR7YzR9YDtcbiAgICAgICAgICBsaW5lTGVuID0gNDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA3NTpcbiAgICAgICAgICBzdHIgKz0gYCR7YzF9XFxyXFxuJHtjMn0ke2MzfSR7YzR9YDtcbiAgICAgICAgICBsaW5lTGVuID0gMztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA3NDpcbiAgICAgICAgICBzdHIgKz0gYCR7YzEgKyBjMn1cXHJcXG4ke2MzfSR7YzR9YDtcbiAgICAgICAgICBsaW5lTGVuID0gMjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA3MzpcbiAgICAgICAgICBzdHIgKz0gYCR7YzEgKyBjMiArIGMzfVxcclxcbiR7YzR9YDtcbiAgICAgICAgICBsaW5lTGVuID0gMTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBzdHIgKz0gYzEgKyBjMiArIGMzICsgYzQ7XG4gICAgICAgICAgbGluZUxlbiArPSA0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShjKSB7XG4gICAgICBpZiAoYyA+PSA2NSAmJiBjIDw9IDkwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGMgPj0gOTcgJiYgYyA8PSAxMjIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoYyA+PSA0OCAmJiBjIDw9IDU3KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGMgPT09IDQzKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGMgPT09IDQ3KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGMgPT09IDYxKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1Zi5sZW5ndGg7IGkgKz0gNCkge1xuICAgICAgZm9yIChsZXQgaiA9IGk7IGogPCBpICsgNDsgaiArPSAxKSB7XG4gICAgICAgIGlmICghdmFsaWRhdGUoYnVmW2pdKSkge1xuICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBiYXNlNjQudG9TdHJpbmc6IGJ1Zlske2p9XTogJHtidWZbal19IDogbm90IHZhbGlkIGJhc2U2NCBjaGFyYWN0ZXIgY29kZWApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBidWlsZExpbmUoXG4gICAgICAgIFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKSxcbiAgICAgICAgU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaSArIDFdKSxcbiAgICAgICAgU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaSArIDJdKSxcbiAgICAgICAgU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaSArIDNdKVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbiAgfSxcbn07XG4iXSwibmFtZXMiOlsiQnVmZmVyIiwicmVxdWlyZSIsIk5PTl9TSE9SVEVTVCIsIlRSQUlMSU5HIiwiUkFOR0UiLCJJTExfRk9STUVEIiwibWFzayIsImFzY2lpIiwiYmFzZTY0Y2hhcnMiLCJzcGxpdCIsImJhc2U2NGNvZGVzIiwiZm9yRWFjaCIsImNoYXIiLCJwdXNoIiwiY2hhckNvZGVBdCIsImV4cG9ydHMiLCJ1dGY4IiwiZW5jb2RlIiwiY2hhcnMiLCJieXRlcyIsInUiLCJSYW5nZUVycm9yIiwiZnJvbSIsImRlY29kZSIsImJ1ZiIsImJvbSIsImJ5dGVzMiIsImIxIiwiYjIiLCJ4IiwiYnl0ZXMzIiwiYjMiLCJieXRlczQiLCJiNCIsImMiLCJpMSIsImkyIiwiaTMiLCJpbmMiLCJsZW4iLCJsZW5ndGgiLCJpIiwiVFJVRSIsImF0IiwidXRmMTZiZSIsImgiLCJsIiwiaiIsImhpZ2giLCJsb3ciLCJ1dGYxNmxlIiwidXRmMzJiZSIsImFsbG9jIiwidXRmMzJsZSIsInVpbnQ3IiwidWludDgiLCJ1aW50MTZiZSIsInVpbnQxNmxlIiwidWludDMyYmUiLCJ1aW50MzJsZSIsInN0cmluZyIsInRvU3RyaW5nIiwic3RyIiwiZXNjYXBlZCIsImRpZ2l0IiwiRXJyb3IiLCJiIiwiaXNIZXgiLCJoZXgiLCJnZXR4IiwiYnVmQXJnIiwicmV0IiwibmV4dGkiLCJlcnJvciIsIlN0cmluZyIsImZyb21Db2RlUG9pbnQiLCJwYXJzZUludCIsIk51bWJlciIsImlzTmFOIiwiZ2V0dSIsImdldFUiLCJDUiIsIkxGIiwibGluZUVuZHMiLCJjcmxmIiwibGZjaGFycyIsImxmIiwiYmFzZTY0IiwibiIsInRhaWwiLCJ1bml0cyIsInVuZGVmaW5lZCIsImNvZGVzIiwidmFsaWRhdGUiLCJ2YWwiLCJsaW5lTGVuIiwiYnVpbGRMaW5lIiwiYzEiLCJjMiIsImMzIiwiYzQiLCJmcm9tQ2hhckNvZGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-conv-api/transformers.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/ast.js":
/*!************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/ast.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* eslint-disable guard-for-in */ /* eslint-disable no-restricted-syntax */ /*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This module is used by the parser to build an [Abstract Syntax Tree](https://en.wikipedia.org/wiki/Abstract_syntax_tree) (AST).\n// The AST can be thought of as a subset of the full parse tree.\n// Each node of the AST holds the phrase that was matched at the corresponding, named parse tree node.\n// It is built as the parser successfully matches phrases to the rule names\n// (`RNM` operators) and `UDT`s as it parses an input string.\n// The user controls which `RNM` or `UDT` names to keep on the AST.\n// The user can also associate callback functions with some or all of the retained\n// AST nodes to be used to translate the node phrases. That is, associate semantic\n// actions to the matched phrases.\n// Translating the AST rather that attempting to apply semantic actions during\n// the parsing process, has the advantage that there is no backtracking and that the phrases\n// are known while traversing down tree as will as up.\n//\n// Let `ast` be an `ast.js` object. To identify a node to be kept on the AST:\n// ```\n// ast.callbacks[\"rulename\"] = true; (all nodes default to false)\n// ```\n// To associate a callback function with a node:\n// ```\n// ast.callbacks[\"rulename\"] = fn\n// ```\n// `rulename` is any `RNM` or `UDT` name defined by the associated grammar\n// and `fn` is a user-written callback function.\n// (See [`apg-examples`](https://github.com/ldthomas/apg-js2-examples/tree/master/ast) for examples of how to create an AST,\n// define the nodes and callback functions and attach it to a parser.)\n\nmodule.exports = function exportsAst() {\n    const id = __webpack_require__(/*! ./identifiers */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/identifiers.js\");\n    const utils = __webpack_require__(/*! ./utilities */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/utilities.js\");\n    const thisFileName = \"ast.js: \";\n    const that = this;\n    let rules = null;\n    let udts = null;\n    let chars = null;\n    let nodeCount = 0;\n    const nodesDefined = [];\n    const nodeCallbacks = [];\n    const stack = [];\n    const records = [];\n    this.callbacks = [];\n    this.astObject = \"astObject\";\n    /* called by the parser to initialize the AST with the rules, UDTs and the input characters */ this.init = function init(rulesIn, udtsIn, charsIn) {\n        stack.length = 0;\n        records.length = 0;\n        nodesDefined.length = 0;\n        nodeCount = 0;\n        rules = rulesIn;\n        udts = udtsIn;\n        chars = charsIn;\n        let i;\n        const list = [];\n        for(i = 0; i < rules.length; i += 1){\n            list.push(rules[i].lower);\n        }\n        for(i = 0; i < udts.length; i += 1){\n            list.push(udts[i].lower);\n        }\n        nodeCount = rules.length + udts.length;\n        for(i = 0; i < nodeCount; i += 1){\n            nodesDefined[i] = false;\n            nodeCallbacks[i] = null;\n        }\n        for(const index in that.callbacks){\n            const lower = index.toLowerCase();\n            i = list.indexOf(lower);\n            if (i < 0) {\n                throw new Error(`${thisFileName}init: node '${index}' not a rule or udt name`);\n            }\n            if (typeof that.callbacks[index] === \"function\") {\n                nodesDefined[i] = true;\n                nodeCallbacks[i] = that.callbacks[index];\n            }\n            if (that.callbacks[index] === true) {\n                nodesDefined[i] = true;\n            }\n        }\n    };\n    /* AST node definitions - called by the parser's `RNM` operator */ this.ruleDefined = function ruleDefined(index) {\n        return nodesDefined[index] !== false;\n    };\n    /* AST node definitions - called by the parser's `UDT` operator */ this.udtDefined = function udtDefined(index) {\n        return nodesDefined[rules.length + index] !== false;\n    };\n    /* called by the parser's `RNM` & `UDT` operators */ /* builds a record for the downward traversal of the node */ this.down = function down(callbackIndex, name) {\n        const thisIndex = records.length;\n        stack.push(thisIndex);\n        records.push({\n            name,\n            thisIndex,\n            thatIndex: null,\n            state: id.SEM_PRE,\n            callbackIndex,\n            phraseIndex: null,\n            phraseLength: null,\n            stack: stack.length\n        });\n        return thisIndex;\n    };\n    /* called by the parser's `RNM` & `UDT` operators */ /* builds a record for the upward traversal of the node */ this.up = function up(callbackIndex, name, phraseIndex, phraseLength) {\n        const thisIndex = records.length;\n        const thatIndex = stack.pop();\n        records.push({\n            name,\n            thisIndex,\n            thatIndex,\n            state: id.SEM_POST,\n            callbackIndex,\n            phraseIndex,\n            phraseLength,\n            stack: stack.length\n        });\n        records[thatIndex].thatIndex = thisIndex;\n        records[thatIndex].phraseIndex = phraseIndex;\n        records[thatIndex].phraseLength = phraseLength;\n        return thisIndex;\n    };\n    // Called by the user to translate the AST.\n    // Translate means to associate or apply some semantic action to the\n    // phrases that were syntactically matched to the AST nodes according\n    // to the defining grammar.\n    // ```\n    // data - optional user-defined data\n    //        passed to the callback functions by the translator\n    // ```\n    this.translate = function translate(data) {\n        let ret;\n        let callback;\n        let record;\n        for(let i = 0; i < records.length; i += 1){\n            record = records[i];\n            callback = nodeCallbacks[record.callbackIndex];\n            if (record.state === id.SEM_PRE) {\n                if (callback !== null) {\n                    ret = callback(id.SEM_PRE, chars, record.phraseIndex, record.phraseLength, data);\n                    if (ret === id.SEM_SKIP) {\n                        i = record.thatIndex;\n                    }\n                }\n            } else if (callback !== null) {\n                callback(id.SEM_POST, chars, record.phraseIndex, record.phraseLength, data);\n            }\n        }\n    };\n    /* called by the parser to reset the length of the records array */ /* necessary on backtracking */ this.setLength = function setLength(length) {\n        records.length = length;\n        if (length > 0) {\n            stack.length = records[length - 1].stack;\n        } else {\n            stack.length = 0;\n        }\n    };\n    /* called by the parser to get the length of the records array */ this.getLength = function getLength() {\n        return records.length;\n    };\n    /* helper for XML display */ function indent(n) {\n        let ret = \"\";\n        for(let i = 0; i < n; i += 1){\n            ret += \" \";\n        }\n        return ret;\n    }\n    // Generate an `XML` version of the AST.\n    // Useful if you want to use a special or favorite XML parser to translate the\n    // AST.\n    // ```\n    // mode - the display mode of the captured phrases\n    //      - default mode is \"ascii\"\n    //      - can be: \"ascii\"\n    //                \"decimal\"\n    //                \"hexadecimal\"\n    //                \"unicode\"\n    // ```\n    this.toXml = function toSml(modeArg) {\n        let display = utils.charsToDec;\n        let caption = \"decimal integer character codes\";\n        if (typeof modeArg === \"string\" && modeArg.length >= 3) {\n            const mode = modeArg.slice(0, 3).toLowerCase();\n            if (mode === \"asc\") {\n                display = utils.charsToAscii;\n                caption = \"ASCII for printing characters, hex for non-printing\";\n            } else if (mode === \"hex\") {\n                display = utils.charsToHex;\n                caption = \"hexadecimal integer character codes\";\n            } else if (mode === \"uni\") {\n                display = utils.charsToUnicode;\n                caption = \"Unicode UTF-32 integer character codes\";\n            }\n        }\n        let xml = \"\";\n        let depth = 0;\n        xml += '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n';\n        xml += `<root nodes=\"${records.length / 2}\" characters=\"${chars.length}\">\\n`;\n        xml += `<!-- input string, ${caption} -->\\n`;\n        xml += indent(depth + 2);\n        xml += display(chars);\n        xml += \"\\n\";\n        records.forEach((rec)=>{\n            if (rec.state === id.SEM_PRE) {\n                depth += 1;\n                xml += indent(depth);\n                xml += `<node name=\"${rec.name}\" index=\"${rec.phraseIndex}\" length=\"${rec.phraseLength}\">\\n`;\n                xml += indent(depth + 2);\n                xml += display(chars, rec.phraseIndex, rec.phraseLength);\n                xml += \"\\n\";\n            } else {\n                xml += indent(depth);\n                xml += `</node><!-- name=\"${rec.name}\" -->\\n`;\n                depth -= 1;\n            }\n        });\n        xml += \"</root>\\n\";\n        return xml;\n    };\n    /* generate a JavaScript object version of the AST */ /* for the phrase-matching engine apg-exp */ this.phrases = function phrases() {\n        const obj = {};\n        let i;\n        let record;\n        for(i = 0; i < records.length; i += 1){\n            record = records[i];\n            if (record.state === id.SEM_PRE) {\n                if (!Array.isArray(obj[record.name])) {\n                    obj[record.name] = [];\n                }\n                obj[record.name].push({\n                    index: record.phraseIndex,\n                    length: record.phraseLength\n                });\n            }\n        }\n        return obj;\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/ast.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/circular-buffer.js":
/*!************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/circular-buffer.js ***!
  \************************************************************************************************/
/***/ ((module) => {

"use strict";
eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This module acts as a \"circular buffer\". It is used to keep track\n// only the last N records in an array of records. If more than N records\n// are saved, each additional record overwrites the previously oldest record.\n// This module deals only with the record indexes and does not save\n// any actual records. It is used by [`trace.js`](./trace.html) for limiting the number of\n// trace records saved.\n\nmodule.exports = function exportsCircularBuffer() {\n    \"use strict;\";\n    const thisFileName = \"circular-buffer.js: \";\n    let itemIndex = -1;\n    let maxListSize = 0;\n    // Initialize buffer.<br>\n    // *size* is `maxListSize`, the maximum number of records saved before overwriting begins.\n    this.init = function init(size) {\n        if (typeof size !== \"number\" || size <= 0) {\n            throw new Error(`${thisFileName}init: circular buffer size must an integer > 0`);\n        }\n        maxListSize = Math.ceil(size);\n        itemIndex = -1;\n    };\n    // Call this to increment the number of records collected.<br>\n    // Returns the array index number to store the next record in.\n    this.increment = function increment() {\n        itemIndex += 1;\n        return (itemIndex + maxListSize) % maxListSize;\n    };\n    // Returns `maxListSize` - the maximum number of records to keep in the buffer.\n    this.maxSize = function maxSize() {\n        return maxListSize;\n    };\n    // Returns the highest number of items saved.<br>\n    // (The number of items is the actual number of records processed\n    // even though only `maxListSize` records are actually retained.)\n    this.items = function items() {\n        return itemIndex + 1;\n    };\n    // Returns the record number associated with this item index.\n    this.getListIndex = function getListIndex(item) {\n        if (itemIndex === -1) {\n            return -1;\n        }\n        if (item < 0 || item > itemIndex) {\n            return -1;\n        }\n        if (itemIndex - item >= maxListSize) {\n            return -1;\n        }\n        return (item + maxListSize) % maxListSize;\n    };\n    // The iterator over the circular buffer.\n    // The user's function, `fn`, will be called with arguments `fn(listIndex, itemIndex)`\n    // where `listIndex` is the saved record index and `itemIndex` is the actual item index.\n    this.forEach = function forEach(fn) {\n        if (itemIndex === -1) {\n            /* no records have been collected */ return;\n        }\n        if (itemIndex < maxListSize) {\n            /* fewer than maxListSize records have been collected - number of items = number of records */ for(let i = 0; i <= itemIndex; i += 1){\n                fn(i, i);\n            }\n            return;\n        }\n        /* start with the oldest record saved and finish with the most recent record saved */ for(let i = itemIndex - maxListSize + 1; i <= itemIndex; i += 1){\n            const listIndex = (i + maxListSize) % maxListSize;\n            fn(listIndex, i);\n        }\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FwZy1qc0A0LjIuMS9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctbGliL2NpcmN1bGFyLWJ1ZmZlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7O3VGQUd1RixHQUN2RixvRUFBb0U7QUFDcEUseUVBQXlFO0FBQ3pFLDZFQUE2RTtBQUM3RSxtRUFBbUU7QUFDbkUsMEZBQTBGO0FBQzFGLHVCQUF1Qjs7QUFDdkJBLE9BQU9DLE9BQU8sR0FBRyxTQUFTQztJQUN4QjtJQUVBLE1BQU1DLGVBQWU7SUFDckIsSUFBSUMsWUFBWSxDQUFDO0lBQ2pCLElBQUlDLGNBQWM7SUFDbEIseUJBQXlCO0lBQ3pCLDBGQUEwRjtJQUMxRixJQUFJLENBQUNDLElBQUksR0FBRyxTQUFTQSxLQUFLQyxJQUFJO1FBQzVCLElBQUksT0FBT0EsU0FBUyxZQUFZQSxRQUFRLEdBQUc7WUFDekMsTUFBTSxJQUFJQyxNQUFNLENBQUMsRUFBRUwsYUFBYSw4Q0FBOEMsQ0FBQztRQUNqRjtRQUNBRSxjQUFjSSxLQUFLQyxJQUFJLENBQUNIO1FBQ3hCSCxZQUFZLENBQUM7SUFDZjtJQUNBLDhEQUE4RDtJQUM5RCw4REFBOEQ7SUFDOUQsSUFBSSxDQUFDTyxTQUFTLEdBQUcsU0FBU0E7UUFDeEJQLGFBQWE7UUFDYixPQUFPLENBQUNBLFlBQVlDLFdBQVUsSUFBS0E7SUFDckM7SUFDQSwrRUFBK0U7SUFDL0UsSUFBSSxDQUFDTyxPQUFPLEdBQUcsU0FBU0E7UUFDdEIsT0FBT1A7SUFDVDtJQUNBLGlEQUFpRDtJQUNqRCxpRUFBaUU7SUFDakUsaUVBQWlFO0lBQ2pFLElBQUksQ0FBQ1EsS0FBSyxHQUFHLFNBQVNBO1FBQ3BCLE9BQU9ULFlBQVk7SUFDckI7SUFDQSw2REFBNkQ7SUFDN0QsSUFBSSxDQUFDVSxZQUFZLEdBQUcsU0FBU0EsYUFBYUMsSUFBSTtRQUM1QyxJQUFJWCxjQUFjLENBQUMsR0FBRztZQUNwQixPQUFPLENBQUM7UUFDVjtRQUNBLElBQUlXLE9BQU8sS0FBS0EsT0FBT1gsV0FBVztZQUNoQyxPQUFPLENBQUM7UUFDVjtRQUNBLElBQUlBLFlBQVlXLFFBQVFWLGFBQWE7WUFDbkMsT0FBTyxDQUFDO1FBQ1Y7UUFDQSxPQUFPLENBQUNVLE9BQU9WLFdBQVUsSUFBS0E7SUFDaEM7SUFDQSx5Q0FBeUM7SUFDekMsc0ZBQXNGO0lBQ3RGLHdGQUF3RjtJQUN4RixJQUFJLENBQUNXLE9BQU8sR0FBRyxTQUFTQSxRQUFRQyxFQUFFO1FBQ2hDLElBQUliLGNBQWMsQ0FBQyxHQUFHO1lBQ3BCLGtDQUFrQyxHQUNsQztRQUNGO1FBQ0EsSUFBSUEsWUFBWUMsYUFBYTtZQUMzQiw0RkFBNEYsR0FDNUYsSUFBSyxJQUFJYSxJQUFJLEdBQUdBLEtBQUtkLFdBQVdjLEtBQUssRUFBRztnQkFDdENELEdBQUdDLEdBQUdBO1lBQ1I7WUFDQTtRQUNGO1FBQ0EsbUZBQW1GLEdBQ25GLElBQUssSUFBSUEsSUFBSWQsWUFBWUMsY0FBYyxHQUFHYSxLQUFLZCxXQUFXYyxLQUFLLEVBQUc7WUFDaEUsTUFBTUMsWUFBWSxDQUFDRCxJQUFJYixXQUFVLElBQUtBO1lBQ3RDWSxHQUFHRSxXQUFXRDtRQUNoQjtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdG9rZW5zdHJlYW0vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9hcGctanNANC4yLjEvbm9kZV9tb2R1bGVzL2FwZy1qcy9zcmMvYXBnLWxpYi9jaXJjdWxhci1idWZmZXIuanM/M2ViNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogICBjb3B5cmlnaHQ6IENvcHlyaWdodCAoYykgMjAyMSBMb3dlbGwgRC4gVGhvbWFzLCBhbGwgcmlnaHRzIHJlc2VydmVkXG4gKiAgICAgbGljZW5zZTogQlNELTItQ2xhdXNlIChodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0yLUNsYXVzZSlcbiAqICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG4vLyBUaGlzIG1vZHVsZSBhY3RzIGFzIGEgXCJjaXJjdWxhciBidWZmZXJcIi4gSXQgaXMgdXNlZCB0byBrZWVwIHRyYWNrXG4vLyBvbmx5IHRoZSBsYXN0IE4gcmVjb3JkcyBpbiBhbiBhcnJheSBvZiByZWNvcmRzLiBJZiBtb3JlIHRoYW4gTiByZWNvcmRzXG4vLyBhcmUgc2F2ZWQsIGVhY2ggYWRkaXRpb25hbCByZWNvcmQgb3ZlcndyaXRlcyB0aGUgcHJldmlvdXNseSBvbGRlc3QgcmVjb3JkLlxuLy8gVGhpcyBtb2R1bGUgZGVhbHMgb25seSB3aXRoIHRoZSByZWNvcmQgaW5kZXhlcyBhbmQgZG9lcyBub3Qgc2F2ZVxuLy8gYW55IGFjdHVhbCByZWNvcmRzLiBJdCBpcyB1c2VkIGJ5IFtgdHJhY2UuanNgXSguL3RyYWNlLmh0bWwpIGZvciBsaW1pdGluZyB0aGUgbnVtYmVyIG9mXG4vLyB0cmFjZSByZWNvcmRzIHNhdmVkLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBleHBvcnRzQ2lyY3VsYXJCdWZmZXIoKSB7XG4gICd1c2Ugc3RyaWN0Oyc7XG5cbiAgY29uc3QgdGhpc0ZpbGVOYW1lID0gJ2NpcmN1bGFyLWJ1ZmZlci5qczogJztcbiAgbGV0IGl0ZW1JbmRleCA9IC0xO1xuICBsZXQgbWF4TGlzdFNpemUgPSAwO1xuICAvLyBJbml0aWFsaXplIGJ1ZmZlci48YnI+XG4gIC8vICpzaXplKiBpcyBgbWF4TGlzdFNpemVgLCB0aGUgbWF4aW11bSBudW1iZXIgb2YgcmVjb3JkcyBzYXZlZCBiZWZvcmUgb3ZlcndyaXRpbmcgYmVnaW5zLlxuICB0aGlzLmluaXQgPSBmdW5jdGlvbiBpbml0KHNpemUpIHtcbiAgICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInIHx8IHNpemUgPD0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3RoaXNGaWxlTmFtZX1pbml0OiBjaXJjdWxhciBidWZmZXIgc2l6ZSBtdXN0IGFuIGludGVnZXIgPiAwYCk7XG4gICAgfVxuICAgIG1heExpc3RTaXplID0gTWF0aC5jZWlsKHNpemUpO1xuICAgIGl0ZW1JbmRleCA9IC0xO1xuICB9O1xuICAvLyBDYWxsIHRoaXMgdG8gaW5jcmVtZW50IHRoZSBudW1iZXIgb2YgcmVjb3JkcyBjb2xsZWN0ZWQuPGJyPlxuICAvLyBSZXR1cm5zIHRoZSBhcnJheSBpbmRleCBudW1iZXIgdG8gc3RvcmUgdGhlIG5leHQgcmVjb3JkIGluLlxuICB0aGlzLmluY3JlbWVudCA9IGZ1bmN0aW9uIGluY3JlbWVudCgpIHtcbiAgICBpdGVtSW5kZXggKz0gMTtcbiAgICByZXR1cm4gKGl0ZW1JbmRleCArIG1heExpc3RTaXplKSAlIG1heExpc3RTaXplO1xuICB9O1xuICAvLyBSZXR1cm5zIGBtYXhMaXN0U2l6ZWAgLSB0aGUgbWF4aW11bSBudW1iZXIgb2YgcmVjb3JkcyB0byBrZWVwIGluIHRoZSBidWZmZXIuXG4gIHRoaXMubWF4U2l6ZSA9IGZ1bmN0aW9uIG1heFNpemUoKSB7XG4gICAgcmV0dXJuIG1heExpc3RTaXplO1xuICB9O1xuICAvLyBSZXR1cm5zIHRoZSBoaWdoZXN0IG51bWJlciBvZiBpdGVtcyBzYXZlZC48YnI+XG4gIC8vIChUaGUgbnVtYmVyIG9mIGl0ZW1zIGlzIHRoZSBhY3R1YWwgbnVtYmVyIG9mIHJlY29yZHMgcHJvY2Vzc2VkXG4gIC8vIGV2ZW4gdGhvdWdoIG9ubHkgYG1heExpc3RTaXplYCByZWNvcmRzIGFyZSBhY3R1YWxseSByZXRhaW5lZC4pXG4gIHRoaXMuaXRlbXMgPSBmdW5jdGlvbiBpdGVtcygpIHtcbiAgICByZXR1cm4gaXRlbUluZGV4ICsgMTtcbiAgfTtcbiAgLy8gUmV0dXJucyB0aGUgcmVjb3JkIG51bWJlciBhc3NvY2lhdGVkIHdpdGggdGhpcyBpdGVtIGluZGV4LlxuICB0aGlzLmdldExpc3RJbmRleCA9IGZ1bmN0aW9uIGdldExpc3RJbmRleChpdGVtKSB7XG4gICAgaWYgKGl0ZW1JbmRleCA9PT0gLTEpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgaWYgKGl0ZW0gPCAwIHx8IGl0ZW0gPiBpdGVtSW5kZXgpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgaWYgKGl0ZW1JbmRleCAtIGl0ZW0gPj0gbWF4TGlzdFNpemUpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgcmV0dXJuIChpdGVtICsgbWF4TGlzdFNpemUpICUgbWF4TGlzdFNpemU7XG4gIH07XG4gIC8vIFRoZSBpdGVyYXRvciBvdmVyIHRoZSBjaXJjdWxhciBidWZmZXIuXG4gIC8vIFRoZSB1c2VyJ3MgZnVuY3Rpb24sIGBmbmAsIHdpbGwgYmUgY2FsbGVkIHdpdGggYXJndW1lbnRzIGBmbihsaXN0SW5kZXgsIGl0ZW1JbmRleClgXG4gIC8vIHdoZXJlIGBsaXN0SW5kZXhgIGlzIHRoZSBzYXZlZCByZWNvcmQgaW5kZXggYW5kIGBpdGVtSW5kZXhgIGlzIHRoZSBhY3R1YWwgaXRlbSBpbmRleC5cbiAgdGhpcy5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICAgIGlmIChpdGVtSW5kZXggPT09IC0xKSB7XG4gICAgICAvKiBubyByZWNvcmRzIGhhdmUgYmVlbiBjb2xsZWN0ZWQgKi9cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGl0ZW1JbmRleCA8IG1heExpc3RTaXplKSB7XG4gICAgICAvKiBmZXdlciB0aGFuIG1heExpc3RTaXplIHJlY29yZHMgaGF2ZSBiZWVuIGNvbGxlY3RlZCAtIG51bWJlciBvZiBpdGVtcyA9IG51bWJlciBvZiByZWNvcmRzICovXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBpdGVtSW5kZXg7IGkgKz0gMSkge1xuICAgICAgICBmbihpLCBpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLyogc3RhcnQgd2l0aCB0aGUgb2xkZXN0IHJlY29yZCBzYXZlZCBhbmQgZmluaXNoIHdpdGggdGhlIG1vc3QgcmVjZW50IHJlY29yZCBzYXZlZCAqL1xuICAgIGZvciAobGV0IGkgPSBpdGVtSW5kZXggLSBtYXhMaXN0U2l6ZSArIDE7IGkgPD0gaXRlbUluZGV4OyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IGxpc3RJbmRleCA9IChpICsgbWF4TGlzdFNpemUpICUgbWF4TGlzdFNpemU7XG4gICAgICBmbihsaXN0SW5kZXgsIGkpO1xuICAgIH1cbiAgfTtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImV4cG9ydHNDaXJjdWxhckJ1ZmZlciIsInRoaXNGaWxlTmFtZSIsIml0ZW1JbmRleCIsIm1heExpc3RTaXplIiwiaW5pdCIsInNpemUiLCJFcnJvciIsIk1hdGgiLCJjZWlsIiwiaW5jcmVtZW50IiwibWF4U2l6ZSIsIml0ZW1zIiwiZ2V0TGlzdEluZGV4IiwiaXRlbSIsImZvckVhY2giLCJmbiIsImkiLCJsaXN0SW5kZXgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/circular-buffer.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/emitcss.js":
/*!****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/emitcss.js ***!
  \****************************************************************************************/
/***/ ((module) => {

"use strict";
eval("// This module has been developed programmatically in the `apg-lib` build process.\n// It is used to build web pages programatically on the fly without the need for <script> or <style> tags.\n\nmodule.exports = function emittcss() {\n    return \"/* This file automatically generated by jsonToless() and LESS. */\\n.apg-mono {\\n  font-family: monospace;\\n}\\n.apg-active {\\n  font-weight: bold;\\n  color: #000000;\\n}\\n.apg-match {\\n  font-weight: bold;\\n  color: #264BFF;\\n}\\n.apg-empty {\\n  font-weight: bold;\\n  color: #0fbd0f;\\n}\\n.apg-nomatch {\\n  font-weight: bold;\\n  color: #FF4000;\\n}\\n.apg-lh-match {\\n  font-weight: bold;\\n  color: #1A97BA;\\n}\\n.apg-lb-match {\\n  font-weight: bold;\\n  color: #5F1687;\\n}\\n.apg-remainder {\\n  font-weight: bold;\\n  color: #999999;\\n}\\n.apg-ctrl-char {\\n  font-weight: bolder;\\n  font-style: italic;\\n  font-size: 0.6em;\\n}\\n.apg-line-end {\\n  font-weight: bold;\\n  color: #000000;\\n}\\n.apg-error {\\n  font-weight: bold;\\n  color: #FF4000;\\n}\\n.apg-phrase {\\n  color: #000000;\\n  background-color: #8caae6;\\n}\\n.apg-empty-phrase {\\n  color: #0fbd0f;\\n}\\ntable.apg-state {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: left;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-state th,\\ntable.apg-state td {\\n  text-align: left;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-state th:nth-last-child(2),\\ntable.apg-state td:nth-last-child(2) {\\n  text-align: right;\\n}\\ntable.apg-state caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-stats {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-stats th,\\ntable.apg-stats td {\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-stats caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-trace {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-trace caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-trace th,\\ntable.apg-trace td {\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-trace th:last-child,\\ntable.apg-trace th:nth-last-child(2),\\ntable.apg-trace td:last-child,\\ntable.apg-trace td:nth-last-child(2) {\\n  text-align: left;\\n}\\ntable.apg-grammar {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-grammar caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-grammar th,\\ntable.apg-grammar td {\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-grammar th:last-child,\\ntable.apg-grammar td:last-child {\\n  text-align: left;\\n}\\ntable.apg-rules {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-rules caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-rules th,\\ntable.apg-rules td {\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-rules a {\\n  color: #003399 !important;\\n}\\ntable.apg-rules a:hover {\\n  color: #8caae6 !important;\\n}\\ntable.apg-attrs {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: center;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-attrs caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-attrs th,\\ntable.apg-attrs td {\\n  text-align: center;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-attrs th:nth-child(1),\\ntable.apg-attrs th:nth-child(2),\\ntable.apg-attrs th:nth-child(3) {\\n  text-align: right;\\n}\\ntable.apg-attrs td:nth-child(1),\\ntable.apg-attrs td:nth-child(2),\\ntable.apg-attrs td:nth-child(3) {\\n  text-align: right;\\n}\\ntable.apg-attrs a {\\n  color: #003399 !important;\\n}\\ntable.apg-attrs a:hover {\\n  color: #8caae6 !important;\\n}\\n\";\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FwZy1qc0A0LjIuMS9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctbGliL2VtaXRjc3MuanMiLCJtYXBwaW5ncyI6IkFBQUEsa0ZBQWtGO0FBQ2xGLDBHQUEwRzs7QUFFMUdBLE9BQU9DLE9BQU8sR0FBRyxTQUFTQztJQUMxQixPQUFPO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdG9rZW5zdHJlYW0vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9hcGctanNANC4yLjEvbm9kZV9tb2R1bGVzL2FwZy1qcy9zcmMvYXBnLWxpYi9lbWl0Y3NzLmpzP2QxODgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBtb2R1bGUgaGFzIGJlZW4gZGV2ZWxvcGVkIHByb2dyYW1tYXRpY2FsbHkgaW4gdGhlIGBhcGctbGliYCBidWlsZCBwcm9jZXNzLlxuLy8gSXQgaXMgdXNlZCB0byBidWlsZCB3ZWIgcGFnZXMgcHJvZ3JhbWF0aWNhbGx5IG9uIHRoZSBmbHkgd2l0aG91dCB0aGUgbmVlZCBmb3IgPHNjcmlwdD4gb3IgPHN0eWxlPiB0YWdzLlxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVtaXR0Y3NzKCl7XG5yZXR1cm4gJy8qIFRoaXMgZmlsZSBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBieSBqc29uVG9sZXNzKCkgYW5kIExFU1MuICovXFxuLmFwZy1tb25vIHtcXG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2U7XFxufVxcbi5hcGctYWN0aXZlIHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgY29sb3I6ICMwMDAwMDA7XFxufVxcbi5hcGctbWF0Y2gge1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBjb2xvcjogIzI2NEJGRjtcXG59XFxuLmFwZy1lbXB0eSB7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIGNvbG9yOiAjMGZiZDBmO1xcbn1cXG4uYXBnLW5vbWF0Y2gge1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBjb2xvcjogI0ZGNDAwMDtcXG59XFxuLmFwZy1saC1tYXRjaCB7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIGNvbG9yOiAjMUE5N0JBO1xcbn1cXG4uYXBnLWxiLW1hdGNoIHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgY29sb3I6ICM1RjE2ODc7XFxufVxcbi5hcGctcmVtYWluZGVyIHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgY29sb3I6ICM5OTk5OTk7XFxufVxcbi5hcGctY3RybC1jaGFyIHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkZXI7XFxuICBmb250LXN0eWxlOiBpdGFsaWM7XFxuICBmb250LXNpemU6IDAuNmVtO1xcbn1cXG4uYXBnLWxpbmUtZW5kIHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgY29sb3I6ICMwMDAwMDA7XFxufVxcbi5hcGctZXJyb3Ige1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBjb2xvcjogI0ZGNDAwMDtcXG59XFxuLmFwZy1waHJhc2Uge1xcbiAgY29sb3I6ICMwMDAwMDA7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjOGNhYWU2O1xcbn1cXG4uYXBnLWVtcHR5LXBocmFzZSB7XFxuICBjb2xvcjogIzBmYmQwZjtcXG59XFxudGFibGUuYXBnLXN0YXRlIHtcXG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2U7XFxuICBtYXJnaW4tdG9wOiA1cHg7XFxuICBmb250LXNpemU6IDExcHg7XFxuICBsaW5lLWhlaWdodDogMTMwJTtcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxuICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxufVxcbnRhYmxlLmFwZy1zdGF0ZSB0aCxcXG50YWJsZS5hcGctc3RhdGUgdGQge1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcXG59XFxudGFibGUuYXBnLXN0YXRlIHRoOm50aC1sYXN0LWNoaWxkKDIpLFxcbnRhYmxlLmFwZy1zdGF0ZSB0ZDpudGgtbGFzdC1jaGlsZCgyKSB7XFxuICB0ZXh0LWFsaWduOiByaWdodDtcXG59XFxudGFibGUuYXBnLXN0YXRlIGNhcHRpb24ge1xcbiAgZm9udC1zaXplOiAxMjUlO1xcbiAgbGluZS1oZWlnaHQ6IDEzMCU7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxufVxcbnRhYmxlLmFwZy1zdGF0cyB7XFxuICBmb250LWZhbWlseTogbW9ub3NwYWNlO1xcbiAgbWFyZ2luLXRvcDogNXB4O1xcbiAgZm9udC1zaXplOiAxMXB4O1xcbiAgbGluZS1oZWlnaHQ6IDEzMCU7XFxuICB0ZXh0LWFsaWduOiByaWdodDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcXG59XFxudGFibGUuYXBnLXN0YXRzIHRoLFxcbnRhYmxlLmFwZy1zdGF0cyB0ZCB7XFxuICB0ZXh0LWFsaWduOiByaWdodDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcXG59XFxudGFibGUuYXBnLXN0YXRzIGNhcHRpb24ge1xcbiAgZm9udC1zaXplOiAxMjUlO1xcbiAgbGluZS1oZWlnaHQ6IDEzMCU7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxufVxcbnRhYmxlLmFwZy10cmFjZSB7XFxuICBmb250LWZhbWlseTogbW9ub3NwYWNlO1xcbiAgbWFyZ2luLXRvcDogNXB4O1xcbiAgZm9udC1zaXplOiAxMXB4O1xcbiAgbGluZS1oZWlnaHQ6IDEzMCU7XFxuICB0ZXh0LWFsaWduOiByaWdodDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcXG59XFxudGFibGUuYXBnLXRyYWNlIGNhcHRpb24ge1xcbiAgZm9udC1zaXplOiAxMjUlO1xcbiAgbGluZS1oZWlnaHQ6IDEzMCU7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxufVxcbnRhYmxlLmFwZy10cmFjZSB0aCxcXG50YWJsZS5hcGctdHJhY2UgdGQge1xcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XFxuICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxufVxcbnRhYmxlLmFwZy10cmFjZSB0aDpsYXN0LWNoaWxkLFxcbnRhYmxlLmFwZy10cmFjZSB0aDpudGgtbGFzdC1jaGlsZCgyKSxcXG50YWJsZS5hcGctdHJhY2UgdGQ6bGFzdC1jaGlsZCxcXG50YWJsZS5hcGctdHJhY2UgdGQ6bnRoLWxhc3QtY2hpbGQoMikge1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG59XFxudGFibGUuYXBnLWdyYW1tYXIge1xcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTtcXG4gIG1hcmdpbi10b3A6IDVweDtcXG4gIGZvbnQtc2l6ZTogMTFweDtcXG4gIGxpbmUtaGVpZ2h0OiAxMzAlO1xcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XFxuICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxufVxcbnRhYmxlLmFwZy1ncmFtbWFyIGNhcHRpb24ge1xcbiAgZm9udC1zaXplOiAxMjUlO1xcbiAgbGluZS1oZWlnaHQ6IDEzMCU7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxufVxcbnRhYmxlLmFwZy1ncmFtbWFyIHRoLFxcbnRhYmxlLmFwZy1ncmFtbWFyIHRkIHtcXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xcbiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xcbn1cXG50YWJsZS5hcGctZ3JhbW1hciB0aDpsYXN0LWNoaWxkLFxcbnRhYmxlLmFwZy1ncmFtbWFyIHRkOmxhc3QtY2hpbGQge1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG59XFxudGFibGUuYXBnLXJ1bGVzIHtcXG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2U7XFxuICBtYXJnaW4tdG9wOiA1cHg7XFxuICBmb250LXNpemU6IDExcHg7XFxuICBsaW5lLWhlaWdodDogMTMwJTtcXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xcbiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xcbn1cXG50YWJsZS5hcGctcnVsZXMgY2FwdGlvbiB7XFxuICBmb250LXNpemU6IDEyNSU7XFxuICBsaW5lLWhlaWdodDogMTMwJTtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG59XFxudGFibGUuYXBnLXJ1bGVzIHRoLFxcbnRhYmxlLmFwZy1ydWxlcyB0ZCB7XFxuICB0ZXh0LWFsaWduOiByaWdodDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcXG59XFxudGFibGUuYXBnLXJ1bGVzIGEge1xcbiAgY29sb3I6ICMwMDMzOTkgIWltcG9ydGFudDtcXG59XFxudGFibGUuYXBnLXJ1bGVzIGE6aG92ZXIge1xcbiAgY29sb3I6ICM4Y2FhZTYgIWltcG9ydGFudDtcXG59XFxudGFibGUuYXBnLWF0dHJzIHtcXG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2U7XFxuICBtYXJnaW4tdG9wOiA1cHg7XFxuICBmb250LXNpemU6IDExcHg7XFxuICBsaW5lLWhlaWdodDogMTMwJTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcXG59XFxudGFibGUuYXBnLWF0dHJzIGNhcHRpb24ge1xcbiAgZm9udC1zaXplOiAxMjUlO1xcbiAgbGluZS1oZWlnaHQ6IDEzMCU7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxufVxcbnRhYmxlLmFwZy1hdHRycyB0aCxcXG50YWJsZS5hcGctYXR0cnMgdGQge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xcbn1cXG50YWJsZS5hcGctYXR0cnMgdGg6bnRoLWNoaWxkKDEpLFxcbnRhYmxlLmFwZy1hdHRycyB0aDpudGgtY2hpbGQoMiksXFxudGFibGUuYXBnLWF0dHJzIHRoOm50aC1jaGlsZCgzKSB7XFxuICB0ZXh0LWFsaWduOiByaWdodDtcXG59XFxudGFibGUuYXBnLWF0dHJzIHRkOm50aC1jaGlsZCgxKSxcXG50YWJsZS5hcGctYXR0cnMgdGQ6bnRoLWNoaWxkKDIpLFxcbnRhYmxlLmFwZy1hdHRycyB0ZDpudGgtY2hpbGQoMykge1xcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XFxufVxcbnRhYmxlLmFwZy1hdHRycyBhIHtcXG4gIGNvbG9yOiAjMDAzMzk5ICFpbXBvcnRhbnQ7XFxufVxcbnRhYmxlLmFwZy1hdHRycyBhOmhvdmVyIHtcXG4gIGNvbG9yOiAjOGNhYWU2ICFpbXBvcnRhbnQ7XFxufVxcbic7XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImVtaXR0Y3NzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/emitcss.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/identifiers.js":
/*!********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/identifiers.js ***!
  \********************************************************************************************/
/***/ ((module) => {

"use strict";
eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This module exposes a list of named identifiers, shared across the parser generator\n// and the parsers that are generated.\n\nmodule.exports = {\n    // Identifies the operator type. Used by the generator\n    // to indicate operator types in the grammar object.\n    // Used by the [parser](./parser.html) when interpreting the grammar object.\n    /* the original ABNF operators */ ALT: 1 /* alternation */ ,\n    CAT: 2 /* concatenation */ ,\n    REP: 3 /* repetition */ ,\n    RNM: 4 /* rule name */ ,\n    TRG: 5 /* terminal range */ ,\n    TBS: 6 /* terminal binary string, case sensitive */ ,\n    TLS: 7 /* terminal literal string, case insensitive */ ,\n    /* the super set, SABNF operators */ UDT: 11 /* user-defined terminal */ ,\n    AND: 12 /* positive look ahead */ ,\n    NOT: 13 /* negative look ahead */ ,\n    BKR: 14 /* back reference to a previously matched rule name */ ,\n    BKA: 15 /* positive look behind */ ,\n    BKN: 16 /* negative look behind */ ,\n    ABG: 17 /* anchor - begin of string */ ,\n    AEN: 18 /* anchor - end of string */ ,\n    // Used by the parser and the user's `RNM` and `UDT` callback functions.\n    // Identifies the parser state as it traverses the parse tree nodes.\n    // - *ACTIVE* - indicates the downward direction through the parse tree node.\n    // - *MATCH* - indicates the upward direction and a phrase, of length \\> 0, has been successfully matched\n    // - *EMPTY* - indicates the upward direction and a phrase, of length = 0, has been successfully matched\n    // - *NOMATCH* - indicates the upward direction and the parser failed to match any phrase at all\n    ACTIVE: 100,\n    MATCH: 101,\n    EMPTY: 102,\n    NOMATCH: 103,\n    // Used by [`AST` translator](./ast.html) (semantic analysis) and the user's callback functions\n    // to indicate the direction of flow through the `AST` nodes.\n    // - *SEM_PRE* - indicates the downward (pre-branch) direction through the `AST` node.\n    // - *SEM_POST* - indicates the upward (post-branch) direction through the `AST` node.\n    SEM_PRE: 200,\n    SEM_POST: 201,\n    // Used by the user's callback functions to indicate to the `AST` translator (semantic analysis) how to proceed.\n    // - *SEM_OK* - normal return value\n    // - *SEM_SKIP* - if a callback function returns this value from the SEM_PRE state,\n    // the translator will skip processing all `AST` nodes in the branch below the current node.\n    // Ignored if returned from the SEM_POST state.\n    SEM_OK: 300,\n    SEM_SKIP: 301,\n    // Used in attribute generation to distinguish the necessary attribute categories.\n    // - *ATTR_N* - non-recursive\n    // - *ATTR_R* - recursive\n    // - *ATTR_MR* - belongs to a mutually-recursive set\n    ATTR_N: 400,\n    ATTR_R: 401,\n    ATTR_MR: 402,\n    // Look around values indicate whether the parser is in look ahead or look behind mode.\n    // Used by the tracing facility to indicate the look around mode in the trace records display.\n    // - *LOOKAROUND_NONE* - the parser is in normal parsing mode\n    // - *LOOKAROUND_AHEAD* - the parse is in look-ahead mode, phrase matching for operator `AND(&)` or `NOT(!)`\n    // - *LOOKAROUND_BEHIND* - the parse is in look-behind mode, phrase matching for operator `BKA(&&)` or `BKN(!!)`\n    LOOKAROUND_NONE: 500,\n    LOOKAROUND_AHEAD: 501,\n    LOOKAROUND_BEHIND: 502,\n    // Back reference rule mode indicators\n    // - *BKR_MODE_UM* - the back reference is using universal mode\n    // - *BKR_MODE_PM* - the back reference is using parent frame mode\n    // - *BKR_MODE_CS* - the back reference is using case-sensitive phrase matching\n    // - *BKR_MODE_CI* - the back reference is using case-insensitive phrase matching\n    BKR_MODE_UM: 601,\n    BKR_MODE_PM: 602,\n    BKR_MODE_CS: 603,\n    BKR_MODE_CI: 604\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FwZy1qc0A0LjIuMS9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctbGliL2lkZW50aWZpZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7dUZBR3VGLEdBQ3ZGLHNGQUFzRjtBQUN0RixzQ0FBc0M7O0FBRXRDQSxPQUFPQyxPQUFPLEdBQUc7SUFDZixzREFBc0Q7SUFDdEQsb0RBQW9EO0lBQ3BELDRFQUE0RTtJQUM1RSwrQkFBK0IsR0FDL0JDLEtBQUssRUFBRSxlQUFlO0lBQ3RCQyxLQUFLLEVBQUUsaUJBQWlCO0lBQ3hCQyxLQUFLLEVBQUUsY0FBYztJQUNyQkMsS0FBSyxFQUFFLGFBQWE7SUFDcEJDLEtBQUssRUFBRSxrQkFBa0I7SUFDekJDLEtBQUssRUFBRSwwQ0FBMEM7SUFDakRDLEtBQUssRUFBRSw2Q0FBNkM7SUFDcEQsa0NBQWtDLEdBQ2xDQyxLQUFLLEdBQUcseUJBQXlCO0lBQ2pDQyxLQUFLLEdBQUcsdUJBQXVCO0lBQy9CQyxLQUFLLEdBQUcsdUJBQXVCO0lBQy9CQyxLQUFLLEdBQUcsb0RBQW9EO0lBQzVEQyxLQUFLLEdBQUcsd0JBQXdCO0lBQ2hDQyxLQUFLLEdBQUcsd0JBQXdCO0lBQ2hDQyxLQUFLLEdBQUcsNEJBQTRCO0lBQ3BDQyxLQUFLLEdBQUcsMEJBQTBCO0lBQ2xDLHdFQUF3RTtJQUN4RSxvRUFBb0U7SUFDcEUsNkVBQTZFO0lBQzdFLHlHQUF5RztJQUN6Ryx3R0FBd0c7SUFDeEcsZ0dBQWdHO0lBQ2hHQyxRQUFRO0lBQ1JDLE9BQU87SUFDUEMsT0FBTztJQUNQQyxTQUFTO0lBQ1QsK0ZBQStGO0lBQy9GLDZEQUE2RDtJQUM3RCxzRkFBc0Y7SUFDdEYsc0ZBQXNGO0lBQ3RGQyxTQUFTO0lBQ1RDLFVBQVU7SUFDVixnSEFBZ0g7SUFDaEgsbUNBQW1DO0lBQ25DLG1GQUFtRjtJQUNuRiw0RkFBNEY7SUFDNUYsK0NBQStDO0lBQy9DQyxRQUFRO0lBQ1JDLFVBQVU7SUFDVixrRkFBa0Y7SUFDbEYsNkJBQTZCO0lBQzdCLHlCQUF5QjtJQUN6QixvREFBb0Q7SUFDcERDLFFBQVE7SUFDUkMsUUFBUTtJQUNSQyxTQUFTO0lBQ1QsdUZBQXVGO0lBQ3ZGLDhGQUE4RjtJQUM5Riw2REFBNkQ7SUFDN0QsNEdBQTRHO0lBQzVHLGdIQUFnSDtJQUNoSEMsaUJBQWlCO0lBQ2pCQyxrQkFBa0I7SUFDbEJDLG1CQUFtQjtJQUNuQixzQ0FBc0M7SUFDdEMsK0RBQStEO0lBQy9ELGtFQUFrRTtJQUNsRSwrRUFBK0U7SUFDL0UsaUZBQWlGO0lBQ2pGQyxhQUFhO0lBQ2JDLGFBQWE7SUFDYkMsYUFBYTtJQUNiQyxhQUFhO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdG9rZW5zdHJlYW0vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9hcGctanNANC4yLjEvbm9kZV9tb2R1bGVzL2FwZy1qcy9zcmMvYXBnLWxpYi9pZGVudGlmaWVycy5qcz9jNDhkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgIGNvcHlyaWdodDogQ29weXJpZ2h0IChjKSAyMDIxIExvd2VsbCBELiBUaG9tYXMsIGFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqICAgICBsaWNlbnNlOiBCU0QtMi1DbGF1c2UgKGh0dHBzOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTItQ2xhdXNlKVxuICogICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cbi8vIFRoaXMgbW9kdWxlIGV4cG9zZXMgYSBsaXN0IG9mIG5hbWVkIGlkZW50aWZpZXJzLCBzaGFyZWQgYWNyb3NzIHRoZSBwYXJzZXIgZ2VuZXJhdG9yXG4vLyBhbmQgdGhlIHBhcnNlcnMgdGhhdCBhcmUgZ2VuZXJhdGVkLlxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gSWRlbnRpZmllcyB0aGUgb3BlcmF0b3IgdHlwZS4gVXNlZCBieSB0aGUgZ2VuZXJhdG9yXG4gIC8vIHRvIGluZGljYXRlIG9wZXJhdG9yIHR5cGVzIGluIHRoZSBncmFtbWFyIG9iamVjdC5cbiAgLy8gVXNlZCBieSB0aGUgW3BhcnNlcl0oLi9wYXJzZXIuaHRtbCkgd2hlbiBpbnRlcnByZXRpbmcgdGhlIGdyYW1tYXIgb2JqZWN0LlxuICAvKiB0aGUgb3JpZ2luYWwgQUJORiBvcGVyYXRvcnMgKi9cbiAgQUxUOiAxIC8qIGFsdGVybmF0aW9uICovLFxuICBDQVQ6IDIgLyogY29uY2F0ZW5hdGlvbiAqLyxcbiAgUkVQOiAzIC8qIHJlcGV0aXRpb24gKi8sXG4gIFJOTTogNCAvKiBydWxlIG5hbWUgKi8sXG4gIFRSRzogNSAvKiB0ZXJtaW5hbCByYW5nZSAqLyxcbiAgVEJTOiA2IC8qIHRlcm1pbmFsIGJpbmFyeSBzdHJpbmcsIGNhc2Ugc2Vuc2l0aXZlICovLFxuICBUTFM6IDcgLyogdGVybWluYWwgbGl0ZXJhbCBzdHJpbmcsIGNhc2UgaW5zZW5zaXRpdmUgKi8sXG4gIC8qIHRoZSBzdXBlciBzZXQsIFNBQk5GIG9wZXJhdG9ycyAqL1xuICBVRFQ6IDExIC8qIHVzZXItZGVmaW5lZCB0ZXJtaW5hbCAqLyxcbiAgQU5EOiAxMiAvKiBwb3NpdGl2ZSBsb29rIGFoZWFkICovLFxuICBOT1Q6IDEzIC8qIG5lZ2F0aXZlIGxvb2sgYWhlYWQgKi8sXG4gIEJLUjogMTQgLyogYmFjayByZWZlcmVuY2UgdG8gYSBwcmV2aW91c2x5IG1hdGNoZWQgcnVsZSBuYW1lICovLFxuICBCS0E6IDE1IC8qIHBvc2l0aXZlIGxvb2sgYmVoaW5kICovLFxuICBCS046IDE2IC8qIG5lZ2F0aXZlIGxvb2sgYmVoaW5kICovLFxuICBBQkc6IDE3IC8qIGFuY2hvciAtIGJlZ2luIG9mIHN0cmluZyAqLyxcbiAgQUVOOiAxOCAvKiBhbmNob3IgLSBlbmQgb2Ygc3RyaW5nICovLFxuICAvLyBVc2VkIGJ5IHRoZSBwYXJzZXIgYW5kIHRoZSB1c2VyJ3MgYFJOTWAgYW5kIGBVRFRgIGNhbGxiYWNrIGZ1bmN0aW9ucy5cbiAgLy8gSWRlbnRpZmllcyB0aGUgcGFyc2VyIHN0YXRlIGFzIGl0IHRyYXZlcnNlcyB0aGUgcGFyc2UgdHJlZSBub2Rlcy5cbiAgLy8gLSAqQUNUSVZFKiAtIGluZGljYXRlcyB0aGUgZG93bndhcmQgZGlyZWN0aW9uIHRocm91Z2ggdGhlIHBhcnNlIHRyZWUgbm9kZS5cbiAgLy8gLSAqTUFUQ0gqIC0gaW5kaWNhdGVzIHRoZSB1cHdhcmQgZGlyZWN0aW9uIGFuZCBhIHBocmFzZSwgb2YgbGVuZ3RoIFxcPiAwLCBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgbWF0Y2hlZFxuICAvLyAtICpFTVBUWSogLSBpbmRpY2F0ZXMgdGhlIHVwd2FyZCBkaXJlY3Rpb24gYW5kIGEgcGhyYXNlLCBvZiBsZW5ndGggPSAwLCBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgbWF0Y2hlZFxuICAvLyAtICpOT01BVENIKiAtIGluZGljYXRlcyB0aGUgdXB3YXJkIGRpcmVjdGlvbiBhbmQgdGhlIHBhcnNlciBmYWlsZWQgdG8gbWF0Y2ggYW55IHBocmFzZSBhdCBhbGxcbiAgQUNUSVZFOiAxMDAsXG4gIE1BVENIOiAxMDEsXG4gIEVNUFRZOiAxMDIsXG4gIE5PTUFUQ0g6IDEwMyxcbiAgLy8gVXNlZCBieSBbYEFTVGAgdHJhbnNsYXRvcl0oLi9hc3QuaHRtbCkgKHNlbWFudGljIGFuYWx5c2lzKSBhbmQgdGhlIHVzZXIncyBjYWxsYmFjayBmdW5jdGlvbnNcbiAgLy8gdG8gaW5kaWNhdGUgdGhlIGRpcmVjdGlvbiBvZiBmbG93IHRocm91Z2ggdGhlIGBBU1RgIG5vZGVzLlxuICAvLyAtICpTRU1fUFJFKiAtIGluZGljYXRlcyB0aGUgZG93bndhcmQgKHByZS1icmFuY2gpIGRpcmVjdGlvbiB0aHJvdWdoIHRoZSBgQVNUYCBub2RlLlxuICAvLyAtICpTRU1fUE9TVCogLSBpbmRpY2F0ZXMgdGhlIHVwd2FyZCAocG9zdC1icmFuY2gpIGRpcmVjdGlvbiB0aHJvdWdoIHRoZSBgQVNUYCBub2RlLlxuICBTRU1fUFJFOiAyMDAsXG4gIFNFTV9QT1NUOiAyMDEsXG4gIC8vIFVzZWQgYnkgdGhlIHVzZXIncyBjYWxsYmFjayBmdW5jdGlvbnMgdG8gaW5kaWNhdGUgdG8gdGhlIGBBU1RgIHRyYW5zbGF0b3IgKHNlbWFudGljIGFuYWx5c2lzKSBob3cgdG8gcHJvY2VlZC5cbiAgLy8gLSAqU0VNX09LKiAtIG5vcm1hbCByZXR1cm4gdmFsdWVcbiAgLy8gLSAqU0VNX1NLSVAqIC0gaWYgYSBjYWxsYmFjayBmdW5jdGlvbiByZXR1cm5zIHRoaXMgdmFsdWUgZnJvbSB0aGUgU0VNX1BSRSBzdGF0ZSxcbiAgLy8gdGhlIHRyYW5zbGF0b3Igd2lsbCBza2lwIHByb2Nlc3NpbmcgYWxsIGBBU1RgIG5vZGVzIGluIHRoZSBicmFuY2ggYmVsb3cgdGhlIGN1cnJlbnQgbm9kZS5cbiAgLy8gSWdub3JlZCBpZiByZXR1cm5lZCBmcm9tIHRoZSBTRU1fUE9TVCBzdGF0ZS5cbiAgU0VNX09LOiAzMDAsXG4gIFNFTV9TS0lQOiAzMDEsXG4gIC8vIFVzZWQgaW4gYXR0cmlidXRlIGdlbmVyYXRpb24gdG8gZGlzdGluZ3Vpc2ggdGhlIG5lY2Vzc2FyeSBhdHRyaWJ1dGUgY2F0ZWdvcmllcy5cbiAgLy8gLSAqQVRUUl9OKiAtIG5vbi1yZWN1cnNpdmVcbiAgLy8gLSAqQVRUUl9SKiAtIHJlY3Vyc2l2ZVxuICAvLyAtICpBVFRSX01SKiAtIGJlbG9uZ3MgdG8gYSBtdXR1YWxseS1yZWN1cnNpdmUgc2V0XG4gIEFUVFJfTjogNDAwLFxuICBBVFRSX1I6IDQwMSxcbiAgQVRUUl9NUjogNDAyLFxuICAvLyBMb29rIGFyb3VuZCB2YWx1ZXMgaW5kaWNhdGUgd2hldGhlciB0aGUgcGFyc2VyIGlzIGluIGxvb2sgYWhlYWQgb3IgbG9vayBiZWhpbmQgbW9kZS5cbiAgLy8gVXNlZCBieSB0aGUgdHJhY2luZyBmYWNpbGl0eSB0byBpbmRpY2F0ZSB0aGUgbG9vayBhcm91bmQgbW9kZSBpbiB0aGUgdHJhY2UgcmVjb3JkcyBkaXNwbGF5LlxuICAvLyAtICpMT09LQVJPVU5EX05PTkUqIC0gdGhlIHBhcnNlciBpcyBpbiBub3JtYWwgcGFyc2luZyBtb2RlXG4gIC8vIC0gKkxPT0tBUk9VTkRfQUhFQUQqIC0gdGhlIHBhcnNlIGlzIGluIGxvb2stYWhlYWQgbW9kZSwgcGhyYXNlIG1hdGNoaW5nIGZvciBvcGVyYXRvciBgQU5EKCYpYCBvciBgTk9UKCEpYFxuICAvLyAtICpMT09LQVJPVU5EX0JFSElORCogLSB0aGUgcGFyc2UgaXMgaW4gbG9vay1iZWhpbmQgbW9kZSwgcGhyYXNlIG1hdGNoaW5nIGZvciBvcGVyYXRvciBgQktBKCYmKWAgb3IgYEJLTighISlgXG4gIExPT0tBUk9VTkRfTk9ORTogNTAwLFxuICBMT09LQVJPVU5EX0FIRUFEOiA1MDEsXG4gIExPT0tBUk9VTkRfQkVISU5EOiA1MDIsXG4gIC8vIEJhY2sgcmVmZXJlbmNlIHJ1bGUgbW9kZSBpbmRpY2F0b3JzXG4gIC8vIC0gKkJLUl9NT0RFX1VNKiAtIHRoZSBiYWNrIHJlZmVyZW5jZSBpcyB1c2luZyB1bml2ZXJzYWwgbW9kZVxuICAvLyAtICpCS1JfTU9ERV9QTSogLSB0aGUgYmFjayByZWZlcmVuY2UgaXMgdXNpbmcgcGFyZW50IGZyYW1lIG1vZGVcbiAgLy8gLSAqQktSX01PREVfQ1MqIC0gdGhlIGJhY2sgcmVmZXJlbmNlIGlzIHVzaW5nIGNhc2Utc2Vuc2l0aXZlIHBocmFzZSBtYXRjaGluZ1xuICAvLyAtICpCS1JfTU9ERV9DSSogLSB0aGUgYmFjayByZWZlcmVuY2UgaXMgdXNpbmcgY2FzZS1pbnNlbnNpdGl2ZSBwaHJhc2UgbWF0Y2hpbmdcbiAgQktSX01PREVfVU06IDYwMSxcbiAgQktSX01PREVfUE06IDYwMixcbiAgQktSX01PREVfQ1M6IDYwMyxcbiAgQktSX01PREVfQ0k6IDYwNCxcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIkFMVCIsIkNBVCIsIlJFUCIsIlJOTSIsIlRSRyIsIlRCUyIsIlRMUyIsIlVEVCIsIkFORCIsIk5PVCIsIkJLUiIsIkJLQSIsIkJLTiIsIkFCRyIsIkFFTiIsIkFDVElWRSIsIk1BVENIIiwiRU1QVFkiLCJOT01BVENIIiwiU0VNX1BSRSIsIlNFTV9QT1NUIiwiU0VNX09LIiwiU0VNX1NLSVAiLCJBVFRSX04iLCJBVFRSX1IiLCJBVFRSX01SIiwiTE9PS0FST1VORF9OT05FIiwiTE9PS0FST1VORF9BSEVBRCIsIkxPT0tBUk9VTkRfQkVISU5EIiwiQktSX01PREVfVU0iLCJCS1JfTU9ERV9QTSIsIkJLUl9NT0RFX0NTIiwiQktSX01PREVfQ0kiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/identifiers.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/node-exports.js":
/*!*********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/node-exports.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This module serves to export all library objects and object constructors with the `require(\"apg-lib\")` statement.\n// For example, to create a new parser in your program,\n// ````\n// let apglib = require(\"../apg-lib/node-exports\");\n// let my-parser = new apglib.parser();\n// ````\n\nmodule.exports = {\n    ast: __webpack_require__(/*! ./ast */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/ast.js\"),\n    circular: __webpack_require__(/*! ./circular-buffer */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/circular-buffer.js\"),\n    ids: __webpack_require__(/*! ./identifiers */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/identifiers.js\"),\n    parser: __webpack_require__(/*! ./parser */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/parser.js\"),\n    stats: __webpack_require__(/*! ./stats */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/stats.js\"),\n    trace: __webpack_require__(/*! ./trace */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/trace.js\"),\n    utils: __webpack_require__(/*! ./utilities */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/utilities.js\"),\n    emitcss: __webpack_require__(/*! ./emitcss */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/emitcss.js\"),\n    style: __webpack_require__(/*! ./style */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/style.js\")\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FwZy1qc0A0LjIuMS9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctbGliL25vZGUtZXhwb3J0cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7O3VGQUd1RixHQUN2RixvSEFBb0g7QUFDcEgsdURBQXVEO0FBQ3ZELE9BQU87QUFDUCxtREFBbUQ7QUFDbkQsdUNBQXVDO0FBQ3ZDLE9BQU87O0FBQ1BBLE9BQU9DLE9BQU8sR0FBRztJQUNmQyxLQUFLQyxtQkFBT0EsQ0FBQztJQUNiQyxVQUFVRCxtQkFBT0EsQ0FBQztJQUNsQkUsS0FBS0YsbUJBQU9BLENBQUM7SUFDYkcsUUFBUUgsbUJBQU9BLENBQUM7SUFDaEJJLE9BQU9KLG1CQUFPQSxDQUFDO0lBQ2ZLLE9BQU9MLG1CQUFPQSxDQUFDO0lBQ2ZNLE9BQU9OLG1CQUFPQSxDQUFDO0lBQ2ZPLFNBQVNQLG1CQUFPQSxDQUFDO0lBQ2pCUSxPQUFPUixtQkFBT0EsQ0FBQztBQUNqQiIsInNvdXJjZXMiOlsid2VicGFjazovL0B0b2tlbnN0cmVhbS93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FwZy1qc0A0LjIuMS9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctbGliL25vZGUtZXhwb3J0cy5qcz9iY2FmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgIGNvcHlyaWdodDogQ29weXJpZ2h0IChjKSAyMDIxIExvd2VsbCBELiBUaG9tYXMsIGFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqICAgICBsaWNlbnNlOiBCU0QtMi1DbGF1c2UgKGh0dHBzOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTItQ2xhdXNlKVxuICogICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cbi8vIFRoaXMgbW9kdWxlIHNlcnZlcyB0byBleHBvcnQgYWxsIGxpYnJhcnkgb2JqZWN0cyBhbmQgb2JqZWN0IGNvbnN0cnVjdG9ycyB3aXRoIHRoZSBgcmVxdWlyZShcImFwZy1saWJcIilgIHN0YXRlbWVudC5cbi8vIEZvciBleGFtcGxlLCB0byBjcmVhdGUgYSBuZXcgcGFyc2VyIGluIHlvdXIgcHJvZ3JhbSxcbi8vIGBgYGBcbi8vIGxldCBhcGdsaWIgPSByZXF1aXJlKFwiLi4vYXBnLWxpYi9ub2RlLWV4cG9ydHNcIik7XG4vLyBsZXQgbXktcGFyc2VyID0gbmV3IGFwZ2xpYi5wYXJzZXIoKTtcbi8vIGBgYGBcbm1vZHVsZS5leHBvcnRzID0ge1xuICBhc3Q6IHJlcXVpcmUoJy4vYXN0JyksXG4gIGNpcmN1bGFyOiByZXF1aXJlKCcuL2NpcmN1bGFyLWJ1ZmZlcicpLFxuICBpZHM6IHJlcXVpcmUoJy4vaWRlbnRpZmllcnMnKSxcbiAgcGFyc2VyOiByZXF1aXJlKCcuL3BhcnNlcicpLFxuICBzdGF0czogcmVxdWlyZSgnLi9zdGF0cycpLFxuICB0cmFjZTogcmVxdWlyZSgnLi90cmFjZScpLFxuICB1dGlsczogcmVxdWlyZSgnLi91dGlsaXRpZXMnKSxcbiAgZW1pdGNzczogcmVxdWlyZSgnLi9lbWl0Y3NzJyksXG4gIHN0eWxlOiByZXF1aXJlKCcuL3N0eWxlJyksXG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJhc3QiLCJyZXF1aXJlIiwiY2lyY3VsYXIiLCJpZHMiLCJwYXJzZXIiLCJzdGF0cyIsInRyYWNlIiwidXRpbHMiLCJlbWl0Y3NzIiwic3R5bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/node-exports.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/parser.js":
/*!***************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/parser.js ***!
  \***************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* eslint-disable func-names */ /* eslint-disable no-restricted-syntax */ /* eslint-disable new-cap */ /* eslint-disable guard-for-in */ /*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This is the primary object of `apg-lib`. Calling its `parse()` member function\n// walks the parse tree of opcodes, matching phrases from the input string as it goes.\n// The working code for all of the operators, `ALT`, `CAT`, etc. is in this module.\n\nmodule.exports = function parser() {\n    const id = __webpack_require__(/*! ./identifiers */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/identifiers.js\");\n    const utils = __webpack_require__(/*! ./utilities */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/utilities.js\");\n    const thisFileName = \"parser.js: \";\n    const thisThis = this;\n    let opExecute;\n    this.ast = null;\n    this.stats = null;\n    this.trace = null;\n    this.callbacks = [];\n    let opcodes = null;\n    let chars = null;\n    let charsBegin;\n    let charsLength;\n    let charsEnd;\n    let lookAround;\n    let treeDepth = 0;\n    let maxTreeDepth = 0;\n    let nodeHits = 0;\n    let ruleCallbacks = null;\n    let udtCallbacks = null;\n    let rules = null;\n    let udts = null;\n    let syntaxData = null;\n    let maxMatched = 0;\n    let limitTreeDepth = Infinity;\n    let limitNodeHits = Infinity;\n    // Evaluates any given rule. This can be called from the syntax callback\n    // functions to evaluate any rule in the grammar's rule list. Great caution\n    // should be used. Use of this function will alter the language that the\n    // parser accepts.\n    const evaluateRule = function evaluateRule(ruleIndex, phraseIndex, sysData) {\n        const functionName = `${thisFileName}evaluateRule(): `;\n        if (ruleIndex >= rules.length) {\n            throw new Error(`${functionName}rule index: ${ruleIndex} out of range`);\n        }\n        if (phraseIndex >= charsEnd) {\n            throw new Error(`${functionName}phrase index: ${phraseIndex} out of range`);\n        }\n        const { length } = opcodes;\n        opcodes.push({\n            type: id.RNM,\n            index: ruleIndex\n        });\n        opExecute(length, phraseIndex, sysData);\n        opcodes.pop();\n    };\n    // Evaluates any given UDT. This can be called from the syntax callback\n    // functions to evaluate any UDT in the grammar's UDT list. Great caution\n    // should be used. Use of this function will alter the language that the\n    // parser accepts.\n    const evaluateUdt = function(udtIndex, phraseIndex, sysData) {\n        const functionName = `${thisFileName}evaluateUdt(): `;\n        if (udtIndex >= udts.length) {\n            throw new Error(`${functionName}udt index: ${udtIndex} out of range`);\n        }\n        if (phraseIndex >= charsEnd) {\n            throw new Error(`${functionName}phrase index: ${phraseIndex} out of range`);\n        }\n        const { length } = opcodes;\n        opcodes.push({\n            type: id.UDT,\n            empty: udts[udtIndex].empty,\n            index: udtIndex\n        });\n        opExecute(length, phraseIndex, sysData);\n        opcodes.pop();\n    };\n    /* Clears this object of any/all data that has been initialized or added to it. */ /* Called by parse() on initialization, allowing this object to be re-used for multiple parsing calls. */ const clear = function() {\n        treeDepth = 0;\n        maxTreeDepth = 0;\n        nodeHits = 0;\n        maxMatched = 0;\n        lookAround = [\n            {\n                lookAround: id.LOOKAROUND_NONE,\n                anchor: 0,\n                charsEnd: 0,\n                charsLength: 0\n            }\n        ];\n        rules = null;\n        udts = null;\n        chars = null;\n        charsBegin = 0;\n        charsLength = 0;\n        charsEnd = 0;\n        ruleCallbacks = null;\n        udtCallbacks = null;\n        syntaxData = null;\n        opcodes = null;\n    };\n    /* object for maintaining a stack of back reference frames */ const backRef = function() {\n        const stack = [];\n        const init = function() {\n            const obj = {};\n            rules.forEach((rule)=>{\n                if (rule.isBkr) {\n                    obj[rule.lower] = null;\n                }\n            });\n            if (udts.length > 0) {\n                udts.forEach((udt)=>{\n                    if (udt.isBkr) {\n                        obj[udt.lower] = null;\n                    }\n                });\n            }\n            stack.push(obj);\n        };\n        const copy = function() {\n            const top = stack[stack.length - 1];\n            const obj = {};\n            /* // eslint-disable-next-line no-restricted-syntax */ for(const name in top){\n                obj[name] = top[name];\n            }\n            return obj;\n        };\n        this.push = function push() {\n            stack.push(copy());\n        };\n        this.pop = function pop(lengthArg) {\n            let length = lengthArg;\n            if (!length) {\n                length = stack.length - 1;\n            }\n            if (length < 1 || length > stack.length) {\n                throw new Error(`${thisFileName}backRef.pop(): bad length: ${length}`);\n            }\n            stack.length = length;\n            return stack[stack.length - 1];\n        };\n        this.length = function length() {\n            return stack.length;\n        };\n        this.savePhrase = function savePhrase(name, index, length) {\n            stack[stack.length - 1][name] = {\n                phraseIndex: index,\n                phraseLength: length\n            };\n        };\n        this.getPhrase = function(name) {\n            return stack[stack.length - 1][name];\n        };\n        /* constructor */ init();\n    };\n    // The system data structure that relays system information to and from the rule and UDT callback functions.\n    // - *state* - the state of the parser, ACTIVE, MATCH, EMPTY or NOMATCH (see the `identifiers` object in\n    // [`apg-lib`](https://github.com/ldthomas/apg-js2-lib))\n    // - *phraseLength* - the number of characters matched if the state is MATCHED or EMPTY\n    // - *lookaround* - the top of the stack holds the current look around state,\n    // LOOKAROUND_NONE, LOOKAROUND_AHEAD or LOOKAROUND_BEHIND,\n    // - *uFrame* - the \"universal\" back reference frame.\n    // Holds the last matched phrase for each of the back referenced rules and UDTs.\n    // - *pFrame* - the stack of \"parent\" back reference frames.\n    // Holds the matched phrase from the parent frame of each back referenced rules and UDTs.\n    // - *evaluateRule* - a reference to this object's `evaluateRule()` function.\n    // Can be called from a callback function (use with extreme caution!)\n    // - *evaluateUdt* - a reference to this object's `evaluateUdt()` function.\n    // Can be called from a callback function (use with extreme caution!)\n    const systemData = function systemData() {\n        const thisData = this;\n        this.state = id.ACTIVE;\n        this.phraseLength = 0;\n        this.ruleIndex = 0;\n        this.udtIndex = 0;\n        this.lookAround = lookAround[lookAround.length - 1];\n        this.uFrame = new backRef();\n        this.pFrame = new backRef();\n        this.evaluateRule = evaluateRule;\n        this.evaluateUdt = evaluateUdt;\n        /* refresh the parser state for the next operation */ this.refresh = function refresh() {\n            thisData.state = id.ACTIVE;\n            thisData.phraseLength = 0;\n            thisData.lookAround = lookAround[lookAround.length - 1];\n        };\n    };\n    /* some look around helper functions */ const lookAroundValue = function lookAroundValue() {\n        return lookAround[lookAround.length - 1];\n    };\n    /* return true if parser is in look around (ahead or behind) state */ const inLookAround = function inLookAround() {\n        return lookAround.length > 1;\n    };\n    /* return true if parser is in look behind state */ const inLookBehind = function() {\n        return lookAround[lookAround.length - 1].lookAround === id.LOOKAROUND_BEHIND;\n    };\n    /* called by parse() to initialize the AST object, if one has been defined */ const initializeAst = function() {\n        const functionName = `${thisFileName}initializeAst(): `;\n        const TRUE = true;\n        while(TRUE){\n            if (thisThis.ast === undefined) {\n                thisThis.ast = null;\n                break;\n            }\n            if (thisThis.ast === null) {\n                break;\n            }\n            if (thisThis.ast.astObject !== \"astObject\") {\n                throw new Error(`${functionName}ast object not recognized`);\n            }\n            break;\n        }\n        if (thisThis.ast !== null) {\n            thisThis.ast.init(rules, udts, chars);\n        }\n    };\n    /* called by parse() to initialize the trace object, if one has been defined */ const initializeTrace = function() {\n        const functionName = `${thisFileName}initializeTrace(): `;\n        const TRUE = true;\n        while(TRUE){\n            if (thisThis.trace === undefined) {\n                thisThis.trace = null;\n                break;\n            }\n            if (thisThis.trace === null) {\n                break;\n            }\n            if (thisThis.trace.traceObject !== \"traceObject\") {\n                throw new Error(`${functionName}trace object not recognized`);\n            }\n            break;\n        }\n        if (thisThis.trace !== null) {\n            thisThis.trace.init(rules, udts, chars);\n        }\n    };\n    /* called by parse() to initialize the statistics object, if one has been defined */ const initializeStats = function() {\n        const functionName = `${thisFileName}initializeStats(): `;\n        const TRUE = true;\n        while(TRUE){\n            if (thisThis.stats === undefined) {\n                thisThis.stats = null;\n                break;\n            }\n            if (thisThis.stats === null) {\n                break;\n            }\n            if (thisThis.stats.statsObject !== \"statsObject\") {\n                throw new Error(`${functionName}stats object not recognized`);\n            }\n            break;\n        }\n        if (thisThis.stats !== null) {\n            thisThis.stats.init(rules, udts);\n        }\n    };\n    /* called by parse() to initialize the rules & udts from the grammar object */ /* (the grammar object generated previously by apg) */ const initializeGrammar = function(grammar) {\n        const functionName = `${thisFileName}initializeGrammar(): `;\n        if (!grammar) {\n            throw new Error(`${functionName}grammar object undefined`);\n        }\n        if (grammar.grammarObject !== \"grammarObject\") {\n            throw new Error(`${functionName}bad grammar object`);\n        }\n        rules = grammar.rules;\n        udts = grammar.udts;\n    };\n    /* called by parse() to initialize the start rule */ const initializeStartRule = function(startRule) {\n        const functionName = `${thisFileName}initializeStartRule(): `;\n        let start = null;\n        if (typeof startRule === \"number\") {\n            if (startRule >= rules.length) {\n                throw new Error(`${functionName}start rule index too large: max: ${rules.length}: index: ${startRule}`);\n            }\n            start = startRule;\n        } else if (typeof startRule === \"string\") {\n            const lower = startRule.toLowerCase();\n            for(let i = 0; i < rules.length; i += 1){\n                if (lower === rules[i].lower) {\n                    start = rules[i].index;\n                    break;\n                }\n            }\n            if (start === null) {\n                throw new Error(`${functionName}start rule name '${startRule}' not recognized`);\n            }\n        } else {\n            throw new Error(`${functionName}type of start rule '${typeof startRule}' not recognized`);\n        }\n        return start;\n    };\n    /* called by parse() to initialize the array of characters codes representing the input string */ const initializeInputChars = function initializeInputChars(inputArg, begArg, lenArg) {\n        const functionName = `${thisFileName}initializeInputChars(): `;\n        /* varify and normalize input */ let input = inputArg;\n        let beg = begArg;\n        let len = lenArg;\n        if (input === undefined) {\n            throw new Error(`${functionName}input string is undefined`);\n        }\n        if (input === null) {\n            throw new Error(`${functionName}input string is null`);\n        }\n        if (typeof input === \"string\") {\n            input = utils.stringToChars(input);\n        } else if (!Array.isArray(input)) {\n            throw new Error(`${functionName}input string is not a string or array`);\n        }\n        if (input.length > 0) {\n            if (typeof input[0] !== \"number\") {\n                throw new Error(`${functionName}input string not an array of integers`);\n            }\n        }\n        /* verify and normalize beginning index */ if (typeof beg !== \"number\") {\n            beg = 0;\n        } else {\n            beg = Math.floor(beg);\n            if (beg < 0 || beg > input.length) {\n                throw new Error(`${functionName}input beginning index out of range: ${beg}`);\n            }\n        }\n        /* verify and normalize input length */ if (typeof len !== \"number\") {\n            len = input.length - beg;\n        } else {\n            len = Math.floor(len);\n            if (len < 0 || len > input.length - beg) {\n                throw new Error(`${functionName}input length out of range: ${len}`);\n            }\n        }\n        chars = input;\n        charsBegin = beg;\n        charsLength = len;\n        charsEnd = charsBegin + charsLength;\n    };\n    /* called by parse() to initialize the user-written, syntax callback functions, if any */ const initializeCallbacks = function() {\n        const functionName = `${thisFileName}initializeCallbacks(): `;\n        let i;\n        ruleCallbacks = [];\n        udtCallbacks = [];\n        for(i = 0; i < rules.length; i += 1){\n            ruleCallbacks[i] = null;\n        }\n        for(i = 0; i < udts.length; i += 1){\n            udtCallbacks[i] = null;\n        }\n        let func;\n        const list = [];\n        for(i = 0; i < rules.length; i += 1){\n            list.push(rules[i].lower);\n        }\n        for(i = 0; i < udts.length; i += 1){\n            list.push(udts[i].lower);\n        }\n        for(const index in thisThis.callbacks){\n            i = list.indexOf(index.toLowerCase());\n            if (i < 0) {\n                throw new Error(`${functionName}syntax callback '${index}' not a rule or udt name`);\n            }\n            func = thisThis.callbacks[index];\n            if (!func) {\n                func = null;\n            }\n            if (typeof func === \"function\" || func === null) {\n                if (i < rules.length) {\n                    ruleCallbacks[i] = func;\n                } else {\n                    udtCallbacks[i - rules.length] = func;\n                }\n            } else {\n                throw new Error(`${functionName}syntax callback[${index}] must be function reference or 'false' (false/null/undefined/etc.)`);\n            }\n        }\n        /* make sure all udts have been defined - the parser can't work without them */ for(i = 0; i < udts.length; i += 1){\n            if (udtCallbacks[i] === null) {\n                throw new Error(`${functionName}all UDT callbacks must be defined. UDT callback[${udts[i].lower}] not a function reference`);\n            }\n        }\n    };\n    // Set the maximum parse tree depth allowed. The default is `Infinity`.\n    // A limit is not normally needed, but can be used to protect against an\n    // exponentual or \"catastrophically backtracking\" grammar.\n    // <ul>\n    // <li>\n    // depth - max allowed parse tree depth. An exception is thrown if exceeded.\n    // </li>\n    // </ul>\n    this.setMaxTreeDepth = function(depth) {\n        if (typeof depth !== \"number\") {\n            throw new Error(`parser: max tree depth must be integer > 0: ${depth}`);\n        }\n        limitTreeDepth = Math.floor(depth);\n        if (limitTreeDepth <= 0) {\n            throw new Error(`parser: max tree depth must be integer > 0: ${depth}`);\n        }\n    };\n    // Set the maximum number of node hits (parser unit steps or opcode function calls) allowed.\n    // The default is `Infinity`.\n    // A limit is not normally needed, but can be used to protect against an\n    // exponentual or \"catastrophically backtracking\" grammar.\n    // <ul>\n    // <li>\n    // hits - maximum number of node hits or parser unit steps allowed.\n    // An exception thrown if exceeded.\n    // </li>\n    // </ul>\n    this.setMaxNodeHits = function(hits) {\n        if (typeof hits !== \"number\") {\n            throw new Error(`parser: max node hits must be integer > 0: ${hits}`);\n        }\n        limitNodeHits = Math.floor(hits);\n        if (limitNodeHits <= 0) {\n            throw new Error(`parser: max node hits must be integer > 0: ${hits}`);\n        }\n    };\n    /* the main parser function */ const privateParse = function(grammar, startRuleArg, callbackData) {\n        let success;\n        const functionName = `${thisFileName}parse(): `;\n        initializeGrammar(grammar);\n        const startRule = initializeStartRule(startRuleArg);\n        initializeCallbacks();\n        initializeTrace();\n        initializeStats();\n        initializeAst();\n        const sysData = new systemData();\n        if (!(callbackData === undefined || callbackData === null)) {\n            syntaxData = callbackData;\n        }\n        /* create a dummy opcode for the start rule */ opcodes = [\n            {\n                type: id.RNM,\n                index: startRule\n            }\n        ];\n        /* execute the start rule */ opExecute(0, charsBegin, sysData);\n        opcodes = null;\n        /* test and return the sysData */ switch(sysData.state){\n            case id.ACTIVE:\n                throw new Error(`${functionName}final state should never be 'ACTIVE'`);\n            case id.NOMATCH:\n                success = false;\n                break;\n            case id.EMPTY:\n            case id.MATCH:\n                if (sysData.phraseLength === charsLength) {\n                    success = true;\n                } else {\n                    success = false;\n                }\n                break;\n            default:\n                throw new Error(\"unrecognized state\");\n        }\n        return {\n            success,\n            state: sysData.state,\n            length: charsLength,\n            matched: sysData.phraseLength,\n            maxMatched,\n            maxTreeDepth,\n            nodeHits,\n            inputLength: chars.length,\n            subBegin: charsBegin,\n            subEnd: charsEnd,\n            subLength: charsLength\n        };\n    };\n    // This form allows parsing of a sub-string of the full input string.\n    // <ul>\n    // <li>*inputIndex* - index of the first character in the sub-string</li>\n    // <li>*inputLength* - length of the sub-string</li>\n    // </ul>\n    // All other parameters as for the above function `parse()`.\n    this.parseSubstring = function parseSubstring(grammar, startRule, inputChars, inputIndex, inputLength, callbackData) {\n        clear();\n        initializeInputChars(inputChars, inputIndex, inputLength);\n        return privateParse(grammar, startRule, callbackData);\n    };\n    // This is the main function, called to parse an input string.\n    // <ul>\n    // <li>*grammar* - an instantiated grammar object - the output of `apg` for a\n    // specific SABNF grammar</li>\n    // <li>*startRule* - the rule name or rule index to be used as the root of the\n    // parse tree. This is usually the first rule, index = 0, of the grammar\n    // but can be any rule defined in the above grammar object.</li>\n    // <li>*inputChars* - the input string. Can be a string or an array of integer character codes representing the\n    // string.</li>\n    // <li>*callbackData* - user-defined data object to be passed to the user's\n    // callback functions.\n    // This is not used by the parser in any way, merely passed on to the user.\n    // May be `null` or omitted.</li>\n    // </ul>\n    this.parse = function parse(grammar, startRule, inputChars, callbackData) {\n        clear();\n        initializeInputChars(inputChars, 0, inputChars.length);\n        return privateParse(grammar, startRule, callbackData);\n    };\n    // The `ALT` operator.<br>\n    // Executes its child nodes, from left to right, until it finds a match.\n    // Fails if *all* of its child nodes fail.\n    const opALT = function(opIndex, phraseIndex, sysData) {\n        const op = opcodes[opIndex];\n        for(let i = 0; i < op.children.length; i += 1){\n            opExecute(op.children[i], phraseIndex, sysData);\n            if (sysData.state !== id.NOMATCH) {\n                break;\n            }\n        }\n    };\n    // The `CAT` operator.<br>\n    // Executes all of its child nodes, from left to right,\n    // concatenating the matched phrases.\n    // Fails if *any* child nodes fail.\n    const opCAT = function(opIndex, phraseIndex, sysData) {\n        let success;\n        let astLength;\n        let catCharIndex;\n        let catPhrase;\n        const op = opcodes[opIndex];\n        const ulen = sysData.uFrame.length();\n        const plen = sysData.pFrame.length();\n        if (thisThis.ast) {\n            astLength = thisThis.ast.getLength();\n        }\n        success = true;\n        catCharIndex = phraseIndex;\n        catPhrase = 0;\n        for(let i = 0; i < op.children.length; i += 1){\n            opExecute(op.children[i], catCharIndex, sysData);\n            if (sysData.state === id.NOMATCH) {\n                success = false;\n                break;\n            } else {\n                catCharIndex += sysData.phraseLength;\n                catPhrase += sysData.phraseLength;\n            }\n        }\n        if (success) {\n            sysData.state = catPhrase === 0 ? id.EMPTY : id.MATCH;\n            sysData.phraseLength = catPhrase;\n        } else {\n            sysData.state = id.NOMATCH;\n            sysData.phraseLength = 0;\n            /* reset the back referencing frames on failure */ sysData.uFrame.pop(ulen);\n            sysData.pFrame.pop(plen);\n            if (thisThis.ast) {\n                thisThis.ast.setLength(astLength);\n            }\n        }\n    };\n    // The `REP` operator.<br>\n    // Repeatedly executes its single child node,\n    // concatenating each of the matched phrases found.\n    // The number of repetitions executed and its final sysData depends\n    // on its `min` & `max` repetition values.\n    const opREP = function(opIndex, phraseIndex, sysData) {\n        let astLength;\n        let repCharIndex;\n        let repPhrase;\n        let repCount;\n        const op = opcodes[opIndex];\n        if (op.max === 0) {\n            // this is an empty-string acceptor\n            // deprecated: use the TLS empty string operator, \"\", instead\n            sysData.state = id.EMPTY;\n            sysData.phraseLength = 0;\n            return;\n        }\n        repCharIndex = phraseIndex;\n        repPhrase = 0;\n        repCount = 0;\n        const ulen = sysData.uFrame.length();\n        const plen = sysData.pFrame.length();\n        if (thisThis.ast) {\n            astLength = thisThis.ast.getLength();\n        }\n        const TRUE = true;\n        while(TRUE){\n            if (repCharIndex >= charsEnd) {\n                break;\n            }\n            opExecute(opIndex + 1, repCharIndex, sysData);\n            if (sysData.state === id.NOMATCH) {\n                break;\n            }\n            if (sysData.state === id.EMPTY) {\n                break;\n            }\n            repCount += 1;\n            repPhrase += sysData.phraseLength;\n            repCharIndex += sysData.phraseLength;\n            if (repCount === op.max) {\n                break;\n            }\n        }\n        /* evaluate the match count according to the min, max values */ if (sysData.state === id.EMPTY) {\n            sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;\n            sysData.phraseLength = repPhrase;\n        } else if (repCount >= op.min) {\n            sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;\n            sysData.phraseLength = repPhrase;\n        } else {\n            sysData.state = id.NOMATCH;\n            sysData.phraseLength = 0;\n            /* reset the back referencing frames on failure */ sysData.uFrame.pop(ulen);\n            sysData.pFrame.pop(plen);\n            if (thisThis.ast) {\n                thisThis.ast.setLength(astLength);\n            }\n        }\n    };\n    // Validate the callback function's returned sysData values.\n    // It's the user's responsibility to get them right\n    // but `RNM` fails if not.\n    const validateRnmCallbackResult = function(rule, sysData, charsLeft, down) {\n        if (sysData.phraseLength > charsLeft) {\n            let str = `${thisFileName}opRNM(${rule.name}): callback function error: `;\n            str += `sysData.phraseLength: ${sysData.phraseLength}`;\n            str += ` must be <= remaining chars: ${charsLeft}`;\n            throw new Error(str);\n        }\n        switch(sysData.state){\n            case id.ACTIVE:\n                if (down !== true) {\n                    throw new Error(`${thisFileName}opRNM(${rule.name}): callback function return error. ACTIVE state not allowed.`);\n                }\n                break;\n            case id.EMPTY:\n                sysData.phraseLength = 0;\n                break;\n            case id.MATCH:\n                if (sysData.phraseLength === 0) {\n                    sysData.state = id.EMPTY;\n                }\n                break;\n            case id.NOMATCH:\n                sysData.phraseLength = 0;\n                break;\n            default:\n                throw new Error(`${thisFileName}opRNM(${rule.name}): callback function return error. Unrecognized return state: ${sysData.state}`);\n        }\n    };\n    // The `RNM` operator.<br>\n    // This operator will acts as a root node for a parse tree branch below and\n    // returns the matched phrase to its parent.\n    // However, its larger responsibility is handling user-defined callback functions, back references and `AST` nodes.\n    // Note that the `AST` is a separate object, but `RNM` calls its functions to create its nodes.\n    // See [`ast.js`](./ast.html) for usage.\n    const opRNM = function(opIndex, phraseIndex, sysData) {\n        let astLength;\n        let astDefined;\n        let savedOpcodes;\n        let ulen;\n        let plen;\n        let saveFrame;\n        const op = opcodes[opIndex];\n        const rule = rules[op.index];\n        const callback = ruleCallbacks[rule.index];\n        const notLookAround = !inLookAround();\n        /* ignore AST and back references in lookaround */ if (notLookAround) {\n            /* begin AST and back references */ astDefined = thisThis.ast && thisThis.ast.ruleDefined(op.index);\n            if (astDefined) {\n                astLength = thisThis.ast.getLength();\n                thisThis.ast.down(op.index, rules[op.index].name);\n            }\n            ulen = sysData.uFrame.length();\n            plen = sysData.pFrame.length();\n            sysData.uFrame.push();\n            sysData.pFrame.push();\n            saveFrame = sysData.pFrame;\n            sysData.pFrame = new backRef();\n        }\n        if (callback === null) {\n            /* no callback - just execute the rule */ savedOpcodes = opcodes;\n            opcodes = rule.opcodes;\n            opExecute(0, phraseIndex, sysData);\n            opcodes = savedOpcodes;\n        } else {\n            /* call user's callback */ const charsLeft = charsEnd - phraseIndex;\n            sysData.ruleIndex = rule.index;\n            callback(sysData, chars, phraseIndex, syntaxData);\n            validateRnmCallbackResult(rule, sysData, charsLeft, true);\n            if (sysData.state === id.ACTIVE) {\n                savedOpcodes = opcodes;\n                opcodes = rule.opcodes;\n                opExecute(0, phraseIndex, sysData);\n                opcodes = savedOpcodes;\n                sysData.ruleIndex = rule.index;\n                callback(sysData, chars, phraseIndex, syntaxData);\n                validateRnmCallbackResult(rule, sysData, charsLeft, false);\n            } /* implied else clause: just accept the callback sysData - RNM acting as UDT */ \n        }\n        if (notLookAround) {\n            /* end AST */ if (astDefined) {\n                if (sysData.state === id.NOMATCH) {\n                    thisThis.ast.setLength(astLength);\n                } else {\n                    thisThis.ast.up(op.index, rule.name, phraseIndex, sysData.phraseLength);\n                }\n            }\n            /* end back reference */ sysData.pFrame = saveFrame;\n            if (sysData.state === id.NOMATCH) {\n                sysData.uFrame.pop(ulen);\n                sysData.pFrame.pop(plen);\n            } else if (rule.isBkr) {\n                /* save phrase on both the parent and universal frames */ /* BKR operator will decide which to use later */ sysData.pFrame.savePhrase(rule.lower, phraseIndex, sysData.phraseLength);\n                sysData.uFrame.savePhrase(rule.lower, phraseIndex, sysData.phraseLength);\n            }\n        }\n    };\n    // Validate the callback function's returned sysData values.\n    // It's the user's responsibility to get it right but `UDT` fails if not.\n    const validateUdtCallbackResult = function(udt, sysData, charsLeft) {\n        if (sysData.phraseLength > charsLeft) {\n            let str = `${thisFileName}opUDT(${udt.name}): callback function error: `;\n            str += `sysData.phraseLength: ${sysData.phraseLength}`;\n            str += ` must be <= remaining chars: ${charsLeft}`;\n            throw new Error(str);\n        }\n        switch(sysData.state){\n            case id.ACTIVE:\n                throw new Error(`${thisFileName}opUDT(${udt.name}): callback function return error. ACTIVE state not allowed.`);\n            case id.EMPTY:\n                if (udt.empty === false) {\n                    throw new Error(`${thisFileName}opUDT(${udt.name}): callback function return error. May not return EMPTY.`);\n                } else {\n                    sysData.phraseLength = 0;\n                }\n                break;\n            case id.MATCH:\n                if (sysData.phraseLength === 0) {\n                    if (udt.empty === false) {\n                        throw new Error(`${thisFileName}opUDT(${udt.name}): callback function return error. May not return EMPTY.`);\n                    } else {\n                        sysData.state = id.EMPTY;\n                    }\n                }\n                break;\n            case id.NOMATCH:\n                sysData.phraseLength = 0;\n                break;\n            default:\n                throw new Error(`${thisFileName}opUDT(${udt.name}): callback function return error. Unrecognized return state: ${sysData.state}`);\n        }\n    };\n    // The `UDT` operator.<br>\n    // Simply calls the user's callback function, but operates like `RNM` with regard to the `AST`\n    // and back referencing.\n    // There is some ambiguity here. `UDT`s act as terminals for phrase recognition but as named rules\n    // for `AST` nodes and back referencing.\n    // See [`ast.js`](./ast.html) for usage.\n    const opUDT = function(opIndex, phraseIndex, sysData) {\n        let astLength;\n        let astIndex;\n        let astDefined;\n        let ulen;\n        let plen;\n        let saveFrame;\n        const op = opcodes[opIndex];\n        const udt = udts[op.index];\n        sysData.UdtIndex = udt.index;\n        const notLookAround = !inLookAround();\n        /* ignore AST and back references in lookaround */ if (notLookAround) {\n            /* begin AST and back reference */ astDefined = thisThis.ast && thisThis.ast.udtDefined(op.index);\n            if (astDefined) {\n                astIndex = rules.length + op.index;\n                astLength = thisThis.ast.getLength();\n                thisThis.ast.down(astIndex, udt.name);\n            }\n            /* NOTE: push and pop of the back reference frame is normally not necessary */ /* only in the case that the UDT calls evaluateRule() or evaluateUdt() */ ulen = sysData.uFrame.length();\n            plen = sysData.pFrame.length();\n            sysData.uFrame.push();\n            sysData.pFrame.push();\n            saveFrame = sysData.pFrame;\n            sysData.pFrame = new backRef();\n        }\n        /* call the UDT */ const charsLeft = charsEnd - phraseIndex;\n        udtCallbacks[op.index](sysData, chars, phraseIndex, syntaxData);\n        validateUdtCallbackResult(udt, sysData, charsLeft);\n        if (notLookAround) {\n            /* end AST */ if (astDefined) {\n                if (sysData.state === id.NOMATCH) {\n                    thisThis.ast.setLength(astLength);\n                } else {\n                    thisThis.ast.up(astIndex, udt.name, phraseIndex, sysData.phraseLength);\n                }\n            }\n            /* end back reference */ sysData.pFrame = saveFrame;\n            if (sysData.state === id.NOMATCH) {\n                sysData.uFrame.pop(ulen);\n                sysData.pFrame.pop(plen);\n            } else if (udt.isBkr) {\n                /* save phrase on both the parent and universal frames */ /* BKR operator will decide which to use later */ sysData.pFrame.savePhrase(udt.lower, phraseIndex, sysData.phraseLength);\n                sysData.uFrame.savePhrase(udt.lower, phraseIndex, sysData.phraseLength);\n            }\n        }\n    };\n    // The `AND` operator.<br>\n    // This is the positive `look ahead` operator.\n    // Executes its single child node, returning the EMPTY state\n    // if it succeedsand NOMATCH if it fails.\n    // *Always* backtracks on any matched phrase and returns EMPTY on success.\n    const opAND = function(opIndex, phraseIndex, sysData) {\n        lookAround.push({\n            lookAround: id.LOOKAROUND_AHEAD,\n            anchor: phraseIndex,\n            charsEnd,\n            charsLength\n        });\n        charsEnd = chars.length;\n        charsLength = chars.length - charsBegin;\n        opExecute(opIndex + 1, phraseIndex, sysData);\n        const pop = lookAround.pop();\n        charsEnd = pop.charsEnd;\n        charsLength = pop.charsLength;\n        sysData.phraseLength = 0;\n        switch(sysData.state){\n            case id.EMPTY:\n                sysData.state = id.EMPTY;\n                break;\n            case id.MATCH:\n                sysData.state = id.EMPTY;\n                break;\n            case id.NOMATCH:\n                sysData.state = id.NOMATCH;\n                break;\n            default:\n                throw new Error(`opAND: invalid state ${sysData.state}`);\n        }\n    };\n    // The `NOT` operator.<br>\n    // This is the negative `look ahead` operator.\n    // Executes its single child node, returning the EMPTY state\n    // if it *fails* and NOMATCH if it succeeds.\n    // *Always* backtracks on any matched phrase and returns EMPTY\n    // on success (failure of its child node).\n    const opNOT = function(opIndex, phraseIndex, sysData) {\n        lookAround.push({\n            lookAround: id.LOOKAROUND_AHEAD,\n            anchor: phraseIndex,\n            charsEnd,\n            charsLength\n        });\n        charsEnd = chars.length;\n        charsLength = chars.length - charsBegin;\n        opExecute(opIndex + 1, phraseIndex, sysData);\n        const pop = lookAround.pop();\n        charsEnd = pop.charsEnd;\n        charsLength = pop.charsLength;\n        sysData.phraseLength = 0;\n        switch(sysData.state){\n            case id.EMPTY:\n            case id.MATCH:\n                sysData.state = id.NOMATCH;\n                break;\n            case id.NOMATCH:\n                sysData.state = id.EMPTY;\n                break;\n            default:\n                throw new Error(`opNOT: invalid state ${sysData.state}`);\n        }\n    };\n    // The `TRG` operator.<br>\n    // Succeeds if the single first character of the phrase is\n    // within the `min - max` range.\n    const opTRG = function(opIndex, phraseIndex, sysData) {\n        const op = opcodes[opIndex];\n        sysData.state = id.NOMATCH;\n        if (phraseIndex < charsEnd) {\n            if (op.min <= chars[phraseIndex] && chars[phraseIndex] <= op.max) {\n                sysData.state = id.MATCH;\n                sysData.phraseLength = 1;\n            }\n        }\n    };\n    // The `TBS` operator.<br>\n    // Matches its pre-defined phrase against the input string.\n    // All characters must match exactly.\n    // Case-sensitive literal strings (`'string'` & `%s\"string\"`) are translated to `TBS`\n    // operators by `apg`.\n    // Phrase length of zero is not allowed.\n    // Empty phrases can only be defined with `TLS` operators.\n    const opTBS = function(opIndex, phraseIndex, sysData) {\n        let i;\n        const op = opcodes[opIndex];\n        const len = op.string.length;\n        sysData.state = id.NOMATCH;\n        if (phraseIndex + len <= charsEnd) {\n            for(i = 0; i < len; i += 1){\n                if (chars[phraseIndex + i] !== op.string[i]) {\n                    return;\n                }\n            }\n            sysData.state = id.MATCH;\n            sysData.phraseLength = len;\n        } /* implied else NOMATCH */ \n    };\n    // The `TLS` operator.<br>\n    // Matches its pre-defined phrase against the input string.\n    // A case-insensitive match is attempted for ASCII alphbetical characters.\n    // `TLS` is the only operator that explicitly allows empty phrases.\n    // `apg` will fail for empty `TBS`, case-sensitive strings (`''`) or\n    // zero repetitions (`0*0RuleName` or `0RuleName`).\n    const opTLS = function(opIndex, phraseIndex, sysData) {\n        let i;\n        let code;\n        const op = opcodes[opIndex];\n        sysData.state = id.NOMATCH;\n        const len = op.string.length;\n        if (len === 0) {\n            /* EMPTY match allowed for TLS */ sysData.state = id.EMPTY;\n            return;\n        }\n        if (phraseIndex + len <= charsEnd) {\n            for(i = 0; i < len; i += 1){\n                code = chars[phraseIndex + i];\n                if (code >= 65 && code <= 90) {\n                    code += 32;\n                }\n                if (code !== op.string[i]) {\n                    return;\n                }\n            }\n            sysData.state = id.MATCH;\n            sysData.phraseLength = len;\n        } /* implied else NOMATCH */ \n    };\n    // The `ABG` operator.<br>\n    // This is an \"anchor\" for the beginning of the string, similar to the familiar regex `^` anchor.\n    // An anchor matches a position rather than a phrase.\n    // Returns EMPTY if `phraseIndex` is 0, NOMATCH otherwise.\n    const opABG = function(opIndex, phraseIndex, sysData) {\n        sysData.state = id.NOMATCH;\n        sysData.phraseLength = 0;\n        sysData.state = phraseIndex === 0 ? id.EMPTY : id.NOMATCH;\n    };\n    // The `AEN` operator.<br>\n    // This is an \"anchor\" for the end of the string, similar to the familiar regex `$` anchor.\n    // An anchor matches a position rather than a phrase.\n    // Returns EMPTY if `phraseIndex` equals the input string length, NOMATCH otherwise.\n    const opAEN = function(opIndex, phraseIndex, sysData) {\n        sysData.state = id.NOMATCH;\n        sysData.phraseLength = 0;\n        sysData.state = phraseIndex === chars.length ? id.EMPTY : id.NOMATCH;\n    };\n    // The `BKR` operator.<br>\n    // The back reference operator.\n    // Matches the last matched phrase of the named rule or UDT against the input string.\n    // For ASCII alphbetical characters the match may be case sensitive (`%s`) or insensitive (`%i`),\n    // depending on the back reference definition.\n    // For `universal` mode (`%u`) matches the last phrase found anywhere in the grammar.\n    // For `parent frame` mode (`%p`) matches the last phrase found in the parent rule only.\n    const opBKR = function(opIndex, phraseIndex, sysData) {\n        let i;\n        let code;\n        let lmcode;\n        let lower;\n        const op = opcodes[opIndex];\n        sysData.state = id.NOMATCH;\n        if (op.index < rules.length) {\n            lower = rules[op.index].lower;\n        } else {\n            lower = udts[op.index - rules.length].lower;\n        }\n        const frame = op.bkrMode === id.BKR_MODE_PM ? sysData.pFrame.getPhrase(lower) : sysData.uFrame.getPhrase(lower);\n        const insensitive = op.bkrCase === id.BKR_MODE_CI;\n        if (frame === null) {\n            return;\n        }\n        const lmIndex = frame.phraseIndex;\n        const len = frame.phraseLength;\n        if (len === 0) {\n            sysData.state = id.EMPTY;\n            return;\n        }\n        if (phraseIndex + len <= charsEnd) {\n            if (insensitive) {\n                /* case-insensitive match */ for(i = 0; i < len; i += 1){\n                    code = chars[phraseIndex + i];\n                    lmcode = chars[lmIndex + i];\n                    if (code >= 65 && code <= 90) {\n                        code += 32;\n                    }\n                    if (lmcode >= 65 && lmcode <= 90) {\n                        lmcode += 32;\n                    }\n                    if (code !== lmcode) {\n                        return;\n                    }\n                }\n                sysData.state = id.MATCH;\n                sysData.phraseLength = len;\n            } else {\n                /* case-sensitive match */ for(i = 0; i < len; i += 1){\n                    code = chars[phraseIndex + i];\n                    lmcode = chars[lmIndex + i];\n                    if (code !== lmcode) {\n                        return;\n                    }\n                }\n            }\n            sysData.state = id.MATCH;\n            sysData.phraseLength = len;\n        }\n    };\n    // The `BKA` operator.<br>\n    // This is the positive `look behind` operator.\n    // It's child node is parsed right-to-left.\n    // Returns the EMPTY state if a match is found, NOMATCH otherwise.\n    // Like the look ahead operators, it always backtracks to `phraseIndex`.\n    const opBKA = function(opIndex, phraseIndex, sysData) {\n        lookAround.push({\n            lookAround: id.LOOKAROUND_BEHIND,\n            anchor: phraseIndex\n        });\n        opExecute(opIndex + 1, phraseIndex, sysData);\n        lookAround.pop();\n        sysData.phraseLength = 0;\n        switch(sysData.state){\n            case id.EMPTY:\n                sysData.state = id.EMPTY;\n                break;\n            case id.MATCH:\n                sysData.state = id.EMPTY;\n                break;\n            case id.NOMATCH:\n                sysData.state = id.NOMATCH;\n                break;\n            default:\n                throw new Error(`opBKA: invalid state ${sysData.state}`);\n        }\n    };\n    // The `BKN` operator.<br>\n    // This is the negative `look behind` operator.\n    // It's child node is parsed right-to-left.\n    // Returns the EMPTY state if a match is *not* found, NOMATCH otherwise.\n    // Like the look ahead operators, it always backtracks to `phraseIndex`.\n    const opBKN = function(opIndex, phraseIndex, sysData) {\n        // let op;\n        // op = opcodes[opIndex];\n        lookAround.push({\n            lookAround: id.LOOKAROUND_BEHIND,\n            anchor: phraseIndex\n        });\n        opExecute(opIndex + 1, phraseIndex, sysData);\n        lookAround.pop();\n        sysData.phraseLength = 0;\n        switch(sysData.state){\n            case id.EMPTY:\n            case id.MATCH:\n                sysData.state = id.NOMATCH;\n                break;\n            case id.NOMATCH:\n                sysData.state = id.EMPTY;\n                break;\n            default:\n                throw new Error(`opBKN: invalid state ${sysData.state}`);\n        }\n    };\n    // The right-to-left `CAT` operator.<br>\n    // Called for `CAT` operators when in look behind mode.\n    // Calls its child nodes from right to left concatenating matched phrases right to left.\n    const opCATBehind = function(opIndex, phraseIndex, sysData) {\n        let success;\n        let astLength;\n        let catCharIndex;\n        let catMatched;\n        const op = opcodes[opIndex];\n        const ulen = sysData.uFrame.length();\n        const plen = sysData.pFrame.length();\n        if (thisThis.ast) {\n            astLength = thisThis.ast.getLength();\n        }\n        success = true;\n        catCharIndex = phraseIndex;\n        catMatched = 0;\n        // catPhrase = 0;\n        for(let i = op.children.length - 1; i >= 0; i -= 1){\n            opExecute(op.children[i], catCharIndex, sysData);\n            catCharIndex -= sysData.phraseLength;\n            catMatched += sysData.phraseLength;\n            // catPhrase += sysData.phraseLength;\n            if (sysData.state === id.NOMATCH) {\n                success = false;\n                break;\n            }\n        }\n        if (success) {\n            sysData.state = catMatched === 0 ? id.EMPTY : id.MATCH;\n            sysData.phraseLength = catMatched;\n        } else {\n            sysData.state = id.NOMATCH;\n            sysData.phraseLength = 0;\n            sysData.uFrame.pop(ulen);\n            sysData.pFrame.pop(plen);\n            if (thisThis.ast) {\n                thisThis.ast.setLength(astLength);\n            }\n        }\n    };\n    // The right-to-left `REP` operator.<br>\n    // Called for `REP` operators in look behind mode.\n    // Makes repeated calls to its child node, concatenating matched phrases right to left.\n    const opREPBehind = function(opIndex, phraseIndex, sysData) {\n        let astLength;\n        let repCharIndex;\n        let repPhrase;\n        let repCount;\n        const op = opcodes[opIndex];\n        repCharIndex = phraseIndex;\n        repPhrase = 0;\n        repCount = 0;\n        const ulen = sysData.uFrame.length();\n        const plen = sysData.pFrame.length();\n        if (thisThis.ast) {\n            astLength = thisThis.ast.getLength();\n        }\n        const TRUE = true;\n        while(TRUE){\n            if (repCharIndex <= 0) {\n                break;\n            }\n            opExecute(opIndex + 1, repCharIndex, sysData);\n            if (sysData.state === id.NOMATCH) {\n                break;\n            }\n            if (sysData.state === id.EMPTY) {\n                break;\n            }\n            repCount += 1;\n            repPhrase += sysData.phraseLength;\n            repCharIndex -= sysData.phraseLength;\n            if (repCount === op.max) {\n                break;\n            }\n        }\n        /* evaluate the match count according to the min, max values */ if (sysData.state === id.EMPTY) {\n            sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;\n            sysData.phraseLength = repPhrase;\n        } else if (repCount >= op.min) {\n            sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;\n            sysData.phraseLength = repPhrase;\n        } else {\n            sysData.state = id.NOMATCH;\n            sysData.phraseLength = 0;\n            sysData.uFrame.pop(ulen);\n            sysData.pFrame.pop(plen);\n            if (thisThis.ast) {\n                thisThis.ast.setLength(astLength);\n            }\n        }\n    };\n    // The right-to-left `TRG` operator.<br>\n    // Called for `TRG` operators in look behind mode.\n    // Matches a single character at `phraseIndex - 1` to the `min` - `max` range.\n    const opTRGBehind = function(opIndex, phraseIndex, sysData) {\n        const op = opcodes[opIndex];\n        sysData.state = id.NOMATCH;\n        sysData.phraseLength = 0;\n        if (phraseIndex > 0) {\n            const char = chars[phraseIndex - 1];\n            if (op.min <= char && char <= op.max) {\n                sysData.state = id.MATCH;\n                sysData.phraseLength = 1;\n            }\n        }\n    };\n    // The right-to-left `TBS` operator.<br>\n    // Called for `TBS` operators in look behind mode.\n    // Matches the `TBS` phrase to the left of `phraseIndex`.\n    const opTBSBehind = function(opIndex, phraseIndex, sysData) {\n        let i;\n        const op = opcodes[opIndex];\n        sysData.state = id.NOMATCH;\n        const len = op.string.length;\n        const beg = phraseIndex - len;\n        if (beg >= 0) {\n            for(i = 0; i < len; i += 1){\n                if (chars[beg + i] !== op.string[i]) {\n                    return;\n                }\n            }\n            sysData.state = id.MATCH;\n            sysData.phraseLength = len;\n        }\n    };\n    // The right-to-left `TLS` operator.<br>\n    // Called for `TLS` operators in look behind mode.\n    // Matches the `TLS` phrase to the left of `phraseIndex`.\n    const opTLSBehind = function(opIndex, phraseIndex, sysData) {\n        let char;\n        const op = opcodes[opIndex];\n        sysData.state = id.NOMATCH;\n        const len = op.string.length;\n        if (len === 0) {\n            /* EMPTY match allowed for TLS */ sysData.state = id.EMPTY;\n            return;\n        }\n        const beg = phraseIndex - len;\n        if (beg >= 0) {\n            for(let i = 0; i < len; i += 1){\n                char = chars[beg + i];\n                if (char >= 65 && char <= 90) {\n                    char += 32;\n                }\n                if (char !== op.string[i]) {\n                    return;\n                }\n            }\n            sysData.state = id.MATCH;\n            sysData.phraseLength = len;\n        }\n    };\n    // The right-to-left back reference operator.<br>\n    // Matches the back referenced phrase to the left of `phraseIndex`.\n    const opBKRBehind = function(opIndex, phraseIndex, sysData) {\n        let i;\n        let code;\n        let lmcode;\n        let lower;\n        const op = opcodes[opIndex];\n        /* NOMATCH default */ sysData.state = id.NOMATCH;\n        sysData.phraseLength = 0;\n        if (op.index < rules.length) {\n            lower = rules[op.index].lower;\n        } else {\n            lower = udts[op.index - rules.length].lower;\n        }\n        const frame = op.bkrMode === id.BKR_MODE_PM ? sysData.pFrame.getPhrase(lower) : sysData.uFrame.getPhrase(lower);\n        const insensitive = op.bkrCase === id.BKR_MODE_CI;\n        if (frame === null) {\n            return;\n        }\n        const lmIndex = frame.phraseIndex;\n        const len = frame.phraseLength;\n        if (len === 0) {\n            sysData.state = id.EMPTY;\n            sysData.phraseLength = 0;\n            return;\n        }\n        const beg = phraseIndex - len;\n        if (beg >= 0) {\n            if (insensitive) {\n                /* case-insensitive match */ for(i = 0; i < len; i += 1){\n                    code = chars[beg + i];\n                    lmcode = chars[lmIndex + i];\n                    if (code >= 65 && code <= 90) {\n                        code += 32;\n                    }\n                    if (lmcode >= 65 && lmcode <= 90) {\n                        lmcode += 32;\n                    }\n                    if (code !== lmcode) {\n                        return;\n                    }\n                }\n                sysData.state = id.MATCH;\n                sysData.phraseLength = len;\n            } else {\n                /* case-sensitive match */ for(i = 0; i < len; i += 1){\n                    code = chars[beg + i];\n                    lmcode = chars[lmIndex + i];\n                    if (code !== lmcode) {\n                        return;\n                    }\n                }\n            }\n            sysData.state = id.MATCH;\n            sysData.phraseLength = len;\n        }\n    };\n    // Generalized execution function.<br>\n    // Having a single, generalized function, allows a single location\n    // for tracing and statistics gathering functions to be called.\n    // Tracing and statistics are handled in separate objects.\n    // However, the parser calls their API to build the object data records.\n    // See [`trace.js`](./trace.html) and [`stats.js`](./stats.html) for their\n    // usage.\n    opExecute = function opExecuteFunc(opIndex, phraseIndex, sysData) {\n        let ret = true;\n        const op = opcodes[opIndex];\n        nodeHits += 1;\n        if (nodeHits > limitNodeHits) {\n            throw new Error(`parser: maximum number of node hits exceeded: ${limitNodeHits}`);\n        }\n        treeDepth += 1;\n        if (treeDepth > maxTreeDepth) {\n            maxTreeDepth = treeDepth;\n            if (maxTreeDepth > limitTreeDepth) {\n                throw new Error(`parser: maximum parse tree depth exceeded: ${limitTreeDepth}`);\n            }\n        }\n        sysData.refresh();\n        if (thisThis.trace !== null) {\n            /* collect the trace record for down the parse tree */ const lk = lookAroundValue();\n            thisThis.trace.down(op, sysData.state, phraseIndex, sysData.phraseLength, lk.anchor, lk.lookAround);\n        }\n        if (inLookBehind()) {\n            switch(op.type){\n                case id.ALT:\n                    opALT(opIndex, phraseIndex, sysData);\n                    break;\n                case id.CAT:\n                    opCATBehind(opIndex, phraseIndex, sysData);\n                    break;\n                case id.REP:\n                    opREPBehind(opIndex, phraseIndex, sysData);\n                    break;\n                case id.RNM:\n                    opRNM(opIndex, phraseIndex, sysData);\n                    break;\n                case id.UDT:\n                    opUDT(opIndex, phraseIndex, sysData);\n                    break;\n                case id.AND:\n                    opAND(opIndex, phraseIndex, sysData);\n                    break;\n                case id.NOT:\n                    opNOT(opIndex, phraseIndex, sysData);\n                    break;\n                case id.TRG:\n                    opTRGBehind(opIndex, phraseIndex, sysData);\n                    break;\n                case id.TBS:\n                    opTBSBehind(opIndex, phraseIndex, sysData);\n                    break;\n                case id.TLS:\n                    opTLSBehind(opIndex, phraseIndex, sysData);\n                    break;\n                case id.BKR:\n                    opBKRBehind(opIndex, phraseIndex, sysData);\n                    break;\n                case id.BKA:\n                    opBKA(opIndex, phraseIndex, sysData);\n                    break;\n                case id.BKN:\n                    opBKN(opIndex, phraseIndex, sysData);\n                    break;\n                case id.ABG:\n                    opABG(opIndex, phraseIndex, sysData);\n                    break;\n                case id.AEN:\n                    opAEN(opIndex, phraseIndex, sysData);\n                    break;\n                default:\n                    ret = false;\n                    break;\n            }\n        } else {\n            switch(op.type){\n                case id.ALT:\n                    opALT(opIndex, phraseIndex, sysData);\n                    break;\n                case id.CAT:\n                    opCAT(opIndex, phraseIndex, sysData);\n                    break;\n                case id.REP:\n                    opREP(opIndex, phraseIndex, sysData);\n                    break;\n                case id.RNM:\n                    opRNM(opIndex, phraseIndex, sysData);\n                    break;\n                case id.UDT:\n                    opUDT(opIndex, phraseIndex, sysData);\n                    break;\n                case id.AND:\n                    opAND(opIndex, phraseIndex, sysData);\n                    break;\n                case id.NOT:\n                    opNOT(opIndex, phraseIndex, sysData);\n                    break;\n                case id.TRG:\n                    opTRG(opIndex, phraseIndex, sysData);\n                    break;\n                case id.TBS:\n                    opTBS(opIndex, phraseIndex, sysData);\n                    break;\n                case id.TLS:\n                    opTLS(opIndex, phraseIndex, sysData);\n                    break;\n                case id.BKR:\n                    opBKR(opIndex, phraseIndex, sysData);\n                    break;\n                case id.BKA:\n                    opBKA(opIndex, phraseIndex, sysData);\n                    break;\n                case id.BKN:\n                    opBKN(opIndex, phraseIndex, sysData);\n                    break;\n                case id.ABG:\n                    opABG(opIndex, phraseIndex, sysData);\n                    break;\n                case id.AEN:\n                    opAEN(opIndex, phraseIndex, sysData);\n                    break;\n                default:\n                    ret = false;\n                    break;\n            }\n        }\n        if (!inLookAround() && phraseIndex + sysData.phraseLength > maxMatched) {\n            maxMatched = phraseIndex + sysData.phraseLength;\n        }\n        if (thisThis.stats !== null) {\n            /* collect the statistics */ thisThis.stats.collect(op, sysData);\n        }\n        if (thisThis.trace !== null) {\n            /* collect the trace record for up the parse tree */ const lk = lookAroundValue();\n            thisThis.trace.up(op, sysData.state, phraseIndex, sysData.phraseLength, lk.anchor, lk.lookAround);\n        }\n        treeDepth -= 1;\n        return ret;\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/parser.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/stats.js":
/*!**************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/stats.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This module is the constructor for the statistics gathering object.\n// The statistics are nothing more than keeping a count of the\n// number of times each node in the parse tree is traversed.\n//\n// Counts are collected for each of the individual types of operators.\n// Additionally, counts are collected for each of the individually named\n// `RNM` and `UDT` operators.\n\nmodule.exports = function statsFunc() {\n    const id = __webpack_require__(/*! ./identifiers */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/identifiers.js\");\n    const utils = __webpack_require__(/*! ./utilities */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/utilities.js\");\n    const style = __webpack_require__(/*! ./style */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/style.js\");\n    const thisFileName = \"stats.js: \";\n    let rules = [];\n    let udts = [];\n    const stats = [];\n    let totals;\n    const ruleStats = [];\n    const udtStats = [];\n    this.statsObject = \"statsObject\";\n    const nameId = \"stats\";\n    /* `Array.sort()` callback function for sorting `RNM` and `UDT` operators alphabetically by name. */ const sortAlpha = function sortAlpha(lhs, rhs) {\n        if (lhs.lower < rhs.lower) {\n            return -1;\n        }\n        if (lhs.lower > rhs.lower) {\n            return 1;\n        }\n        return 0;\n    };\n    /* `Array.sort()` callback function for sorting `RNM` and `UDT` operators by hit count. */ const sortHits = function sortHits(lhs, rhs) {\n        if (lhs.total < rhs.total) {\n            return 1;\n        }\n        if (lhs.total > rhs.total) {\n            return -1;\n        }\n        return sortAlpha(lhs, rhs);\n    };\n    /* `Array.sort()` callback function for sorting `RNM` and `UDT` operators by index */ /* (in the order in which they appear in the SABNF grammar). */ const sortIndex = function sortIndex(lhs, rhs) {\n        if (lhs.index < rhs.index) {\n            return -1;\n        }\n        if (lhs.index > rhs.index) {\n            return 1;\n        }\n        return 0;\n    };\n    const EmptyStat = function EmptyStat() {\n        this.empty = 0;\n        this.match = 0;\n        this.nomatch = 0;\n        this.total = 0;\n    };\n    /* Zero out all stats */ const clear = function clear() {\n        stats.length = 0;\n        totals = new EmptyStat();\n        stats[id.ALT] = new EmptyStat();\n        stats[id.CAT] = new EmptyStat();\n        stats[id.REP] = new EmptyStat();\n        stats[id.RNM] = new EmptyStat();\n        stats[id.TRG] = new EmptyStat();\n        stats[id.TBS] = new EmptyStat();\n        stats[id.TLS] = new EmptyStat();\n        stats[id.UDT] = new EmptyStat();\n        stats[id.AND] = new EmptyStat();\n        stats[id.NOT] = new EmptyStat();\n        stats[id.BKR] = new EmptyStat();\n        stats[id.BKA] = new EmptyStat();\n        stats[id.BKN] = new EmptyStat();\n        stats[id.ABG] = new EmptyStat();\n        stats[id.AEN] = new EmptyStat();\n        ruleStats.length = 0;\n        for(let i = 0; i < rules.length; i += 1){\n            ruleStats.push({\n                empty: 0,\n                match: 0,\n                nomatch: 0,\n                total: 0,\n                name: rules[i].name,\n                lower: rules[i].lower,\n                index: rules[i].index\n            });\n        }\n        if (udts.length > 0) {\n            udtStats.length = 0;\n            for(let i = 0; i < udts.length; i += 1){\n                udtStats.push({\n                    empty: 0,\n                    match: 0,\n                    nomatch: 0,\n                    total: 0,\n                    name: udts[i].name,\n                    lower: udts[i].lower,\n                    index: udts[i].index\n                });\n            }\n        }\n    };\n    /* increment the designated operator hit count by one */ const incStat = function incStat(stat, state) {\n        stat.total += 1;\n        switch(state){\n            case id.EMPTY:\n                stat.empty += 1;\n                break;\n            case id.MATCH:\n                stat.match += 1;\n                break;\n            case id.NOMATCH:\n                stat.nomatch += 1;\n                break;\n            default:\n                throw new Error(`${thisFileName}collect(): incStat(): unrecognized state: ${state}`);\n        }\n    };\n    /* helper for toHtml() */ const displayRow = function displayRow(name, stat) {\n        let html = \"\";\n        html += \"<tr>\";\n        html += `<td class=\"${style.CLASS_ACTIVE}\">${name}</td>`;\n        html += `<td class=\"${style.CLASS_EMPTY}\">${stat.empty}</td>`;\n        html += `<td class=\"${style.CLASS_MATCH}\">${stat.match}</td>`;\n        html += `<td class=\"${style.CLASS_NOMATCH}\">${stat.nomatch}</td>`;\n        html += `<td class=\"${style.CLASS_ACTIVE}\">${stat.total}</td>`;\n        html += \"</tr>\\n\";\n        return html;\n    };\n    const displayOpsOnly = function displayOpsOnly() {\n        let html = \"\";\n        html += displayRow(\"ALT\", stats[id.ALT]);\n        html += displayRow(\"CAT\", stats[id.CAT]);\n        html += displayRow(\"REP\", stats[id.REP]);\n        html += displayRow(\"RNM\", stats[id.RNM]);\n        html += displayRow(\"TRG\", stats[id.TRG]);\n        html += displayRow(\"TBS\", stats[id.TBS]);\n        html += displayRow(\"TLS\", stats[id.TLS]);\n        html += displayRow(\"UDT\", stats[id.UDT]);\n        html += displayRow(\"AND\", stats[id.AND]);\n        html += displayRow(\"NOT\", stats[id.NOT]);\n        html += displayRow(\"BKR\", stats[id.BKR]);\n        html += displayRow(\"BKA\", stats[id.BKA]);\n        html += displayRow(\"BKN\", stats[id.BKN]);\n        html += displayRow(\"ABG\", stats[id.ABG]);\n        html += displayRow(\"AEN\", stats[id.AEN]);\n        html += displayRow(\"totals\", totals);\n        return html;\n    };\n    /* helper for toHtml() */ const displayRules = function displayRules() {\n        let html = \"\";\n        html += \"<tr><th></th><th></th><th></th><th></th><th></th></tr>\\n\";\n        html += \"<tr><th>rules</th><th></th><th></th><th></th><th></th></tr>\\n\";\n        for(let i = 0; i < rules.length; i += 1){\n            if (ruleStats[i].total > 0) {\n                html += \"<tr>\";\n                html += `<td class=\"${style.CLASS_ACTIVE}\">${ruleStats[i].name}</td>`;\n                html += `<td class=\"${style.CLASS_EMPTY}\">${ruleStats[i].empty}</td>`;\n                html += `<td class=\"${style.CLASS_MATCH}\">${ruleStats[i].match}</td>`;\n                html += `<td class=\"${style.CLASS_NOMATCH}\">${ruleStats[i].nomatch}</td>`;\n                html += `<td class=\"${style.CLASS_ACTIVE}\">${ruleStats[i].total}</td>`;\n                html += \"</tr>\\n\";\n            }\n        }\n        if (udts.length > 0) {\n            html += \"<tr><th></th><th></th><th></th><th></th><th></th></tr>\\n\";\n            html += \"<tr><th>udts</th><th></th><th></th><th></th><th></th></tr>\\n\";\n            for(let i = 0; i < udts.length; i += 1){\n                if (udtStats[i].total > 0) {\n                    html += \"<tr>\";\n                    html += `<td class=\"${style.CLASS_ACTIVE}\">${udtStats[i].name}</td>`;\n                    html += `<td class=\"${style.CLASS_EMPTY}\">${udtStats[i].empty}</td>`;\n                    html += `<td class=\"${style.CLASS_MATCH}\">${udtStats[i].match}</td>`;\n                    html += `<td class=\"${style.CLASS_NOMATCH}\">${udtStats[i].nomatch}</td>`;\n                    html += `<td class=\"${style.CLASS_ACTIVE}\">${udtStats[i].total}</td>`;\n                    html += \"</tr>\\n\";\n                }\n            }\n        }\n        return html;\n    };\n    /* called only by the parser to validate a stats object */ this.validate = function validate(name) {\n        let ret = false;\n        if (typeof name === \"string\" && nameId === name) {\n            ret = true;\n        }\n        return ret;\n    };\n    /* no verification of input - only called by parser() */ this.init = function init(inputRules, inputUdts) {\n        rules = inputRules;\n        udts = inputUdts;\n        clear();\n    };\n    /* This function is the main interaction with the parser. */ /* The parser calls it after each node has been traversed. */ this.collect = function collect(op, result) {\n        incStat(totals, result.state, result.phraseLength);\n        incStat(stats[op.type], result.state, result.phraseLength);\n        if (op.type === id.RNM) {\n            incStat(ruleStats[op.index], result.state, result.phraseLength);\n        }\n        if (op.type === id.UDT) {\n            incStat(udtStats[op.index], result.state, result.phraseLength);\n        }\n    };\n    // Display the statistics as an HTML table.\n    // - *type*\n    //   - \"ops\" - (default) display only the total hit counts for all operator types.\n    //   - \"index\" - additionally, display the hit counts for the individual `RNM` and `UDT` operators ordered by index.\n    //   - \"hits\" - additionally, display the hit counts for the individual `RNM` and `UDT` operators by hit count.\n    //   - \"alpha\" - additionally, display the hit counts for the individual `RNM` and `UDT` operators by name alphabetically.\n    // - *caption* - optional caption for the table\n    this.toHtml = function toHtml(type, caption) {\n        let html = \"\";\n        html += `<table class=\"${style.CLASS_STATS}\">\\n`;\n        if (typeof caption === \"string\") {\n            html += `<caption>${caption}</caption>\\n`;\n        }\n        html += `<tr><th class=\"${style.CLASS_ACTIVE}\">ops</th>\\n`;\n        html += `<th class=\"${style.CLASS_EMPTY}\">EMPTY</th>\\n`;\n        html += `<th class=\"${style.CLASS_MATCH}\">MATCH</th>\\n`;\n        html += `<th class=\"${style.CLASS_NOMATCH}\">NOMATCH</th>\\n`;\n        html += `<th class=\"${style.CLASS_ACTIVE}\">totals</th></tr>\\n`;\n        const test = true;\n        while(test){\n            if (type === undefined) {\n                html += displayOpsOnly();\n                break;\n            }\n            if (type === null) {\n                html += displayOpsOnly();\n                break;\n            }\n            if (type === \"ops\") {\n                html += displayOpsOnly();\n                break;\n            }\n            if (type === \"index\") {\n                ruleStats.sort(sortIndex);\n                if (udtStats.length > 0) {\n                    udtStats.sort(sortIndex);\n                }\n                html += displayOpsOnly();\n                html += displayRules();\n                break;\n            }\n            if (type === \"hits\") {\n                ruleStats.sort(sortHits);\n                if (udtStats.length > 0) {\n                    udtStats.sort(sortIndex);\n                }\n                html += displayOpsOnly();\n                html += displayRules();\n                break;\n            }\n            if (type === \"alpha\") {\n                ruleStats.sort(sortAlpha);\n                if (udtStats.length > 0) {\n                    udtStats.sort(sortAlpha);\n                }\n                html += displayOpsOnly();\n                html += displayRules();\n                break;\n            }\n            break;\n        }\n        html += \"</table>\\n\";\n        return html;\n    };\n    // Display the stats table in a complete HTML5 page.\n    this.toHtmlPage = function toHtmlPage(type, caption, title) {\n        return utils.htmlToPage(this.toHtml(type, caption), title);\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/stats.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/style.js":
/*!**************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/style.js ***!
  \**************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = {\n    // Generated by apglib/style.js \n    CLASS_MONOSPACE: \"apg-mono\",\n    CLASS_ACTIVE: \"apg-active\",\n    CLASS_EMPTY: \"apg-empty\",\n    CLASS_MATCH: \"apg-match\",\n    CLASS_NOMATCH: \"apg-nomatch\",\n    CLASS_LOOKAHEAD: \"apg-lh-match\",\n    CLASS_LOOKBEHIND: \"apg-lb-match\",\n    CLASS_REMAINDER: \"apg-remainder\",\n    CLASS_CTRLCHAR: \"apg-ctrl-char\",\n    CLASS_LINEEND: \"apg-line-end\",\n    CLASS_ERROR: \"apg-error\",\n    CLASS_PHRASE: \"apg-phrase\",\n    CLASS_EMPTYPHRASE: \"apg-empty-phrase\",\n    CLASS_STATE: \"apg-state\",\n    CLASS_STATS: \"apg-stats\",\n    CLASS_TRACE: \"apg-trace\",\n    CLASS_GRAMMAR: \"apg-grammar\",\n    CLASS_RULES: \"apg-rules\",\n    CLASS_RULESLINK: \"apg-rules-link\",\n    CLASS_ATTRIBUTES: \"apg-attrs\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FwZy1qc0A0LjIuMS9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctbGliL3N0eWxlLmpzIiwibWFwcGluZ3MiOiI7QUFBQUEsT0FBT0MsT0FBTyxHQUFHO0lBRWYsZ0NBQWdDO0lBQ2hDQyxpQkFBaUI7SUFDakJDLGNBQWM7SUFDZEMsYUFBYTtJQUNiQyxhQUFhO0lBQ2JDLGVBQWU7SUFDZkMsaUJBQWlCO0lBQ2pCQyxrQkFBa0I7SUFDbEJDLGlCQUFpQjtJQUNqQkMsZ0JBQWdCO0lBQ2hCQyxlQUFlO0lBQ2ZDLGFBQWE7SUFDYkMsY0FBYztJQUNkQyxtQkFBbUI7SUFDbkJDLGFBQWE7SUFDYkMsYUFBYTtJQUNiQyxhQUFhO0lBQ2JDLGVBQWU7SUFDZkMsYUFBYTtJQUNiQyxpQkFBaUI7SUFDakJDLGtCQUFrQjtBQUNwQiIsInNvdXJjZXMiOlsid2VicGFjazovL0B0b2tlbnN0cmVhbS93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FwZy1qc0A0LjIuMS9ub2RlX21vZHVsZXMvYXBnLWpzL3NyYy9hcGctbGliL3N0eWxlLmpzP2ZkNDQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgLy8gR2VuZXJhdGVkIGJ5IGFwZ2xpYi9zdHlsZS5qcyBcbiAgQ0xBU1NfTU9OT1NQQUNFOiAnYXBnLW1vbm8nLFxuICBDTEFTU19BQ1RJVkU6ICdhcGctYWN0aXZlJyxcbiAgQ0xBU1NfRU1QVFk6ICdhcGctZW1wdHknLFxuICBDTEFTU19NQVRDSDogJ2FwZy1tYXRjaCcsXG4gIENMQVNTX05PTUFUQ0g6ICdhcGctbm9tYXRjaCcsXG4gIENMQVNTX0xPT0tBSEVBRDogJ2FwZy1saC1tYXRjaCcsXG4gIENMQVNTX0xPT0tCRUhJTkQ6ICdhcGctbGItbWF0Y2gnLFxuICBDTEFTU19SRU1BSU5ERVI6ICdhcGctcmVtYWluZGVyJyxcbiAgQ0xBU1NfQ1RSTENIQVI6ICdhcGctY3RybC1jaGFyJyxcbiAgQ0xBU1NfTElORUVORDogJ2FwZy1saW5lLWVuZCcsXG4gIENMQVNTX0VSUk9SOiAnYXBnLWVycm9yJyxcbiAgQ0xBU1NfUEhSQVNFOiAnYXBnLXBocmFzZScsXG4gIENMQVNTX0VNUFRZUEhSQVNFOiAnYXBnLWVtcHR5LXBocmFzZScsXG4gIENMQVNTX1NUQVRFOiAnYXBnLXN0YXRlJyxcbiAgQ0xBU1NfU1RBVFM6ICdhcGctc3RhdHMnLFxuICBDTEFTU19UUkFDRTogJ2FwZy10cmFjZScsXG4gIENMQVNTX0dSQU1NQVI6ICdhcGctZ3JhbW1hcicsXG4gIENMQVNTX1JVTEVTOiAnYXBnLXJ1bGVzJyxcbiAgQ0xBU1NfUlVMRVNMSU5LOiAnYXBnLXJ1bGVzLWxpbmsnLFxuICBDTEFTU19BVFRSSUJVVEVTOiAnYXBnLWF0dHJzJyxcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiQ0xBU1NfTU9OT1NQQUNFIiwiQ0xBU1NfQUNUSVZFIiwiQ0xBU1NfRU1QVFkiLCJDTEFTU19NQVRDSCIsIkNMQVNTX05PTUFUQ0giLCJDTEFTU19MT09LQUhFQUQiLCJDTEFTU19MT09LQkVISU5EIiwiQ0xBU1NfUkVNQUlOREVSIiwiQ0xBU1NfQ1RSTENIQVIiLCJDTEFTU19MSU5FRU5EIiwiQ0xBU1NfRVJST1IiLCJDTEFTU19QSFJBU0UiLCJDTEFTU19FTVBUWVBIUkFTRSIsIkNMQVNTX1NUQVRFIiwiQ0xBU1NfU1RBVFMiLCJDTEFTU19UUkFDRSIsIkNMQVNTX0dSQU1NQVIiLCJDTEFTU19SVUxFUyIsIkNMQVNTX1JVTEVTTElOSyIsIkNMQVNTX0FUVFJJQlVURVMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/style.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/trace.js":
/*!**************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/trace.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* eslint-disable func-names */ /* eslint-disable prefer-destructuring */ /* eslint-disable no-restricted-syntax */ /* eslint-disable guard-for-in */ /*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This module provides a means of tracing the parser through the parse tree as it goes.\n// It is the primary debugging facility for debugging both the SABNF grammar syntax\n// and the input strings that are supposed to be valid grammar sentences.\n// It is also a very informative and educational tool for understanding\n// how a parser actually operates for a given language.\n//\n// Tracing is the process of generating and saving a record of information for each passage\n// of the parser through a parse tree node. And since it traverses each node twice, once down the tree\n// and once coming back up, there are two records for each node.\n// This, obviously, has the potential of generating lots of records.\n// And since these records are normally displayed on a web page\n// it is important to have a means to limit the actual number of records generated to\n// probably no more that a few thousand. This is almost always enough to find any errors.\n// The problem is to get the *right* few thousand records.\n// Therefore, this module has a number of ways of limiting and/or filtering, the number and type of records.\n// Considerable effort has been made to make this filtering of the trace output as simple\n// and intuitive as possible.\n//\n// However, the ability to filter the trace records, or for that matter even understand what they are\n// and the information they contain, does require a minimum amount of understanding of the APG parsing\n// method. The parse tree nodes are all represented by APG operators. They break down into two natural groups.\n// - The `RNM` operators and `UDT` operators are named phrases.\n// These are names chosen by the writer of the SABNF grammar to represent special phrases of interest.\n// - All others collect, concatenate and otherwise manipulate various intermediate phrases along the way.\n//\n// There are separate means of filtering which of these operators in each of these two groups get traced.\n// Let `trace` be an instantiated `trace.js` object.\n// Prior to parsing the string, filtering the rules and UDTs can be defined as follows:\n// ```\n// trace.filter.rules[\"rulename\"] = true;\n//     /* trace rule name \"rulename\" */\n// trace.filter.rules[\"udtname\"]  = true;\n//     /* trace UDT name \"udtname\" */\n// trace.filter.rules[\"<ALL>\"]    = true;\n//     /* trace all rules and UDTs (the default) */\n// trace.filter.rules[\"<NONE>\"]   = true;\n//     /* trace no rules or UDTS */\n// ```\n// If any rule or UDT name other than \"&lt;ALL>\" or \"&lt;NONE>\" is specified, all other names are turned off.\n// Therefore, to be selective of rule names, a filter statement is required for each rule/UDT name desired.\n//\n// Filtering of the other operators follows a similar procedure.\n// ```\n// trace.filter.operators[\"TRG\"] = true;\n//     /* trace the terminal range, TRG, operators */\n// trace.filter.operators[\"CAT\"]  = true;\n//     /* trace the concatenations, CAT, operators */\n// trace.filter.operators[\"<ALL>\"]    = true;\n//     /* trace all operators */\n// trace.filter.operators[\"<NONE>\"]   = true;\n//     /* trace no operators (the default) */\n// ```\n// If any operator name other than \"&lt;ALL>\" or \"&lt;NONE>\" is specified, all other names are turned off.\n// Therefore, to be selective of operator names, a filter statement is required for each name desired.\n//\n// There is, additionally, a means for limiting the total number of filtered or saved trace records.\n// See the function, `setMaxRecords(max)` below. This will result in only the last `max` records being saved.\n//\n// (See [`apg-examples`](https://github.com/ldthomas/apg-js-examples) for examples of using `trace.js`.)\n\nmodule.exports = function exportTrace() {\n    const utils = __webpack_require__(/*! ./utilities */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/utilities.js\");\n    const style = __webpack_require__(/*! ./style */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/style.js\");\n    const circular = new (__webpack_require__(/*! ./circular-buffer */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/circular-buffer.js\"))();\n    const id = __webpack_require__(/*! ./identifiers */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/identifiers.js\");\n    const thisFileName = \"trace.js: \";\n    const that = this;\n    const MODE_HEX = 16;\n    const MODE_DEC = 10;\n    const MODE_ASCII = 8;\n    const MODE_UNICODE = 32;\n    const MAX_PHRASE = 80;\n    const MAX_TLS = 5;\n    const records = [];\n    let maxRecords = 5000;\n    let lastRecord = -1;\n    let filteredRecords = 0;\n    let treeDepth = 0;\n    const recordStack = [];\n    let chars = null;\n    let rules = null;\n    let udts = null;\n    const operatorFilter = [];\n    const ruleFilter = [];\n    /* special trace table phrases */ const PHRASE_END = `<span class=\"${style.CLASS_LINEEND}\">&bull;</span>`;\n    const PHRASE_CONTINUE = `<span class=\"${style.CLASS_LINEEND}\">&hellip;</span>`;\n    const PHRASE_EMPTY = `<span class=\"${style.CLASS_EMPTY}\">&#120634;</span>`;\n    /* filter the non-RNM & non-UDT operators */ const initOperatorFilter = function() {\n        const setOperators = function(set) {\n            operatorFilter[id.ALT] = set;\n            operatorFilter[id.CAT] = set;\n            operatorFilter[id.REP] = set;\n            operatorFilter[id.TLS] = set;\n            operatorFilter[id.TBS] = set;\n            operatorFilter[id.TRG] = set;\n            operatorFilter[id.AND] = set;\n            operatorFilter[id.NOT] = set;\n            operatorFilter[id.BKR] = set;\n            operatorFilter[id.BKA] = set;\n            operatorFilter[id.BKN] = set;\n            operatorFilter[id.ABG] = set;\n            operatorFilter[id.AEN] = set;\n        };\n        let items = 0;\n        // eslint-disable-next-line no-unused-vars\n        for(const name in that.filter.operators){\n            items += 1;\n        }\n        if (items === 0) {\n            /* case 1: no operators specified: default: do not trace any operators */ setOperators(false);\n            return;\n        }\n        for(const name in that.filter.operators){\n            const upper = name.toUpperCase();\n            if (upper === \"<ALL>\") {\n                /* case 2: <all> operators specified: trace all operators ignore all other operator commands */ setOperators(true);\n                return;\n            }\n            if (upper === \"<NONE>\") {\n                /* case 3: <none> operators specified: trace NO operators ignore all other operator commands */ setOperators(false);\n                return;\n            }\n        }\n        setOperators(false);\n        for(const name in that.filter.operators){\n            const upper = name.toUpperCase();\n            /* case 4: one or more individual operators specified: trace 'true' operators only */ if (upper === \"ALT\") {\n                operatorFilter[id.ALT] = that.filter.operators[name] === true;\n            } else if (upper === \"CAT\") {\n                operatorFilter[id.CAT] = that.filter.operators[name] === true;\n            } else if (upper === \"REP\") {\n                operatorFilter[id.REP] = that.filter.operators[name] === true;\n            } else if (upper === \"AND\") {\n                operatorFilter[id.AND] = that.filter.operators[name] === true;\n            } else if (upper === \"NOT\") {\n                operatorFilter[id.NOT] = that.filter.operators[name] === true;\n            } else if (upper === \"TLS\") {\n                operatorFilter[id.TLS] = that.filter.operators[name] === true;\n            } else if (upper === \"TBS\") {\n                operatorFilter[id.TBS] = that.filter.operators[name] === true;\n            } else if (upper === \"TRG\") {\n                operatorFilter[id.TRG] = that.filter.operators[name] === true;\n            } else if (upper === \"BKR\") {\n                operatorFilter[id.BKR] = that.filter.operators[name] === true;\n            } else if (upper === \"BKA\") {\n                operatorFilter[id.BKA] = that.filter.operators[name] === true;\n            } else if (upper === \"BKN\") {\n                operatorFilter[id.BKN] = that.filter.operators[name] === true;\n            } else if (upper === \"ABG\") {\n                operatorFilter[id.ABG] = that.filter.operators[name] === true;\n            } else if (upper === \"AEN\") {\n                operatorFilter[id.AEN] = that.filter.operators[name] === true;\n            } else {\n                throw new Error(`${thisFileName}initOpratorFilter: '${name}' not a valid operator name.` + ` Must be <all>, <none>, alt, cat, rep, tls, tbs, trg, and, not, bkr, bka or bkn`);\n            }\n        }\n    };\n    /* filter the rule and `UDT` named operators */ const initRuleFilter = function() {\n        const setRules = function(set) {\n            operatorFilter[id.RNM] = set;\n            operatorFilter[id.UDT] = set;\n            const count = rules.length + udts.length;\n            ruleFilter.length = 0;\n            for(let i = 0; i < count; i += 1){\n                ruleFilter.push(set);\n            }\n        };\n        let items;\n        let i;\n        const list = [];\n        for(i = 0; i < rules.length; i += 1){\n            list.push(rules[i].lower);\n        }\n        for(i = 0; i < udts.length; i += 1){\n            list.push(udts[i].lower);\n        }\n        ruleFilter.length = 0;\n        items = 0;\n        // eslint-disable-next-line no-unused-vars\n        for(const name in that.filter.rules){\n            items += 1;\n        }\n        if (items === 0) {\n            /* case 1: default to all rules & udts */ setRules(true);\n            return;\n        }\n        for(const name in that.filter.rules){\n            const lower = name.toLowerCase();\n            if (lower === \"<all>\") {\n                /* case 2: trace all rules ignore all other rule commands */ setRules(true);\n                return;\n            }\n            if (lower === \"<none>\") {\n                /* case 3: trace no rules */ setRules(false);\n                return;\n            }\n        }\n        /* case 4: trace only individually specified rules */ setRules(false);\n        operatorFilter[id.RNM] = true;\n        operatorFilter[id.UDT] = true;\n        for(const name in that.filter.rules){\n            const lower = name.toLowerCase();\n            i = list.indexOf(lower);\n            if (i < 0) {\n                throw new Error(`${thisFileName}initRuleFilter: '${name}' not a valid rule or udt name`);\n            }\n            ruleFilter[i] = that.filter.rules[name] === true;\n        }\n    };\n    /* used by other APG components to verify that they have a valid trace object */ this.traceObject = \"traceObject\";\n    this.filter = {\n        operators: [],\n        rules: []\n    };\n    // Set the maximum number of records to keep (default = 5000).\n    // Each record number larger than `maxRecords`\n    // will result in deleting the previously oldest record.\n    // - `max`: maximum number of records to retain (default = 5000)\n    // - `last`: last record number to retain, (default = -1 for (unknown) actual last record)\n    this.setMaxRecords = function(max, last) {\n        lastRecord = -1;\n        if (typeof max === \"number\" && max > 0) {\n            maxRecords = Math.ceil(max);\n        } else {\n            maxRecords = 0;\n            return;\n        }\n        if (typeof last === \"number\") {\n            lastRecord = Math.floor(last);\n            if (lastRecord < 0) {\n                lastRecord = -1;\n            }\n        }\n    };\n    // Returns `maxRecords` to the caller.\n    this.getMaxRecords = function() {\n        return maxRecords;\n    };\n    // Returns `lastRecord` to the caller.\n    this.getLastRecord = function() {\n        return lastRecord;\n    };\n    /* Called only by the `parser.js` object. No verification of input. */ this.init = function(rulesIn, udtsIn, charsIn) {\n        records.length = 0;\n        recordStack.length = 0;\n        filteredRecords = 0;\n        treeDepth = 0;\n        chars = charsIn;\n        rules = rulesIn;\n        udts = udtsIn;\n        initOperatorFilter();\n        initRuleFilter();\n        circular.init(maxRecords);\n    };\n    /* returns true if this records passes through the designated filter, false if the record is to be skipped */ const filterOps = function(op) {\n        let ret = false;\n        if (op.type === id.RNM) {\n            if (operatorFilter[op.type] && ruleFilter[op.index]) {\n                ret = true;\n            } else {\n                ret = false;\n            }\n        } else if (op.type === id.UDT) {\n            if (operatorFilter[op.type] && ruleFilter[rules.length + op.index]) {\n                ret = true;\n            } else {\n                ret = false;\n            }\n        } else {\n            ret = operatorFilter[op.type];\n        }\n        return ret;\n    };\n    const filterRecords = function(record) {\n        if (lastRecord === -1) {\n            return true;\n        }\n        if (record <= lastRecord) {\n            return true;\n        }\n        return false;\n    };\n    /* Collect the \"down\" record. */ this.down = function(op, state, offset, length, anchor, lookAround) {\n        if (filterRecords(filteredRecords) && filterOps(op)) {\n            recordStack.push(filteredRecords);\n            records[circular.increment()] = {\n                dirUp: false,\n                depth: treeDepth,\n                thisLine: filteredRecords,\n                thatLine: undefined,\n                opcode: op,\n                state,\n                phraseIndex: offset,\n                phraseLength: length,\n                lookAnchor: anchor,\n                lookAround\n            };\n            filteredRecords += 1;\n            treeDepth += 1;\n        }\n    };\n    /* Collect the \"up\" record. */ this.up = function(op, state, offset, length, anchor, lookAround) {\n        if (filterRecords(filteredRecords) && filterOps(op)) {\n            const thisLine = filteredRecords;\n            const thatLine = recordStack.pop();\n            const thatRecord = circular.getListIndex(thatLine);\n            if (thatRecord !== -1) {\n                records[thatRecord].thatLine = thisLine;\n            }\n            treeDepth -= 1;\n            records[circular.increment()] = {\n                dirUp: true,\n                depth: treeDepth,\n                thisLine,\n                thatLine,\n                opcode: op,\n                state,\n                phraseIndex: offset,\n                phraseLength: length,\n                lookAnchor: anchor,\n                lookAround\n            };\n            filteredRecords += 1;\n        }\n    };\n    /* convert the trace records to a tree of nodes */ const toTreeObj = function() {\n        /* private helper functions */ function nodeOpcode(node, opcode) {\n            let name;\n            let casetype;\n            let modetype;\n            if (opcode) {\n                node.op = {\n                    id: opcode.type,\n                    name: utils.opcodeToString(opcode.type)\n                };\n                node.opData = undefined;\n                switch(opcode.type){\n                    case id.RNM:\n                        node.opData = rules[opcode.index].name;\n                        break;\n                    case id.UDT:\n                        node.opData = udts[opcode.index].name;\n                        break;\n                    case id.BKR:\n                        if (opcode.index < rules.length) {\n                            name = rules[opcode.index].name;\n                        } else {\n                            name = udts[opcode.index - rules.length].name;\n                        }\n                        casetype = opcode.bkrCase === id.BKR_MODE_CI ? \"%i\" : \"%s\";\n                        modetype = opcode.bkrMode === id.BKR_MODE_UM ? \"%u\" : \"%p\";\n                        node.opData = `\\\\\\\\${casetype}${modetype}${name}`;\n                        break;\n                    case id.TLS:\n                        node.opData = [];\n                        for(let i = 0; i < opcode.string.length; i += 1){\n                            node.opData.push(opcode.string[i]);\n                        }\n                        break;\n                    case id.TBS:\n                        node.opData = [];\n                        for(let i = 0; i < opcode.string.length; i += 1){\n                            node.opData.push(opcode.string[i]);\n                        }\n                        break;\n                    case id.TRG:\n                        node.opData = [\n                            opcode.min,\n                            opcode.max\n                        ];\n                        break;\n                    case id.REP:\n                        node.opData = [\n                            opcode.min,\n                            opcode.max\n                        ];\n                        break;\n                    default:\n                        throw new Error(\"unrecognized opcode\");\n                }\n            } else {\n                node.op = {\n                    id: undefined,\n                    name: undefined\n                };\n                node.opData = undefined;\n            }\n        }\n        function nodePhrase(state, index, length) {\n            if (state === id.MATCH) {\n                return {\n                    index,\n                    length\n                };\n            }\n            if (state === id.NOMATCH) {\n                return {\n                    index,\n                    length: 0\n                };\n            }\n            if (state === id.EMPTY) {\n                return {\n                    index,\n                    length: 0\n                };\n            }\n            return null;\n        }\n        let nodeId = -1;\n        function nodeDown(parent, record, depth) {\n            const node = {\n                // eslint-disable-next-line no-plusplus\n                id: nodeId++,\n                branch: -1,\n                parent,\n                up: false,\n                down: false,\n                depth,\n                children: []\n            };\n            if (record) {\n                node.down = true;\n                node.state = {\n                    id: record.state,\n                    name: utils.stateToString(record.state)\n                };\n                node.phrase = null;\n                nodeOpcode(node, record.opcode);\n            } else {\n                node.state = {\n                    id: undefined,\n                    name: undefined\n                };\n                node.phrase = nodePhrase();\n                nodeOpcode(node, undefined);\n            }\n            return node;\n        }\n        function nodeUp(node, record) {\n            if (record) {\n                node.up = true;\n                node.state = {\n                    id: record.state,\n                    name: utils.stateToString(record.state)\n                };\n                node.phrase = nodePhrase(record.state, record.phraseIndex, record.phraseLength);\n                if (!node.down) {\n                    nodeOpcode(node, record.opcode);\n                }\n            }\n        }\n        /* walk the final tree: label branches and count leaf nodes */ let leafNodes = 0;\n        let depth = -1;\n        let branchCount = 1;\n        function walk(node) {\n            depth += 1;\n            node.branch = branchCount;\n            if (depth > treeDepth) {\n                treeDepth = depth;\n            }\n            if (node.children.length === 0) {\n                leafNodes += 1;\n            } else {\n                for(let i = 0; i < node.children.length; i += 1){\n                    if (i > 0) {\n                        branchCount += 1;\n                    }\n                    node.children[i].leftMost = false;\n                    node.children[i].rightMost = false;\n                    if (node.leftMost) {\n                        node.children[i].leftMost = i === 0;\n                    }\n                    if (node.rightMost) {\n                        node.children[i].rightMost = i === node.children.length - 1;\n                    }\n                    walk(node.children[i]);\n                }\n            }\n            depth -= 1;\n        }\n        function display(node, offset) {\n            let name;\n            const obj = {};\n            obj.id = node.id;\n            obj.branch = node.branch;\n            obj.leftMost = node.leftMost;\n            obj.rightMost = node.rightMost;\n            name = node.state.name ? node.state.name : \"ACTIVE\";\n            obj.state = {\n                id: node.state.id,\n                name\n            };\n            name = node.op.name ? node.op.name : \"?\";\n            obj.op = {\n                id: node.op.id,\n                name\n            };\n            if (typeof node.opData === \"string\") {\n                obj.opData = node.opData;\n            } else if (Array.isArray(node.opData)) {\n                obj.opData = [];\n                for(let i = 0; i < node.opData.length; i += 1){\n                    obj.opData[i] = node.opData[i];\n                }\n            } else {\n                obj.opData = undefined;\n            }\n            if (node.phrase) {\n                obj.phrase = {\n                    index: node.phrase.index,\n                    length: node.phrase.length\n                };\n            } else {\n                obj.phrase = null;\n            }\n            obj.depth = node.depth;\n            obj.children = [];\n            for(let i = 0; i < node.children.length; i += 1){\n                const c = i !== node.children.length - 1;\n                obj.children[i] = display(node.children[i], offset, c);\n            }\n            return obj;\n        }\n        /* construct the tree beginning here */ const branch = [];\n        let root;\n        let node;\n        let parent;\n        let record;\n        let firstRecord = true;\n        /* push a dummy node so the root node will have a non-null parent */ const dummy = nodeDown(null, null, -1);\n        branch.push(dummy);\n        node = dummy;\n        circular.forEach((lineIndex)=>{\n            record = records[lineIndex];\n            if (firstRecord) {\n                firstRecord = false;\n                if (record.depth > 0) {\n                    /* push some dummy nodes to fill in for missing records */ const num = record.dirUp ? record.depth + 1 : record.depth;\n                    for(let i = 0; i < num; i += 1){\n                        parent = node;\n                        node = nodeDown(node, null, i);\n                        branch.push(node);\n                        parent.children.push(node);\n                    }\n                }\n            }\n            if (record.dirUp) {\n                /* handle the next record up */ node = branch.pop();\n                nodeUp(node, record);\n                node = branch[branch.length - 1];\n            } else {\n                /* handle the next record down */ parent = node;\n                node = nodeDown(node, record, record.depth);\n                branch.push(node);\n                parent.children.push(node);\n            }\n        });\n        /* if not at root, walk it up to root */ while(branch.length > 1){\n            node = branch.pop();\n            nodeUp(node, null);\n        }\n        /* maybe redundant or paranoid tests: these should never happen */ if (dummy.children.length === 0) {\n            throw new Error(\"trace.toTree(): parse tree has no nodes\");\n        }\n        if (branch.length === 0) {\n            throw new Error(\"trace.toTree(): integrity check: dummy root node disappeared?\");\n        }\n        /* if no record for start rule: find the pseudo root node (first dummy node above a real node) */ root = dummy.children[0];\n        let prev = root;\n        while(root && !root.down && !root.up){\n            prev = root;\n            root = root.children[0];\n        }\n        root = prev;\n        /* walk the tree of nodes: label brances and count leaves */ root.leftMost = true;\n        root.rightMost = true;\n        walk(root);\n        root.branch = 0;\n        /* generate the exported object */ const obj = {};\n        obj.string = [];\n        for(let i = 0; i < chars.length; i += 1){\n            obj.string[i] = chars[i];\n        }\n        /* generate the exported rule names */ obj.rules = [];\n        for(let i = 0; i < rules.length; i += 1){\n            obj.rules[i] = rules[i].name;\n        }\n        /* generate the exported UDT names */ obj.udts = [];\n        for(let i = 0; i < udts.length; i += 1){\n            obj.udts[i] = udts[i].name;\n        }\n        /* generate the ids */ obj.id = {};\n        obj.id.ALT = {\n            id: id.ALT,\n            name: \"ALT\"\n        };\n        obj.id.CAT = {\n            id: id.CAT,\n            name: \"CAT\"\n        };\n        obj.id.REP = {\n            id: id.REP,\n            name: \"REP\"\n        };\n        obj.id.RNM = {\n            id: id.RNM,\n            name: \"RNM\"\n        };\n        obj.id.TLS = {\n            id: id.TLS,\n            name: \"TLS\"\n        };\n        obj.id.TBS = {\n            id: id.TBS,\n            name: \"TBS\"\n        };\n        obj.id.TRG = {\n            id: id.TRG,\n            name: \"TRG\"\n        };\n        obj.id.UDT = {\n            id: id.UDT,\n            name: \"UDT\"\n        };\n        obj.id.AND = {\n            id: id.AND,\n            name: \"AND\"\n        };\n        obj.id.NOT = {\n            id: id.NOT,\n            name: \"NOT\"\n        };\n        obj.id.BKR = {\n            id: id.BKR,\n            name: \"BKR\"\n        };\n        obj.id.BKA = {\n            id: id.BKA,\n            name: \"BKA\"\n        };\n        obj.id.BKN = {\n            id: id.BKN,\n            name: \"BKN\"\n        };\n        obj.id.ABG = {\n            id: id.ABG,\n            name: \"ABG\"\n        };\n        obj.id.AEN = {\n            id: id.AEN,\n            name: \"AEN\"\n        };\n        obj.id.ACTIVE = {\n            id: id.ACTIVE,\n            name: \"ACTIVE\"\n        };\n        obj.id.MATCH = {\n            id: id.MATCH,\n            name: \"MATCH\"\n        };\n        obj.id.EMPTY = {\n            id: id.EMPTY,\n            name: \"EMPTY\"\n        };\n        obj.id.NOMATCH = {\n            id: id.NOMATCH,\n            name: \"NOMATCH\"\n        };\n        /* generate the max tree depth */ obj.treeDepth = treeDepth;\n        /* generate the number of leaf nodes (branches) */ obj.leafNodes = leafNodes;\n        /* generate the types of the left- and right-most branches */ let branchesIncomplete;\n        if (root.down) {\n            if (root.up) {\n                branchesIncomplete = \"none\";\n            } else {\n                branchesIncomplete = \"right\";\n            }\n        } else if (root.up) {\n            branchesIncomplete = \"left\";\n        } else {\n            branchesIncomplete = \"both\";\n        }\n        obj.branchesIncomplete = branchesIncomplete;\n        obj.tree = display(root, root.depth, false);\n        return obj;\n    };\n    // Returns the trace records as JSON parse tree object.\n    // - stringify: if `true`, the object is 'stringified' before returning, otherwise, the object itself is returned.\n    this.toTree = function(stringify) {\n        const obj = toTreeObj();\n        if (stringify) {\n            return JSON.stringify(obj);\n        }\n        return obj;\n    };\n    // Translate the trace records to HTML format and create a complete HTML page for browser display.\n    this.toHtmlPage = function(mode, caption, title) {\n        return utils.htmlToPage(this.toHtml(mode, caption), title);\n    };\n    /* From here on down, these are just helper functions for `toHtml()`. */ const htmlHeader = function(mode, caption) {\n        /* open the page */ /* write the HTML5 header with table style */ /* open the <table> tag */ let modeName;\n        switch(mode){\n            case MODE_HEX:\n                modeName = \"hexadecimal\";\n                break;\n            case MODE_DEC:\n                modeName = \"decimal\";\n                break;\n            case MODE_ASCII:\n                modeName = \"ASCII\";\n                break;\n            case MODE_UNICODE:\n                modeName = \"UNICODE\";\n                break;\n            default:\n                throw new Error(`${thisFileName}htmlHeader: unrecognized mode: ${mode}`);\n        }\n        let header = \"\";\n        header += `<p>display mode: ${modeName}</p>\\n`;\n        header += `<table class=\"${style.CLASS_TRACE}\">\\n`;\n        if (typeof caption === \"string\") {\n            header += `<caption>${caption}</caption>`;\n        }\n        return header;\n    };\n    const htmlFooter = function() {\n        let footer = \"\";\n        /* close the </table> tag */ footer += \"</table>\\n\";\n        /* display a table legend */ footer += `<p class=\"${style.CLASS_MONOSPACE}\">legend:<br>\\n`;\n        footer += \"(a)&nbsp;-&nbsp;line number<br>\\n\";\n        footer += \"(b)&nbsp;-&nbsp;matching line number<br>\\n\";\n        footer += \"(c)&nbsp;-&nbsp;phrase offset<br>\\n\";\n        footer += \"(d)&nbsp;-&nbsp;phrase length<br>\\n\";\n        footer += \"(e)&nbsp;-&nbsp;tree depth<br>\\n\";\n        footer += \"(f)&nbsp;-&nbsp;operator state<br>\\n\";\n        footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_ACTIVE}\">&darr;</span>&nbsp;&nbsp;phrase opened<br>\\n`;\n        footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_MATCH}\">&uarr;M</span> phrase matched<br>\\n`;\n        footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_EMPTY}\">&uarr;E</span> empty phrase matched<br>\\n`;\n        footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_NOMATCH}\">&uarr;N</span> phrase not matched<br>\\n`;\n        footer += \"operator&nbsp;-&nbsp;ALT, CAT, REP, RNM, TRG, TLS, TBS<sup>&dagger;</sup>, UDT, AND, NOT, BKA, BKN, BKR, ABG, AEN<sup>&Dagger;</sup><br>\\n\";\n        footer += `phrase&nbsp;&nbsp;&nbsp;-&nbsp;up to ${MAX_PHRASE} characters of the phrase being matched<br>\\n`;\n        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_MATCH}\">matched characters</span><br>\\n`;\n        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_LOOKAHEAD}\">matched characters in look ahead mode</span><br>\\n`;\n        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_LOOKBEHIND}\">matched characters in look behind mode</span><br>\\n`;\n        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_REMAINDER}\">remainder characters(not yet examined by parser)</span><br>\\n`;\n        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_CTRLCHAR}\">control characters, TAB, LF, CR, etc. (ASCII mode only)</span><br>\\n`;\n        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;${PHRASE_EMPTY} empty string<br>\\n`;\n        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;${PHRASE_END} end of input string<br>\\n`;\n        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;${PHRASE_CONTINUE} input string display truncated<br>\\n`;\n        footer += \"</p>\\n\";\n        footer += `<p class=\"${style.CLASS_MONOSPACE}\">\\n`;\n        footer += \"<sup>&dagger;</sup>original ABNF operators:<br>\\n\";\n        footer += \"ALT - alternation<br>\\n\";\n        footer += \"CAT - concatenation<br>\\n\";\n        footer += \"REP - repetition<br>\\n\";\n        footer += \"RNM - rule name<br>\\n\";\n        footer += \"TRG - terminal range<br>\\n\";\n        footer += \"TLS - terminal literal string (case insensitive)<br>\\n\";\n        footer += \"TBS - terminal binary string (case sensitive)<br>\\n\";\n        footer += \"<br>\\n\";\n        footer += \"<sup>&Dagger;</sup>super set SABNF operators:<br>\\n\";\n        footer += \"UDT - user-defined terminal<br>\\n\";\n        footer += \"AND - positive look ahead<br>\\n\";\n        footer += \"NOT - negative look ahead<br>\\n\";\n        footer += \"BKA - positive look behind<br>\\n\";\n        footer += \"BKN - negative look behind<br>\\n\";\n        footer += \"BKR - back reference<br>\\n\";\n        footer += \"ABG - anchor - begin of input string<br>\\n\";\n        footer += \"AEN - anchor - end of input string<br>\\n\";\n        footer += \"</p>\\n\";\n        return footer;\n    };\n    this.indent = function(depth) {\n        let html = \"\";\n        for(let i = 0; i < depth; i += 1){\n            html += \".\";\n        }\n        return html;\n    };\n    /* format the TRG operator */ const displayTrg = function(mode, op) {\n        let html = \"\";\n        if (op.type === id.TRG) {\n            if (mode === MODE_HEX || mode === MODE_UNICODE) {\n                let hex = op.min.toString(16).toUpperCase();\n                if (hex.length % 2 !== 0) {\n                    hex = `0${hex}`;\n                }\n                html += mode === MODE_HEX ? \"%x\" : \"U+\";\n                html += hex;\n                hex = op.max.toString(16).toUpperCase();\n                if (hex.length % 2 !== 0) {\n                    hex = `0${hex}`;\n                }\n                html += `&ndash;${hex}`;\n            } else {\n                html = `%d${op.min.toString(10)}&ndash;${op.max.toString(10)}`;\n            }\n        }\n        return html;\n    };\n    /* format the REP operator */ const displayRep = function(mode, op) {\n        let html = \"\";\n        if (op.type === id.REP) {\n            if (mode === MODE_HEX) {\n                let hex = op.min.toString(16).toUpperCase();\n                if (hex.length % 2 !== 0) {\n                    hex = `0${hex}`;\n                }\n                html = `x${hex}`;\n                if (op.max < Infinity) {\n                    hex = op.max.toString(16).toUpperCase();\n                    if (hex.length % 2 !== 0) {\n                        hex = `0${hex}`;\n                    }\n                } else {\n                    hex = \"inf\";\n                }\n                html += `&ndash;${hex}`;\n            } else if (op.max < Infinity) {\n                html = `${op.min.toString(10)}&ndash;${op.max.toString(10)}`;\n            } else {\n                html = `${op.min.toString(10)}&ndash;inf`;\n            }\n        }\n        return html;\n    };\n    /* format the TBS operator */ const displayTbs = function(mode, op) {\n        let html = \"\";\n        if (op.type === id.TBS) {\n            const len = Math.min(op.string.length, MAX_TLS * 2);\n            if (mode === MODE_HEX || mode === MODE_UNICODE) {\n                html += mode === MODE_HEX ? \"%x\" : \"U+\";\n                for(let i = 0; i < len; i += 1){\n                    let hex;\n                    if (i > 0) {\n                        html += \".\";\n                    }\n                    hex = op.string[i].toString(16).toUpperCase();\n                    if (hex.length % 2 !== 0) {\n                        hex = `0${hex}`;\n                    }\n                    html += hex;\n                }\n            } else {\n                html = \"%d\";\n                for(let i = 0; i < len; i += 1){\n                    if (i > 0) {\n                        html += \".\";\n                    }\n                    html += op.string[i].toString(10);\n                }\n            }\n            if (len < op.string.length) {\n                html += PHRASE_CONTINUE;\n            }\n        }\n        return html;\n    };\n    /* format the TLS operator */ const displayTls = function(mode, op) {\n        let html = \"\";\n        if (op.type === id.TLS) {\n            const len = Math.min(op.string.length, MAX_TLS);\n            if (mode === MODE_HEX || mode === MODE_DEC) {\n                let charu;\n                let charl;\n                let base;\n                if (mode === MODE_HEX) {\n                    html = \"%x\";\n                    base = 16;\n                } else {\n                    html = \"%d\";\n                    base = 10;\n                }\n                for(let i = 0; i < len; i += 1){\n                    if (i > 0) {\n                        html += \".\";\n                    }\n                    charl = op.string[i];\n                    if (charl >= 97 && charl <= 122) {\n                        charu = charl - 32;\n                        html += `${charu.toString(base)}/${charl.toString(base)}`.toUpperCase();\n                    } else if (charl >= 65 && charl <= 90) {\n                        charu = charl;\n                        charl += 32;\n                        html += `${charu.toString(base)}/${charl.toString(base)}`.toUpperCase();\n                    } else {\n                        html += charl.toString(base).toUpperCase();\n                    }\n                }\n                if (len < op.string.length) {\n                    html += PHRASE_CONTINUE;\n                }\n            } else {\n                html = '\"';\n                for(let i = 0; i < len; i += 1){\n                    html += utils.asciiChars[op.string[i]];\n                }\n                if (len < op.string.length) {\n                    html += PHRASE_CONTINUE;\n                }\n                html += '\"';\n            }\n        }\n        return html;\n    };\n    const subPhrase = function(mode, charsArg, index, length, prev) {\n        if (length === 0) {\n            return \"\";\n        }\n        let phrase = \"\";\n        const comma = prev ? \",\" : \"\";\n        switch(mode){\n            case MODE_HEX:\n                phrase = comma + utils.charsToHex(charsArg, index, length);\n                break;\n            case MODE_DEC:\n                if (prev) {\n                    return `,${utils.charsToDec(charsArg, index, length)}`;\n                }\n                phrase = comma + utils.charsToDec(charsArg, index, length);\n                break;\n            case MODE_UNICODE:\n                phrase = utils.charsToUnicode(charsArg, index, length);\n                break;\n            case MODE_ASCII:\n            default:\n                phrase = utils.charsToAsciiHtml(charsArg, index, length);\n                break;\n        }\n        return phrase;\n    };\n    /* display phrases matched in look-behind mode */ const displayBehind = function(mode, charsArg, state, index, length, anchor) {\n        let html = \"\";\n        let beg1;\n        let len1;\n        let beg2;\n        let len2;\n        let lastchar = PHRASE_END;\n        const spanBehind = `<span class=\"${style.CLASS_LOOKBEHIND}\">`;\n        const spanRemainder = `<span class=\"${style.CLASS_REMAINDER}\">`;\n        const spanend = \"</span>\";\n        let prev = false;\n        switch(state){\n            case id.EMPTY:\n                html += PHRASE_EMPTY;\n            /* // eslint-disable-next-line no-fallthrough */ case id.NOMATCH:\n            case id.MATCH:\n            case id.ACTIVE:\n                beg1 = index - length;\n                len1 = anchor - beg1;\n                beg2 = anchor;\n                len2 = charsArg.length - beg2;\n                break;\n            default:\n                throw new Error(\"unrecognized state\");\n        }\n        lastchar = PHRASE_END;\n        if (len1 > MAX_PHRASE) {\n            len1 = MAX_PHRASE;\n            lastchar = PHRASE_CONTINUE;\n            len2 = 0;\n        } else if (len1 + len2 > MAX_PHRASE) {\n            lastchar = PHRASE_CONTINUE;\n            len2 = MAX_PHRASE - len1;\n        }\n        if (len1 > 0) {\n            html += spanBehind;\n            html += subPhrase(mode, charsArg, beg1, len1, prev);\n            html += spanend;\n            prev = true;\n        }\n        if (len2 > 0) {\n            html += spanRemainder;\n            html += subPhrase(mode, charsArg, beg2, len2, prev);\n            html += spanend;\n        }\n        return html + lastchar;\n    };\n    const displayForward = function(mode, charsArg, state, index, length, spanAhead) {\n        let html = \"\";\n        let beg1;\n        let len1;\n        let beg2;\n        let len2;\n        let lastchar = PHRASE_END;\n        const spanRemainder = `<span class=\"${style.CLASS_REMAINDER}\">`;\n        const spanend = \"</span>\";\n        let prev = false;\n        switch(state){\n            case id.EMPTY:\n                html += PHRASE_EMPTY;\n            /* // eslint-disable-next-line no-fallthrough */ case id.NOMATCH:\n            case id.ACTIVE:\n                beg1 = index;\n                len1 = 0;\n                beg2 = index;\n                len2 = charsArg.length - beg2;\n                break;\n            case id.MATCH:\n                beg1 = index;\n                len1 = length;\n                beg2 = index + len1;\n                len2 = charsArg.length - beg2;\n                break;\n            default:\n                throw new Error(\"unrecognized state\");\n        }\n        lastchar = PHRASE_END;\n        if (len1 > MAX_PHRASE) {\n            len1 = MAX_PHRASE;\n            lastchar = PHRASE_CONTINUE;\n            len2 = 0;\n        } else if (len1 + len2 > MAX_PHRASE) {\n            lastchar = PHRASE_CONTINUE;\n            len2 = MAX_PHRASE - len1;\n        }\n        if (len1 > 0) {\n            html += spanAhead;\n            html += subPhrase(mode, charsArg, beg1, len1, prev);\n            html += spanend;\n            prev = true;\n        }\n        if (len2 > 0) {\n            html += spanRemainder;\n            html += subPhrase(mode, charsArg, beg2, len2, prev);\n            html += spanend;\n        }\n        return html + lastchar;\n    };\n    /* display phrases matched in look-ahead mode */ const displayAhead = function(mode, charsArg, state, index, length) {\n        const spanAhead = `<span class=\"${style.CLASS_LOOKAHEAD}\">`;\n        return displayForward(mode, charsArg, state, index, length, spanAhead);\n    };\n    /* display phrases matched in normal parsing mode */ const displayNone = function(mode, charsArg, state, index, length) {\n        const spanAhead = `<span class=\"${style.CLASS_MATCH}\">`;\n        return displayForward(mode, charsArg, state, index, length, spanAhead);\n    };\n    /* Returns the filtered records, formatted as an HTML table. */ const htmlTable = function(mode) {\n        if (rules === null) {\n            return \"\";\n        }\n        let html = \"\";\n        let thisLine;\n        let thatLine;\n        let lookAhead;\n        let lookBehind;\n        let lookAround;\n        let anchor;\n        html += \"<tr><th>(a)</th><th>(b)</th><th>(c)</th><th>(d)</th><th>(e)</th><th>(f)</th>\";\n        html += \"<th>operator</th><th>phrase</th></tr>\\n\";\n        circular.forEach((lineIndex)=>{\n            const line = records[lineIndex];\n            thisLine = line.thisLine;\n            thatLine = line.thatLine !== undefined ? line.thatLine : \"--\";\n            lookAhead = false;\n            lookBehind = false;\n            lookAround = false;\n            if (line.lookAround === id.LOOKAROUND_AHEAD) {\n                lookAhead = true;\n                lookAround = true;\n                anchor = line.lookAnchor;\n            }\n            if (line.opcode.type === id.AND || line.opcode.type === id.NOT) {\n                lookAhead = true;\n                lookAround = true;\n                anchor = line.phraseIndex;\n            }\n            if (line.lookAround === id.LOOKAROUND_BEHIND) {\n                lookBehind = true;\n                lookAround = true;\n                anchor = line.lookAnchor;\n            }\n            if (line.opcode.type === id.BKA || line.opcode.type === id.BKN) {\n                lookBehind = true;\n                lookAround = true;\n                anchor = line.phraseIndex;\n            }\n            html += \"<tr>\";\n            html += `<td>${thisLine}</td><td>${thatLine}</td>`;\n            html += `<td>${line.phraseIndex}</td>`;\n            html += `<td>${line.phraseLength}</td>`;\n            html += `<td>${line.depth}</td>`;\n            html += \"<td>\";\n            switch(line.state){\n                case id.ACTIVE:\n                    html += `<span class=\"${style.CLASS_ACTIVE}\">&darr;&nbsp;</span>`;\n                    break;\n                case id.MATCH:\n                    html += `<span class=\"${style.CLASS_MATCH}\">&uarr;M</span>`;\n                    break;\n                case id.NOMATCH:\n                    html += `<span class=\"${style.CLASS_NOMATCH}\">&uarr;N</span>`;\n                    break;\n                case id.EMPTY:\n                    html += `<span class=\"${style.CLASS_EMPTY}\">&uarr;E</span>`;\n                    break;\n                default:\n                    html += `<span class=\"${style.CLASS_ACTIVE}\">--</span>`;\n                    break;\n            }\n            html += \"</td>\";\n            html += \"<td>\";\n            html += that.indent(line.depth);\n            if (lookAhead) {\n                html += `<span class=\"${style.CLASS_LOOKAHEAD}\">`;\n            } else if (lookBehind) {\n                html += `<span class=\"${style.CLASS_LOOKBEHIND}\">`;\n            }\n            html += utils.opcodeToString(line.opcode.type);\n            if (line.opcode.type === id.RNM) {\n                html += `(${rules[line.opcode.index].name}) `;\n            }\n            if (line.opcode.type === id.BKR) {\n                const casetype = line.opcode.bkrCase === id.BKR_MODE_CI ? \"%i\" : \"%s\";\n                const modetype = line.opcode.bkrMode === id.BKR_MODE_UM ? \"%u\" : \"%p\";\n                html += `(\\\\${casetype}${modetype}${rules[line.opcode.index].name}) `;\n            }\n            if (line.opcode.type === id.UDT) {\n                html += `(${udts[line.opcode.index].name}) `;\n            }\n            if (line.opcode.type === id.TRG) {\n                html += `(${displayTrg(mode, line.opcode)}) `;\n            }\n            if (line.opcode.type === id.TBS) {\n                html += `(${displayTbs(mode, line.opcode)}) `;\n            }\n            if (line.opcode.type === id.TLS) {\n                html += `(${displayTls(mode, line.opcode)}) `;\n            }\n            if (line.opcode.type === id.REP) {\n                html += `(${displayRep(mode, line.opcode)}) `;\n            }\n            if (lookAround) {\n                html += \"</span>\";\n            }\n            html += \"</td>\";\n            html += \"<td>\";\n            if (lookBehind) {\n                html += displayBehind(mode, chars, line.state, line.phraseIndex, line.phraseLength, anchor);\n            } else if (lookAhead) {\n                html += displayAhead(mode, chars, line.state, line.phraseIndex, line.phraseLength);\n            } else {\n                html += displayNone(mode, chars, line.state, line.phraseIndex, line.phraseLength);\n            }\n            html += \"</td></tr>\\n\";\n        });\n        html += \"<tr><th>(a)</th><th>(b)</th><th>(c)</th><th>(d)</th><th>(e)</th><th>(f)</th>\";\n        html += \"<th>operator</th><th>phrase</th></tr>\\n\";\n        html += \"</table>\\n\";\n        return html;\n    };\n    // Translate the trace records to HTML format.\n    // - *modearg* - can be `\"ascii\"`, `\"decimal\"`, `\"hexadecimal\"` or `\"unicode\"`.\n    // Determines the format of the string character code display.\n    // - *caption* - optional caption for the HTML table.\n    this.toHtml = function(modearg, caption) {\n        /* writes the trace records as a table in a complete html page */ let mode = MODE_ASCII;\n        if (typeof modearg === \"string\" && modearg.length >= 3) {\n            const modein = modearg.toLowerCase().slice(0, 3);\n            if (modein === \"hex\") {\n                mode = MODE_HEX;\n            } else if (modein === \"dec\") {\n                mode = MODE_DEC;\n            } else if (modein === \"uni\") {\n                mode = MODE_UNICODE;\n            }\n        }\n        let html = \"\";\n        html += htmlHeader(mode, caption);\n        html += htmlTable(mode);\n        html += htmlFooter();\n        return html;\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/trace.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/utilities.js":
/*!******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/utilities.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* eslint-disable func-names */ /*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */ // This module exports a variety of utility functions that support\n// [`apg`](https://github.com/ldthomas/apg-js2), [`apg-lib`](https://github.com/ldthomas/apg-js2-lib)\n// and the generated parser applications.\nconst style = __webpack_require__(/*! ./style */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/style.js\");\nconst converter = __webpack_require__(/*! ../apg-conv-api/converter */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-conv-api/converter.js\");\nconst emitCss = __webpack_require__(/*! ./emitcss */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/emitcss.js\");\nconst id = __webpack_require__(/*! ./identifiers */ \"(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/identifiers.js\");\nconst thisFileName = \"utilities.js: \";\n/* translate (implied) phrase beginning character and length to actual first and last character indexes */ /* used by multiple phrase handling functions */ const getBounds = function(length, begArg, len) {\n    let end;\n    let beg = begArg;\n    const TRUE = true;\n    while(TRUE){\n        if (length <= 0) {\n            beg = 0;\n            end = 0;\n            break;\n        }\n        if (typeof beg !== \"number\") {\n            beg = 0;\n            end = length;\n            break;\n        }\n        if (beg >= length) {\n            beg = length;\n            end = length;\n            break;\n        }\n        if (typeof len !== \"number\") {\n            end = length;\n            break;\n        }\n        end = beg + len;\n        if (end > length) {\n            end = length;\n            break;\n        }\n        break;\n    }\n    return {\n        beg,\n        end\n    };\n};\n// Generates a complete, minimal HTML5 page, inserting the user's HTML text on the page.\n// - *html* - the page text in HTML format\n// - *title* - the HTML page `<title>` - defaults to `htmlToPage`.\nexports.htmlToPage = function(html, titleArg) {\n    let title;\n    if (typeof html !== \"string\") {\n        throw new Error(`${thisFileName}htmlToPage: input HTML is not a string`);\n    }\n    if (typeof titleArg !== \"string\") {\n        title = \"htmlToPage\";\n    } else {\n        title = titleArg;\n    }\n    let page = \"\";\n    page += \"<!DOCTYPE html>\\n\";\n    page += '<html lang=\"en\">\\n';\n    page += \"<head>\\n\";\n    page += '<meta charset=\"utf-8\">\\n';\n    page += `<title>${title}</title>\\n`;\n    page += \"<style>\\n\";\n    page += emitCss();\n    page += \"</style>\\n\";\n    page += \"</head>\\n<body>\\n\";\n    page += `<p>${new Date()}</p>\\n`;\n    page += html;\n    page += \"</body>\\n</html>\\n\";\n    return page;\n};\n// Formats the returned object from `parser.parse()`\n// into an HTML table.\n// ```\n// return {\n//   success : sysData.success,\n//   state : sysData.state,\n//   length : charsLength,\n//   matched : sysData.phraseLength,\n//   maxMatched : maxMatched,\n//   maxTreeDepth : maxTreeDepth,\n//   nodeHits : nodeHits,\n//   inputLength : chars.length,\n//   subBegin : charsBegin,\n//   subEnd : charsEnd,\n//   subLength : charsLength\n// };\n// ```\nexports.parserResultToHtml = function(result, caption) {\n    let cap = null;\n    if (typeof caption === \"string\" && caption !== \"\") {\n        cap = caption;\n    }\n    let success;\n    let state;\n    if (result.success === true) {\n        success = `<span class=\"${style.CLASS_MATCH}\">true</span>`;\n    } else {\n        success = `<span class=\"${style.CLASS_NOMATCH}\">false</span>`;\n    }\n    if (result.state === id.EMPTY) {\n        state = `<span class=\"${style.CLASS_EMPTY}\">EMPTY</span>`;\n    } else if (result.state === id.MATCH) {\n        state = `<span class=\"${style.CLASS_MATCH}\">MATCH</span>`;\n    } else if (result.state === id.NOMATCH) {\n        state = `<span class=\"${style.CLASS_NOMATCH}\">NOMATCH</span>`;\n    } else {\n        state = `<span class=\"${style.CLASS_NOMATCH}\">unrecognized</span>`;\n    }\n    let html = \"\";\n    html += `<table class=\"${style.CLASS_STATE}\">\\n`;\n    if (cap) {\n        html += `<caption>${cap}</caption>\\n`;\n    }\n    html += \"<tr><th>state item</th><th>value</th><th>description</th></tr>\\n\";\n    html += `<tr><td>parser success</td><td>${success}</td>\\n`;\n    html += `<td><span class=\"${style.CLASS_MATCH}\">true</span> if the parse succeeded,\\n`;\n    html += ` <span class=\"${style.CLASS_NOMATCH}\">false</span> otherwise`;\n    html += \"<br><i>NOTE: for success, entire string must be matched</i></td></tr>\\n\";\n    html += `<tr><td>parser state</td><td>${state}</td>\\n`;\n    html += `<td><span class=\"${style.CLASS_EMPTY}\">EMPTY</span>, `;\n    html += `<span class=\"${style.CLASS_MATCH}\">MATCH</span> or \\n`;\n    html += `<span class=\"${style.CLASS_NOMATCH}\">NOMATCH</span></td></tr>\\n`;\n    html += `<tr><td>string length</td><td>${result.length}</td><td>length of the input (sub)string</td></tr>\\n`;\n    html += `<tr><td>matched length</td><td>${result.matched}</td><td>number of input string characters matched</td></tr>\\n`;\n    html += `<tr><td>max matched</td><td>${result.maxMatched}</td><td>maximum number of input string characters matched</td></tr>\\n`;\n    html += `<tr><td>max tree depth</td><td>${result.maxTreeDepth}</td><td>maximum depth of the parse tree reached</td></tr>\\n`;\n    html += `<tr><td>node hits</td><td>${result.nodeHits}</td><td>number of parse tree node hits (opcode function calls)</td></tr>\\n`;\n    html += `<tr><td>input length</td><td>${result.inputLength}</td><td>length of full input string</td></tr>\\n`;\n    html += `<tr><td>sub-string begin</td><td>${result.subBegin}</td><td>sub-string first character index</td></tr>\\n`;\n    html += `<tr><td>sub-string end</td><td>${result.subEnd}</td><td>sub-string end-of-string index</td></tr>\\n`;\n    html += `<tr><td>sub-string length</td><td>${result.subLength}</td><td>sub-string length</td></tr>\\n`;\n    html += \"</table>\\n\";\n    return html;\n};\n// Translates a sub-array of integer character codes into a string.\n// Very useful in callback functions to translate the matched phrases into strings.\nexports.charsToString = function(chars, phraseIndex, phraseLength) {\n    let beg;\n    let end;\n    if (typeof phraseIndex === \"number\") {\n        if (phraseIndex >= chars.length) {\n            return \"\";\n        }\n        beg = phraseIndex < 0 ? 0 : phraseIndex;\n    } else {\n        beg = 0;\n    }\n    if (typeof phraseLength === \"number\") {\n        if (phraseLength <= 0) {\n            return \"\";\n        }\n        end = phraseLength > chars.length - beg ? chars.length : beg + phraseLength;\n    } else {\n        end = chars.length;\n    }\n    if (beg < end) {\n        return converter.encode(\"UTF16LE\", chars.slice(beg, end)).toString(\"utf16le\");\n    }\n    return \"\";\n};\n// Translates a string into an array of integer character codes.\nexports.stringToChars = function(string) {\n    return converter.decode(\"STRING\", string);\n};\n// Translates an opcode identifier into a human-readable string.\nexports.opcodeToString = function(type) {\n    let ret = \"unknown\";\n    switch(type){\n        case id.ALT:\n            ret = \"ALT\";\n            break;\n        case id.CAT:\n            ret = \"CAT\";\n            break;\n        case id.RNM:\n            ret = \"RNM\";\n            break;\n        case id.UDT:\n            ret = \"UDT\";\n            break;\n        case id.AND:\n            ret = \"AND\";\n            break;\n        case id.NOT:\n            ret = \"NOT\";\n            break;\n        case id.REP:\n            ret = \"REP\";\n            break;\n        case id.TRG:\n            ret = \"TRG\";\n            break;\n        case id.TBS:\n            ret = \"TBS\";\n            break;\n        case id.TLS:\n            ret = \"TLS\";\n            break;\n        case id.BKR:\n            ret = \"BKR\";\n            break;\n        case id.BKA:\n            ret = \"BKA\";\n            break;\n        case id.BKN:\n            ret = \"BKN\";\n            break;\n        case id.ABG:\n            ret = \"ABG\";\n            break;\n        case id.AEN:\n            ret = \"AEN\";\n            break;\n        default:\n            throw new Error(\"unrecognized opcode\");\n    }\n    return ret;\n};\n// Translates an state identifier into a human-readable string.\nexports.stateToString = function(state) {\n    let ret = \"unknown\";\n    switch(state){\n        case id.ACTIVE:\n            ret = \"ACTIVE\";\n            break;\n        case id.MATCH:\n            ret = \"MATCH\";\n            break;\n        case id.EMPTY:\n            ret = \"EMPTY\";\n            break;\n        case id.NOMATCH:\n            ret = \"NOMATCH\";\n            break;\n        default:\n            throw new Error(\"unrecognized state\");\n    }\n    return ret;\n};\n// Array which translates all 128, 7-bit ASCII character codes to their respective HTML format.\nexports.asciiChars = [\n    \"NUL\",\n    \"SOH\",\n    \"STX\",\n    \"ETX\",\n    \"EOT\",\n    \"ENQ\",\n    \"ACK\",\n    \"BEL\",\n    \"BS\",\n    \"TAB\",\n    \"LF\",\n    \"VT\",\n    \"FF\",\n    \"CR\",\n    \"SO\",\n    \"SI\",\n    \"DLE\",\n    \"DC1\",\n    \"DC2\",\n    \"DC3\",\n    \"DC4\",\n    \"NAK\",\n    \"SYN\",\n    \"ETB\",\n    \"CAN\",\n    \"EM\",\n    \"SUB\",\n    \"ESC\",\n    \"FS\",\n    \"GS\",\n    \"RS\",\n    \"US\",\n    \"&nbsp;\",\n    \"!\",\n    \"&#34;\",\n    \"#\",\n    \"$\",\n    \"%\",\n    \"&#38;\",\n    \"&#39;\",\n    \"(\",\n    \")\",\n    \"*\",\n    \"+\",\n    \",\",\n    \"-\",\n    \".\",\n    \"/\",\n    \"0\",\n    \"1\",\n    \"2\",\n    \"3\",\n    \"4\",\n    \"5\",\n    \"6\",\n    \"7\",\n    \"8\",\n    \"9\",\n    \":\",\n    \";\",\n    \"&#60;\",\n    \"=\",\n    \"&#62;\",\n    \"?\",\n    \"@\",\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n    \"[\",\n    \"&#92;\",\n    \"]\",\n    \"^\",\n    \"_\",\n    \"`\",\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"{\",\n    \"|\",\n    \"}\",\n    \"~\",\n    \"DEL\"\n];\n// Translates a single character to hexadecimal with leading zeros for 2, 4, or 8 digit display.\nexports.charToHex = function(char) {\n    let ch = char.toString(16).toUpperCase();\n    switch(ch.length){\n        case 1:\n        case 3:\n        case 7:\n            ch = `0${ch}`;\n            break;\n        case 2:\n        case 6:\n            ch = `00${ch}`;\n            break;\n        case 4:\n            break;\n        case 5:\n            ch = `000${ch}`;\n            break;\n        default:\n            throw new Error(\"unrecognized option\");\n    }\n    return ch;\n};\n// Translates a sub-array of character codes to decimal display format.\nexports.charsToDec = function(chars, beg, len) {\n    let ret = \"\";\n    if (!Array.isArray(chars)) {\n        throw new Error(`${thisFileName}charsToDec: input must be an array of integers`);\n    }\n    const bounds = getBounds(chars.length, beg, len);\n    if (bounds.end > bounds.beg) {\n        ret += chars[bounds.beg];\n        for(let i = bounds.beg + 1; i < bounds.end; i += 1){\n            ret += `,${chars[i]}`;\n        }\n    }\n    return ret;\n};\n// Translates a sub-array of character codes to hexadecimal display format.\nexports.charsToHex = function(chars, beg, len) {\n    let ret = \"\";\n    if (!Array.isArray(chars)) {\n        throw new Error(`${thisFileName}charsToHex: input must be an array of integers`);\n    }\n    const bounds = getBounds(chars.length, beg, len);\n    if (bounds.end > bounds.beg) {\n        ret += `\\\\x${exports.charToHex(chars[bounds.beg])}`;\n        for(let i = bounds.beg + 1; i < bounds.end; i += 1){\n            ret += `,\\\\x${exports.charToHex(chars[i])}`;\n        }\n    }\n    return ret;\n};\nexports.charsToHtmlEntities = function(chars, beg, len) {\n    let ret = \"\";\n    if (!Array.isArray(chars)) {\n        throw new Error(`${thisFileName}charsToHex: input must be an array of integers`);\n    }\n    const bounds = getBounds(chars.length, beg, len);\n    if (bounds.end > bounds.beg) {\n        for(let i = bounds.beg; i < bounds.end; i += 1){\n            ret += `&#x${chars[i].toString(16)};`;\n        }\n    }\n    return ret;\n};\n// Translates a sub-array of character codes to Unicode display format.\nfunction isUnicode(char) {\n    if (char >= 0xd800 && char <= 0xdfff) {\n        return false;\n    }\n    if (char > 0x10ffff) {\n        return false;\n    }\n    return true;\n}\nexports.charsToUnicode = function(chars, beg, len) {\n    let ret = \"\";\n    if (!Array.isArray(chars)) {\n        throw new Error(`${thisFileName}charsToUnicode: input must be an array of integers`);\n    }\n    const bounds = getBounds(chars.length, beg, len);\n    if (bounds.end > bounds.beg) {\n        for(let i = bounds.beg; i < bounds.end; i += 1){\n            if (isUnicode(chars[i])) {\n                ret += `&#${chars[i]};`;\n            } else {\n                ret += ` U+${exports.charToHex(chars[i])}`;\n            }\n        }\n    }\n    return ret;\n};\n// Translates a sub-array of character codes to JavaScript Unicode display format (`\\uXXXX`).\nexports.charsToJsUnicode = function(chars, beg, len) {\n    let ret = \"\";\n    if (!Array.isArray(chars)) {\n        throw new Error(`${thisFileName}charsToJsUnicode: input must be an array of integers`);\n    }\n    const bounds = getBounds(chars.length, beg, len);\n    if (bounds.end > bounds.beg) {\n        ret += `\\\\u${exports.charToHex(chars[bounds.beg])}`;\n        for(let i = bounds.beg + 1; i < bounds.end; i += 1){\n            ret += `,\\\\u${exports.charToHex(chars[i])}`;\n        }\n    }\n    return ret;\n};\n// Translates a sub-array of character codes to printing ASCII character display format.\nexports.charsToAscii = function(chars, beg, len) {\n    let ret = \"\";\n    if (!Array.isArray(chars)) {\n        throw new Error(`${thisFileName}charsToAscii: input must be an array of integers`);\n    }\n    const bounds = getBounds(chars.length, beg, len);\n    for(let i = bounds.beg; i < bounds.end; i += 1){\n        const char = chars[i];\n        if (char >= 32 && char <= 126) {\n            ret += String.fromCharCode(char);\n        } else {\n            ret += `\\\\x${exports.charToHex(char)}`;\n        }\n    }\n    return ret;\n};\n// Translates a sub-array of character codes to HTML display format.\nexports.charsToAsciiHtml = function(chars, beg, len) {\n    if (!Array.isArray(chars)) {\n        throw new Error(`${thisFileName}charsToAsciiHtml: input must be an array of integers`);\n    }\n    let html = \"\";\n    let char;\n    const bounds = getBounds(chars.length, beg, len);\n    for(let i = bounds.beg; i < bounds.end; i += 1){\n        char = chars[i];\n        if (char < 32 || char === 127) {\n            /* control characters */ html += `<span class=\"${style.CLASS_CTRLCHAR}\">${exports.asciiChars[char]}</span>`;\n        } else if (char > 127) {\n            /* non-ASCII */ html += `<span class=\"${style.CLASS_CTRLCHAR}\">U+${exports.charToHex(char)}</span>`;\n        } else {\n            /* printing ASCII, 32 <= char <= 126 */ html += exports.asciiChars[char];\n        }\n    }\n    return html;\n};\n// Translates a JavaScript string to HTML display format.\nexports.stringToAsciiHtml = function(str) {\n    const chars = converter.decode(\"STRING\", str);\n    return this.charsToAsciiHtml(chars);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/apg-js@4.2.1/node_modules/apg-js/src/apg-lib/utilities.js\n");

/***/ })

};
;