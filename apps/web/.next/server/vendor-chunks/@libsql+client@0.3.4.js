"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@libsql+client@0.3.4";
exports.ids = ["vendor-chunks/@libsql+client@0.3.4"];
exports.modules = {

/***/ "(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/api.js":
/*!************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/api.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LibsqlError: () => (/* binding */ LibsqlError)\n/* harmony export */ });\n/** Error thrown by the client. */ class LibsqlError extends Error {\n    constructor(message, code, cause){\n        if (code !== undefined) {\n            message = `${code}: ${message}`;\n        }\n        super(message, {\n            cause\n        });\n        this.code = code;\n        this.name = \"LibsqlError\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaWJzcWwrY2xpZW50QDAuMy40L25vZGVfbW9kdWxlcy9AbGlic3FsL2NsaWVudC9saWItZXNtL2FwaS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsZ0NBQWdDLEdBQ3pCLE1BQU1BLG9CQUFvQkM7SUFHN0JDLFlBQVlDLE9BQU8sRUFBRUMsSUFBSSxFQUFFQyxLQUFLLENBQUU7UUFDOUIsSUFBSUQsU0FBU0UsV0FBVztZQUNwQkgsVUFBVSxDQUFDLEVBQUVDLEtBQUssRUFBRSxFQUFFRCxRQUFRLENBQUM7UUFDbkM7UUFDQSxLQUFLLENBQUNBLFNBQVM7WUFBRUU7UUFBTTtRQUN2QixJQUFJLENBQUNELElBQUksR0FBR0E7UUFDWixJQUFJLENBQUNHLElBQUksR0FBRztJQUNoQjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHRva2Vuc3RyZWFtL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpYnNxbCtjbGllbnRAMC4zLjQvbm9kZV9tb2R1bGVzL0BsaWJzcWwvY2xpZW50L2xpYi1lc20vYXBpLmpzP2IwOTUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIEVycm9yIHRocm93biBieSB0aGUgY2xpZW50LiAqL1xuZXhwb3J0IGNsYXNzIExpYnNxbEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIC8qKiBNYWNoaW5lLXJlYWRhYmxlIGVycm9yIGNvZGUuICovXG4gICAgY29kZTtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBjb2RlLCBjYXVzZSkge1xuICAgICAgICBpZiAoY29kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBtZXNzYWdlID0gYCR7Y29kZX06ICR7bWVzc2FnZX1gO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIHsgY2F1c2UgfSk7XG4gICAgICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiTGlic3FsRXJyb3JcIjtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiTGlic3FsRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwibWVzc2FnZSIsImNvZGUiLCJjYXVzZSIsInVuZGVmaW5lZCIsIm5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/api.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/config.js":
/*!***************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/config.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   expandConfig: () => (/* binding */ expandConfig)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.js */ \"(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/api.js\");\n/* harmony import */ var _uri_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./uri.js */ \"(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/uri.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ \"(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/util.js\");\n\n\n\nfunction expandConfig(config, preferHttp) {\n    if (typeof config !== \"object\") {\n        // produce a reasonable error message in the common case where users type\n        // `createClient(\"libsql://...\")` instead of `createClient({url: \"libsql://...\"})`\n        throw new TypeError(`Expected client configuration as object, got ${typeof config}`);\n    }\n    const uri = (0,_uri_js__WEBPACK_IMPORTED_MODULE_1__.parseUri)(config.url);\n    let tls = config.tls;\n    let authToken = config.authToken;\n    for (const { key, value } of uri.query?.pairs ?? []){\n        if (key === \"authToken\") {\n            authToken = value ? value : undefined;\n        } else if (key === \"tls\") {\n            if (value === \"0\") {\n                tls = false;\n            } else if (value === \"1\") {\n                tls = true;\n            } else {\n                throw new _api_js__WEBPACK_IMPORTED_MODULE_0__.LibsqlError(`Unknown value for the \"tls\" query argument: ${JSON.stringify(value)}. ` + 'Supported values are \"0\" and \"1\"', \"URL_INVALID\");\n            }\n        } else {\n            throw new _api_js__WEBPACK_IMPORTED_MODULE_0__.LibsqlError(`Unknown URL query parameter ${JSON.stringify(key)}`, \"URL_PARAM_NOT_SUPPORTED\");\n        }\n    }\n    const uriScheme = uri.scheme.toLowerCase();\n    let scheme;\n    if (uriScheme === \"libsql\") {\n        if (tls === false) {\n            if (uri.authority?.port === undefined) {\n                throw new _api_js__WEBPACK_IMPORTED_MODULE_0__.LibsqlError('A \"libsql:\" URL with ?tls=0 must specify an explicit port', \"URL_INVALID\");\n            }\n            scheme = preferHttp ? \"http\" : \"ws\";\n        } else {\n            scheme = preferHttp ? \"https\" : \"wss\";\n        }\n    } else if (uriScheme === \"http\" || uriScheme === \"ws\") {\n        scheme = uriScheme;\n        tls ??= false;\n    } else if (uriScheme === \"https\" || uriScheme === \"wss\" || uriScheme === \"file\") {\n        scheme = uriScheme;\n    } else {\n        throw new _api_js__WEBPACK_IMPORTED_MODULE_0__.LibsqlError('The client supports only \"libsql:\", \"wss:\", \"ws:\", \"https:\", \"http:\" and \"file:\" URLs, ' + `got ${JSON.stringify(uri.scheme + \":\")}. ` + `For more information, please read ${_util_js__WEBPACK_IMPORTED_MODULE_2__.supportedUrlLink}`, \"URL_SCHEME_NOT_SUPPORTED\");\n    }\n    if (uri.fragment !== undefined) {\n        throw new _api_js__WEBPACK_IMPORTED_MODULE_0__.LibsqlError(`URL fragments are not supported: ${JSON.stringify(\"#\" + uri.fragment)}`, \"URL_INVALID\");\n    }\n    const intMode = \"\" + (config.intMode ?? \"number\");\n    if (intMode !== \"number\" && intMode !== \"bigint\" && intMode !== \"string\") {\n        throw new TypeError(`Invalid value for intMode, expected \"number\", \"bigint\" or \"string\", \\\n            got ${JSON.stringify(intMode)}`);\n    }\n    return {\n        scheme,\n        tls: tls ?? true,\n        authority: uri.authority,\n        path: uri.path,\n        authToken,\n        intMode,\n        fetch: config.fetch\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaWJzcWwrY2xpZW50QDAuMy40L25vZGVfbW9kdWxlcy9AbGlic3FsL2NsaWVudC9saWItZXNtL2NvbmZpZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXVDO0FBQ0g7QUFDUztBQUN0QyxTQUFTRyxhQUFhQyxNQUFNLEVBQUVDLFVBQVU7SUFDM0MsSUFBSSxPQUFPRCxXQUFXLFVBQVU7UUFDNUIseUVBQXlFO1FBQ3pFLGtGQUFrRjtRQUNsRixNQUFNLElBQUlFLFVBQVUsQ0FBQyw2Q0FBNkMsRUFBRSxPQUFPRixPQUFPLENBQUM7SUFDdkY7SUFDQSxNQUFNRyxNQUFNTixpREFBUUEsQ0FBQ0csT0FBT0ksR0FBRztJQUMvQixJQUFJQyxNQUFNTCxPQUFPSyxHQUFHO0lBQ3BCLElBQUlDLFlBQVlOLE9BQU9NLFNBQVM7SUFDaEMsS0FBSyxNQUFNLEVBQUVDLEdBQUcsRUFBRUMsS0FBSyxFQUFFLElBQUlMLElBQUlNLEtBQUssRUFBRUMsU0FBUyxFQUFFLENBQUU7UUFDakQsSUFBSUgsUUFBUSxhQUFhO1lBQ3JCRCxZQUFZRSxRQUFRQSxRQUFRRztRQUNoQyxPQUNLLElBQUlKLFFBQVEsT0FBTztZQUNwQixJQUFJQyxVQUFVLEtBQUs7Z0JBQ2ZILE1BQU07WUFDVixPQUNLLElBQUlHLFVBQVUsS0FBSztnQkFDcEJILE1BQU07WUFDVixPQUNLO2dCQUNELE1BQU0sSUFBSVQsZ0RBQVdBLENBQUMsQ0FBQyw0Q0FBNEMsRUFBRWdCLEtBQUtDLFNBQVMsQ0FBQ0wsT0FBTyxFQUFFLENBQUMsR0FDMUYsb0NBQW9DO1lBQzVDO1FBQ0osT0FDSztZQUNELE1BQU0sSUFBSVosZ0RBQVdBLENBQUMsQ0FBQyw0QkFBNEIsRUFBRWdCLEtBQUtDLFNBQVMsQ0FBQ04sS0FBSyxDQUFDLEVBQUU7UUFDaEY7SUFDSjtJQUNBLE1BQU1PLFlBQVlYLElBQUlZLE1BQU0sQ0FBQ0MsV0FBVztJQUN4QyxJQUFJRDtJQUNKLElBQUlELGNBQWMsVUFBVTtRQUN4QixJQUFJVCxRQUFRLE9BQU87WUFDZixJQUFJRixJQUFJYyxTQUFTLEVBQUVDLFNBQVNQLFdBQVc7Z0JBQ25DLE1BQU0sSUFBSWYsZ0RBQVdBLENBQUMsNkRBQTZEO1lBQ3ZGO1lBQ0FtQixTQUFTZCxhQUFhLFNBQVM7UUFDbkMsT0FDSztZQUNEYyxTQUFTZCxhQUFhLFVBQVU7UUFDcEM7SUFDSixPQUNLLElBQUlhLGNBQWMsVUFBVUEsY0FBYyxNQUFNO1FBQ2pEQyxTQUFTRDtRQUNUVCxRQUFRO0lBQ1osT0FDSyxJQUFJUyxjQUFjLFdBQVdBLGNBQWMsU0FBU0EsY0FBYyxRQUFRO1FBQzNFQyxTQUFTRDtJQUNiLE9BQ0s7UUFDRCxNQUFNLElBQUlsQixnREFBV0EsQ0FBQyw0RkFDbEIsQ0FBQyxJQUFJLEVBQUVnQixLQUFLQyxTQUFTLENBQUNWLElBQUlZLE1BQU0sR0FBRyxLQUFLLEVBQUUsQ0FBQyxHQUMzQyxDQUFDLGtDQUFrQyxFQUFFakIsc0RBQWdCQSxDQUFDLENBQUMsRUFBRTtJQUNqRTtJQUNBLElBQUlLLElBQUlnQixRQUFRLEtBQUtSLFdBQVc7UUFDNUIsTUFBTSxJQUFJZixnREFBV0EsQ0FBQyxDQUFDLGlDQUFpQyxFQUFFZ0IsS0FBS0MsU0FBUyxDQUFDLE1BQU1WLElBQUlnQixRQUFRLEVBQUUsQ0FBQyxFQUFFO0lBQ3BHO0lBQ0EsTUFBTUMsVUFBVSxLQUFNcEIsQ0FBQUEsT0FBT29CLE9BQU8sSUFBSSxRQUFPO0lBQy9DLElBQUlBLFlBQVksWUFBWUEsWUFBWSxZQUFZQSxZQUFZLFVBQVU7UUFDdEUsTUFBTSxJQUFJbEIsVUFBVSxDQUFDO2dCQUNiLEVBQUVVLEtBQUtDLFNBQVMsQ0FBQ08sU0FBUyxDQUFDO0lBQ3ZDO0lBQ0EsT0FBTztRQUNITDtRQUNBVixLQUFLQSxPQUFPO1FBQ1pZLFdBQVdkLElBQUljLFNBQVM7UUFDeEJJLE1BQU1sQixJQUFJa0IsSUFBSTtRQUNkZjtRQUNBYztRQUNBRSxPQUFPdEIsT0FBT3NCLEtBQUs7SUFDdkI7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL0B0b2tlbnN0cmVhbS93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaWJzcWwrY2xpZW50QDAuMy40L25vZGVfbW9kdWxlcy9AbGlic3FsL2NsaWVudC9saWItZXNtL2NvbmZpZy5qcz9mYjNiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExpYnNxbEVycm9yIH0gZnJvbSBcIi4vYXBpLmpzXCI7XG5pbXBvcnQgeyBwYXJzZVVyaSB9IGZyb20gXCIuL3VyaS5qc1wiO1xuaW1wb3J0IHsgc3VwcG9ydGVkVXJsTGluayB9IGZyb20gXCIuL3V0aWwuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBleHBhbmRDb25maWcoY29uZmlnLCBwcmVmZXJIdHRwKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgLy8gcHJvZHVjZSBhIHJlYXNvbmFibGUgZXJyb3IgbWVzc2FnZSBpbiB0aGUgY29tbW9uIGNhc2Ugd2hlcmUgdXNlcnMgdHlwZVxuICAgICAgICAvLyBgY3JlYXRlQ2xpZW50KFwibGlic3FsOi8vLi4uXCIpYCBpbnN0ZWFkIG9mIGBjcmVhdGVDbGllbnQoe3VybDogXCJsaWJzcWw6Ly8uLi5cIn0pYFxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBjbGllbnQgY29uZmlndXJhdGlvbiBhcyBvYmplY3QsIGdvdCAke3R5cGVvZiBjb25maWd9YCk7XG4gICAgfVxuICAgIGNvbnN0IHVyaSA9IHBhcnNlVXJpKGNvbmZpZy51cmwpO1xuICAgIGxldCB0bHMgPSBjb25maWcudGxzO1xuICAgIGxldCBhdXRoVG9rZW4gPSBjb25maWcuYXV0aFRva2VuO1xuICAgIGZvciAoY29uc3QgeyBrZXksIHZhbHVlIH0gb2YgdXJpLnF1ZXJ5Py5wYWlycyA/PyBbXSkge1xuICAgICAgICBpZiAoa2V5ID09PSBcImF1dGhUb2tlblwiKSB7XG4gICAgICAgICAgICBhdXRoVG9rZW4gPSB2YWx1ZSA/IHZhbHVlIDogdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJ0bHNcIikge1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSBcIjBcIikge1xuICAgICAgICAgICAgICAgIHRscyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodmFsdWUgPT09IFwiMVwiKSB7XG4gICAgICAgICAgICAgICAgdGxzID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBMaWJzcWxFcnJvcihgVW5rbm93biB2YWx1ZSBmb3IgdGhlIFwidGxzXCIgcXVlcnkgYXJndW1lbnQ6ICR7SlNPTi5zdHJpbmdpZnkodmFsdWUpfS4gYCArXG4gICAgICAgICAgICAgICAgICAgICdTdXBwb3J0ZWQgdmFsdWVzIGFyZSBcIjBcIiBhbmQgXCIxXCInLCBcIlVSTF9JTlZBTElEXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IExpYnNxbEVycm9yKGBVbmtub3duIFVSTCBxdWVyeSBwYXJhbWV0ZXIgJHtKU09OLnN0cmluZ2lmeShrZXkpfWAsIFwiVVJMX1BBUkFNX05PVF9TVVBQT1JURURcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgdXJpU2NoZW1lID0gdXJpLnNjaGVtZS50b0xvd2VyQ2FzZSgpO1xuICAgIGxldCBzY2hlbWU7XG4gICAgaWYgKHVyaVNjaGVtZSA9PT0gXCJsaWJzcWxcIikge1xuICAgICAgICBpZiAodGxzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgaWYgKHVyaS5hdXRob3JpdHk/LnBvcnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBMaWJzcWxFcnJvcignQSBcImxpYnNxbDpcIiBVUkwgd2l0aCA/dGxzPTAgbXVzdCBzcGVjaWZ5IGFuIGV4cGxpY2l0IHBvcnQnLCBcIlVSTF9JTlZBTElEXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2NoZW1lID0gcHJlZmVySHR0cCA/IFwiaHR0cFwiIDogXCJ3c1wiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2NoZW1lID0gcHJlZmVySHR0cCA/IFwiaHR0cHNcIiA6IFwid3NzXCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodXJpU2NoZW1lID09PSBcImh0dHBcIiB8fCB1cmlTY2hlbWUgPT09IFwid3NcIikge1xuICAgICAgICBzY2hlbWUgPSB1cmlTY2hlbWU7XG4gICAgICAgIHRscyA/Pz0gZmFsc2U7XG4gICAgfVxuICAgIGVsc2UgaWYgKHVyaVNjaGVtZSA9PT0gXCJodHRwc1wiIHx8IHVyaVNjaGVtZSA9PT0gXCJ3c3NcIiB8fCB1cmlTY2hlbWUgPT09IFwiZmlsZVwiKSB7XG4gICAgICAgIHNjaGVtZSA9IHVyaVNjaGVtZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBMaWJzcWxFcnJvcignVGhlIGNsaWVudCBzdXBwb3J0cyBvbmx5IFwibGlic3FsOlwiLCBcIndzczpcIiwgXCJ3czpcIiwgXCJodHRwczpcIiwgXCJodHRwOlwiIGFuZCBcImZpbGU6XCIgVVJMcywgJyArXG4gICAgICAgICAgICBgZ290ICR7SlNPTi5zdHJpbmdpZnkodXJpLnNjaGVtZSArIFwiOlwiKX0uIGAgK1xuICAgICAgICAgICAgYEZvciBtb3JlIGluZm9ybWF0aW9uLCBwbGVhc2UgcmVhZCAke3N1cHBvcnRlZFVybExpbmt9YCwgXCJVUkxfU0NIRU1FX05PVF9TVVBQT1JURURcIik7XG4gICAgfVxuICAgIGlmICh1cmkuZnJhZ21lbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgTGlic3FsRXJyb3IoYFVSTCBmcmFnbWVudHMgYXJlIG5vdCBzdXBwb3J0ZWQ6ICR7SlNPTi5zdHJpbmdpZnkoXCIjXCIgKyB1cmkuZnJhZ21lbnQpfWAsIFwiVVJMX0lOVkFMSURcIik7XG4gICAgfVxuICAgIGNvbnN0IGludE1vZGUgPSBcIlwiICsgKGNvbmZpZy5pbnRNb2RlID8/IFwibnVtYmVyXCIpO1xuICAgIGlmIChpbnRNb2RlICE9PSBcIm51bWJlclwiICYmIGludE1vZGUgIT09IFwiYmlnaW50XCIgJiYgaW50TW9kZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIHZhbHVlIGZvciBpbnRNb2RlLCBleHBlY3RlZCBcIm51bWJlclwiLCBcImJpZ2ludFwiIG9yIFwic3RyaW5nXCIsIFxcXG4gICAgICAgICAgICBnb3QgJHtKU09OLnN0cmluZ2lmeShpbnRNb2RlKX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2NoZW1lLFxuICAgICAgICB0bHM6IHRscyA/PyB0cnVlLFxuICAgICAgICBhdXRob3JpdHk6IHVyaS5hdXRob3JpdHksXG4gICAgICAgIHBhdGg6IHVyaS5wYXRoLFxuICAgICAgICBhdXRoVG9rZW4sXG4gICAgICAgIGludE1vZGUsXG4gICAgICAgIGZldGNoOiBjb25maWcuZmV0Y2gsXG4gICAgfTtcbn1cbiJdLCJuYW1lcyI6WyJMaWJzcWxFcnJvciIsInBhcnNlVXJpIiwic3VwcG9ydGVkVXJsTGluayIsImV4cGFuZENvbmZpZyIsImNvbmZpZyIsInByZWZlckh0dHAiLCJUeXBlRXJyb3IiLCJ1cmkiLCJ1cmwiLCJ0bHMiLCJhdXRoVG9rZW4iLCJrZXkiLCJ2YWx1ZSIsInF1ZXJ5IiwicGFpcnMiLCJ1bmRlZmluZWQiLCJKU09OIiwic3RyaW5naWZ5IiwidXJpU2NoZW1lIiwic2NoZW1lIiwidG9Mb3dlckNhc2UiLCJhdXRob3JpdHkiLCJwb3J0IiwiZnJhZ21lbnQiLCJpbnRNb2RlIiwicGF0aCIsImZldGNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/config.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/hrana.js":
/*!**************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/hrana.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HranaTransaction: () => (/* binding */ HranaTransaction),\n/* harmony export */   executeHranaBatch: () => (/* binding */ executeHranaBatch),\n/* harmony export */   mapHranaError: () => (/* binding */ mapHranaError),\n/* harmony export */   resultSetFromHrana: () => (/* binding */ resultSetFromHrana),\n/* harmony export */   stmtToHrana: () => (/* binding */ stmtToHrana)\n/* harmony export */ });\n/* harmony import */ var _libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @libsql/hrana-client */ \"(rsc)/../../node_modules/.pnpm/@libsql+hrana-client@0.5.5/node_modules/@libsql/hrana-client/lib-esm/index.js\");\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./api.js */ \"(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/api.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ \"(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/util.js\");\n\n\n\nclass HranaTransaction {\n    #mode;\n    #version;\n    // Promise that is resolved when the BEGIN statement completes, or `undefined` if we haven't executed the\n    // BEGIN statement yet.\n    #started;\n    /** @private */ constructor(mode, version){\n        this.#mode = mode;\n        this.#version = version;\n        this.#started = undefined;\n    }\n    execute(stmt) {\n        return this.batch([\n            stmt\n        ]).then((results)=>results[0]);\n    }\n    async batch(stmts) {\n        const stream = this._getStream();\n        if (stream.closed) {\n            throw new _api_js__WEBPACK_IMPORTED_MODULE_1__.LibsqlError(\"Cannot execute statements because the transaction is closed\", \"TRANSACTION_CLOSED\");\n        }\n        try {\n            const hranaStmts = stmts.map(stmtToHrana);\n            let rowsPromises;\n            if (this.#started === undefined) {\n                // The transaction hasn't started yet, so we need to send the BEGIN statement in a batch with\n                // `hranaStmts`.\n                this._getSqlCache().apply(hranaStmts);\n                const batch = stream.batch(this.#version >= 3);\n                const beginStep = batch.step();\n                const beginPromise = beginStep.run((0,_util_js__WEBPACK_IMPORTED_MODULE_2__.transactionModeToBegin)(this.#mode));\n                // Execute the `hranaStmts` only if the BEGIN succeeded, to make sure that we don't execute it\n                // outside of a transaction.\n                let lastStep = beginStep;\n                rowsPromises = hranaStmts.map((hranaStmt)=>{\n                    const stmtStep = batch.step().condition(_libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__.BatchCond.ok(lastStep));\n                    if (this.#version >= 3) {\n                        // If the Hrana version supports it, make sure that we are still in a transaction\n                        stmtStep.condition(_libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__.BatchCond.not(_libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__.BatchCond.isAutocommit(batch)));\n                    }\n                    const rowsPromise = stmtStep.query(hranaStmt);\n                    rowsPromise.catch(()=>undefined); // silence Node warning\n                    lastStep = stmtStep;\n                    return rowsPromise;\n                });\n                // `this.#started` is resolved successfully only if the batch and the BEGIN statement inside\n                // of the batch are both successful.\n                this.#started = batch.execute().then(()=>beginPromise).then(()=>undefined);\n                try {\n                    await this.#started;\n                } catch (e) {\n                    // If the BEGIN failed, the transaction is unusable and we must close it. However, if the\n                    // BEGIN suceeds and `hranaStmts` fail, the transaction is _not_ closed.\n                    this.close();\n                    throw e;\n                }\n            } else {\n                if (this.#version < 3) {\n                    // The transaction has started, so we must wait until the BEGIN statement completed to make\n                    // sure that we don't execute `hranaStmts` outside of a transaction.\n                    await this.#started;\n                } else {\n                // The transaction has started, but we will use `hrana.BatchCond.isAutocommit()` to make\n                // sure that we don't execute `hranaStmts` outside of a transaction, so we don't have to\n                // wait for `this.#started`\n                }\n                this._getSqlCache().apply(hranaStmts);\n                const batch = stream.batch(this.#version >= 3);\n                let lastStep = undefined;\n                rowsPromises = hranaStmts.map((hranaStmt)=>{\n                    const stmtStep = batch.step();\n                    if (lastStep !== undefined) {\n                        stmtStep.condition(_libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__.BatchCond.ok(lastStep));\n                    }\n                    if (this.#version >= 3) {\n                        stmtStep.condition(_libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__.BatchCond.not(_libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__.BatchCond.isAutocommit(batch)));\n                    }\n                    const rowsPromise = stmtStep.query(hranaStmt);\n                    rowsPromise.catch(()=>undefined); // silence Node warning\n                    lastStep = stmtStep;\n                    return rowsPromise;\n                });\n                await batch.execute();\n            }\n            const resultSets = [];\n            for (const rowsPromise of rowsPromises){\n                const rows = await rowsPromise;\n                if (rows === undefined) {\n                    throw new _api_js__WEBPACK_IMPORTED_MODULE_1__.LibsqlError(\"Statement in a transaction was not executed, \" + \"probably because the transaction has been rolled back\", \"TRANSACTION_CLOSED\");\n                }\n                resultSets.push(resultSetFromHrana(rows));\n            }\n            return resultSets;\n        } catch (e) {\n            throw mapHranaError(e);\n        }\n    }\n    async executeMultiple(sql) {\n        const stream = this._getStream();\n        if (stream.closed) {\n            throw new _api_js__WEBPACK_IMPORTED_MODULE_1__.LibsqlError(\"Cannot execute statements because the transaction is closed\", \"TRANSACTION_CLOSED\");\n        }\n        try {\n            if (this.#started === undefined) {\n                // If the transaction hasn't started yet, start it now\n                this.#started = stream.run((0,_util_js__WEBPACK_IMPORTED_MODULE_2__.transactionModeToBegin)(this.#mode)).then(()=>undefined);\n                try {\n                    await this.#started;\n                } catch (e) {\n                    this.close();\n                    throw e;\n                }\n            } else {\n                // Wait until the transaction has started\n                await this.#started;\n            }\n            await stream.sequence(sql);\n        } catch (e) {\n            throw mapHranaError(e);\n        }\n    }\n    async rollback() {\n        try {\n            const stream = this._getStream();\n            if (stream.closed) {\n                return;\n            }\n            if (this.#started !== undefined) {\n            // We don't have to wait for the BEGIN statement to complete. If the BEGIN fails, we will\n            // execute a ROLLBACK outside of an active transaction, which should be harmless.\n            } else {\n                // We did nothing in the transaction, so there is nothing to rollback.\n                return;\n            }\n            // Pipeline the ROLLBACK statement and the stream close.\n            const promise = stream.run(\"ROLLBACK\").catch((e)=>{\n                throw mapHranaError(e);\n            });\n            stream.closeGracefully();\n            await promise;\n        } catch (e) {\n            throw mapHranaError(e);\n        } finally{\n            // `this.close()` may close the `hrana.Client`, which aborts all pending stream requests, so we\n            // must call it _after_ we receive the ROLLBACK response.\n            // Also note that the current stream should already be closed, but we need to call `this.close()`\n            // anyway, because it may need to do more cleanup.\n            this.close();\n        }\n    }\n    async commit() {\n        // (this method is analogous to `rollback()`)\n        try {\n            const stream = this._getStream();\n            if (stream.closed) {\n                throw new _api_js__WEBPACK_IMPORTED_MODULE_1__.LibsqlError(\"Cannot commit the transaction because it is already closed\", \"TRANSACTION_CLOSED\");\n            }\n            if (this.#started !== undefined) {\n                // Make sure to execute the COMMIT only if the BEGIN was successful.\n                await this.#started;\n            } else {\n                return;\n            }\n            const promise = stream.run(\"COMMIT\").catch((e)=>{\n                throw mapHranaError(e);\n            });\n            stream.closeGracefully();\n            await promise;\n        } catch (e) {\n            throw mapHranaError(e);\n        } finally{\n            this.close();\n        }\n    }\n}\nasync function executeHranaBatch(mode, version, batch, hranaStmts) {\n    const beginStep = batch.step();\n    const beginPromise = beginStep.run((0,_util_js__WEBPACK_IMPORTED_MODULE_2__.transactionModeToBegin)(mode));\n    let lastStep = beginStep;\n    const stmtPromises = hranaStmts.map((hranaStmt)=>{\n        const stmtStep = batch.step().condition(_libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__.BatchCond.ok(lastStep));\n        if (version >= 3) {\n            stmtStep.condition(_libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__.BatchCond.not(_libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__.BatchCond.isAutocommit(batch)));\n        }\n        const stmtPromise = stmtStep.query(hranaStmt);\n        lastStep = stmtStep;\n        return stmtPromise;\n    });\n    const commitStep = batch.step().condition(_libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__.BatchCond.ok(lastStep));\n    if (version >= 3) {\n        commitStep.condition(_libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__.BatchCond.not(_libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__.BatchCond.isAutocommit(batch)));\n    }\n    const commitPromise = commitStep.run(\"COMMIT\");\n    const rollbackStep = batch.step().condition(_libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__.BatchCond.not(_libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__.BatchCond.ok(commitStep)));\n    rollbackStep.run(\"ROLLBACK\").catch((_)=>undefined);\n    await batch.execute();\n    const resultSets = [];\n    await beginPromise;\n    for (const stmtPromise of stmtPromises){\n        const hranaRows = await stmtPromise;\n        if (hranaRows === undefined) {\n            throw new _api_js__WEBPACK_IMPORTED_MODULE_1__.LibsqlError(\"Statement in a batch was not executed, probably because the transaction has been rolled back\", \"TRANSACTION_CLOSED\");\n        }\n        resultSets.push(resultSetFromHrana(hranaRows));\n    }\n    await commitPromise;\n    return resultSets;\n}\nfunction stmtToHrana(stmt) {\n    if (typeof stmt === \"string\") {\n        return new _libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__.Stmt(stmt);\n    }\n    const hranaStmt = new _libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__.Stmt(stmt.sql);\n    if (Array.isArray(stmt.args)) {\n        hranaStmt.bindIndexes(stmt.args);\n    } else {\n        for (const [key, value] of Object.entries(stmt.args)){\n            hranaStmt.bindName(key, value);\n        }\n    }\n    return hranaStmt;\n}\nfunction resultSetFromHrana(hranaRows) {\n    const columns = hranaRows.columnNames.map((c)=>c ?? \"\");\n    const rows = hranaRows.rows;\n    const rowsAffected = hranaRows.affectedRowCount;\n    const lastInsertRowid = hranaRows.lastInsertRowid !== undefined ? hranaRows.lastInsertRowid : undefined;\n    return new _util_js__WEBPACK_IMPORTED_MODULE_2__.ResultSetImpl(columns, rows, rowsAffected, lastInsertRowid);\n}\nfunction mapHranaError(e) {\n    if (e instanceof _libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__.ClientError) {\n        const code = mapHranaErrorCode(e);\n        return new _api_js__WEBPACK_IMPORTED_MODULE_1__.LibsqlError(e.message, code, e);\n    }\n    return e;\n}\nfunction mapHranaErrorCode(e) {\n    if (e instanceof _libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__.ResponseError && e.code !== undefined) {\n        return e.code;\n    } else if (e instanceof _libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__.ProtoError) {\n        return \"HRANA_PROTO_ERROR\";\n    } else if (e instanceof _libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__.ClosedError) {\n        return e.cause instanceof _libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__.ClientError ? mapHranaErrorCode(e.cause) : \"HRANA_CLOSED_ERROR\";\n    } else if (e instanceof _libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__.WebSocketError) {\n        return \"HRANA_WEBSOCKET_ERROR\";\n    } else if (e instanceof _libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__.HttpServerError) {\n        return \"SERVER_ERROR\";\n    } else if (e instanceof _libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__.ProtocolVersionError) {\n        return \"PROTOCOL_VERSION_ERROR\";\n    } else if (e instanceof _libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__.InternalError) {\n        return \"INTERNAL_ERROR\";\n    } else {\n        return \"UNKNOWN\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/hrana.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/http.js":
/*!*************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/http.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpClient: () => (/* binding */ HttpClient),\n/* harmony export */   HttpTransaction: () => (/* binding */ HttpTransaction),\n/* harmony export */   LibsqlError: () => (/* reexport safe */ _api_js__WEBPACK_IMPORTED_MODULE_1__.LibsqlError),\n/* harmony export */   _createClient: () => (/* binding */ _createClient),\n/* harmony export */   createClient: () => (/* binding */ createClient)\n/* harmony export */ });\n/* harmony import */ var _libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @libsql/hrana-client */ \"(rsc)/../../node_modules/.pnpm/@libsql+hrana-client@0.5.5/node_modules/@libsql/hrana-client/lib-esm/index.js\");\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./api.js */ \"(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/api.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config.js */ \"(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/config.js\");\n/* harmony import */ var _hrana_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./hrana.js */ \"(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/hrana.js\");\n/* harmony import */ var _sql_cache_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sql_cache.js */ \"(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/sql_cache.js\");\n/* harmony import */ var _uri_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./uri.js */ \"(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/uri.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util.js */ \"(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/util.js\");\n\n\n\n\n\n\n\n\nfunction createClient(config) {\n    return _createClient((0,_config_js__WEBPACK_IMPORTED_MODULE_2__.expandConfig)(config, true));\n}\n/** @private */ function _createClient(config) {\n    if (config.scheme !== \"https\" && config.scheme !== \"http\") {\n        throw new _api_js__WEBPACK_IMPORTED_MODULE_1__.LibsqlError('The HTTP client supports only \"libsql:\", \"https:\" and \"http:\" URLs, ' + `got ${JSON.stringify(config.scheme + \":\")}. For more information, please read ${_util_js__WEBPACK_IMPORTED_MODULE_6__.supportedUrlLink}`, \"URL_SCHEME_NOT_SUPPORTED\");\n    }\n    if (config.scheme === \"http\" && config.tls) {\n        throw new _api_js__WEBPACK_IMPORTED_MODULE_1__.LibsqlError(`A \"http:\" URL cannot opt into TLS by using ?tls=1`, \"URL_INVALID\");\n    } else if (config.scheme === \"https\" && !config.tls) {\n        throw new _api_js__WEBPACK_IMPORTED_MODULE_1__.LibsqlError(`A \"https:\" URL cannot opt out of TLS by using ?tls=0`, \"URL_INVALID\");\n    }\n    const url = (0,_uri_js__WEBPACK_IMPORTED_MODULE_5__.encodeBaseUrl)(config.scheme, config.authority, config.path);\n    return new HttpClient(url, config.authToken, config.intMode, config.fetch);\n}\nconst sqlCacheCapacity = 30;\nclass HttpClient {\n    #client;\n    /** @private */ constructor(url, authToken, intMode, customFetch){\n        this.#client = _libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__.openHttp(url, authToken, customFetch);\n        this.#client.intMode = intMode;\n        this.protocol = \"http\";\n    }\n    async execute(stmt) {\n        try {\n            const hranaStmt = (0,_hrana_js__WEBPACK_IMPORTED_MODULE_3__.stmtToHrana)(stmt);\n            // Pipeline all operations, so `hrana.HttpClient` can open the stream, execute the statement and\n            // close the stream in a single HTTP request.\n            let rowsPromise;\n            const stream = this.#client.openStream();\n            try {\n                rowsPromise = stream.query(hranaStmt);\n            } finally{\n                stream.closeGracefully();\n            }\n            return (0,_hrana_js__WEBPACK_IMPORTED_MODULE_3__.resultSetFromHrana)(await rowsPromise);\n        } catch (e) {\n            throw (0,_hrana_js__WEBPACK_IMPORTED_MODULE_3__.mapHranaError)(e);\n        }\n    }\n    async batch(stmts, mode = \"deferred\") {\n        try {\n            const hranaStmts = stmts.map(_hrana_js__WEBPACK_IMPORTED_MODULE_3__.stmtToHrana);\n            const version = await this.#client.getVersion();\n            // Pipeline all operations, so `hrana.HttpClient` can open the stream, execute the batch and\n            // close the stream in a single HTTP request.\n            let resultsPromise;\n            const stream = this.#client.openStream();\n            try {\n                // It makes sense to use a SQL cache even for a single batch, because it may contain the same\n                // statement repeated multiple times.\n                const sqlCache = new _sql_cache_js__WEBPACK_IMPORTED_MODULE_4__.SqlCache(stream, sqlCacheCapacity);\n                sqlCache.apply(hranaStmts);\n                // TODO: we do not use a cursor here, because it would cause three roundtrips:\n                // 1. pipeline request to store SQL texts\n                // 2. cursor request\n                // 3. pipeline request to close the stream\n                const batch = stream.batch(false);\n                resultsPromise = (0,_hrana_js__WEBPACK_IMPORTED_MODULE_3__.executeHranaBatch)(mode, version, batch, hranaStmts);\n            } finally{\n                stream.closeGracefully();\n            }\n            return await resultsPromise;\n        } catch (e) {\n            throw (0,_hrana_js__WEBPACK_IMPORTED_MODULE_3__.mapHranaError)(e);\n        }\n    }\n    async transaction(mode = \"write\") {\n        try {\n            const version = await this.#client.getVersion();\n            return new HttpTransaction(this.#client.openStream(), mode, version);\n        } catch (e) {\n            throw (0,_hrana_js__WEBPACK_IMPORTED_MODULE_3__.mapHranaError)(e);\n        }\n    }\n    async executeMultiple(sql) {\n        try {\n            // Pipeline all operations, so `hrana.HttpClient` can open the stream, execute the sequence and\n            // close the stream in a single HTTP request.\n            let promise;\n            const stream = this.#client.openStream();\n            try {\n                promise = stream.sequence(sql);\n            } finally{\n                stream.closeGracefully();\n            }\n            await promise;\n        } catch (e) {\n            throw (0,_hrana_js__WEBPACK_IMPORTED_MODULE_3__.mapHranaError)(e);\n        }\n    }\n    close() {\n        this.#client.close();\n    }\n    get closed() {\n        return this.#client.closed;\n    }\n}\nclass HttpTransaction extends _hrana_js__WEBPACK_IMPORTED_MODULE_3__.HranaTransaction {\n    #stream;\n    #sqlCache;\n    /** @private */ constructor(stream, mode, version){\n        super(mode, version);\n        this.#stream = stream;\n        this.#sqlCache = new _sql_cache_js__WEBPACK_IMPORTED_MODULE_4__.SqlCache(stream, sqlCacheCapacity);\n    }\n    /** @private */ _getStream() {\n        return this.#stream;\n    }\n    /** @private */ _getSqlCache() {\n        return this.#sqlCache;\n    }\n    close() {\n        this.#stream.close();\n    }\n    get closed() {\n        return this.#stream.closed;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/http.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/node.js":
/*!*************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/node.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LibsqlError: () => (/* reexport safe */ _api_js__WEBPACK_IMPORTED_MODULE_4__.LibsqlError),\n/* harmony export */   createClient: () => (/* binding */ createClient)\n/* harmony export */ });\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config.js */ \"(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/config.js\");\n/* harmony import */ var _sqlite3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sqlite3.js */ \"(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/sqlite3.js\");\n/* harmony import */ var _ws_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ws.js */ \"(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/ws.js\");\n/* harmony import */ var _http_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./http.js */ \"(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/http.js\");\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./api.js */ \"(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/api.js\");\n\n\n\n\n\n/** Creates a {@link Client} object.\n *\n * You must pass at least an `url` in the {@link Config} object.\n */ function createClient(config) {\n    return _createClient((0,_config_js__WEBPACK_IMPORTED_MODULE_0__.expandConfig)(config, true));\n}\nfunction _createClient(config) {\n    if (config.scheme === \"wss\" || config.scheme === \"ws\") {\n        return (0,_ws_js__WEBPACK_IMPORTED_MODULE_2__._createClient)(config);\n    } else if (config.scheme === \"https\" || config.scheme === \"http\") {\n        return (0,_http_js__WEBPACK_IMPORTED_MODULE_3__._createClient)(config);\n    } else {\n        return (0,_sqlite3_js__WEBPACK_IMPORTED_MODULE_1__._createClient)(config);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaWJzcWwrY2xpZW50QDAuMy40L25vZGVfbW9kdWxlcy9AbGlic3FsL2NsaWVudC9saWItZXNtL25vZGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUEyQztBQUMwQjtBQUNWO0FBQ0k7QUFDdEM7QUFDekI7OztDQUdDLEdBQ00sU0FBU0ssYUFBYUMsTUFBTTtJQUMvQixPQUFPTCxjQUFjRCx3REFBWUEsQ0FBQ00sUUFBUTtBQUM5QztBQUNBLFNBQVNMLGNBQWNLLE1BQU07SUFDekIsSUFBSUEsT0FBT0MsTUFBTSxLQUFLLFNBQVNELE9BQU9DLE1BQU0sS0FBSyxNQUFNO1FBQ25ELE9BQU9KLHFEQUFlQSxDQUFDRztJQUMzQixPQUNLLElBQUlBLE9BQU9DLE1BQU0sS0FBSyxXQUFXRCxPQUFPQyxNQUFNLEtBQUssUUFBUTtRQUM1RCxPQUFPSCx1REFBaUJBLENBQUNFO0lBQzdCLE9BQ0s7UUFDRCxPQUFPSiwwREFBb0JBLENBQUNJO0lBQ2hDO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdG9rZW5zdHJlYW0vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGlic3FsK2NsaWVudEAwLjMuNC9ub2RlX21vZHVsZXMvQGxpYnNxbC9jbGllbnQvbGliLWVzbS9ub2RlLmpzP2IxZDMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXhwYW5kQ29uZmlnIH0gZnJvbSBcIi4vY29uZmlnLmpzXCI7XG5pbXBvcnQgeyBfY3JlYXRlQ2xpZW50IGFzIF9jcmVhdGVTcWxpdGUzQ2xpZW50IH0gZnJvbSBcIi4vc3FsaXRlMy5qc1wiO1xuaW1wb3J0IHsgX2NyZWF0ZUNsaWVudCBhcyBfY3JlYXRlV3NDbGllbnQgfSBmcm9tIFwiLi93cy5qc1wiO1xuaW1wb3J0IHsgX2NyZWF0ZUNsaWVudCBhcyBfY3JlYXRlSHR0cENsaWVudCB9IGZyb20gXCIuL2h0dHAuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2FwaS5qc1wiO1xuLyoqIENyZWF0ZXMgYSB7QGxpbmsgQ2xpZW50fSBvYmplY3QuXG4gKlxuICogWW91IG11c3QgcGFzcyBhdCBsZWFzdCBhbiBgdXJsYCBpbiB0aGUge0BsaW5rIENvbmZpZ30gb2JqZWN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2xpZW50KGNvbmZpZykge1xuICAgIHJldHVybiBfY3JlYXRlQ2xpZW50KGV4cGFuZENvbmZpZyhjb25maWcsIHRydWUpKTtcbn1cbmZ1bmN0aW9uIF9jcmVhdGVDbGllbnQoY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZy5zY2hlbWUgPT09IFwid3NzXCIgfHwgY29uZmlnLnNjaGVtZSA9PT0gXCJ3c1wiKSB7XG4gICAgICAgIHJldHVybiBfY3JlYXRlV3NDbGllbnQoY29uZmlnKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY29uZmlnLnNjaGVtZSA9PT0gXCJodHRwc1wiIHx8IGNvbmZpZy5zY2hlbWUgPT09IFwiaHR0cFwiKSB7XG4gICAgICAgIHJldHVybiBfY3JlYXRlSHR0cENsaWVudChjb25maWcpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIF9jcmVhdGVTcWxpdGUzQ2xpZW50KGNvbmZpZyk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbImV4cGFuZENvbmZpZyIsIl9jcmVhdGVDbGllbnQiLCJfY3JlYXRlU3FsaXRlM0NsaWVudCIsIl9jcmVhdGVXc0NsaWVudCIsIl9jcmVhdGVIdHRwQ2xpZW50IiwiY3JlYXRlQ2xpZW50IiwiY29uZmlnIiwic2NoZW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/node.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/sql_cache.js":
/*!******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/sql_cache.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SqlCache: () => (/* binding */ SqlCache)\n/* harmony export */ });\nclass SqlCache {\n    #owner;\n    #sqls;\n    constructor(owner, capacity){\n        this.#owner = owner;\n        this.#sqls = new Lru();\n        this.capacity = capacity;\n    }\n    // Replaces SQL strings with cached `hrana.Sql` objects in the statements in `hranaStmts`. After this\n    // function returns, we guarantee that all `hranaStmts` refer to valid (not closed) `hrana.Sql` objects,\n    // but _we may invalidate any other `hrana.Sql` objects_ (by closing them, thus removing them from the\n    // server).\n    //\n    // In practice, this means that after calling this function, you can use the statements only up to the\n    // first `await`, because concurrent code may also use the cache and invalidate those statements.\n    apply(hranaStmts) {\n        if (this.capacity <= 0) {\n            return;\n        }\n        const usedSqlObjs = new Set();\n        for (const hranaStmt of hranaStmts){\n            if (typeof hranaStmt.sql !== \"string\") {\n                continue;\n            }\n            const sqlText = hranaStmt.sql;\n            let sqlObj = this.#sqls.get(sqlText);\n            if (sqlObj === undefined) {\n                while(this.#sqls.size + 1 > this.capacity){\n                    const [evictSqlText, evictSqlObj] = this.#sqls.peekLru();\n                    if (usedSqlObjs.has(evictSqlObj)) {\n                        break;\n                    }\n                    evictSqlObj.close();\n                    this.#sqls.delete(evictSqlText);\n                }\n                if (this.#sqls.size + 1 <= this.capacity) {\n                    sqlObj = this.#owner.storeSql(sqlText);\n                    this.#sqls.set(sqlText, sqlObj);\n                }\n            }\n            if (sqlObj !== undefined) {\n                hranaStmt.sql = sqlObj;\n                usedSqlObjs.add(sqlObj);\n            }\n        }\n    }\n}\nclass Lru {\n    // This maps keys to the cache values. The entries are ordered by their last use (entires that were used\n    // most recently are at the end).\n    #cache;\n    constructor(){\n        this.#cache = new Map();\n    }\n    get(key) {\n        const value = this.#cache.get(key);\n        if (value !== undefined) {\n            // move the entry to the back of the Map\n            this.#cache.delete(key);\n            this.#cache.set(key, value);\n        }\n        return value;\n    }\n    set(key, value) {\n        this.#cache.set(key, value);\n    }\n    peekLru() {\n        for (const entry of this.#cache.entries()){\n            return entry;\n        }\n        return undefined;\n    }\n    delete(key) {\n        this.#cache.delete(key);\n    }\n    get size() {\n        return this.#cache.size;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaWJzcWwrY2xpZW50QDAuMy40L25vZGVfbW9kdWxlcy9AbGlic3FsL2NsaWVudC9saWItZXNtL3NxbF9jYWNoZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUE7SUFDVCxDQUFDQyxLQUFLLENBQUM7SUFDUCxDQUFDQyxJQUFJLENBQUM7SUFFTkMsWUFBWUYsS0FBSyxFQUFFRyxRQUFRLENBQUU7UUFDekIsSUFBSSxDQUFDLENBQUNILEtBQUssR0FBR0E7UUFDZCxJQUFJLENBQUMsQ0FBQ0MsSUFBSSxHQUFHLElBQUlHO1FBQ2pCLElBQUksQ0FBQ0QsUUFBUSxHQUFHQTtJQUNwQjtJQUNBLHFHQUFxRztJQUNyRyx3R0FBd0c7SUFDeEcsc0dBQXNHO0lBQ3RHLFdBQVc7SUFDWCxFQUFFO0lBQ0Ysc0dBQXNHO0lBQ3RHLGlHQUFpRztJQUNqR0UsTUFBTUMsVUFBVSxFQUFFO1FBQ2QsSUFBSSxJQUFJLENBQUNILFFBQVEsSUFBSSxHQUFHO1lBQ3BCO1FBQ0o7UUFDQSxNQUFNSSxjQUFjLElBQUlDO1FBQ3hCLEtBQUssTUFBTUMsYUFBYUgsV0FBWTtZQUNoQyxJQUFJLE9BQU9HLFVBQVVDLEdBQUcsS0FBSyxVQUFVO2dCQUNuQztZQUNKO1lBQ0EsTUFBTUMsVUFBVUYsVUFBVUMsR0FBRztZQUM3QixJQUFJRSxTQUFTLElBQUksQ0FBQyxDQUFDWCxJQUFJLENBQUNZLEdBQUcsQ0FBQ0Y7WUFDNUIsSUFBSUMsV0FBV0UsV0FBVztnQkFDdEIsTUFBTyxJQUFJLENBQUMsQ0FBQ2IsSUFBSSxDQUFDYyxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUNaLFFBQVEsQ0FBRTtvQkFDeEMsTUFBTSxDQUFDYSxjQUFjQyxZQUFZLEdBQUcsSUFBSSxDQUFDLENBQUNoQixJQUFJLENBQUNpQixPQUFPO29CQUN0RCxJQUFJWCxZQUFZWSxHQUFHLENBQUNGLGNBQWM7d0JBRzlCO29CQUNKO29CQUNBQSxZQUFZRyxLQUFLO29CQUNqQixJQUFJLENBQUMsQ0FBQ25CLElBQUksQ0FBQ29CLE1BQU0sQ0FBQ0w7Z0JBQ3RCO2dCQUNBLElBQUksSUFBSSxDQUFDLENBQUNmLElBQUksQ0FBQ2MsSUFBSSxHQUFHLEtBQUssSUFBSSxDQUFDWixRQUFRLEVBQUU7b0JBQ3RDUyxTQUFTLElBQUksQ0FBQyxDQUFDWixLQUFLLENBQUNzQixRQUFRLENBQUNYO29CQUM5QixJQUFJLENBQUMsQ0FBQ1YsSUFBSSxDQUFDc0IsR0FBRyxDQUFDWixTQUFTQztnQkFDNUI7WUFDSjtZQUNBLElBQUlBLFdBQVdFLFdBQVc7Z0JBQ3RCTCxVQUFVQyxHQUFHLEdBQUdFO2dCQUNoQkwsWUFBWWlCLEdBQUcsQ0FBQ1o7WUFDcEI7UUFDSjtJQUNKO0FBQ0o7QUFDQSxNQUFNUjtJQUNGLHdHQUF3RztJQUN4RyxpQ0FBaUM7SUFDakMsQ0FBQ3FCLEtBQUssQ0FBQztJQUNQdkIsYUFBYztRQUNWLElBQUksQ0FBQyxDQUFDdUIsS0FBSyxHQUFHLElBQUlDO0lBQ3RCO0lBQ0FiLElBQUljLEdBQUcsRUFBRTtRQUNMLE1BQU1DLFFBQVEsSUFBSSxDQUFDLENBQUNILEtBQUssQ0FBQ1osR0FBRyxDQUFDYztRQUM5QixJQUFJQyxVQUFVZCxXQUFXO1lBQ3JCLHdDQUF3QztZQUN4QyxJQUFJLENBQUMsQ0FBQ1csS0FBSyxDQUFDSixNQUFNLENBQUNNO1lBQ25CLElBQUksQ0FBQyxDQUFDRixLQUFLLENBQUNGLEdBQUcsQ0FBQ0ksS0FBS0M7UUFDekI7UUFDQSxPQUFPQTtJQUNYO0lBQ0FMLElBQUlJLEdBQUcsRUFBRUMsS0FBSyxFQUFFO1FBQ1osSUFBSSxDQUFDLENBQUNILEtBQUssQ0FBQ0YsR0FBRyxDQUFDSSxLQUFLQztJQUN6QjtJQUNBVixVQUFVO1FBQ04sS0FBSyxNQUFNVyxTQUFTLElBQUksQ0FBQyxDQUFDSixLQUFLLENBQUNLLE9BQU8sR0FBSTtZQUN2QyxPQUFPRDtRQUNYO1FBQ0EsT0FBT2Y7SUFDWDtJQUNBTyxPQUFPTSxHQUFHLEVBQUU7UUFDUixJQUFJLENBQUMsQ0FBQ0YsS0FBSyxDQUFDSixNQUFNLENBQUNNO0lBQ3ZCO0lBQ0EsSUFBSVosT0FBTztRQUNQLE9BQU8sSUFBSSxDQUFDLENBQUNVLEtBQUssQ0FBQ1YsSUFBSTtJQUMzQjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHRva2Vuc3RyZWFtL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGxpYnNxbCtjbGllbnRAMC4zLjQvbm9kZV9tb2R1bGVzL0BsaWJzcWwvY2xpZW50L2xpYi1lc20vc3FsX2NhY2hlLmpzPzQzNmQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFNxbENhY2hlIHtcbiAgICAjb3duZXI7XG4gICAgI3NxbHM7XG4gICAgY2FwYWNpdHk7XG4gICAgY29uc3RydWN0b3Iob3duZXIsIGNhcGFjaXR5KSB7XG4gICAgICAgIHRoaXMuI293bmVyID0gb3duZXI7XG4gICAgICAgIHRoaXMuI3NxbHMgPSBuZXcgTHJ1KCk7XG4gICAgICAgIHRoaXMuY2FwYWNpdHkgPSBjYXBhY2l0eTtcbiAgICB9XG4gICAgLy8gUmVwbGFjZXMgU1FMIHN0cmluZ3Mgd2l0aCBjYWNoZWQgYGhyYW5hLlNxbGAgb2JqZWN0cyBpbiB0aGUgc3RhdGVtZW50cyBpbiBgaHJhbmFTdG10c2AuIEFmdGVyIHRoaXNcbiAgICAvLyBmdW5jdGlvbiByZXR1cm5zLCB3ZSBndWFyYW50ZWUgdGhhdCBhbGwgYGhyYW5hU3RtdHNgIHJlZmVyIHRvIHZhbGlkIChub3QgY2xvc2VkKSBgaHJhbmEuU3FsYCBvYmplY3RzLFxuICAgIC8vIGJ1dCBfd2UgbWF5IGludmFsaWRhdGUgYW55IG90aGVyIGBocmFuYS5TcWxgIG9iamVjdHNfIChieSBjbG9zaW5nIHRoZW0sIHRodXMgcmVtb3ZpbmcgdGhlbSBmcm9tIHRoZVxuICAgIC8vIHNlcnZlcikuXG4gICAgLy9cbiAgICAvLyBJbiBwcmFjdGljZSwgdGhpcyBtZWFucyB0aGF0IGFmdGVyIGNhbGxpbmcgdGhpcyBmdW5jdGlvbiwgeW91IGNhbiB1c2UgdGhlIHN0YXRlbWVudHMgb25seSB1cCB0byB0aGVcbiAgICAvLyBmaXJzdCBgYXdhaXRgLCBiZWNhdXNlIGNvbmN1cnJlbnQgY29kZSBtYXkgYWxzbyB1c2UgdGhlIGNhY2hlIGFuZCBpbnZhbGlkYXRlIHRob3NlIHN0YXRlbWVudHMuXG4gICAgYXBwbHkoaHJhbmFTdG10cykge1xuICAgICAgICBpZiAodGhpcy5jYXBhY2l0eSA8PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdXNlZFNxbE9ianMgPSBuZXcgU2V0KCk7XG4gICAgICAgIGZvciAoY29uc3QgaHJhbmFTdG10IG9mIGhyYW5hU3RtdHMpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaHJhbmFTdG10LnNxbCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc3FsVGV4dCA9IGhyYW5hU3RtdC5zcWw7XG4gICAgICAgICAgICBsZXQgc3FsT2JqID0gdGhpcy4jc3Fscy5nZXQoc3FsVGV4dCk7XG4gICAgICAgICAgICBpZiAoc3FsT2JqID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB3aGlsZSAodGhpcy4jc3Fscy5zaXplICsgMSA+IHRoaXMuY2FwYWNpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgW2V2aWN0U3FsVGV4dCwgZXZpY3RTcWxPYmpdID0gdGhpcy4jc3Fscy5wZWVrTHJ1KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1c2VkU3FsT2Jqcy5oYXMoZXZpY3RTcWxPYmopKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgU1FMIG9iamVjdCB0aGF0IHdlIGFyZSB0cnlpbmcgdG8gZXZpY3QgaXMgYWxyZWFkeSBpbiB1c2UgaW4gdGhpcyBiYXRjaCwgc28gd2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG11c3Qgbm90IGV2aWN0IGFuZCBjbG9zZSBpdC5cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGV2aWN0U3FsT2JqLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI3NxbHMuZGVsZXRlKGV2aWN0U3FsVGV4dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLiNzcWxzLnNpemUgKyAxIDw9IHRoaXMuY2FwYWNpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3FsT2JqID0gdGhpcy4jb3duZXIuc3RvcmVTcWwoc3FsVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI3NxbHMuc2V0KHNxbFRleHQsIHNxbE9iaik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNxbE9iaiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaHJhbmFTdG10LnNxbCA9IHNxbE9iajtcbiAgICAgICAgICAgICAgICB1c2VkU3FsT2Jqcy5hZGQoc3FsT2JqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmNsYXNzIExydSB7XG4gICAgLy8gVGhpcyBtYXBzIGtleXMgdG8gdGhlIGNhY2hlIHZhbHVlcy4gVGhlIGVudHJpZXMgYXJlIG9yZGVyZWQgYnkgdGhlaXIgbGFzdCB1c2UgKGVudGlyZXMgdGhhdCB3ZXJlIHVzZWRcbiAgICAvLyBtb3N0IHJlY2VudGx5IGFyZSBhdCB0aGUgZW5kKS5cbiAgICAjY2FjaGU7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuI2NhY2hlID0gbmV3IE1hcCgpO1xuICAgIH1cbiAgICBnZXQoa2V5KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy4jY2FjaGUuZ2V0KGtleSk7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBtb3ZlIHRoZSBlbnRyeSB0byB0aGUgYmFjayBvZiB0aGUgTWFwXG4gICAgICAgICAgICB0aGlzLiNjYWNoZS5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgIHRoaXMuI2NhY2hlLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuI2NhY2hlLnNldChrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgcGVla0xydSgpIHtcbiAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiB0aGlzLiNjYWNoZS5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBlbnRyeTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBkZWxldGUoa2V5KSB7XG4gICAgICAgIHRoaXMuI2NhY2hlLmRlbGV0ZShrZXkpO1xuICAgIH1cbiAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2NhY2hlLnNpemU7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIlNxbENhY2hlIiwib3duZXIiLCJzcWxzIiwiY29uc3RydWN0b3IiLCJjYXBhY2l0eSIsIkxydSIsImFwcGx5IiwiaHJhbmFTdG10cyIsInVzZWRTcWxPYmpzIiwiU2V0IiwiaHJhbmFTdG10Iiwic3FsIiwic3FsVGV4dCIsInNxbE9iaiIsImdldCIsInVuZGVmaW5lZCIsInNpemUiLCJldmljdFNxbFRleHQiLCJldmljdFNxbE9iaiIsInBlZWtMcnUiLCJoYXMiLCJjbG9zZSIsImRlbGV0ZSIsInN0b3JlU3FsIiwic2V0IiwiYWRkIiwiY2FjaGUiLCJNYXAiLCJrZXkiLCJ2YWx1ZSIsImVudHJ5IiwiZW50cmllcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/sql_cache.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/sqlite3.js":
/*!****************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/sqlite3.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LibsqlError: () => (/* reexport safe */ _api_js__WEBPACK_IMPORTED_MODULE_2__.LibsqlError),\n/* harmony export */   Sqlite3Client: () => (/* binding */ Sqlite3Client),\n/* harmony export */   Sqlite3Transaction: () => (/* binding */ Sqlite3Transaction),\n/* harmony export */   _createClient: () => (/* binding */ _createClient),\n/* harmony export */   createClient: () => (/* binding */ createClient)\n/* harmony export */ });\n/* harmony import */ var better_sqlite3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! better-sqlite3 */ \"(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/index.js\");\n/* harmony import */ var node_buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:buffer */ \"node:buffer\");\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./api.js */ \"(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/api.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./config.js */ \"(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/config.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util.js */ \"(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/util.js\");\n\n\n\n\n\n\nfunction createClient(config) {\n    return _createClient((0,_config_js__WEBPACK_IMPORTED_MODULE_3__.expandConfig)(config, true));\n}\n/** @private */ function _createClient(config) {\n    if (config.scheme !== \"file\") {\n        throw new _api_js__WEBPACK_IMPORTED_MODULE_2__.LibsqlError(`URL scheme ${JSON.stringify(config.scheme + \":\")} is not supported by the local sqlite3 client. ` + `For more information, please read ${_util_js__WEBPACK_IMPORTED_MODULE_4__.supportedUrlLink}`, \"URL_SCHEME_NOT_SUPPORTED\");\n    }\n    const authority = config.authority;\n    if (authority !== undefined) {\n        const host = authority.host.toLowerCase();\n        if (host !== \"\" && host !== \"localhost\") {\n            throw new _api_js__WEBPACK_IMPORTED_MODULE_2__.LibsqlError(`Invalid host in file URL: ${JSON.stringify(authority.host)}. ` + 'A \"file:\" URL with an absolute path should start with one slash (\"file:/absolute/path.db\") ' + 'or with three slashes (\"file:///absolute/path.db\"). ' + `For more information, please read ${_util_js__WEBPACK_IMPORTED_MODULE_4__.supportedUrlLink}`, \"URL_INVALID\");\n        }\n        if (authority.port !== undefined) {\n            throw new _api_js__WEBPACK_IMPORTED_MODULE_2__.LibsqlError(\"File URL cannot have a port\", \"URL_INVALID\");\n        }\n        if (authority.userinfo !== undefined) {\n            throw new _api_js__WEBPACK_IMPORTED_MODULE_2__.LibsqlError(\"File URL cannot have username and password\", \"URL_INVALID\");\n        }\n    }\n    const path = config.path;\n    const options = {};\n    const db = new better_sqlite3__WEBPACK_IMPORTED_MODULE_0__(path, options);\n    try {\n        executeStmt(db, \"SELECT 1 AS checkThatTheDatabaseCanBeOpened\", config.intMode);\n    } finally{\n        db.close();\n    }\n    return new Sqlite3Client(path, options, config.intMode);\n}\nclass Sqlite3Client {\n    #path;\n    #options;\n    #intMode;\n    /** @private */ constructor(path, options, intMode){\n        this.#path = path;\n        this.#options = options;\n        this.#intMode = intMode;\n        this.closed = false;\n        this.protocol = \"file\";\n    }\n    async execute(stmt) {\n        this.#checkNotClosed();\n        const db = new better_sqlite3__WEBPACK_IMPORTED_MODULE_0__(this.#path, this.#options);\n        try {\n            return executeStmt(db, stmt, this.#intMode);\n        } finally{\n            db.close();\n        }\n    }\n    async batch(stmts, mode = \"deferred\") {\n        this.#checkNotClosed();\n        const db = new better_sqlite3__WEBPACK_IMPORTED_MODULE_0__(this.#path, this.#options);\n        try {\n            executeStmt(db, (0,_util_js__WEBPACK_IMPORTED_MODULE_4__.transactionModeToBegin)(mode), this.#intMode);\n            const resultSets = stmts.map((stmt)=>{\n                if (!db.inTransaction) {\n                    throw new _api_js__WEBPACK_IMPORTED_MODULE_2__.LibsqlError(\"The transaction has been rolled back\", \"TRANSACTION_CLOSED\");\n                }\n                return executeStmt(db, stmt, this.#intMode);\n            });\n            executeStmt(db, \"COMMIT\", this.#intMode);\n            return resultSets;\n        } finally{\n            db.close();\n        }\n    }\n    async transaction(mode = \"write\") {\n        this.#checkNotClosed();\n        const db = new better_sqlite3__WEBPACK_IMPORTED_MODULE_0__(this.#path, this.#options);\n        try {\n            executeStmt(db, (0,_util_js__WEBPACK_IMPORTED_MODULE_4__.transactionModeToBegin)(mode), this.#intMode);\n            return new Sqlite3Transaction(db, this.#intMode);\n        } catch (e) {\n            db.close();\n            throw e;\n        }\n    }\n    async executeMultiple(sql) {\n        this.#checkNotClosed();\n        const db = new better_sqlite3__WEBPACK_IMPORTED_MODULE_0__(this.#path, this.#options);\n        try {\n            return executeMultiple(db, sql);\n        } finally{\n            db.close();\n        }\n    }\n    close() {\n        this.closed = true;\n    }\n    #checkNotClosed() {\n        if (this.closed) {\n            throw new _api_js__WEBPACK_IMPORTED_MODULE_2__.LibsqlError(\"The client is closed\", \"CLIENT_CLOSED\");\n        }\n    }\n}\nclass Sqlite3Transaction {\n    #database;\n    #intMode;\n    /** @private */ constructor(database, intMode){\n        this.#database = database;\n        this.#intMode = intMode;\n    }\n    async execute(stmt) {\n        this.#checkNotClosed();\n        return executeStmt(this.#database, stmt, this.#intMode);\n    }\n    async batch(stmts) {\n        return stmts.map((stmt)=>{\n            this.#checkNotClosed();\n            return executeStmt(this.#database, stmt, this.#intMode);\n        });\n    }\n    async executeMultiple(sql) {\n        this.#checkNotClosed();\n        return executeMultiple(this.#database, sql);\n    }\n    async rollback() {\n        if (!this.#database.open) {\n            return;\n        }\n        this.#checkNotClosed();\n        executeStmt(this.#database, \"ROLLBACK\", this.#intMode);\n        this.#database.close();\n    }\n    async commit() {\n        this.#checkNotClosed();\n        executeStmt(this.#database, \"COMMIT\", this.#intMode);\n        this.#database.close();\n    }\n    close() {\n        this.#database.close();\n    }\n    get closed() {\n        return !this.#database.open;\n    }\n    #checkNotClosed() {\n        if (!this.#database.open || !this.#database.inTransaction) {\n            throw new _api_js__WEBPACK_IMPORTED_MODULE_2__.LibsqlError(\"The transaction is closed\", \"TRANSACTION_CLOSED\");\n        }\n    }\n}\nfunction executeStmt(db, stmt, intMode) {\n    let sql;\n    let args;\n    if (typeof stmt === \"string\") {\n        sql = stmt;\n        args = [];\n    } else {\n        sql = stmt.sql;\n        if (Array.isArray(stmt.args)) {\n            args = stmt.args.map(valueToSql);\n        } else {\n            args = {};\n            for(const name in stmt.args){\n                const argName = name[0] === \"@\" || name[0] === \"$\" || name[0] === \":\" ? name.substring(1) : name;\n                args[argName] = valueToSql(stmt.args[name]);\n            }\n        }\n    }\n    try {\n        const sqlStmt = db.prepare(sql);\n        sqlStmt.safeIntegers(true);\n        let returnsData = true;\n        try {\n            sqlStmt.raw(true);\n        } catch  {\n            // raw() throws an exception if the statement does not return data\n            returnsData = false;\n        }\n        if (returnsData) {\n            const columns = Array.from(sqlStmt.columns().map((col)=>col.name));\n            const rows = sqlStmt.all(args).map((sqlRow)=>{\n                return rowFromSql(sqlRow, columns, intMode);\n            });\n            // TODO: can we get this info from better-sqlite3?\n            const rowsAffected = 0;\n            const lastInsertRowid = undefined;\n            return new _util_js__WEBPACK_IMPORTED_MODULE_4__.ResultSetImpl(columns, rows, rowsAffected, lastInsertRowid);\n        } else {\n            const info = sqlStmt.run(args);\n            const rowsAffected = info.changes;\n            const lastInsertRowid = BigInt(info.lastInsertRowid);\n            return new _util_js__WEBPACK_IMPORTED_MODULE_4__.ResultSetImpl([], [], rowsAffected, lastInsertRowid);\n        }\n    } catch (e) {\n        throw mapSqliteError(e);\n    }\n}\nfunction rowFromSql(sqlRow, columns, intMode) {\n    const row = {};\n    // make sure that the \"length\" property is not enumerable\n    Object.defineProperty(row, \"length\", {\n        value: sqlRow.length\n    });\n    for(let i = 0; i < sqlRow.length; ++i){\n        const value = valueFromSql(sqlRow[i], intMode);\n        Object.defineProperty(row, i, {\n            value\n        });\n        const column = columns[i];\n        if (!Object.hasOwn(row, column)) {\n            Object.defineProperty(row, column, {\n                value,\n                enumerable: true\n            });\n        }\n    }\n    return row;\n}\nfunction valueFromSql(sqlValue, intMode) {\n    if (typeof sqlValue === \"bigint\") {\n        if (intMode === \"number\") {\n            if (sqlValue < minSafeBigint || sqlValue > maxSafeBigint) {\n                throw new RangeError(\"Received integer which cannot be safely represented as a JavaScript number\");\n            }\n            return Number(sqlValue);\n        } else if (intMode === \"bigint\") {\n            return sqlValue;\n        } else if (intMode === \"string\") {\n            return \"\" + sqlValue;\n        } else {\n            throw new Error(\"Invalid value for IntMode\");\n        }\n    } else if (sqlValue instanceof node_buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer) {\n        return sqlValue.buffer;\n    }\n    return sqlValue;\n}\nconst minSafeBigint = -9007199254740991n;\nconst maxSafeBigint = 9007199254740991n;\nfunction valueToSql(value) {\n    if (typeof value === \"number\") {\n        if (!Number.isFinite(value)) {\n            throw new RangeError(\"Only finite numbers (not Infinity or NaN) can be passed as arguments\");\n        }\n        return value;\n    } else if (typeof value === \"bigint\") {\n        if (value < minInteger || value > maxInteger) {\n            throw new RangeError(\"bigint is too large to be represented as a 64-bit integer and passed as argument\");\n        }\n        return value;\n    } else if (typeof value === \"boolean\") {\n        return value ? 1n : 0n;\n    } else if (value instanceof ArrayBuffer) {\n        return node_buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(value);\n    } else if (value instanceof Date) {\n        return value.valueOf();\n    } else if (value === undefined) {\n        throw new TypeError(\"undefined cannot be passed as argument to the database\");\n    } else {\n        return value;\n    }\n}\nconst minInteger = -9223372036854775808n;\nconst maxInteger = 9223372036854775807n;\nfunction executeMultiple(db, sql) {\n    try {\n        db.exec(sql);\n    } catch (e) {\n        throw mapSqliteError(e);\n    }\n}\nfunction mapSqliteError(e) {\n    if (e instanceof better_sqlite3__WEBPACK_IMPORTED_MODULE_0__.SqliteError) {\n        return new _api_js__WEBPACK_IMPORTED_MODULE_2__.LibsqlError(e.message, e.code, e);\n    }\n    return e;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/sqlite3.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/uri.js":
/*!************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/uri.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeBaseUrl: () => (/* binding */ encodeBaseUrl),\n/* harmony export */   parseUri: () => (/* binding */ parseUri)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.js */ \"(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/api.js\");\n// URI parser based on RFC 3986\n// We can't use the standard `URL` object, because we want to support relative `file:` URLs like\n// `file:relative/path/database.db`, which are not correct according to RFC 8089, which standardizes the\n// `file` scheme.\n\nfunction parseUri(text) {\n    const match = URI_RE.exec(text);\n    if (match === null) {\n        throw new _api_js__WEBPACK_IMPORTED_MODULE_0__.LibsqlError(\"The URL is not in a valid format\", \"URL_INVALID\");\n    }\n    const groups = match.groups;\n    const scheme = groups[\"scheme\"];\n    const authority = groups[\"authority\"] !== undefined ? parseAuthority(groups[\"authority\"]) : undefined;\n    const path = percentDecode(groups[\"path\"]);\n    const query = groups[\"query\"] !== undefined ? parseQuery(groups[\"query\"]) : undefined;\n    const fragment = groups[\"fragment\"] !== undefined ? percentDecode(groups[\"fragment\"]) : undefined;\n    return {\n        scheme,\n        authority,\n        path,\n        query,\n        fragment\n    };\n}\nconst URI_RE = (()=>{\n    const SCHEME = \"(?<scheme>[A-Za-z][A-Za-z.+-]*)\";\n    const AUTHORITY = \"(?<authority>[^/?#]*)\";\n    const PATH = \"(?<path>[^?#]*)\";\n    const QUERY = \"(?<query>[^#]*)\";\n    const FRAGMENT = \"(?<fragment>.*)\";\n    return new RegExp(`^${SCHEME}:(//${AUTHORITY})?${PATH}(\\\\?${QUERY})?(#${FRAGMENT})?$`, \"su\");\n})();\nfunction parseAuthority(text) {\n    const match = AUTHORITY_RE.exec(text);\n    if (match === null) {\n        throw new _api_js__WEBPACK_IMPORTED_MODULE_0__.LibsqlError(\"The authority part of the URL is not in a valid format\", \"URL_INVALID\");\n    }\n    const groups = match.groups;\n    const host = percentDecode(groups[\"host_br\"] ?? groups[\"host\"]);\n    const port = groups[\"port\"] ? parseInt(groups[\"port\"], 10) : undefined;\n    const userinfo = groups[\"username\"] !== undefined ? {\n        username: percentDecode(groups[\"username\"]),\n        password: groups[\"password\"] !== undefined ? percentDecode(groups[\"password\"]) : undefined\n    } : undefined;\n    return {\n        host,\n        port,\n        userinfo\n    };\n}\nconst AUTHORITY_RE = (()=>{\n    const USERINFO = \"(?<username>[^:]*)(:(?<password>.*))?\";\n    const HOST = \"((?<host>[^:\\\\[\\\\]]*)|(\\\\[(?<host_br>[^\\\\[\\\\]]*)\\\\]))\";\n    const PORT = \"(?<port>[0-9]*)\";\n    return new RegExp(`^(${USERINFO}@)?${HOST}(:${PORT})?$`, \"su\");\n})();\n// Query string is parsed as application/x-www-form-urlencoded according to the Web URL standard:\n// https://url.spec.whatwg.org/#urlencoded-parsing\nfunction parseQuery(text) {\n    const sequences = text.split(\"&\");\n    const pairs = [];\n    for (const sequence of sequences){\n        if (sequence === \"\") {\n            continue;\n        }\n        let key;\n        let value;\n        const splitIdx = sequence.indexOf(\"=\");\n        if (splitIdx < 0) {\n            key = sequence;\n            value = \"\";\n        } else {\n            key = sequence.substring(0, splitIdx);\n            value = sequence.substring(splitIdx + 1);\n        }\n        pairs.push({\n            key: percentDecode(key.replaceAll(\"+\", \" \")),\n            value: percentDecode(value.replaceAll(\"+\", \" \"))\n        });\n    }\n    return {\n        pairs\n    };\n}\nfunction percentDecode(text) {\n    try {\n        return decodeURIComponent(text);\n    } catch (e) {\n        if (e instanceof URIError) {\n            throw new _api_js__WEBPACK_IMPORTED_MODULE_0__.LibsqlError(`URL component has invalid percent encoding: ${e}`, \"URL_INVALID\", e);\n        }\n        throw e;\n    }\n}\nfunction encodeBaseUrl(scheme, authority, path) {\n    if (authority === undefined) {\n        throw new _api_js__WEBPACK_IMPORTED_MODULE_0__.LibsqlError(`URL with scheme ${JSON.stringify(scheme + \":\")} requires authority (the \"//\" part)`, \"URL_INVALID\");\n    }\n    const schemeText = `${scheme}:`;\n    const hostText = encodeHost(authority.host);\n    const portText = encodePort(authority.port);\n    const userinfoText = encodeUserinfo(authority.userinfo);\n    const authorityText = `//${userinfoText}${hostText}${portText}`;\n    let pathText = path.split(\"/\").map(encodeURIComponent).join(\"/\");\n    if (pathText !== \"\" && !pathText.startsWith(\"/\")) {\n        pathText = \"/\" + pathText;\n    }\n    return new URL(`${schemeText}${authorityText}${pathText}`);\n}\nfunction encodeHost(host) {\n    return host.includes(\":\") ? `[${encodeURI(host)}]` : encodeURI(host);\n}\nfunction encodePort(port) {\n    return port !== undefined ? `:${port}` : \"\";\n}\nfunction encodeUserinfo(userinfo) {\n    if (userinfo === undefined) {\n        return \"\";\n    }\n    const usernameText = encodeURIComponent(userinfo.username);\n    const passwordText = userinfo.password !== undefined ? `:${encodeURIComponent(userinfo.password)}` : \"\";\n    return `${usernameText}${passwordText}@`;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaWJzcWwrY2xpZW50QDAuMy40L25vZGVfbW9kdWxlcy9AbGlic3FsL2NsaWVudC9saWItZXNtL3VyaS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSwrQkFBK0I7QUFDL0IsZ0dBQWdHO0FBQ2hHLHdHQUF3RztBQUN4RyxpQkFBaUI7QUFDc0I7QUFDaEMsU0FBU0MsU0FBU0MsSUFBSTtJQUN6QixNQUFNQyxRQUFRQyxPQUFPQyxJQUFJLENBQUNIO0lBQzFCLElBQUlDLFVBQVUsTUFBTTtRQUNoQixNQUFNLElBQUlILGdEQUFXQSxDQUFDLG9DQUFvQztJQUM5RDtJQUNBLE1BQU1NLFNBQVNILE1BQU1HLE1BQU07SUFDM0IsTUFBTUMsU0FBU0QsTUFBTSxDQUFDLFNBQVM7SUFDL0IsTUFBTUUsWUFBWUYsTUFBTSxDQUFDLFlBQVksS0FBS0csWUFDcENDLGVBQWVKLE1BQU0sQ0FBQyxZQUFZLElBQUlHO0lBQzVDLE1BQU1FLE9BQU9DLGNBQWNOLE1BQU0sQ0FBQyxPQUFPO0lBQ3pDLE1BQU1PLFFBQVFQLE1BQU0sQ0FBQyxRQUFRLEtBQUtHLFlBQzVCSyxXQUFXUixNQUFNLENBQUMsUUFBUSxJQUFJRztJQUNwQyxNQUFNTSxXQUFXVCxNQUFNLENBQUMsV0FBVyxLQUFLRyxZQUNsQ0csY0FBY04sTUFBTSxDQUFDLFdBQVcsSUFBSUc7SUFDMUMsT0FBTztRQUFFRjtRQUFRQztRQUFXRztRQUFNRTtRQUFPRTtJQUFTO0FBQ3REO0FBQ0EsTUFBTVgsU0FBUyxDQUFDO0lBQ1osTUFBTVksU0FBUztJQUNmLE1BQU1DLFlBQVk7SUFDbEIsTUFBTUMsT0FBTztJQUNiLE1BQU1DLFFBQVE7SUFDZCxNQUFNQyxXQUFXO0lBQ2pCLE9BQU8sSUFBSUMsT0FBTyxDQUFDLENBQUMsRUFBRUwsT0FBTyxJQUFJLEVBQUVDLFVBQVUsRUFBRSxFQUFFQyxLQUFLLElBQUksRUFBRUMsTUFBTSxJQUFJLEVBQUVDLFNBQVMsR0FBRyxDQUFDLEVBQUU7QUFDM0Y7QUFDQSxTQUFTVixlQUFlUixJQUFJO0lBQ3hCLE1BQU1DLFFBQVFtQixhQUFhakIsSUFBSSxDQUFDSDtJQUNoQyxJQUFJQyxVQUFVLE1BQU07UUFDaEIsTUFBTSxJQUFJSCxnREFBV0EsQ0FBQywwREFBMEQ7SUFDcEY7SUFDQSxNQUFNTSxTQUFTSCxNQUFNRyxNQUFNO0lBQzNCLE1BQU1pQixPQUFPWCxjQUFjTixNQUFNLENBQUMsVUFBVSxJQUFJQSxNQUFNLENBQUMsT0FBTztJQUM5RCxNQUFNa0IsT0FBT2xCLE1BQU0sQ0FBQyxPQUFPLEdBQ3JCbUIsU0FBU25CLE1BQU0sQ0FBQyxPQUFPLEVBQUUsTUFDekJHO0lBQ04sTUFBTWlCLFdBQVdwQixNQUFNLENBQUMsV0FBVyxLQUFLRyxZQUNsQztRQUNFa0IsVUFBVWYsY0FBY04sTUFBTSxDQUFDLFdBQVc7UUFDMUNzQixVQUFVdEIsTUFBTSxDQUFDLFdBQVcsS0FBS0csWUFDM0JHLGNBQWNOLE1BQU0sQ0FBQyxXQUFXLElBQUlHO0lBQzlDLElBQ0VBO0lBQ04sT0FBTztRQUFFYztRQUFNQztRQUFNRTtJQUFTO0FBQ2xDO0FBQ0EsTUFBTUosZUFBZSxDQUFDO0lBQ2xCLE1BQU1PLFdBQVc7SUFDakIsTUFBTUMsT0FBTztJQUNiLE1BQU1DLE9BQU87SUFDYixPQUFPLElBQUlWLE9BQU8sQ0FBQyxFQUFFLEVBQUVRLFNBQVMsR0FBRyxFQUFFQyxLQUFLLEVBQUUsRUFBRUMsS0FBSyxHQUFHLENBQUMsRUFBRTtBQUM3RDtBQUNBLGlHQUFpRztBQUNqRyxrREFBa0Q7QUFDbEQsU0FBU2pCLFdBQVdaLElBQUk7SUFDcEIsTUFBTThCLFlBQVk5QixLQUFLK0IsS0FBSyxDQUFDO0lBQzdCLE1BQU1DLFFBQVEsRUFBRTtJQUNoQixLQUFLLE1BQU1DLFlBQVlILFVBQVc7UUFDOUIsSUFBSUcsYUFBYSxJQUFJO1lBQ2pCO1FBQ0o7UUFDQSxJQUFJQztRQUNKLElBQUlDO1FBQ0osTUFBTUMsV0FBV0gsU0FBU0ksT0FBTyxDQUFDO1FBQ2xDLElBQUlELFdBQVcsR0FBRztZQUNkRixNQUFNRDtZQUNORSxRQUFRO1FBQ1osT0FDSztZQUNERCxNQUFNRCxTQUFTSyxTQUFTLENBQUMsR0FBR0Y7WUFDNUJELFFBQVFGLFNBQVNLLFNBQVMsQ0FBQ0YsV0FBVztRQUMxQztRQUNBSixNQUFNTyxJQUFJLENBQUM7WUFDUEwsS0FBS3hCLGNBQWN3QixJQUFJTSxVQUFVLENBQUMsS0FBSztZQUN2Q0wsT0FBT3pCLGNBQWN5QixNQUFNSyxVQUFVLENBQUMsS0FBSztRQUMvQztJQUNKO0lBQ0EsT0FBTztRQUFFUjtJQUFNO0FBQ25CO0FBQ0EsU0FBU3RCLGNBQWNWLElBQUk7SUFDdkIsSUFBSTtRQUNBLE9BQU95QyxtQkFBbUJ6QztJQUM5QixFQUNBLE9BQU8wQyxHQUFHO1FBQ04sSUFBSUEsYUFBYUMsVUFBVTtZQUN2QixNQUFNLElBQUk3QyxnREFBV0EsQ0FBQyxDQUFDLDRDQUE0QyxFQUFFNEMsRUFBRSxDQUFDLEVBQUUsZUFBZUE7UUFDN0Y7UUFDQSxNQUFNQTtJQUNWO0FBQ0o7QUFDTyxTQUFTRSxjQUFjdkMsTUFBTSxFQUFFQyxTQUFTLEVBQUVHLElBQUk7SUFDakQsSUFBSUgsY0FBY0MsV0FBVztRQUN6QixNQUFNLElBQUlULGdEQUFXQSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUrQyxLQUFLQyxTQUFTLENBQUN6QyxTQUFTLEtBQUssbUNBQW1DLENBQUMsRUFBRTtJQUNoSDtJQUNBLE1BQU0wQyxhQUFhLENBQUMsRUFBRTFDLE9BQU8sQ0FBQyxDQUFDO0lBQy9CLE1BQU0yQyxXQUFXQyxXQUFXM0MsVUFBVWUsSUFBSTtJQUMxQyxNQUFNNkIsV0FBV0MsV0FBVzdDLFVBQVVnQixJQUFJO0lBQzFDLE1BQU04QixlQUFlQyxlQUFlL0MsVUFBVWtCLFFBQVE7SUFDdEQsTUFBTThCLGdCQUFnQixDQUFDLEVBQUUsRUFBRUYsYUFBYSxFQUFFSixTQUFTLEVBQUVFLFNBQVMsQ0FBQztJQUMvRCxJQUFJSyxXQUFXOUMsS0FBS3NCLEtBQUssQ0FBQyxLQUFLeUIsR0FBRyxDQUFDQyxvQkFBb0JDLElBQUksQ0FBQztJQUM1RCxJQUFJSCxhQUFhLE1BQU0sQ0FBQ0EsU0FBU0ksVUFBVSxDQUFDLE1BQU07UUFDOUNKLFdBQVcsTUFBTUE7SUFDckI7SUFDQSxPQUFPLElBQUlLLElBQUksQ0FBQyxFQUFFYixXQUFXLEVBQUVPLGNBQWMsRUFBRUMsU0FBUyxDQUFDO0FBQzdEO0FBQ0EsU0FBU04sV0FBVzVCLElBQUk7SUFDcEIsT0FBT0EsS0FBS3dDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFQyxVQUFVekMsTUFBTSxDQUFDLENBQUMsR0FBR3lDLFVBQVV6QztBQUNuRTtBQUNBLFNBQVM4QixXQUFXN0IsSUFBSTtJQUNwQixPQUFPQSxTQUFTZixZQUFZLENBQUMsQ0FBQyxFQUFFZSxLQUFLLENBQUMsR0FBRztBQUM3QztBQUNBLFNBQVMrQixlQUFlN0IsUUFBUTtJQUM1QixJQUFJQSxhQUFhakIsV0FBVztRQUN4QixPQUFPO0lBQ1g7SUFDQSxNQUFNd0QsZUFBZU4sbUJBQW1CakMsU0FBU0MsUUFBUTtJQUN6RCxNQUFNdUMsZUFBZXhDLFNBQVNFLFFBQVEsS0FBS25CLFlBQ3JDLENBQUMsQ0FBQyxFQUFFa0QsbUJBQW1CakMsU0FBU0UsUUFBUSxFQUFFLENBQUMsR0FBRztJQUNwRCxPQUFPLENBQUMsRUFBRXFDLGFBQWEsRUFBRUMsYUFBYSxDQUFDLENBQUM7QUFDNUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdG9rZW5zdHJlYW0vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGlic3FsK2NsaWVudEAwLjMuNC9ub2RlX21vZHVsZXMvQGxpYnNxbC9jbGllbnQvbGliLWVzbS91cmkuanM/NmI4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBVUkkgcGFyc2VyIGJhc2VkIG9uIFJGQyAzOTg2XG4vLyBXZSBjYW4ndCB1c2UgdGhlIHN0YW5kYXJkIGBVUkxgIG9iamVjdCwgYmVjYXVzZSB3ZSB3YW50IHRvIHN1cHBvcnQgcmVsYXRpdmUgYGZpbGU6YCBVUkxzIGxpa2Vcbi8vIGBmaWxlOnJlbGF0aXZlL3BhdGgvZGF0YWJhc2UuZGJgLCB3aGljaCBhcmUgbm90IGNvcnJlY3QgYWNjb3JkaW5nIHRvIFJGQyA4MDg5LCB3aGljaCBzdGFuZGFyZGl6ZXMgdGhlXG4vLyBgZmlsZWAgc2NoZW1lLlxuaW1wb3J0IHsgTGlic3FsRXJyb3IgfSBmcm9tIFwiLi9hcGkuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVVyaSh0ZXh0KSB7XG4gICAgY29uc3QgbWF0Y2ggPSBVUklfUkUuZXhlYyh0ZXh0KTtcbiAgICBpZiAobWF0Y2ggPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IExpYnNxbEVycm9yKFwiVGhlIFVSTCBpcyBub3QgaW4gYSB2YWxpZCBmb3JtYXRcIiwgXCJVUkxfSU5WQUxJRFwiKTtcbiAgICB9XG4gICAgY29uc3QgZ3JvdXBzID0gbWF0Y2guZ3JvdXBzO1xuICAgIGNvbnN0IHNjaGVtZSA9IGdyb3Vwc1tcInNjaGVtZVwiXTtcbiAgICBjb25zdCBhdXRob3JpdHkgPSBncm91cHNbXCJhdXRob3JpdHlcIl0gIT09IHVuZGVmaW5lZFxuICAgICAgICA/IHBhcnNlQXV0aG9yaXR5KGdyb3Vwc1tcImF1dGhvcml0eVwiXSkgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgcGF0aCA9IHBlcmNlbnREZWNvZGUoZ3JvdXBzW1wicGF0aFwiXSk7XG4gICAgY29uc3QgcXVlcnkgPSBncm91cHNbXCJxdWVyeVwiXSAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gcGFyc2VRdWVyeShncm91cHNbXCJxdWVyeVwiXSkgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgZnJhZ21lbnQgPSBncm91cHNbXCJmcmFnbWVudFwiXSAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gcGVyY2VudERlY29kZShncm91cHNbXCJmcmFnbWVudFwiXSkgOiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHsgc2NoZW1lLCBhdXRob3JpdHksIHBhdGgsIHF1ZXJ5LCBmcmFnbWVudCB9O1xufVxuY29uc3QgVVJJX1JFID0gKCgpID0+IHtcbiAgICBjb25zdCBTQ0hFTUUgPSAnKD88c2NoZW1lPltBLVphLXpdW0EtWmEtei4rLV0qKSc7XG4gICAgY29uc3QgQVVUSE9SSVRZID0gJyg/PGF1dGhvcml0eT5bXi8/I10qKSc7XG4gICAgY29uc3QgUEFUSCA9ICcoPzxwYXRoPltePyNdKiknO1xuICAgIGNvbnN0IFFVRVJZID0gJyg/PHF1ZXJ5PlteI10qKSc7XG4gICAgY29uc3QgRlJBR01FTlQgPSAnKD88ZnJhZ21lbnQ+LiopJztcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChgXiR7U0NIRU1FfTooLy8ke0FVVEhPUklUWX0pPyR7UEFUSH0oXFxcXD8ke1FVRVJZfSk/KCMke0ZSQUdNRU5UfSk/JGAsIFwic3VcIik7XG59KSgpO1xuZnVuY3Rpb24gcGFyc2VBdXRob3JpdHkodGV4dCkge1xuICAgIGNvbnN0IG1hdGNoID0gQVVUSE9SSVRZX1JFLmV4ZWModGV4dCk7XG4gICAgaWYgKG1hdGNoID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBMaWJzcWxFcnJvcihcIlRoZSBhdXRob3JpdHkgcGFydCBvZiB0aGUgVVJMIGlzIG5vdCBpbiBhIHZhbGlkIGZvcm1hdFwiLCBcIlVSTF9JTlZBTElEXCIpO1xuICAgIH1cbiAgICBjb25zdCBncm91cHMgPSBtYXRjaC5ncm91cHM7XG4gICAgY29uc3QgaG9zdCA9IHBlcmNlbnREZWNvZGUoZ3JvdXBzW1wiaG9zdF9iclwiXSA/PyBncm91cHNbXCJob3N0XCJdKTtcbiAgICBjb25zdCBwb3J0ID0gZ3JvdXBzW1wicG9ydFwiXVxuICAgICAgICA/IHBhcnNlSW50KGdyb3Vwc1tcInBvcnRcIl0sIDEwKVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCB1c2VyaW5mbyA9IGdyb3Vwc1tcInVzZXJuYW1lXCJdICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyB7XG4gICAgICAgICAgICB1c2VybmFtZTogcGVyY2VudERlY29kZShncm91cHNbXCJ1c2VybmFtZVwiXSksXG4gICAgICAgICAgICBwYXNzd29yZDogZ3JvdXBzW1wicGFzc3dvcmRcIl0gIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gcGVyY2VudERlY29kZShncm91cHNbXCJwYXNzd29yZFwiXSkgOiB1bmRlZmluZWQsXG4gICAgICAgIH1cbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHsgaG9zdCwgcG9ydCwgdXNlcmluZm8gfTtcbn1cbmNvbnN0IEFVVEhPUklUWV9SRSA9ICgoKSA9PiB7XG4gICAgY29uc3QgVVNFUklORk8gPSAnKD88dXNlcm5hbWU+W146XSopKDooPzxwYXNzd29yZD4uKikpPyc7XG4gICAgY29uc3QgSE9TVCA9ICcoKD88aG9zdD5bXjpcXFxcW1xcXFxdXSopfChcXFxcWyg/PGhvc3RfYnI+W15cXFxcW1xcXFxdXSopXFxcXF0pKSc7XG4gICAgY29uc3QgUE9SVCA9ICcoPzxwb3J0PlswLTldKiknO1xuICAgIHJldHVybiBuZXcgUmVnRXhwKGBeKCR7VVNFUklORk99QCk/JHtIT1NUfSg6JHtQT1JUfSk/JGAsIFwic3VcIik7XG59KSgpO1xuLy8gUXVlcnkgc3RyaW5nIGlzIHBhcnNlZCBhcyBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQgYWNjb3JkaW5nIHRvIHRoZSBXZWIgVVJMIHN0YW5kYXJkOlxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmxlbmNvZGVkLXBhcnNpbmdcbmZ1bmN0aW9uIHBhcnNlUXVlcnkodGV4dCkge1xuICAgIGNvbnN0IHNlcXVlbmNlcyA9IHRleHQuc3BsaXQoXCImXCIpO1xuICAgIGNvbnN0IHBhaXJzID0gW107XG4gICAgZm9yIChjb25zdCBzZXF1ZW5jZSBvZiBzZXF1ZW5jZXMpIHtcbiAgICAgICAgaWYgKHNlcXVlbmNlID09PSBcIlwiKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQga2V5O1xuICAgICAgICBsZXQgdmFsdWU7XG4gICAgICAgIGNvbnN0IHNwbGl0SWR4ID0gc2VxdWVuY2UuaW5kZXhPZihcIj1cIik7XG4gICAgICAgIGlmIChzcGxpdElkeCA8IDApIHtcbiAgICAgICAgICAgIGtleSA9IHNlcXVlbmNlO1xuICAgICAgICAgICAgdmFsdWUgPSBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAga2V5ID0gc2VxdWVuY2Uuc3Vic3RyaW5nKDAsIHNwbGl0SWR4KTtcbiAgICAgICAgICAgIHZhbHVlID0gc2VxdWVuY2Uuc3Vic3RyaW5nKHNwbGl0SWR4ICsgMSk7XG4gICAgICAgIH1cbiAgICAgICAgcGFpcnMucHVzaCh7XG4gICAgICAgICAgICBrZXk6IHBlcmNlbnREZWNvZGUoa2V5LnJlcGxhY2VBbGwoXCIrXCIsIFwiIFwiKSksXG4gICAgICAgICAgICB2YWx1ZTogcGVyY2VudERlY29kZSh2YWx1ZS5yZXBsYWNlQWxsKFwiK1wiLCBcIiBcIikpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHsgcGFpcnMgfTtcbn1cbmZ1bmN0aW9uIHBlcmNlbnREZWNvZGUodGV4dCkge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQodGV4dCk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBMaWJzcWxFcnJvcihgVVJMIGNvbXBvbmVudCBoYXMgaW52YWxpZCBwZXJjZW50IGVuY29kaW5nOiAke2V9YCwgXCJVUkxfSU5WQUxJRFwiLCBlKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVCYXNlVXJsKHNjaGVtZSwgYXV0aG9yaXR5LCBwYXRoKSB7XG4gICAgaWYgKGF1dGhvcml0eSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBMaWJzcWxFcnJvcihgVVJMIHdpdGggc2NoZW1lICR7SlNPTi5zdHJpbmdpZnkoc2NoZW1lICsgXCI6XCIpfSByZXF1aXJlcyBhdXRob3JpdHkgKHRoZSBcIi8vXCIgcGFydClgLCBcIlVSTF9JTlZBTElEXCIpO1xuICAgIH1cbiAgICBjb25zdCBzY2hlbWVUZXh0ID0gYCR7c2NoZW1lfTpgO1xuICAgIGNvbnN0IGhvc3RUZXh0ID0gZW5jb2RlSG9zdChhdXRob3JpdHkuaG9zdCk7XG4gICAgY29uc3QgcG9ydFRleHQgPSBlbmNvZGVQb3J0KGF1dGhvcml0eS5wb3J0KTtcbiAgICBjb25zdCB1c2VyaW5mb1RleHQgPSBlbmNvZGVVc2VyaW5mbyhhdXRob3JpdHkudXNlcmluZm8pO1xuICAgIGNvbnN0IGF1dGhvcml0eVRleHQgPSBgLy8ke3VzZXJpbmZvVGV4dH0ke2hvc3RUZXh0fSR7cG9ydFRleHR9YDtcbiAgICBsZXQgcGF0aFRleHQgPSBwYXRoLnNwbGl0KFwiL1wiKS5tYXAoZW5jb2RlVVJJQ29tcG9uZW50KS5qb2luKFwiL1wiKTtcbiAgICBpZiAocGF0aFRleHQgIT09IFwiXCIgJiYgIXBhdGhUZXh0LnN0YXJ0c1dpdGgoXCIvXCIpKSB7XG4gICAgICAgIHBhdGhUZXh0ID0gXCIvXCIgKyBwYXRoVGV4dDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBVUkwoYCR7c2NoZW1lVGV4dH0ke2F1dGhvcml0eVRleHR9JHtwYXRoVGV4dH1gKTtcbn1cbmZ1bmN0aW9uIGVuY29kZUhvc3QoaG9zdCkge1xuICAgIHJldHVybiBob3N0LmluY2x1ZGVzKFwiOlwiKSA/IGBbJHtlbmNvZGVVUkkoaG9zdCl9XWAgOiBlbmNvZGVVUkkoaG9zdCk7XG59XG5mdW5jdGlvbiBlbmNvZGVQb3J0KHBvcnQpIHtcbiAgICByZXR1cm4gcG9ydCAhPT0gdW5kZWZpbmVkID8gYDoke3BvcnR9YCA6IFwiXCI7XG59XG5mdW5jdGlvbiBlbmNvZGVVc2VyaW5mbyh1c2VyaW5mbykge1xuICAgIGlmICh1c2VyaW5mbyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICBjb25zdCB1c2VybmFtZVRleHQgPSBlbmNvZGVVUklDb21wb25lbnQodXNlcmluZm8udXNlcm5hbWUpO1xuICAgIGNvbnN0IHBhc3N3b3JkVGV4dCA9IHVzZXJpbmZvLnBhc3N3b3JkICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBgOiR7ZW5jb2RlVVJJQ29tcG9uZW50KHVzZXJpbmZvLnBhc3N3b3JkKX1gIDogXCJcIjtcbiAgICByZXR1cm4gYCR7dXNlcm5hbWVUZXh0fSR7cGFzc3dvcmRUZXh0fUBgO1xufVxuIl0sIm5hbWVzIjpbIkxpYnNxbEVycm9yIiwicGFyc2VVcmkiLCJ0ZXh0IiwibWF0Y2giLCJVUklfUkUiLCJleGVjIiwiZ3JvdXBzIiwic2NoZW1lIiwiYXV0aG9yaXR5IiwidW5kZWZpbmVkIiwicGFyc2VBdXRob3JpdHkiLCJwYXRoIiwicGVyY2VudERlY29kZSIsInF1ZXJ5IiwicGFyc2VRdWVyeSIsImZyYWdtZW50IiwiU0NIRU1FIiwiQVVUSE9SSVRZIiwiUEFUSCIsIlFVRVJZIiwiRlJBR01FTlQiLCJSZWdFeHAiLCJBVVRIT1JJVFlfUkUiLCJob3N0IiwicG9ydCIsInBhcnNlSW50IiwidXNlcmluZm8iLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiVVNFUklORk8iLCJIT1NUIiwiUE9SVCIsInNlcXVlbmNlcyIsInNwbGl0IiwicGFpcnMiLCJzZXF1ZW5jZSIsImtleSIsInZhbHVlIiwic3BsaXRJZHgiLCJpbmRleE9mIiwic3Vic3RyaW5nIiwicHVzaCIsInJlcGxhY2VBbGwiLCJkZWNvZGVVUklDb21wb25lbnQiLCJlIiwiVVJJRXJyb3IiLCJlbmNvZGVCYXNlVXJsIiwiSlNPTiIsInN0cmluZ2lmeSIsInNjaGVtZVRleHQiLCJob3N0VGV4dCIsImVuY29kZUhvc3QiLCJwb3J0VGV4dCIsImVuY29kZVBvcnQiLCJ1c2VyaW5mb1RleHQiLCJlbmNvZGVVc2VyaW5mbyIsImF1dGhvcml0eVRleHQiLCJwYXRoVGV4dCIsIm1hcCIsImVuY29kZVVSSUNvbXBvbmVudCIsImpvaW4iLCJzdGFydHNXaXRoIiwiVVJMIiwiaW5jbHVkZXMiLCJlbmNvZGVVUkkiLCJ1c2VybmFtZVRleHQiLCJwYXNzd29yZFRleHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/uri.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/util.js":
/*!*************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/util.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ResultSetImpl: () => (/* binding */ ResultSetImpl),\n/* harmony export */   supportedUrlLink: () => (/* binding */ supportedUrlLink),\n/* harmony export */   transactionModeToBegin: () => (/* binding */ transactionModeToBegin)\n/* harmony export */ });\n/* harmony import */ var js_base64__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-base64 */ \"(rsc)/../../node_modules/.pnpm/js-base64@3.7.5/node_modules/js-base64/base64.mjs\");\n\nconst supportedUrlLink = \"https://github.com/libsql/libsql-client-ts#supported-urls\";\nfunction transactionModeToBegin(mode) {\n    if (mode === \"write\") {\n        return \"BEGIN IMMEDIATE\";\n    } else if (mode === \"read\") {\n        return \"BEGIN TRANSACTION READONLY\";\n    } else if (mode === \"deferred\") {\n        return \"BEGIN DEFERRED\";\n    } else {\n        throw RangeError('Unknown transaction mode, supported values are \"write\", \"read\" and \"deferred\"');\n    }\n}\nclass ResultSetImpl {\n    constructor(columns, rows, rowsAffected, lastInsertRowid){\n        this.columns = columns;\n        this.rows = rows;\n        this.rowsAffected = rowsAffected;\n        this.lastInsertRowid = lastInsertRowid;\n    }\n    toJSON() {\n        return {\n            \"columns\": this.columns,\n            \"rows\": this.rows.map(rowToJson),\n            \"rowsAffected\": this.rowsAffected,\n            \"lastInsertRowid\": this.lastInsertRowid !== undefined ? \"\" + this.lastInsertRowid : null\n        };\n    }\n}\nfunction rowToJson(row) {\n    return Array.prototype.map.call(row, valueToJson);\n}\nfunction valueToJson(value) {\n    if (typeof value === \"bigint\") {\n        return \"\" + value;\n    } else if (value instanceof ArrayBuffer) {\n        return js_base64__WEBPACK_IMPORTED_MODULE_0__.Base64.fromUint8Array(new Uint8Array(value));\n    } else {\n        return value;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsaWJzcWwrY2xpZW50QDAuMy40L25vZGVfbW9kdWxlcy9AbGlic3FsL2NsaWVudC9saWItZXNtL3V0aWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFtQztBQUM1QixNQUFNQyxtQkFBbUIsNERBQTREO0FBQ3JGLFNBQVNDLHVCQUF1QkMsSUFBSTtJQUN2QyxJQUFJQSxTQUFTLFNBQVM7UUFDbEIsT0FBTztJQUNYLE9BQ0ssSUFBSUEsU0FBUyxRQUFRO1FBQ3RCLE9BQU87SUFDWCxPQUNLLElBQUlBLFNBQVMsWUFBWTtRQUMxQixPQUFPO0lBQ1gsT0FDSztRQUNELE1BQU1DLFdBQVc7SUFDckI7QUFDSjtBQUNPLE1BQU1DO0lBS1RDLFlBQVlDLE9BQU8sRUFBRUMsSUFBSSxFQUFFQyxZQUFZLEVBQUVDLGVBQWUsQ0FBRTtRQUN0RCxJQUFJLENBQUNILE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNDLElBQUksR0FBR0E7UUFDWixJQUFJLENBQUNDLFlBQVksR0FBR0E7UUFDcEIsSUFBSSxDQUFDQyxlQUFlLEdBQUdBO0lBQzNCO0lBQ0FDLFNBQVM7UUFDTCxPQUFPO1lBQ0gsV0FBVyxJQUFJLENBQUNKLE9BQU87WUFDdkIsUUFBUSxJQUFJLENBQUNDLElBQUksQ0FBQ0ksR0FBRyxDQUFDQztZQUN0QixnQkFBZ0IsSUFBSSxDQUFDSixZQUFZO1lBQ2pDLG1CQUFtQixJQUFJLENBQUNDLGVBQWUsS0FBS0ksWUFBWSxLQUFLLElBQUksQ0FBQ0osZUFBZSxHQUFHO1FBQ3hGO0lBQ0o7QUFDSjtBQUNBLFNBQVNHLFVBQVVFLEdBQUc7SUFDbEIsT0FBT0MsTUFBTUMsU0FBUyxDQUFDTCxHQUFHLENBQUNNLElBQUksQ0FBQ0gsS0FBS0k7QUFDekM7QUFDQSxTQUFTQSxZQUFZQyxLQUFLO0lBQ3RCLElBQUksT0FBT0EsVUFBVSxVQUFVO1FBQzNCLE9BQU8sS0FBS0E7SUFDaEIsT0FDSyxJQUFJQSxpQkFBaUJDLGFBQWE7UUFDbkMsT0FBT3JCLDZDQUFNQSxDQUFDc0IsY0FBYyxDQUFDLElBQUlDLFdBQVdIO0lBQ2hELE9BQ0s7UUFDRCxPQUFPQTtJQUNYO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdG9rZW5zdHJlYW0vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGlic3FsK2NsaWVudEAwLjMuNC9ub2RlX21vZHVsZXMvQGxpYnNxbC9jbGllbnQvbGliLWVzbS91dGlsLmpzP2I4MmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZTY0IH0gZnJvbSBcImpzLWJhc2U2NFwiO1xuZXhwb3J0IGNvbnN0IHN1cHBvcnRlZFVybExpbmsgPSBcImh0dHBzOi8vZ2l0aHViLmNvbS9saWJzcWwvbGlic3FsLWNsaWVudC10cyNzdXBwb3J0ZWQtdXJsc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zYWN0aW9uTW9kZVRvQmVnaW4obW9kZSkge1xuICAgIGlmIChtb2RlID09PSBcIndyaXRlXCIpIHtcbiAgICAgICAgcmV0dXJuIFwiQkVHSU4gSU1NRURJQVRFXCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKG1vZGUgPT09IFwicmVhZFwiKSB7XG4gICAgICAgIHJldHVybiBcIkJFR0lOIFRSQU5TQUNUSU9OIFJFQURPTkxZXCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKG1vZGUgPT09IFwiZGVmZXJyZWRcIikge1xuICAgICAgICByZXR1cm4gXCJCRUdJTiBERUZFUlJFRFwiO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcignVW5rbm93biB0cmFuc2FjdGlvbiBtb2RlLCBzdXBwb3J0ZWQgdmFsdWVzIGFyZSBcIndyaXRlXCIsIFwicmVhZFwiIGFuZCBcImRlZmVycmVkXCInKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgUmVzdWx0U2V0SW1wbCB7XG4gICAgY29sdW1ucztcbiAgICByb3dzO1xuICAgIHJvd3NBZmZlY3RlZDtcbiAgICBsYXN0SW5zZXJ0Um93aWQ7XG4gICAgY29uc3RydWN0b3IoY29sdW1ucywgcm93cywgcm93c0FmZmVjdGVkLCBsYXN0SW5zZXJ0Um93aWQpIHtcbiAgICAgICAgdGhpcy5jb2x1bW5zID0gY29sdW1ucztcbiAgICAgICAgdGhpcy5yb3dzID0gcm93cztcbiAgICAgICAgdGhpcy5yb3dzQWZmZWN0ZWQgPSByb3dzQWZmZWN0ZWQ7XG4gICAgICAgIHRoaXMubGFzdEluc2VydFJvd2lkID0gbGFzdEluc2VydFJvd2lkO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBcImNvbHVtbnNcIjogdGhpcy5jb2x1bW5zLFxuICAgICAgICAgICAgXCJyb3dzXCI6IHRoaXMucm93cy5tYXAocm93VG9Kc29uKSxcbiAgICAgICAgICAgIFwicm93c0FmZmVjdGVkXCI6IHRoaXMucm93c0FmZmVjdGVkLFxuICAgICAgICAgICAgXCJsYXN0SW5zZXJ0Um93aWRcIjogdGhpcy5sYXN0SW5zZXJ0Um93aWQgIT09IHVuZGVmaW5lZCA/IFwiXCIgKyB0aGlzLmxhc3RJbnNlcnRSb3dpZCA6IG51bGwsXG4gICAgICAgIH07XG4gICAgfVxufVxuZnVuY3Rpb24gcm93VG9Kc29uKHJvdykge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUubWFwLmNhbGwocm93LCB2YWx1ZVRvSnNvbik7XG59XG5mdW5jdGlvbiB2YWx1ZVRvSnNvbih2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiYmlnaW50XCIpIHtcbiAgICAgICAgcmV0dXJuIFwiXCIgKyB2YWx1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gQmFzZTY0LmZyb21VaW50OEFycmF5KG5ldyBVaW50OEFycmF5KHZhbHVlKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkJhc2U2NCIsInN1cHBvcnRlZFVybExpbmsiLCJ0cmFuc2FjdGlvbk1vZGVUb0JlZ2luIiwibW9kZSIsIlJhbmdlRXJyb3IiLCJSZXN1bHRTZXRJbXBsIiwiY29uc3RydWN0b3IiLCJjb2x1bW5zIiwicm93cyIsInJvd3NBZmZlY3RlZCIsImxhc3RJbnNlcnRSb3dpZCIsInRvSlNPTiIsIm1hcCIsInJvd1RvSnNvbiIsInVuZGVmaW5lZCIsInJvdyIsIkFycmF5IiwicHJvdG90eXBlIiwiY2FsbCIsInZhbHVlVG9Kc29uIiwidmFsdWUiLCJBcnJheUJ1ZmZlciIsImZyb21VaW50OEFycmF5IiwiVWludDhBcnJheSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/util.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/ws.js":
/*!***********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/ws.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LibsqlError: () => (/* reexport safe */ _api_js__WEBPACK_IMPORTED_MODULE_1__.LibsqlError),\n/* harmony export */   WsClient: () => (/* binding */ WsClient),\n/* harmony export */   WsTransaction: () => (/* binding */ WsTransaction),\n/* harmony export */   _createClient: () => (/* binding */ _createClient),\n/* harmony export */   createClient: () => (/* binding */ createClient)\n/* harmony export */ });\n/* harmony import */ var _libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @libsql/hrana-client */ \"(rsc)/../../node_modules/.pnpm/@libsql+hrana-client@0.5.5/node_modules/@libsql/hrana-client/lib-esm/index.js\");\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./api.js */ \"(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/api.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config.js */ \"(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/config.js\");\n/* harmony import */ var _hrana_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./hrana.js */ \"(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/hrana.js\");\n/* harmony import */ var _sql_cache_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sql_cache.js */ \"(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/sql_cache.js\");\n/* harmony import */ var _uri_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./uri.js */ \"(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/uri.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util.js */ \"(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/util.js\");\n\n\n\n\n\n\n\n\nfunction createClient(config) {\n    return _createClient((0,_config_js__WEBPACK_IMPORTED_MODULE_2__.expandConfig)(config, false));\n}\n/** @private */ function _createClient(config) {\n    if (config.scheme !== \"wss\" && config.scheme !== \"ws\") {\n        throw new _api_js__WEBPACK_IMPORTED_MODULE_1__.LibsqlError('The WebSocket client supports only \"libsql:\", \"wss:\" and \"ws:\" URLs, ' + `got ${JSON.stringify(config.scheme + \":\")}. For more information, please read ${_util_js__WEBPACK_IMPORTED_MODULE_6__.supportedUrlLink}`, \"URL_SCHEME_NOT_SUPPORTED\");\n    }\n    if (config.scheme === \"ws\" && config.tls) {\n        throw new _api_js__WEBPACK_IMPORTED_MODULE_1__.LibsqlError(`A \"ws:\" URL cannot opt into TLS by using ?tls=1`, \"URL_INVALID\");\n    } else if (config.scheme === \"wss\" && !config.tls) {\n        throw new _api_js__WEBPACK_IMPORTED_MODULE_1__.LibsqlError(`A \"wss:\" URL cannot opt out of TLS by using ?tls=0`, \"URL_INVALID\");\n    }\n    const url = (0,_uri_js__WEBPACK_IMPORTED_MODULE_5__.encodeBaseUrl)(config.scheme, config.authority, config.path);\n    let client;\n    try {\n        client = _libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__.openWs(url, config.authToken);\n    } catch (e) {\n        if (e instanceof _libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__.WebSocketUnsupportedError) {\n            const suggestedScheme = config.scheme === \"wss\" ? \"https\" : \"http\";\n            const suggestedUrl = (0,_uri_js__WEBPACK_IMPORTED_MODULE_5__.encodeBaseUrl)(suggestedScheme, config.authority, config.path);\n            throw new _api_js__WEBPACK_IMPORTED_MODULE_1__.LibsqlError(\"This environment does not support WebSockets, please switch to the HTTP client by using \" + `a \"${suggestedScheme}:\" URL (${JSON.stringify(suggestedUrl)}). ` + `For more information, please read ${_util_js__WEBPACK_IMPORTED_MODULE_6__.supportedUrlLink}`, \"WEBSOCKETS_NOT_SUPPORTED\");\n        }\n        throw (0,_hrana_js__WEBPACK_IMPORTED_MODULE_3__.mapHranaError)(e);\n    }\n    return new WsClient(client, url, config.authToken, config.intMode);\n}\nconst maxConnAgeMillis = 60 * 1000;\nconst sqlCacheCapacity = 100;\nclass WsClient {\n    #url;\n    #authToken;\n    #intMode;\n    // State of the current connection. The `hrana.WsClient` inside may be closed at any moment due to an\n    // asynchronous error.\n    #connState;\n    // If defined, this is a connection that will be used in the future, once it is ready.\n    #futureConnState;\n    /** @private */ constructor(client, url, authToken, intMode){\n        this.#url = url;\n        this.#authToken = authToken;\n        this.#intMode = intMode;\n        this.#connState = this.#openConn(client);\n        this.#futureConnState = undefined;\n        this.closed = false;\n        this.protocol = \"ws\";\n    }\n    async execute(stmt) {\n        const streamState = await this.#openStream();\n        try {\n            const hranaStmt = (0,_hrana_js__WEBPACK_IMPORTED_MODULE_3__.stmtToHrana)(stmt);\n            // Schedule all operations synchronously, so they will be pipelined and executed in a single\n            // network roundtrip.\n            streamState.conn.sqlCache.apply([\n                hranaStmt\n            ]);\n            const hranaRowsPromise = streamState.stream.query(hranaStmt);\n            streamState.stream.closeGracefully();\n            return (0,_hrana_js__WEBPACK_IMPORTED_MODULE_3__.resultSetFromHrana)(await hranaRowsPromise);\n        } catch (e) {\n            throw (0,_hrana_js__WEBPACK_IMPORTED_MODULE_3__.mapHranaError)(e);\n        } finally{\n            this._closeStream(streamState);\n        }\n    }\n    async batch(stmts, mode = \"deferred\") {\n        const streamState = await this.#openStream();\n        try {\n            const hranaStmts = stmts.map(_hrana_js__WEBPACK_IMPORTED_MODULE_3__.stmtToHrana);\n            const version = await streamState.conn.client.getVersion();\n            // Schedule all operations synchronously, so they will be pipelined and executed in a single\n            // network roundtrip.\n            streamState.conn.sqlCache.apply(hranaStmts);\n            const batch = streamState.stream.batch(version >= 3);\n            const resultsPromise = (0,_hrana_js__WEBPACK_IMPORTED_MODULE_3__.executeHranaBatch)(mode, version, batch, hranaStmts);\n            return await resultsPromise;\n        } catch (e) {\n            throw (0,_hrana_js__WEBPACK_IMPORTED_MODULE_3__.mapHranaError)(e);\n        } finally{\n            this._closeStream(streamState);\n        }\n    }\n    async transaction(mode = \"write\") {\n        const streamState = await this.#openStream();\n        try {\n            const version = await streamState.conn.client.getVersion();\n            // the BEGIN statement will be batched with the first statement on the transaction to save a\n            // network roundtrip\n            return new WsTransaction(this, streamState, mode, version);\n        } catch (e) {\n            this._closeStream(streamState);\n            throw (0,_hrana_js__WEBPACK_IMPORTED_MODULE_3__.mapHranaError)(e);\n        }\n    }\n    async executeMultiple(sql) {\n        const streamState = await this.#openStream();\n        try {\n            // Schedule all operations synchronously, so they will be pipelined and executed in a single\n            // network roundtrip.\n            const promise = streamState.stream.sequence(sql);\n            streamState.stream.closeGracefully();\n            await promise;\n        } catch (e) {\n            throw (0,_hrana_js__WEBPACK_IMPORTED_MODULE_3__.mapHranaError)(e);\n        } finally{\n            this._closeStream(streamState);\n        }\n    }\n    async #openStream() {\n        if (this.closed) {\n            throw new _api_js__WEBPACK_IMPORTED_MODULE_1__.LibsqlError(\"The client is closed\", \"CLIENT_CLOSED\");\n        }\n        const now = new Date();\n        const ageMillis = now.valueOf() - this.#connState.openTime.valueOf();\n        if (ageMillis > maxConnAgeMillis && this.#futureConnState === undefined) {\n            // The existing connection is too old, let's open a new one.\n            const futureConnState = this.#openConn();\n            this.#futureConnState = futureConnState;\n            // However, if we used `futureConnState` immediately, we would introduce additional latency,\n            // because we would have to wait for the WebSocket handshake to complete, even though we may a\n            // have perfectly good existing connection in `this.#connState`!\n            //\n            // So we wait until the `hrana.Client.getVersion()` operation completes (which happens when the\n            // WebSocket hanshake completes), and only then we replace `this.#connState` with\n            // `futureConnState`, which is stored in `this.#futureConnState` in the meantime.\n            futureConnState.client.getVersion().then((_version)=>{\n                if (this.#connState !== futureConnState) {\n                    // We need to close `this.#connState` before we replace it. However, it is possible\n                    // that `this.#connState` has already been replaced: see the code below.\n                    if (this.#connState.streamStates.size === 0) {\n                        this.#connState.client.close();\n                    } else {\n                    // If there are existing streams on the connection, we must not close it, because\n                    // these streams would be broken. The last stream to be closed will also close the\n                    // connection in `_closeStream()`.\n                    }\n                }\n                this.#connState = futureConnState;\n                this.#futureConnState = undefined;\n            }, (_e)=>{\n                // If the new connection could not be established, let's just ignore the error and keep\n                // using the existing connection.\n                this.#futureConnState = undefined;\n            });\n        }\n        if (this.#connState.client.closed) {\n            // An error happened on this connection and it has been closed. Let's try to seamlessly reconnect.\n            try {\n                if (this.#futureConnState !== undefined) {\n                    // We are already in the process of opening a new connection, so let's just use it\n                    // immediately.\n                    this.#connState = this.#futureConnState;\n                } else {\n                    this.#connState = this.#openConn();\n                }\n            } catch (e) {\n                throw (0,_hrana_js__WEBPACK_IMPORTED_MODULE_3__.mapHranaError)(e);\n            }\n        }\n        const connState = this.#connState;\n        try {\n            // Now we wait for the WebSocket handshake to complete (if it hasn't completed yet). Note that\n            // this does not increase latency, because any messages that we would send on the WebSocket before\n            // the handshake would be queued until the handshake is completed anyway.\n            if (connState.useSqlCache === undefined) {\n                connState.useSqlCache = await connState.client.getVersion() >= 2;\n                if (connState.useSqlCache) {\n                    connState.sqlCache.capacity = sqlCacheCapacity;\n                }\n            }\n            const stream = connState.client.openStream();\n            stream.intMode = this.#intMode;\n            const streamState = {\n                conn: connState,\n                stream\n            };\n            connState.streamStates.add(streamState);\n            return streamState;\n        } catch (e) {\n            throw (0,_hrana_js__WEBPACK_IMPORTED_MODULE_3__.mapHranaError)(e);\n        }\n    }\n    #openConn(client) {\n        try {\n            client ??= _libsql_hrana_client__WEBPACK_IMPORTED_MODULE_0__.openWs(this.#url, this.#authToken);\n            return {\n                client,\n                useSqlCache: undefined,\n                sqlCache: new _sql_cache_js__WEBPACK_IMPORTED_MODULE_4__.SqlCache(client, 0),\n                openTime: new Date(),\n                streamStates: new Set()\n            };\n        } catch (e) {\n            throw (0,_hrana_js__WEBPACK_IMPORTED_MODULE_3__.mapHranaError)(e);\n        }\n    }\n    _closeStream(streamState) {\n        streamState.stream.close();\n        const connState = streamState.conn;\n        connState.streamStates.delete(streamState);\n        if (connState.streamStates.size === 0 && connState !== this.#connState) {\n            // We are not using this connection anymore and this is the last stream that was using it, so we\n            // must close it now.\n            connState.client.close();\n        }\n    }\n    close() {\n        this.#connState.client.close();\n        this.closed = true;\n    }\n}\nclass WsTransaction extends _hrana_js__WEBPACK_IMPORTED_MODULE_3__.HranaTransaction {\n    #client;\n    #streamState;\n    /** @private */ constructor(client, state, mode, version){\n        super(mode, version);\n        this.#client = client;\n        this.#streamState = state;\n    }\n    /** @private */ _getStream() {\n        return this.#streamState.stream;\n    }\n    /** @private */ _getSqlCache() {\n        return this.#streamState.conn.sqlCache;\n    }\n    close() {\n        this.#client._closeStream(this.#streamState);\n    }\n    get closed() {\n        return this.#streamState.stream.closed;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@libsql+client@0.3.4/node_modules/@libsql/client/lib-esm/ws.js\n");

/***/ })

};
;