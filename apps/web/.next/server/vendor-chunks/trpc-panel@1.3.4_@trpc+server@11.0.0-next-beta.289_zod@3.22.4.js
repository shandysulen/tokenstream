"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/trpc-panel@1.3.4_@trpc+server@11.0.0-next-beta.289_zod@3.22.4";
exports.ids = ["vendor-chunks/trpc-panel@1.3.4_@trpc+server@11.0.0-next-beta.289_zod@3.22.4"];
exports.modules = {

/***/ "(rsc)/../../node_modules/.pnpm/trpc-panel@1.3.4_@trpc+server@11.0.0-next-beta.289_zod@3.22.4/node_modules/trpc-panel/lib/index.mjs":
/*!************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/trpc-panel@1.3.4_@trpc+server@11.0.0-next-beta.289_zod@3.22.4/node_modules/trpc-panel/lib/index.mjs ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseRouterWithOptions: () => (/* binding */ parseRouterWithOptions),\n/* harmony export */   renderTrpcPanel: () => (/* binding */ renderTrpcPanel)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var node_url__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:url */ \"node:url\");\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:path */ \"node:path\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zod */ \"(rsc)/../../node_modules/.pnpm/zod@3.22.4/node_modules/zod/lib/index.mjs\");\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zod-to-json-schema */ \"(rsc)/../../node_modules/.pnpm/zod-to-json-schema@3.21.4_zod@3.22.4/node_modules/zod-to-json-schema/index.js\");\n\n\n\n\n\nconst TRPCPanelMetaSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    description: zod__WEBPACK_IMPORTED_MODULE_4__.z.string().optional()\n});\nzod__WEBPACK_IMPORTED_MODULE_4__.z.object({});\nconst SharedProcedureDefPropertiesSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    inputs: zod__WEBPACK_IMPORTED_MODULE_4__.z.unknown().array(),\n    meta: TRPCPanelMetaSchema.optional()\n});\nconst QueryDefSchema = SharedProcedureDefPropertiesSchema.merge(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    query: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(true)\n}));\nfunction isQueryDef(obj) {\n    return QueryDefSchema.safeParse(obj).success;\n}\nconst MutationDefSchema = SharedProcedureDefPropertiesSchema.merge(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    mutation: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(true)\n}));\nfunction isMutationDef(obj) {\n    return MutationDefSchema.safeParse(obj).success;\n}\nconst SubscriptionDefSchema = SharedProcedureDefPropertiesSchema.merge(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    subscription: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(true)\n}));\nfunction isSubscriptionDef(obj) {\n    return SubscriptionDefSchema.safeParse(obj).success;\n}\nconst ProcedureDefSchema = QueryDefSchema.or(MutationDefSchema).or(SubscriptionDefSchema);\nconst RouterDefSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    router: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(true)\n});\nconst RouterSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    _def: RouterDefSchema\n});\nfunction isRouter(obj) {\n    return RouterSchema.safeParse(obj).success;\n}\nzod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    _def: ProcedureDefSchema\n});\nfunction isProcedure(obj) {\n    if (typeof obj !== \"function\" || !(\"_def\" in obj)) return false;\n    return ProcedureDefSchema.safeParse(obj._def).success;\n}\nzod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    _def: QueryDefSchema\n});\nfunction logParseError(procedurePath, error) {\n    console.warn(`trpc-panel: Failed to parse procedure ${procedurePath}, ${error}`);\n}\nfunction nodePropertiesFromRef(references) {\n    return Object.assign({\n        path: references.path\n    }, references.optional && {\n        optional: true\n    });\n}\nconst parseZodStringDef = (def, refs)=>{\n    refs.addDataFunctions.addDescriptionIfExists(def, refs);\n    return Object.assign({\n        type: \"string\"\n    }, nodePropertiesFromRef(refs));\n};\nconst parseZodArrayDef = (def, refs)=>{\n    const { type } = def;\n    const childType = zodSelectorFunction(type._def, Object.assign(Object.assign({}, refs), {\n        path: []\n    }));\n    refs.addDataFunctions.addDescriptionIfExists(def, refs);\n    return Object.assign({\n        type: \"array\",\n        childType\n    }, nodePropertiesFromRef(refs));\n};\nconst parseZodBooleanFieldDef = (def, refs)=>{\n    refs.addDataFunctions.addDescriptionIfExists(def, refs);\n    return Object.assign({\n        type: \"boolean\"\n    }, nodePropertiesFromRef(refs));\n};\nfunction isZodThreePointTwenty(def) {\n    return \"optionsMap\" in def;\n}\nfunction makeDefConsistent(def) {\n    const optionsMap = isZodThreePointTwenty(def) ? def.optionsMap : def.options;\n    return {\n        typeName: zod__WEBPACK_IMPORTED_MODULE_4__.ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n        discriminator: def.discriminator,\n        options: optionsMap\n    };\n}\nconst parseZodDiscriminatedUnionDef = (def, refs)=>{\n    const defConsistent = makeDefConsistent(def);\n    const entries = Array.from(defConsistent.options.entries());\n    const nodeEntries = entries.map(([discriminatorValue, zodObj])=>[\n            discriminatorValue,\n            zodSelectorFunction(zodObj._def, refs)\n        ]);\n    const nodesMap = Object.fromEntries(nodeEntries);\n    refs.addDataFunctions.addDescriptionIfExists(def, refs);\n    return Object.assign({\n        type: \"discriminated-union\",\n        discriminatedUnionValues: entries.map(([n])=>n),\n        discriminatedUnionChildrenMap: nodesMap,\n        discriminatorName: def.discriminator\n    }, nodePropertiesFromRef(refs));\n};\nconst parseZodEnumDef = (def, refs)=>{\n    const values = def.values;\n    refs.addDataFunctions.addDescriptionIfExists(def, refs);\n    return Object.assign({\n        type: \"enum\",\n        enumValues: values\n    }, nodePropertiesFromRef(refs));\n};\nconst parseZodLiteralDef = (def, refs)=>{\n    refs.addDataFunctions.addDescriptionIfExists(def, refs);\n    return Object.assign({\n        type: \"literal\",\n        value: def.value\n    }, nodePropertiesFromRef(refs));\n};\nconst parseZodNumberDef = (def, refs)=>{\n    refs.addDataFunctions.addDescriptionIfExists(def, refs);\n    return Object.assign({\n        type: \"number\"\n    }, nodePropertiesFromRef(refs));\n};\nconst parseZodObjectDef = (def, refs)=>{\n    const shape = def.shape();\n    const children = {};\n    for (var propertyName of Object.keys(shape)){\n        const node = zodSelectorFunction(shape[propertyName]._def, Object.assign(Object.assign({}, refs), {\n            path: refs.path.concat([\n                propertyName\n            ])\n        }));\n        children[propertyName] = node;\n    }\n    refs.addDataFunctions.addDescriptionIfExists(def, refs);\n    return Object.assign({\n        type: \"object\",\n        children\n    }, nodePropertiesFromRef(refs));\n};\nconst parseZodOptionalDef = (def, refs)=>{\n    const parsedInner = zodSelectorFunction(def.innerType._def, refs);\n    refs.addDataFunctions.addDescriptionIfExists(def, refs);\n    return Object.assign(Object.assign({}, parsedInner), {\n        optional: true\n    });\n};\nfunction parseZodNullableDef(def, refs) {\n    refs.addDataFunctions.addDescriptionIfExists(def, refs);\n    return zodSelectorFunction(def.innerType._def, refs);\n}\nfunction parseZodBigIntDef(def, refs) {\n    refs.addDataFunctions.addDescriptionIfExists(def, refs);\n    return Object.assign({\n        type: \"number\"\n    }, nodePropertiesFromRef(refs));\n}\nfunction parseZodBrandedDef(def, refs) {\n    refs.addDataFunctions.addDescriptionIfExists(def, refs);\n    return zodSelectorFunction(def.type._def, refs);\n}\nfunction parseZodDefaultDef(def, refs) {\n    refs.addDataFunctions.addDescriptionIfExists(def, refs);\n    return zodSelectorFunction(def.innerType._def, refs);\n}\nfunction parseZodEffectsDef(def, refs) {\n    refs.addDataFunctions.addDescriptionIfExists(def, refs);\n    return zodSelectorFunction(def.schema._def, refs);\n}\nfunction parseZodNullDef(def, refs) {\n    refs.addDataFunctions.addDescriptionIfExists(def, refs);\n    return Object.assign({\n        type: \"literal\",\n        value: null\n    }, nodePropertiesFromRef(refs));\n}\nfunction parseZodPromiseDef(def, refs) {\n    refs.addDataFunctions.addDescriptionIfExists(def, refs);\n    return zodSelectorFunction(def.type._def, refs);\n}\nfunction parseZodUndefinedDef(def, refs) {\n    refs.addDataFunctions.addDescriptionIfExists(def, refs);\n    return Object.assign({\n        type: \"literal\",\n        value: undefined\n    }, nodePropertiesFromRef(refs));\n}\nfunction parseZodVoidDef(_, refs) {\n    return {\n        type: \"literal\",\n        value: undefined,\n        path: refs.path\n    };\n}\nconst zodSelectorFunction = (def, references)=>{\n    switch(def.typeName){\n        case zod__WEBPACK_IMPORTED_MODULE_4__.ZodFirstPartyTypeKind.ZodArray:\n            return parseZodArrayDef(def, references);\n        case zod__WEBPACK_IMPORTED_MODULE_4__.ZodFirstPartyTypeKind.ZodBoolean:\n            return parseZodBooleanFieldDef(def, references);\n        case zod__WEBPACK_IMPORTED_MODULE_4__.ZodFirstPartyTypeKind.ZodDiscriminatedUnion:\n            return parseZodDiscriminatedUnionDef(def, references);\n        case zod__WEBPACK_IMPORTED_MODULE_4__.ZodFirstPartyTypeKind.ZodEnum:\n            return parseZodEnumDef(def, references);\n        case zod__WEBPACK_IMPORTED_MODULE_4__.ZodFirstPartyTypeKind.ZodLiteral:\n            return parseZodLiteralDef(def, references);\n        case zod__WEBPACK_IMPORTED_MODULE_4__.ZodFirstPartyTypeKind.ZodNumber:\n            return parseZodNumberDef(def, references);\n        case zod__WEBPACK_IMPORTED_MODULE_4__.ZodFirstPartyTypeKind.ZodObject:\n            return parseZodObjectDef(def, references);\n        case zod__WEBPACK_IMPORTED_MODULE_4__.ZodFirstPartyTypeKind.ZodOptional:\n            return parseZodOptionalDef(def, references);\n        case zod__WEBPACK_IMPORTED_MODULE_4__.ZodFirstPartyTypeKind.ZodString:\n            return parseZodStringDef(def, references);\n        case zod__WEBPACK_IMPORTED_MODULE_4__.ZodFirstPartyTypeKind.ZodNullable:\n            return parseZodNullableDef(def, references);\n        case zod__WEBPACK_IMPORTED_MODULE_4__.ZodFirstPartyTypeKind.ZodBigInt:\n            return parseZodBigIntDef(def, references);\n        case zod__WEBPACK_IMPORTED_MODULE_4__.ZodFirstPartyTypeKind.ZodBranded:\n            return parseZodBrandedDef(def, references);\n        case zod__WEBPACK_IMPORTED_MODULE_4__.ZodFirstPartyTypeKind.ZodDefault:\n            return parseZodDefaultDef(def, references);\n        case zod__WEBPACK_IMPORTED_MODULE_4__.ZodFirstPartyTypeKind.ZodEffects:\n            return parseZodEffectsDef(def, references);\n        case zod__WEBPACK_IMPORTED_MODULE_4__.ZodFirstPartyTypeKind.ZodNull:\n            return parseZodNullDef(def, references);\n        case zod__WEBPACK_IMPORTED_MODULE_4__.ZodFirstPartyTypeKind.ZodPromise:\n            return parseZodPromiseDef(def, references);\n        case zod__WEBPACK_IMPORTED_MODULE_4__.ZodFirstPartyTypeKind.ZodUndefined:\n            return parseZodUndefinedDef(def, references);\n        case zod__WEBPACK_IMPORTED_MODULE_4__.ZodFirstPartyTypeKind.ZodVoid:\n            return parseZodVoidDef(def, references);\n    }\n    return {\n        type: \"unsupported\",\n        path: references.path\n    };\n};\nconst inputParserMap = {\n    zod: (zodObject, refs)=>{\n        return zodSelectorFunction(zodObject._def, refs);\n    }\n};\nconst emptyZodObject = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({});\nfunction nodeAndInputSchemaFromInputs(inputs, _routerPath, options, addDataFunctions) {\n    if (!inputs.length) {\n        return {\n            parseInputResult: \"success\",\n            schema: (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_3__.zodToJsonSchema)(emptyZodObject, {\n                errorMessages: true,\n                $refStrategy: \"none\"\n            }),\n            node: inputParserMap[\"zod\"](emptyZodObject, {\n                path: [],\n                options,\n                addDataFunctions\n            })\n        };\n    }\n    if (inputs.length !== 1) {\n        return {\n            parseInputResult: \"failure\"\n        };\n    }\n    const input = inputs[0];\n    return {\n        parseInputResult: \"success\",\n        schema: (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_3__.zodToJsonSchema)(input, {\n            errorMessages: true,\n            $refStrategy: \"none\"\n        }),\n        node: zodSelectorFunction(input._def, {\n            path: [],\n            options,\n            addDataFunctions\n        })\n    };\n}\nfunction parseProcedure(procedure, path, options) {\n    var _a;\n    const { _def } = procedure;\n    const { inputs } = _def;\n    const parseExtraData = {\n        parameterDescriptions: {}\n    };\n    const nodeAndInput = nodeAndInputSchemaFromInputs(inputs, path, options, {\n        addDescriptionIfExists: (def, refs)=>{\n            if (def.description) {\n                parseExtraData.parameterDescriptions[refs.path.join(\".\")] = def.description;\n            }\n        }\n    });\n    if (nodeAndInput.parseInputResult === \"failure\") {\n        return null;\n    }\n    const t = (()=>{\n        if (isQueryDef(_def)) return \"query\";\n        if (isMutationDef(_def)) return \"mutation\";\n        if (isSubscriptionDef(_def)) return \"subscription\";\n        return null;\n    })();\n    if (!t) {\n        return null;\n    }\n    return {\n        inputSchema: nodeAndInput.schema,\n        node: nodeAndInput.node,\n        nodeType: \"procedure\",\n        procedureType: t,\n        pathFromRootRouter: path,\n        extraData: Object.assign(Object.assign({}, parseExtraData), ((_a = procedure._def.meta) === null || _a === void 0 ? void 0 : _a.description) && {\n            description: procedure._def.meta.description\n        })\n    };\n}\nconst skipSet = new Set([\n    \"createCaller\",\n    \"_def\",\n    \"getErrorShape\"\n]);\nfunction parseRouter(router, routerPath, options) {\n    const children = {};\n    var hasChild = false;\n    for (var [procedureOrRouterPath, child] of Object.entries(router)){\n        if (skipSet.has(procedureOrRouterPath)) continue;\n        const newPath = routerPath.concat([\n            procedureOrRouterPath\n        ]);\n        const parsedNode = (()=>{\n            if (isRouter(child)) {\n                return parseRouter(child, newPath, options);\n            }\n            if (isProcedure(child)) {\n                return parseProcedure(child, newPath, options);\n            }\n            return null;\n        })();\n        if (!parsedNode) {\n            logParseError(newPath.join(\".\"), \"Couldn't parse node.\");\n            continue;\n        }\n        hasChild = true;\n        children[procedureOrRouterPath] = parsedNode;\n    }\n    if (!hasChild) logParseError(routerPath.join(\".\"), `Router doesn't have any successfully parsed children.`);\n    return {\n        children,\n        nodeType: \"router\",\n        path: routerPath\n    };\n}\nfunction parseRouterWithOptions(router, parseRouterOptions) {\n    if (!isRouter(router)) {\n        throw new Error(\"Non trpc router passed to trpc panel.\");\n    }\n    return parseRouter(router, [], parseRouterOptions);\n}\nconst defaultParseRouterOptions = {\n    logFailedProcedureParse: true,\n    transformer: \"superjson\"\n};\nconst __dirname = (0,node_path__WEBPACK_IMPORTED_MODULE_2__.dirname)((0,node_url__WEBPACK_IMPORTED_MODULE_1__.fileURLToPath)(\"file:///C:/Users/shand/OneDrive/Documents/repos/gemhunter/node_modules/.pnpm/trpc-panel@1.3.4_@trpc+server@11.0.0-next-beta.289_zod@3.22.4/node_modules/trpc-panel/lib/index.mjs\"));\nconst javascriptReplaceSymbol = \"{{js}}\";\nconst cssReplaceSymbol = \"{{css}}\";\nconst routerReplaceSymbol = '\"{{parsed_router}}\"';\nconst optionsReplaceSymbol = '\"{{options}}\"';\nconst bundlePath = __dirname + \"/react-app/bundle.js\";\nconst indexPath = __dirname + \"/react-app/index.html\";\nconst cssPath = __dirname + \"/react-app/index.css\";\nconst bundleJs = fs__WEBPACK_IMPORTED_MODULE_0__.readFileSync(bundlePath).toString();\nconst indexHtml = fs__WEBPACK_IMPORTED_MODULE_0__.readFileSync(indexPath).toString();\nconst indexCss = fs__WEBPACK_IMPORTED_MODULE_0__.readFileSync(cssPath).toString();\nfunction injectParams(string, injectionParams) {\n    var r = string;\n    for (var param of injectionParams){\n        r = injectInString(param.searchFor, r, param.injectString);\n    }\n    return r;\n}\nfunction injectInString(searchFor, string, injectString) {\n    const startIndex = string.indexOf(searchFor);\n    return string.slice(0, startIndex) + injectString + string.slice(startIndex + searchFor.length);\n}\nlet cache = {\n    val: null\n};\nfunction renderTrpcPanel(router, options) {\n    if (options.cache === true && cache.val) return cache.val;\n    const bundleInjectionParams = [\n        {\n            searchFor: routerReplaceSymbol,\n            injectString: JSON.stringify(parseRouterWithOptions(router, Object.assign(Object.assign({}, defaultParseRouterOptions), options)))\n        },\n        {\n            searchFor: optionsReplaceSymbol,\n            injectString: JSON.stringify(options)\n        }\n    ];\n    const bundleInjected = injectParams(bundleJs, bundleInjectionParams);\n    const script = `<script>${bundleInjected}</script>`;\n    const css = `<style>${indexCss}</style>`;\n    const htmlReplaceParams = [\n        {\n            searchFor: javascriptReplaceSymbol,\n            injectString: script\n        },\n        {\n            searchFor: cssReplaceSymbol,\n            injectString: css\n        }\n    ];\n    cache.val = injectParams(indexHtml, htmlReplaceParams);\n    return cache.val;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/trpc-panel@1.3.4_@trpc+server@11.0.0-next-beta.289_zod@3.22.4/node_modules/trpc-panel/lib/index.mjs\n");

/***/ })

};
;