"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/whatwg-fetch@3.6.19";
exports.ids = ["vendor-chunks/whatwg-fetch@3.6.19"];
exports.modules = {

/***/ "(rsc)/../../node_modules/.pnpm/whatwg-fetch@3.6.19/node_modules/whatwg-fetch/fetch.js":
/*!***************************************************************************************!*\
  !*** ../../node_modules/.pnpm/whatwg-fetch@3.6.19/node_modules/whatwg-fetch/fetch.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DOMException: () => (/* binding */ DOMException),\n/* harmony export */   Headers: () => (/* binding */ Headers),\n/* harmony export */   Request: () => (/* binding */ Request),\n/* harmony export */   Response: () => (/* binding */ Response),\n/* harmony export */   fetch: () => (/* binding */ fetch)\n/* harmony export */ });\n/* eslint-disable no-prototype-builtins */ var g = typeof globalThis !== \"undefined\" && globalThis || typeof self !== \"undefined\" && self || // eslint-disable-next-line no-undef\ntypeof global !== \"undefined\" && global || {};\nvar support = {\n    searchParams: \"URLSearchParams\" in g,\n    iterable: \"Symbol\" in g && \"iterator\" in Symbol,\n    blob: \"FileReader\" in g && \"Blob\" in g && function() {\n        try {\n            new Blob();\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }(),\n    formData: \"FormData\" in g,\n    arrayBuffer: \"ArrayBuffer\" in g\n};\nfunction isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj);\n}\nif (support.arrayBuffer) {\n    var viewClasses = [\n        \"[object Int8Array]\",\n        \"[object Uint8Array]\",\n        \"[object Uint8ClampedArray]\",\n        \"[object Int16Array]\",\n        \"[object Uint16Array]\",\n        \"[object Int32Array]\",\n        \"[object Uint32Array]\",\n        \"[object Float32Array]\",\n        \"[object Float64Array]\"\n    ];\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;\n    };\n}\nfunction normalizeName(name) {\n    if (typeof name !== \"string\") {\n        name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~!]/i.test(name) || name === \"\") {\n        throw new TypeError('Invalid character in header field name: \"' + name + '\"');\n    }\n    return name.toLowerCase();\n}\nfunction normalizeValue(value) {\n    if (typeof value !== \"string\") {\n        value = String(value);\n    }\n    return value;\n}\n// Build a destructive iterator for the value list\nfunction iteratorFor(items) {\n    var iterator = {\n        next: function() {\n            var value = items.shift();\n            return {\n                done: value === undefined,\n                value: value\n            };\n        }\n    };\n    if (support.iterable) {\n        iterator[Symbol.iterator] = function() {\n            return iterator;\n        };\n    }\n    return iterator;\n}\nfunction Headers(headers) {\n    this.map = {};\n    if (headers instanceof Headers) {\n        headers.forEach(function(value, name) {\n            this.append(name, value);\n        }, this);\n    } else if (Array.isArray(headers)) {\n        headers.forEach(function(header) {\n            if (header.length != 2) {\n                throw new TypeError(\"Headers constructor: expected name/value pair to be length 2, found\" + header.length);\n            }\n            this.append(header[0], header[1]);\n        }, this);\n    } else if (headers) {\n        Object.getOwnPropertyNames(headers).forEach(function(name) {\n            this.append(name, headers[name]);\n        }, this);\n    }\n}\nHeaders.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + \", \" + value : value;\n};\nHeaders.prototype[\"delete\"] = function(name) {\n    delete this.map[normalizeName(name)];\n};\nHeaders.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null;\n};\nHeaders.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name));\n};\nHeaders.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n};\nHeaders.prototype.forEach = function(callback, thisArg) {\n    for(var name in this.map){\n        if (this.map.hasOwnProperty(name)) {\n            callback.call(thisArg, this.map[name], name, this);\n        }\n    }\n};\nHeaders.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n        items.push(name);\n    });\n    return iteratorFor(items);\n};\nHeaders.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n        items.push(value);\n    });\n    return iteratorFor(items);\n};\nHeaders.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n        items.push([\n            name,\n            value\n        ]);\n    });\n    return iteratorFor(items);\n};\nif (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n}\nfunction consumed(body) {\n    if (body._noBody) return;\n    if (body.bodyUsed) {\n        return Promise.reject(new TypeError(\"Already read\"));\n    }\n    body.bodyUsed = true;\n}\nfunction fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n        reader.onload = function() {\n            resolve(reader.result);\n        };\n        reader.onerror = function() {\n            reject(reader.error);\n        };\n    });\n}\nfunction readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise;\n}\nfunction readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);\n    var encoding = match ? match[1] : \"utf-8\";\n    reader.readAsText(blob, encoding);\n    return promise;\n}\nfunction readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n    for(var i = 0; i < view.length; i++){\n        chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join(\"\");\n}\nfunction bufferClone(buf) {\n    if (buf.slice) {\n        return buf.slice(0);\n    } else {\n        var view = new Uint8Array(buf.byteLength);\n        view.set(new Uint8Array(buf));\n        return view.buffer;\n    }\n}\nfunction Body() {\n    this.bodyUsed = false;\n    this._initBody = function(body) {\n        /*\n      fetch-mock wraps the Response object in an ES6 Proxy to\n      provide useful test harness features such as flush. However, on\n      ES5 browsers without fetch or Proxy support pollyfills must be used;\n      the proxy-pollyfill is unable to proxy an attribute unless it exists\n      on the object before the Proxy is created. This change ensures\n      Response.bodyUsed exists on the instance, while maintaining the\n      semantic of setting Request.bodyUsed in the constructor before\n      _initBody is called.\n    */ // eslint-disable-next-line no-self-assign\n        this.bodyUsed = this.bodyUsed;\n        this._bodyInit = body;\n        if (!body) {\n            this._noBody = true;\n            this._bodyText = \"\";\n        } else if (typeof body === \"string\") {\n            this._bodyText = body;\n        } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n            this._bodyBlob = body;\n        } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n            this._bodyFormData = body;\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n            this._bodyText = body.toString();\n        } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n            this._bodyArrayBuffer = bufferClone(body.buffer);\n            // IE 10-11 can't handle a DataView body.\n            this._bodyInit = new Blob([\n                this._bodyArrayBuffer\n            ]);\n        } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n            this._bodyArrayBuffer = bufferClone(body);\n        } else {\n            this._bodyText = body = Object.prototype.toString.call(body);\n        }\n        if (!this.headers.get(\"content-type\")) {\n            if (typeof body === \"string\") {\n                this.headers.set(\"content-type\", \"text/plain;charset=UTF-8\");\n            } else if (this._bodyBlob && this._bodyBlob.type) {\n                this.headers.set(\"content-type\", this._bodyBlob.type);\n            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n                this.headers.set(\"content-type\", \"application/x-www-form-urlencoded;charset=UTF-8\");\n            }\n        }\n    };\n    if (support.blob) {\n        this.blob = function() {\n            var rejected = consumed(this);\n            if (rejected) {\n                return rejected;\n            }\n            if (this._bodyBlob) {\n                return Promise.resolve(this._bodyBlob);\n            } else if (this._bodyArrayBuffer) {\n                return Promise.resolve(new Blob([\n                    this._bodyArrayBuffer\n                ]));\n            } else if (this._bodyFormData) {\n                throw new Error(\"could not read FormData body as blob\");\n            } else {\n                return Promise.resolve(new Blob([\n                    this._bodyText\n                ]));\n            }\n        };\n    }\n    this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n            var isConsumed = consumed(this);\n            if (isConsumed) {\n                return isConsumed;\n            } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {\n                return Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset, this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength));\n            } else {\n                return Promise.resolve(this._bodyArrayBuffer);\n            }\n        } else if (support.blob) {\n            return this.blob().then(readBlobAsArrayBuffer);\n        } else {\n            throw new Error(\"could not read as ArrayBuffer\");\n        }\n    };\n    this.text = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n            return rejected;\n        }\n        if (this._bodyBlob) {\n            return readBlobAsText(this._bodyBlob);\n        } else if (this._bodyArrayBuffer) {\n            return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));\n        } else if (this._bodyFormData) {\n            throw new Error(\"could not read FormData body as text\");\n        } else {\n            return Promise.resolve(this._bodyText);\n        }\n    };\n    if (support.formData) {\n        this.formData = function() {\n            return this.text().then(decode);\n        };\n    }\n    this.json = function() {\n        return this.text().then(JSON.parse);\n    };\n    return this;\n}\n// HTTP methods whose capitalization should be normalized\nvar methods = [\n    \"CONNECT\",\n    \"DELETE\",\n    \"GET\",\n    \"HEAD\",\n    \"OPTIONS\",\n    \"PATCH\",\n    \"POST\",\n    \"PUT\",\n    \"TRACE\"\n];\nfunction normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method;\n}\nfunction Request(input, options) {\n    if (!(this instanceof Request)) {\n        throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.');\n    }\n    options = options || {};\n    var body = options.body;\n    if (input instanceof Request) {\n        if (input.bodyUsed) {\n            throw new TypeError(\"Already read\");\n        }\n        this.url = input.url;\n        this.credentials = input.credentials;\n        if (!options.headers) {\n            this.headers = new Headers(input.headers);\n        }\n        this.method = input.method;\n        this.mode = input.mode;\n        this.signal = input.signal;\n        if (!body && input._bodyInit != null) {\n            body = input._bodyInit;\n            input.bodyUsed = true;\n        }\n    } else {\n        this.url = String(input);\n    }\n    this.credentials = options.credentials || this.credentials || \"same-origin\";\n    if (options.headers || !this.headers) {\n        this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || \"GET\");\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal || function() {\n        if (\"AbortController\" in g) {\n            var ctrl = new AbortController();\n            return ctrl.signal;\n        }\n    }();\n    this.referrer = null;\n    if ((this.method === \"GET\" || this.method === \"HEAD\") && body) {\n        throw new TypeError(\"Body not allowed for GET or HEAD requests\");\n    }\n    this._initBody(body);\n    if (this.method === \"GET\" || this.method === \"HEAD\") {\n        if (options.cache === \"no-store\" || options.cache === \"no-cache\") {\n            // Search for a '_' parameter in the query string\n            var reParamSearch = /([?&])_=[^&]*/;\n            if (reParamSearch.test(this.url)) {\n                // If it already exists then set the value with the current time\n                this.url = this.url.replace(reParamSearch, \"$1_=\" + new Date().getTime());\n            } else {\n                // Otherwise add a new '_' parameter to the end with the current time\n                var reQueryString = /\\?/;\n                this.url += (reQueryString.test(this.url) ? \"&\" : \"?\") + \"_=\" + new Date().getTime();\n            }\n        }\n    }\n}\nRequest.prototype.clone = function() {\n    return new Request(this, {\n        body: this._bodyInit\n    });\n};\nfunction decode(body) {\n    var form = new FormData();\n    body.trim().split(\"&\").forEach(function(bytes) {\n        if (bytes) {\n            var split = bytes.split(\"=\");\n            var name = split.shift().replace(/\\+/g, \" \");\n            var value = split.join(\"=\").replace(/\\+/g, \" \");\n            form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n    });\n    return form;\n}\nfunction parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, \" \");\n    // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill\n    // https://github.com/github/fetch/issues/748\n    // https://github.com/zloirock/core-js/issues/751\n    preProcessedHeaders.split(\"\\r\").map(function(header) {\n        return header.indexOf(\"\\n\") === 0 ? header.substr(1, header.length) : header;\n    }).forEach(function(line) {\n        var parts = line.split(\":\");\n        var key = parts.shift().trim();\n        if (key) {\n            var value = parts.join(\":\").trim();\n            try {\n                headers.append(key, value);\n            } catch (error) {\n                console.warn(\"Response \" + error.message);\n            }\n        }\n    });\n    return headers;\n}\nBody.call(Request.prototype);\nfunction Response(bodyInit, options) {\n    if (!(this instanceof Response)) {\n        throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.');\n    }\n    if (!options) {\n        options = {};\n    }\n    this.type = \"default\";\n    this.status = options.status === undefined ? 200 : options.status;\n    if (this.status < 200 || this.status > 599) {\n        throw new RangeError(\"Failed to construct 'Response': The status provided (0) is outside the range [200, 599].\");\n    }\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = options.statusText === undefined ? \"\" : \"\" + options.statusText;\n    this.headers = new Headers(options.headers);\n    this.url = options.url || \"\";\n    this._initBody(bodyInit);\n}\nBody.call(Response.prototype);\nResponse.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n        status: this.status,\n        statusText: this.statusText,\n        headers: new Headers(this.headers),\n        url: this.url\n    });\n};\nResponse.error = function() {\n    var response = new Response(null, {\n        status: 200,\n        statusText: \"\"\n    });\n    response.status = 0;\n    response.type = \"error\";\n    return response;\n};\nvar redirectStatuses = [\n    301,\n    302,\n    303,\n    307,\n    308\n];\nResponse.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n        throw new RangeError(\"Invalid status code\");\n    }\n    return new Response(null, {\n        status: status,\n        headers: {\n            location: url\n        }\n    });\n};\nvar DOMException = g.DOMException;\ntry {\n    new DOMException();\n} catch (err) {\n    DOMException = function(message, name) {\n        this.message = message;\n        this.name = name;\n        var error = Error(message);\n        this.stack = error.stack;\n    };\n    DOMException.prototype = Object.create(Error.prototype);\n    DOMException.prototype.constructor = DOMException;\n}\nfunction fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n        var request = new Request(input, init);\n        if (request.signal && request.signal.aborted) {\n            return reject(new DOMException(\"Aborted\", \"AbortError\"));\n        }\n        var xhr = new XMLHttpRequest();\n        function abortXhr() {\n            xhr.abort();\n        }\n        xhr.onload = function() {\n            var options = {\n                statusText: xhr.statusText,\n                headers: parseHeaders(xhr.getAllResponseHeaders() || \"\")\n            };\n            // This check if specifically for when a user fetches a file locally from the file system\n            // Only if the status is out of a normal range\n            if (request.url.startsWith(\"file://\") && (xhr.status < 200 || xhr.status > 599)) {\n                options.status = 200;\n            } else {\n                options.status = xhr.status;\n            }\n            options.url = \"responseURL\" in xhr ? xhr.responseURL : options.headers.get(\"X-Request-URL\");\n            var body = \"response\" in xhr ? xhr.response : xhr.responseText;\n            setTimeout(function() {\n                resolve(new Response(body, options));\n            }, 0);\n        };\n        xhr.onerror = function() {\n            setTimeout(function() {\n                reject(new TypeError(\"Network request failed\"));\n            }, 0);\n        };\n        xhr.ontimeout = function() {\n            setTimeout(function() {\n                reject(new TypeError(\"Network request timed out\"));\n            }, 0);\n        };\n        xhr.onabort = function() {\n            setTimeout(function() {\n                reject(new DOMException(\"Aborted\", \"AbortError\"));\n            }, 0);\n        };\n        function fixUrl(url) {\n            try {\n                return url === \"\" && g.location.href ? g.location.href : url;\n            } catch (e) {\n                return url;\n            }\n        }\n        xhr.open(request.method, fixUrl(request.url), true);\n        if (request.credentials === \"include\") {\n            xhr.withCredentials = true;\n        } else if (request.credentials === \"omit\") {\n            xhr.withCredentials = false;\n        }\n        if (\"responseType\" in xhr) {\n            if (support.blob) {\n                xhr.responseType = \"blob\";\n            } else if (support.arrayBuffer) {\n                xhr.responseType = \"arraybuffer\";\n            }\n        }\n        if (init && typeof init.headers === \"object\" && !(init.headers instanceof Headers || g.Headers && init.headers instanceof g.Headers)) {\n            var names = [];\n            Object.getOwnPropertyNames(init.headers).forEach(function(name) {\n                names.push(normalizeName(name));\n                xhr.setRequestHeader(name, normalizeValue(init.headers[name]));\n            });\n            request.headers.forEach(function(value, name) {\n                if (names.indexOf(name) === -1) {\n                    xhr.setRequestHeader(name, value);\n                }\n            });\n        } else {\n            request.headers.forEach(function(value, name) {\n                xhr.setRequestHeader(name, value);\n            });\n        }\n        if (request.signal) {\n            request.signal.addEventListener(\"abort\", abortXhr);\n            xhr.onreadystatechange = function() {\n                // DONE (success or failure)\n                if (xhr.readyState === 4) {\n                    request.signal.removeEventListener(\"abort\", abortXhr);\n                }\n            };\n        }\n        xhr.send(typeof request._bodyInit === \"undefined\" ? null : request._bodyInit);\n    });\n}\nfetch.polyfill = true;\nif (!g.fetch) {\n    g.fetch = fetch;\n    g.Headers = Headers;\n    g.Request = Request;\n    g.Response = Response;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/whatwg-fetch@3.6.19/node_modules/whatwg-fetch/fetch.js\n");

/***/ })

};
;