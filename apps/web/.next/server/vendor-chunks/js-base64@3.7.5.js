"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/js-base64@3.7.5";
exports.ids = ["vendor-chunks/js-base64@3.7.5"];
exports.modules = {

/***/ "(rsc)/../../node_modules/.pnpm/js-base64@3.7.5/node_modules/js-base64/base64.mjs":
/*!**********************************************************************************!*\
  !*** ../../node_modules/.pnpm/js-base64@3.7.5/node_modules/js-base64/base64.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Base64: () => (/* binding */ gBase64),\n/* harmony export */   VERSION: () => (/* binding */ VERSION),\n/* harmony export */   atob: () => (/* binding */ _atob),\n/* harmony export */   atobPolyfill: () => (/* binding */ atobPolyfill),\n/* harmony export */   btoa: () => (/* binding */ _btoa),\n/* harmony export */   btoaPolyfill: () => (/* binding */ btoaPolyfill),\n/* harmony export */   btou: () => (/* binding */ btou),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   encodeURI: () => (/* binding */ encodeURI),\n/* harmony export */   encodeURL: () => (/* binding */ encodeURI),\n/* harmony export */   extendBuiltins: () => (/* binding */ extendBuiltins),\n/* harmony export */   extendString: () => (/* binding */ extendString),\n/* harmony export */   extendUint8Array: () => (/* binding */ extendUint8Array),\n/* harmony export */   fromBase64: () => (/* binding */ decode),\n/* harmony export */   fromUint8Array: () => (/* binding */ fromUint8Array),\n/* harmony export */   isValid: () => (/* binding */ isValid),\n/* harmony export */   toBase64: () => (/* binding */ encode),\n/* harmony export */   toUint8Array: () => (/* binding */ toUint8Array),\n/* harmony export */   utob: () => (/* binding */ utob),\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */ const version = \"3.7.5\";\n/**\n * @deprecated use lowercase `version`.\n */ const VERSION = version;\nconst _hasatob = typeof atob === \"function\";\nconst _hasbtoa = typeof btoa === \"function\";\nconst _hasBuffer = typeof Buffer === \"function\";\nconst _TD = typeof TextDecoder === \"function\" ? new TextDecoder() : undefined;\nconst _TE = typeof TextEncoder === \"function\" ? new TextEncoder() : undefined;\nconst b64ch = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nconst b64chs = Array.prototype.slice.call(b64ch);\nconst b64tab = ((a)=>{\n    let tab = {};\n    a.forEach((c, i)=>tab[c] = i);\n    return tab;\n})(b64chs);\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\nconst _fromCC = String.fromCharCode.bind(String);\nconst _U8Afrom = typeof Uint8Array.from === \"function\" ? Uint8Array.from.bind(Uint8Array) : (it)=>new Uint8Array(Array.prototype.slice.call(it, 0));\nconst _mkUriSafe = (src)=>src.replace(/=/g, \"\").replace(/[+\\/]/g, (m0)=>m0 == \"+\" ? \"-\" : \"_\");\nconst _tidyB64 = (s)=>s.replace(/[^A-Za-z0-9\\+\\/]/g, \"\");\n/**\n * polyfill version of `btoa`\n */ const btoaPolyfill = (bin)=>{\n    // console.log('polyfilled');\n    let u32, c0, c1, c2, asc = \"\";\n    const pad = bin.length % 3;\n    for(let i = 0; i < bin.length;){\n        if ((c0 = bin.charCodeAt(i++)) > 255 || (c1 = bin.charCodeAt(i++)) > 255 || (c2 = bin.charCodeAt(i++)) > 255) throw new TypeError(\"invalid character found\");\n        u32 = c0 << 16 | c1 << 8 | c2;\n        asc += b64chs[u32 >> 18 & 63] + b64chs[u32 >> 12 & 63] + b64chs[u32 >> 6 & 63] + b64chs[u32 & 63];\n    }\n    return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */ const _btoa = _hasbtoa ? (bin)=>btoa(bin) : _hasBuffer ? (bin)=>Buffer.from(bin, \"binary\").toString(\"base64\") : btoaPolyfill;\nconst _fromUint8Array = _hasBuffer ? (u8a)=>Buffer.from(u8a).toString(\"base64\") : (u8a)=>{\n    // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n    const maxargs = 0x1000;\n    let strs = [];\n    for(let i = 0, l = u8a.length; i < l; i += maxargs){\n        strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n    }\n    return _btoa(strs.join(\"\"));\n};\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 ยง5\n * @returns {string} Base64 string\n */ const fromUint8Array = (u8a, urlsafe = false)=>urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\nconst cb_utob = (c)=>{\n    if (c.length < 2) {\n        var cc = c.charCodeAt(0);\n        return cc < 0x80 ? c : cc < 0x800 ? _fromCC(0xc0 | cc >>> 6) + _fromCC(0x80 | cc & 0x3f) : _fromCC(0xe0 | cc >>> 12 & 0x0f) + _fromCC(0x80 | cc >>> 6 & 0x3f) + _fromCC(0x80 | cc & 0x3f);\n    } else {\n        var cc = 0x10000 + (c.charCodeAt(0) - 0xD800) * 0x400 + (c.charCodeAt(1) - 0xDC00);\n        return _fromCC(0xf0 | cc >>> 18 & 0x07) + _fromCC(0x80 | cc >>> 12 & 0x3f) + _fromCC(0x80 | cc >>> 6 & 0x3f) + _fromCC(0x80 | cc & 0x3f);\n    }\n};\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */ const utob = (u)=>u.replace(re_utob, cb_utob);\n//\nconst _encode = _hasBuffer ? (s)=>Buffer.from(s, \"utf8\").toString(\"base64\") : _TE ? (s)=>_fromUint8Array(_TE.encode(s)) : (s)=>_btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */ const encode = (src, urlsafe = false)=>urlsafe ? _mkUriSafe(_encode(src)) : _encode(src);\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 ยง5.\n * @returns {string} Base64 string\n */ const encodeURI = (src)=>encode(src, true);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\nconst cb_btou = (cccc)=>{\n    switch(cccc.length){\n        case 4:\n            var cp = (0x07 & cccc.charCodeAt(0)) << 18 | (0x3f & cccc.charCodeAt(1)) << 12 | (0x3f & cccc.charCodeAt(2)) << 6 | 0x3f & cccc.charCodeAt(3), offset = cp - 0x10000;\n            return _fromCC((offset >>> 10) + 0xD800) + _fromCC((offset & 0x3FF) + 0xDC00);\n        case 3:\n            return _fromCC((0x0f & cccc.charCodeAt(0)) << 12 | (0x3f & cccc.charCodeAt(1)) << 6 | 0x3f & cccc.charCodeAt(2));\n        default:\n            return _fromCC((0x1f & cccc.charCodeAt(0)) << 6 | 0x3f & cccc.charCodeAt(1));\n    }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */ const btou = (b)=>b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */ const atobPolyfill = (asc)=>{\n    // console.log('polyfilled');\n    asc = asc.replace(/\\s+/g, \"\");\n    if (!b64re.test(asc)) throw new TypeError(\"malformed base64.\");\n    asc += \"==\".slice(2 - (asc.length & 3));\n    let u24, bin = \"\", r1, r2;\n    for(let i = 0; i < asc.length;){\n        u24 = b64tab[asc.charAt(i++)] << 18 | b64tab[asc.charAt(i++)] << 12 | (r1 = b64tab[asc.charAt(i++)]) << 6 | (r2 = b64tab[asc.charAt(i++)]);\n        bin += r1 === 64 ? _fromCC(u24 >> 16 & 255) : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255) : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n    }\n    return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */ const _atob = _hasatob ? (asc)=>atob(_tidyB64(asc)) : _hasBuffer ? (asc)=>Buffer.from(asc, \"base64\").toString(\"binary\") : atobPolyfill;\n//\nconst _toUint8Array = _hasBuffer ? (a)=>_U8Afrom(Buffer.from(a, \"base64\")) : (a)=>_U8Afrom(_atob(a).split(\"\").map((c)=>c.charCodeAt(0)));\n/**\n * converts a Base64 string to a Uint8Array.\n */ const toUint8Array = (a)=>_toUint8Array(_unURI(a));\n//\nconst _decode = _hasBuffer ? (a)=>Buffer.from(a, \"base64\").toString(\"utf8\") : _TD ? (a)=>_TD.decode(_toUint8Array(a)) : (a)=>btou(_atob(a));\nconst _unURI = (a)=>_tidyB64(a.replace(/[-_]/g, (m0)=>m0 == \"-\" ? \"+\" : \"/\"));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */ const decode = (src)=>_decode(_unURI(src));\n/**\n * check if a value is a valid Base64 string\n * @param {String} src a value to check\n  */ const isValid = (src)=>{\n    if (typeof src !== \"string\") return false;\n    const s = src.replace(/\\s+/g, \"\").replace(/={0,2}$/, \"\");\n    return !/[^\\s0-9a-zA-Z\\+/]/.test(s) || !/[^\\s0-9a-zA-Z\\-_]/.test(s);\n};\n//\nconst _noEnum = (v)=>{\n    return {\n        value: v,\n        enumerable: false,\n        writable: true,\n        configurable: true\n    };\n};\n/**\n * extend String.prototype with relevant methods\n */ const extendString = function() {\n    const _add = (name, body)=>Object.defineProperty(String.prototype, name, _noEnum(body));\n    _add(\"fromBase64\", function() {\n        return decode(this);\n    });\n    _add(\"toBase64\", function(urlsafe) {\n        return encode(this, urlsafe);\n    });\n    _add(\"toBase64URI\", function() {\n        return encode(this, true);\n    });\n    _add(\"toBase64URL\", function() {\n        return encode(this, true);\n    });\n    _add(\"toUint8Array\", function() {\n        return toUint8Array(this);\n    });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */ const extendUint8Array = function() {\n    const _add = (name, body)=>Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n    _add(\"toBase64\", function(urlsafe) {\n        return fromUint8Array(this, urlsafe);\n    });\n    _add(\"toBase64URI\", function() {\n        return fromUint8Array(this, true);\n    });\n    _add(\"toBase64URL\", function() {\n        return fromUint8Array(this, true);\n    });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */ const extendBuiltins = ()=>{\n    extendString();\n    extendUint8Array();\n};\nconst gBase64 = {\n    version: version,\n    VERSION: VERSION,\n    atob: _atob,\n    atobPolyfill: atobPolyfill,\n    btoa: _btoa,\n    btoaPolyfill: btoaPolyfill,\n    fromBase64: decode,\n    toBase64: encode,\n    encode: encode,\n    encodeURI: encodeURI,\n    encodeURL: encodeURI,\n    utob: utob,\n    btou: btou,\n    decode: decode,\n    isValid: isValid,\n    fromUint8Array: fromUint8Array,\n    toUint8Array: toUint8Array,\n    extendString: extendString,\n    extendUint8Array: extendUint8Array,\n    extendBuiltins: extendBuiltins\n};\n// makecjs:CUT //\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// and finally,\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/js-base64@3.7.5/node_modules/js-base64/base64.mjs\n");

/***/ })

};
;