"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/better-sqlite3@8.7.0";
exports.ids = ["vendor-chunks/better-sqlite3@8.7.0"];
exports.modules = {

/***/ "(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/database.js":
/*!*************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/database.js ***!
  \*************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst util = __webpack_require__(/*! ./util */ \"(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/util.js\");\nconst SqliteError = __webpack_require__(/*! ./sqlite-error */ \"(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/sqlite-error.js\");\nlet DEFAULT_ADDON;\nfunction Database(filenameGiven, options) {\n    if (new.target == null) {\n        return new Database(filenameGiven, options);\n    }\n    // Apply defaults\n    let buffer;\n    if (Buffer.isBuffer(filenameGiven)) {\n        buffer = filenameGiven;\n        filenameGiven = \":memory:\";\n    }\n    if (filenameGiven == null) filenameGiven = \"\";\n    if (options == null) options = {};\n    // Validate arguments\n    if (typeof filenameGiven !== \"string\") throw new TypeError(\"Expected first argument to be a string\");\n    if (typeof options !== \"object\") throw new TypeError(\"Expected second argument to be an options object\");\n    if (\"readOnly\" in options) throw new TypeError('Misspelled option \"readOnly\" should be \"readonly\"');\n    if (\"memory\" in options) throw new TypeError('Option \"memory\" was removed in v7.0.0 (use \":memory:\" filename instead)');\n    // Interpret options\n    const filename = filenameGiven.trim();\n    const anonymous = filename === \"\" || filename === \":memory:\";\n    const readonly = util.getBooleanOption(options, \"readonly\");\n    const fileMustExist = util.getBooleanOption(options, \"fileMustExist\");\n    const timeout = \"timeout\" in options ? options.timeout : 5000;\n    const verbose = \"verbose\" in options ? options.verbose : null;\n    const nativeBinding = \"nativeBinding\" in options ? options.nativeBinding : null;\n    // Validate interpreted options\n    if (readonly && anonymous && !buffer) throw new TypeError(\"In-memory/temporary databases cannot be readonly\");\n    if (!Number.isInteger(timeout) || timeout < 0) throw new TypeError('Expected the \"timeout\" option to be a positive integer');\n    if (timeout > 0x7fffffff) throw new RangeError('Option \"timeout\" cannot be greater than 2147483647');\n    if (verbose != null && typeof verbose !== \"function\") throw new TypeError('Expected the \"verbose\" option to be a function');\n    if (nativeBinding != null && typeof nativeBinding !== \"string\" && typeof nativeBinding !== \"object\") throw new TypeError('Expected the \"nativeBinding\" option to be a string or addon object');\n    // Load the native addon\n    let addon;\n    if (nativeBinding == null) {\n        addon = DEFAULT_ADDON || (DEFAULT_ADDON = __webpack_require__(/*! bindings */ \"(rsc)/../../node_modules/.pnpm/bindings@1.5.0/node_modules/bindings/bindings.js\")(\"better_sqlite3.node\"));\n    } else if (typeof nativeBinding === \"string\") {\n        // See <https://webpack.js.org/api/module-variables/#__non_webpack_require__-webpack-specific>\n        const requireFunc = typeof require === \"function\" ? require : __webpack_require__(\"(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib sync recursive\");\n        addon = requireFunc(path.resolve(nativeBinding).replace(/(\\.node)?$/, \".node\"));\n    } else {\n        // See <https://github.com/WiseLibs/better-sqlite3/issues/972>\n        addon = nativeBinding;\n    }\n    if (!addon.isInitialized) {\n        addon.setErrorConstructor(SqliteError);\n        addon.isInitialized = true;\n    }\n    // Make sure the specified directory exists\n    if (!anonymous && !fs.existsSync(path.dirname(filename))) {\n        throw new TypeError(\"Cannot open database because the directory does not exist\");\n    }\n    Object.defineProperties(this, {\n        [util.cppdb]: {\n            value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null)\n        },\n        ...wrappers.getters\n    });\n}\nconst wrappers = __webpack_require__(/*! ./methods/wrappers */ \"(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/wrappers.js\");\nDatabase.prototype.prepare = wrappers.prepare;\nDatabase.prototype.transaction = __webpack_require__(/*! ./methods/transaction */ \"(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/transaction.js\");\nDatabase.prototype.pragma = __webpack_require__(/*! ./methods/pragma */ \"(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/pragma.js\");\nDatabase.prototype.backup = __webpack_require__(/*! ./methods/backup */ \"(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/backup.js\");\nDatabase.prototype.serialize = __webpack_require__(/*! ./methods/serialize */ \"(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/serialize.js\");\nDatabase.prototype.function = __webpack_require__(/*! ./methods/function */ \"(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/function.js\");\nDatabase.prototype.aggregate = __webpack_require__(/*! ./methods/aggregate */ \"(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/aggregate.js\");\nDatabase.prototype.table = __webpack_require__(/*! ./methods/table */ \"(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/table.js\");\nDatabase.prototype.loadExtension = wrappers.loadExtension;\nDatabase.prototype.exec = wrappers.exec;\nDatabase.prototype.close = wrappers.close;\nDatabase.prototype.defaultSafeIntegers = wrappers.defaultSafeIntegers;\nDatabase.prototype.unsafeMode = wrappers.unsafeMode;\nDatabase.prototype[util.inspect] = __webpack_require__(/*! ./methods/inspect */ \"(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/inspect.js\");\nmodule.exports = Database;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/database.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/index.js":
/*!**********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/index.js ***!
  \**********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = __webpack_require__(/*! ./database */ \"(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/database.js\");\nmodule.exports.SqliteError = __webpack_require__(/*! ./sqlite-error */ \"(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/sqlite-error.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JldHRlci1zcWxpdGUzQDguNy4wL25vZGVfbW9kdWxlcy9iZXR0ZXItc3FsaXRlMy9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQUEseUpBQXlCO0FBQ3pCQSw2S0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdG9rZW5zdHJlYW0vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9iZXR0ZXItc3FsaXRlM0A4LjcuMC9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL2luZGV4LmpzPzc1ZDciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2RhdGFiYXNlJyk7XG5tb2R1bGUuZXhwb3J0cy5TcWxpdGVFcnJvciA9IHJlcXVpcmUoJy4vc3FsaXRlLWVycm9yJyk7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiLCJTcWxpdGVFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/aggregate.js":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/aggregate.js ***!
  \**********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { getBooleanOption, cppdb } = __webpack_require__(/*! ../util */ \"(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/util.js\");\nmodule.exports = function defineAggregate(name, options) {\n    // Validate arguments\n    if (typeof name !== \"string\") throw new TypeError(\"Expected first argument to be a string\");\n    if (typeof options !== \"object\" || options === null) throw new TypeError(\"Expected second argument to be an options object\");\n    if (!name) throw new TypeError(\"User-defined function name cannot be an empty string\");\n    // Interpret options\n    const start = \"start\" in options ? options.start : null;\n    const step = getFunctionOption(options, \"step\", true);\n    const inverse = getFunctionOption(options, \"inverse\", false);\n    const result = getFunctionOption(options, \"result\", false);\n    const safeIntegers = \"safeIntegers\" in options ? +getBooleanOption(options, \"safeIntegers\") : 2;\n    const deterministic = getBooleanOption(options, \"deterministic\");\n    const directOnly = getBooleanOption(options, \"directOnly\");\n    const varargs = getBooleanOption(options, \"varargs\");\n    let argCount = -1;\n    // Determine argument count\n    if (!varargs) {\n        argCount = Math.max(getLength(step), inverse ? getLength(inverse) : 0);\n        if (argCount > 0) argCount -= 1;\n        if (argCount > 100) throw new RangeError(\"User-defined functions cannot have more than 100 arguments\");\n    }\n    this[cppdb].aggregate(start, step, inverse, result, name, argCount, safeIntegers, deterministic, directOnly);\n    return this;\n};\nconst getFunctionOption = (options, key, required)=>{\n    const value = key in options ? options[key] : null;\n    if (typeof value === \"function\") return value;\n    if (value != null) throw new TypeError(`Expected the \"${key}\" option to be a function`);\n    if (required) throw new TypeError(`Missing required option \"${key}\"`);\n    return null;\n};\nconst getLength = ({ length })=>{\n    if (Number.isInteger(length) && length >= 0) return length;\n    throw new TypeError(\"Expected function.length to be a positive integer\");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JldHRlci1zcWxpdGUzQDguNy4wL25vZGVfbW9kdWxlcy9iZXR0ZXItc3FsaXRlMy9saWIvbWV0aG9kcy9hZ2dyZWdhdGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxNQUFNLEVBQUVBLGdCQUFnQixFQUFFQyxLQUFLLEVBQUUsR0FBR0MsbUJBQU9BLENBQUM7QUFFNUNDLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxnQkFBZ0JDLElBQUksRUFBRUMsT0FBTztJQUN0RCxxQkFBcUI7SUFDckIsSUFBSSxPQUFPRCxTQUFTLFVBQVUsTUFBTSxJQUFJRSxVQUFVO0lBQ2xELElBQUksT0FBT0QsWUFBWSxZQUFZQSxZQUFZLE1BQU0sTUFBTSxJQUFJQyxVQUFVO0lBQ3pFLElBQUksQ0FBQ0YsTUFBTSxNQUFNLElBQUlFLFVBQVU7SUFFL0Isb0JBQW9CO0lBQ3BCLE1BQU1DLFFBQVEsV0FBV0YsVUFBVUEsUUFBUUUsS0FBSyxHQUFHO0lBQ25ELE1BQU1DLE9BQU9DLGtCQUFrQkosU0FBUyxRQUFRO0lBQ2hELE1BQU1LLFVBQVVELGtCQUFrQkosU0FBUyxXQUFXO0lBQ3RELE1BQU1NLFNBQVNGLGtCQUFrQkosU0FBUyxVQUFVO0lBQ3BELE1BQU1PLGVBQWUsa0JBQWtCUCxVQUFVLENBQUNQLGlCQUFpQk8sU0FBUyxrQkFBa0I7SUFDOUYsTUFBTVEsZ0JBQWdCZixpQkFBaUJPLFNBQVM7SUFDaEQsTUFBTVMsYUFBYWhCLGlCQUFpQk8sU0FBUztJQUM3QyxNQUFNVSxVQUFVakIsaUJBQWlCTyxTQUFTO0lBQzFDLElBQUlXLFdBQVcsQ0FBQztJQUVoQiwyQkFBMkI7SUFDM0IsSUFBSSxDQUFDRCxTQUFTO1FBQ2JDLFdBQVdDLEtBQUtDLEdBQUcsQ0FBQ0MsVUFBVVgsT0FBT0UsVUFBVVMsVUFBVVQsV0FBVztRQUNwRSxJQUFJTSxXQUFXLEdBQUdBLFlBQVk7UUFDOUIsSUFBSUEsV0FBVyxLQUFLLE1BQU0sSUFBSUksV0FBVztJQUMxQztJQUVBLElBQUksQ0FBQ3JCLE1BQU0sQ0FBQ3NCLFNBQVMsQ0FBQ2QsT0FBT0MsTUFBTUUsU0FBU0MsUUFBUVAsTUFBTVksVUFBVUosY0FBY0MsZUFBZUM7SUFDakcsT0FBTyxJQUFJO0FBQ1o7QUFFQSxNQUFNTCxvQkFBb0IsQ0FBQ0osU0FBU2lCLEtBQUtDO0lBQ3hDLE1BQU1DLFFBQVFGLE9BQU9qQixVQUFVQSxPQUFPLENBQUNpQixJQUFJLEdBQUc7SUFDOUMsSUFBSSxPQUFPRSxVQUFVLFlBQVksT0FBT0E7SUFDeEMsSUFBSUEsU0FBUyxNQUFNLE1BQU0sSUFBSWxCLFVBQVUsQ0FBQyxjQUFjLEVBQUVnQixJQUFJLHlCQUF5QixDQUFDO0lBQ3RGLElBQUlDLFVBQVUsTUFBTSxJQUFJakIsVUFBVSxDQUFDLHlCQUF5QixFQUFFZ0IsSUFBSSxDQUFDLENBQUM7SUFDcEUsT0FBTztBQUNSO0FBRUEsTUFBTUgsWUFBWSxDQUFDLEVBQUVNLE1BQU0sRUFBRTtJQUM1QixJQUFJQyxPQUFPQyxTQUFTLENBQUNGLFdBQVdBLFVBQVUsR0FBRyxPQUFPQTtJQUNwRCxNQUFNLElBQUluQixVQUFVO0FBQ3JCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHRva2Vuc3RyZWFtL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vYmV0dGVyLXNxbGl0ZTNAOC43LjAvbm9kZV9tb2R1bGVzL2JldHRlci1zcWxpdGUzL2xpYi9tZXRob2RzL2FnZ3JlZ2F0ZS5qcz84MmQxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IHsgZ2V0Qm9vbGVhbk9wdGlvbiwgY3BwZGIgfSA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZpbmVBZ2dyZWdhdGUobmFtZSwgb3B0aW9ucykge1xuXHQvLyBWYWxpZGF0ZSBhcmd1bWVudHNcblx0aWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgZmlyc3QgYXJndW1lbnQgdG8gYmUgYSBzdHJpbmcnKTtcblx0aWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0JyB8fCBvcHRpb25zID09PSBudWxsKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBzZWNvbmQgYXJndW1lbnQgdG8gYmUgYW4gb3B0aW9ucyBvYmplY3QnKTtcblx0aWYgKCFuYW1lKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVc2VyLWRlZmluZWQgZnVuY3Rpb24gbmFtZSBjYW5ub3QgYmUgYW4gZW1wdHkgc3RyaW5nJyk7XG5cblx0Ly8gSW50ZXJwcmV0IG9wdGlvbnNcblx0Y29uc3Qgc3RhcnQgPSAnc3RhcnQnIGluIG9wdGlvbnMgPyBvcHRpb25zLnN0YXJ0IDogbnVsbDtcblx0Y29uc3Qgc3RlcCA9IGdldEZ1bmN0aW9uT3B0aW9uKG9wdGlvbnMsICdzdGVwJywgdHJ1ZSk7XG5cdGNvbnN0IGludmVyc2UgPSBnZXRGdW5jdGlvbk9wdGlvbihvcHRpb25zLCAnaW52ZXJzZScsIGZhbHNlKTtcblx0Y29uc3QgcmVzdWx0ID0gZ2V0RnVuY3Rpb25PcHRpb24ob3B0aW9ucywgJ3Jlc3VsdCcsIGZhbHNlKTtcblx0Y29uc3Qgc2FmZUludGVnZXJzID0gJ3NhZmVJbnRlZ2VycycgaW4gb3B0aW9ucyA/ICtnZXRCb29sZWFuT3B0aW9uKG9wdGlvbnMsICdzYWZlSW50ZWdlcnMnKSA6IDI7XG5cdGNvbnN0IGRldGVybWluaXN0aWMgPSBnZXRCb29sZWFuT3B0aW9uKG9wdGlvbnMsICdkZXRlcm1pbmlzdGljJyk7XG5cdGNvbnN0IGRpcmVjdE9ubHkgPSBnZXRCb29sZWFuT3B0aW9uKG9wdGlvbnMsICdkaXJlY3RPbmx5Jyk7XG5cdGNvbnN0IHZhcmFyZ3MgPSBnZXRCb29sZWFuT3B0aW9uKG9wdGlvbnMsICd2YXJhcmdzJyk7XG5cdGxldCBhcmdDb3VudCA9IC0xO1xuXG5cdC8vIERldGVybWluZSBhcmd1bWVudCBjb3VudFxuXHRpZiAoIXZhcmFyZ3MpIHtcblx0XHRhcmdDb3VudCA9IE1hdGgubWF4KGdldExlbmd0aChzdGVwKSwgaW52ZXJzZSA/IGdldExlbmd0aChpbnZlcnNlKSA6IDApO1xuXHRcdGlmIChhcmdDb3VudCA+IDApIGFyZ0NvdW50IC09IDE7XG5cdFx0aWYgKGFyZ0NvdW50ID4gMTAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVXNlci1kZWZpbmVkIGZ1bmN0aW9ucyBjYW5ub3QgaGF2ZSBtb3JlIHRoYW4gMTAwIGFyZ3VtZW50cycpO1xuXHR9XG5cblx0dGhpc1tjcHBkYl0uYWdncmVnYXRlKHN0YXJ0LCBzdGVwLCBpbnZlcnNlLCByZXN1bHQsIG5hbWUsIGFyZ0NvdW50LCBzYWZlSW50ZWdlcnMsIGRldGVybWluaXN0aWMsIGRpcmVjdE9ubHkpO1xuXHRyZXR1cm4gdGhpcztcbn07XG5cbmNvbnN0IGdldEZ1bmN0aW9uT3B0aW9uID0gKG9wdGlvbnMsIGtleSwgcmVxdWlyZWQpID0+IHtcblx0Y29uc3QgdmFsdWUgPSBrZXkgaW4gb3B0aW9ucyA/IG9wdGlvbnNba2V5XSA6IG51bGw7XG5cdGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHJldHVybiB2YWx1ZTtcblx0aWYgKHZhbHVlICE9IG51bGwpIHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIHRoZSBcIiR7a2V5fVwiIG9wdGlvbiB0byBiZSBhIGZ1bmN0aW9uYCk7XG5cdGlmIChyZXF1aXJlZCkgdGhyb3cgbmV3IFR5cGVFcnJvcihgTWlzc2luZyByZXF1aXJlZCBvcHRpb24gXCIke2tleX1cImApO1xuXHRyZXR1cm4gbnVsbDtcbn07XG5cbmNvbnN0IGdldExlbmd0aCA9ICh7IGxlbmd0aCB9KSA9PiB7XG5cdGlmIChOdW1iZXIuaXNJbnRlZ2VyKGxlbmd0aCkgJiYgbGVuZ3RoID49IDApIHJldHVybiBsZW5ndGg7XG5cdHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGZ1bmN0aW9uLmxlbmd0aCB0byBiZSBhIHBvc2l0aXZlIGludGVnZXInKTtcbn07XG4iXSwibmFtZXMiOlsiZ2V0Qm9vbGVhbk9wdGlvbiIsImNwcGRiIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZpbmVBZ2dyZWdhdGUiLCJuYW1lIiwib3B0aW9ucyIsIlR5cGVFcnJvciIsInN0YXJ0Iiwic3RlcCIsImdldEZ1bmN0aW9uT3B0aW9uIiwiaW52ZXJzZSIsInJlc3VsdCIsInNhZmVJbnRlZ2VycyIsImRldGVybWluaXN0aWMiLCJkaXJlY3RPbmx5IiwidmFyYXJncyIsImFyZ0NvdW50IiwiTWF0aCIsIm1heCIsImdldExlbmd0aCIsIlJhbmdlRXJyb3IiLCJhZ2dyZWdhdGUiLCJrZXkiLCJyZXF1aXJlZCIsInZhbHVlIiwibGVuZ3RoIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/aggregate.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/backup.js":
/*!*******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/backup.js ***!
  \*******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst { cppdb } = __webpack_require__(/*! ../util */ \"(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/util.js\");\nconst fsAccess = promisify(fs.access);\nmodule.exports = async function backup(filename, options) {\n    if (options == null) options = {};\n    // Validate arguments\n    if (typeof filename !== \"string\") throw new TypeError(\"Expected first argument to be a string\");\n    if (typeof options !== \"object\") throw new TypeError(\"Expected second argument to be an options object\");\n    // Interpret options\n    filename = filename.trim();\n    const attachedName = \"attached\" in options ? options.attached : \"main\";\n    const handler = \"progress\" in options ? options.progress : null;\n    // Validate interpreted options\n    if (!filename) throw new TypeError(\"Backup filename cannot be an empty string\");\n    if (filename === \":memory:\") throw new TypeError('Invalid backup filename \":memory:\"');\n    if (typeof attachedName !== \"string\") throw new TypeError('Expected the \"attached\" option to be a string');\n    if (!attachedName) throw new TypeError('The \"attached\" option cannot be an empty string');\n    if (handler != null && typeof handler !== \"function\") throw new TypeError('Expected the \"progress\" option to be a function');\n    // Make sure the specified directory exists\n    await fsAccess(path.dirname(filename)).catch(()=>{\n        throw new TypeError(\"Cannot save backup because the directory does not exist\");\n    });\n    const isNewFile = await fsAccess(filename).then(()=>false, ()=>true);\n    return runBackup(this[cppdb].backup(this, attachedName, filename, isNewFile), handler || null);\n};\nconst runBackup = (backup, handler)=>{\n    let rate = 0;\n    let useDefault = true;\n    return new Promise((resolve, reject)=>{\n        setImmediate(function step() {\n            try {\n                const progress = backup.transfer(rate);\n                if (!progress.remainingPages) {\n                    backup.close();\n                    resolve(progress);\n                    return;\n                }\n                if (useDefault) {\n                    useDefault = false;\n                    rate = 100;\n                }\n                if (handler) {\n                    const ret = handler(progress);\n                    if (ret !== undefined) {\n                        if (typeof ret === \"number\" && ret === ret) rate = Math.max(0, Math.min(0x7fffffff, Math.round(ret)));\n                        else throw new TypeError(\"Expected progress callback to return a number or undefined\");\n                    }\n                }\n                setImmediate(step);\n            } catch (err) {\n                backup.close();\n                reject(err);\n            }\n        });\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JldHRlci1zcWxpdGUzQDguNy4wL25vZGVfbW9kdWxlcy9iZXR0ZXItc3FsaXRlMy9saWIvbWV0aG9kcy9iYWNrdXAuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxNQUFNQSxLQUFLQyxtQkFBT0EsQ0FBQztBQUNuQixNQUFNQyxPQUFPRCxtQkFBT0EsQ0FBQztBQUNyQixNQUFNLEVBQUVFLFNBQVMsRUFBRSxHQUFHRixtQkFBT0EsQ0FBQztBQUM5QixNQUFNLEVBQUVHLEtBQUssRUFBRSxHQUFHSCxtQkFBT0EsQ0FBQztBQUMxQixNQUFNSSxXQUFXRixVQUFVSCxHQUFHTSxNQUFNO0FBRXBDQyxPQUFPQyxPQUFPLEdBQUcsZUFBZUMsT0FBT0MsUUFBUSxFQUFFQyxPQUFPO0lBQ3ZELElBQUlBLFdBQVcsTUFBTUEsVUFBVSxDQUFDO0lBRWhDLHFCQUFxQjtJQUNyQixJQUFJLE9BQU9ELGFBQWEsVUFBVSxNQUFNLElBQUlFLFVBQVU7SUFDdEQsSUFBSSxPQUFPRCxZQUFZLFVBQVUsTUFBTSxJQUFJQyxVQUFVO0lBRXJELG9CQUFvQjtJQUNwQkYsV0FBV0EsU0FBU0csSUFBSTtJQUN4QixNQUFNQyxlQUFlLGNBQWNILFVBQVVBLFFBQVFJLFFBQVEsR0FBRztJQUNoRSxNQUFNQyxVQUFVLGNBQWNMLFVBQVVBLFFBQVFNLFFBQVEsR0FBRztJQUUzRCwrQkFBK0I7SUFDL0IsSUFBSSxDQUFDUCxVQUFVLE1BQU0sSUFBSUUsVUFBVTtJQUNuQyxJQUFJRixhQUFhLFlBQVksTUFBTSxJQUFJRSxVQUFVO0lBQ2pELElBQUksT0FBT0UsaUJBQWlCLFVBQVUsTUFBTSxJQUFJRixVQUFVO0lBQzFELElBQUksQ0FBQ0UsY0FBYyxNQUFNLElBQUlGLFVBQVU7SUFDdkMsSUFBSUksV0FBVyxRQUFRLE9BQU9BLFlBQVksWUFBWSxNQUFNLElBQUlKLFVBQVU7SUFFMUUsMkNBQTJDO0lBQzNDLE1BQU1QLFNBQVNILEtBQUtnQixPQUFPLENBQUNSLFdBQVdTLEtBQUssQ0FBQztRQUM1QyxNQUFNLElBQUlQLFVBQVU7SUFDckI7SUFFQSxNQUFNUSxZQUFZLE1BQU1mLFNBQVNLLFVBQVVXLElBQUksQ0FBQyxJQUFNLE9BQU8sSUFBTTtJQUNuRSxPQUFPQyxVQUFVLElBQUksQ0FBQ2xCLE1BQU0sQ0FBQ0ssTUFBTSxDQUFDLElBQUksRUFBRUssY0FBY0osVUFBVVUsWUFBWUosV0FBVztBQUMxRjtBQUVBLE1BQU1NLFlBQVksQ0FBQ2IsUUFBUU87SUFDMUIsSUFBSU8sT0FBTztJQUNYLElBQUlDLGFBQWE7SUFFakIsT0FBTyxJQUFJQyxRQUFRLENBQUNDLFNBQVNDO1FBQzVCQyxhQUFhLFNBQVNDO1lBQ3JCLElBQUk7Z0JBQ0gsTUFBTVosV0FBV1IsT0FBT3FCLFFBQVEsQ0FBQ1A7Z0JBQ2pDLElBQUksQ0FBQ04sU0FBU2MsY0FBYyxFQUFFO29CQUM3QnRCLE9BQU91QixLQUFLO29CQUNaTixRQUFRVDtvQkFDUjtnQkFDRDtnQkFDQSxJQUFJTyxZQUFZO29CQUNmQSxhQUFhO29CQUNiRCxPQUFPO2dCQUNSO2dCQUNBLElBQUlQLFNBQVM7b0JBQ1osTUFBTWlCLE1BQU1qQixRQUFRQztvQkFDcEIsSUFBSWdCLFFBQVFDLFdBQVc7d0JBQ3RCLElBQUksT0FBT0QsUUFBUSxZQUFZQSxRQUFRQSxLQUFLVixPQUFPWSxLQUFLQyxHQUFHLENBQUMsR0FBR0QsS0FBS0UsR0FBRyxDQUFDLFlBQVlGLEtBQUtHLEtBQUssQ0FBQ0w7NkJBQzFGLE1BQU0sSUFBSXJCLFVBQVU7b0JBQzFCO2dCQUNEO2dCQUNBZ0IsYUFBYUM7WUFDZCxFQUFFLE9BQU9VLEtBQUs7Z0JBQ2I5QixPQUFPdUIsS0FBSztnQkFDWkwsT0FBT1k7WUFDUjtRQUNEO0lBQ0Q7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL0B0b2tlbnN0cmVhbS93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JldHRlci1zcWxpdGUzQDguNy4wL25vZGVfbW9kdWxlcy9iZXR0ZXItc3FsaXRlMy9saWIvbWV0aG9kcy9iYWNrdXAuanM/NjdkYyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgeyBwcm9taXNpZnkgfSA9IHJlcXVpcmUoJ3V0aWwnKTtcbmNvbnN0IHsgY3BwZGIgfSA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcbmNvbnN0IGZzQWNjZXNzID0gcHJvbWlzaWZ5KGZzLmFjY2Vzcyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXN5bmMgZnVuY3Rpb24gYmFja3VwKGZpbGVuYW1lLCBvcHRpb25zKSB7XG5cdGlmIChvcHRpb25zID09IG51bGwpIG9wdGlvbnMgPSB7fTtcblxuXHQvLyBWYWxpZGF0ZSBhcmd1bWVudHNcblx0aWYgKHR5cGVvZiBmaWxlbmFtZSAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGZpcnN0IGFyZ3VtZW50IHRvIGJlIGEgc3RyaW5nJyk7XG5cdGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHNlY29uZCBhcmd1bWVudCB0byBiZSBhbiBvcHRpb25zIG9iamVjdCcpO1xuXG5cdC8vIEludGVycHJldCBvcHRpb25zXG5cdGZpbGVuYW1lID0gZmlsZW5hbWUudHJpbSgpO1xuXHRjb25zdCBhdHRhY2hlZE5hbWUgPSAnYXR0YWNoZWQnIGluIG9wdGlvbnMgPyBvcHRpb25zLmF0dGFjaGVkIDogJ21haW4nO1xuXHRjb25zdCBoYW5kbGVyID0gJ3Byb2dyZXNzJyBpbiBvcHRpb25zID8gb3B0aW9ucy5wcm9ncmVzcyA6IG51bGw7XG5cblx0Ly8gVmFsaWRhdGUgaW50ZXJwcmV0ZWQgb3B0aW9uc1xuXHRpZiAoIWZpbGVuYW1lKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdCYWNrdXAgZmlsZW5hbWUgY2Fubm90IGJlIGFuIGVtcHR5IHN0cmluZycpO1xuXHRpZiAoZmlsZW5hbWUgPT09ICc6bWVtb3J5OicpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgYmFja3VwIGZpbGVuYW1lIFwiOm1lbW9yeTpcIicpO1xuXHRpZiAodHlwZW9mIGF0dGFjaGVkTmFtZSAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBcImF0dGFjaGVkXCIgb3B0aW9uIHRvIGJlIGEgc3RyaW5nJyk7XG5cdGlmICghYXR0YWNoZWROYW1lKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJhdHRhY2hlZFwiIG9wdGlvbiBjYW5ub3QgYmUgYW4gZW1wdHkgc3RyaW5nJyk7XG5cdGlmIChoYW5kbGVyICE9IG51bGwgJiYgdHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBcInByb2dyZXNzXCIgb3B0aW9uIHRvIGJlIGEgZnVuY3Rpb24nKTtcblxuXHQvLyBNYWtlIHN1cmUgdGhlIHNwZWNpZmllZCBkaXJlY3RvcnkgZXhpc3RzXG5cdGF3YWl0IGZzQWNjZXNzKHBhdGguZGlybmFtZShmaWxlbmFtZSkpLmNhdGNoKCgpID0+IHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3Qgc2F2ZSBiYWNrdXAgYmVjYXVzZSB0aGUgZGlyZWN0b3J5IGRvZXMgbm90IGV4aXN0Jyk7XG5cdH0pO1xuXG5cdGNvbnN0IGlzTmV3RmlsZSA9IGF3YWl0IGZzQWNjZXNzKGZpbGVuYW1lKS50aGVuKCgpID0+IGZhbHNlLCAoKSA9PiB0cnVlKTtcblx0cmV0dXJuIHJ1bkJhY2t1cCh0aGlzW2NwcGRiXS5iYWNrdXAodGhpcywgYXR0YWNoZWROYW1lLCBmaWxlbmFtZSwgaXNOZXdGaWxlKSwgaGFuZGxlciB8fCBudWxsKTtcbn07XG5cbmNvbnN0IHJ1bkJhY2t1cCA9IChiYWNrdXAsIGhhbmRsZXIpID0+IHtcblx0bGV0IHJhdGUgPSAwO1xuXHRsZXQgdXNlRGVmYXVsdCA9IHRydWU7XG5cblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRzZXRJbW1lZGlhdGUoZnVuY3Rpb24gc3RlcCgpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbnN0IHByb2dyZXNzID0gYmFja3VwLnRyYW5zZmVyKHJhdGUpO1xuXHRcdFx0XHRpZiAoIXByb2dyZXNzLnJlbWFpbmluZ1BhZ2VzKSB7XG5cdFx0XHRcdFx0YmFja3VwLmNsb3NlKCk7XG5cdFx0XHRcdFx0cmVzb2x2ZShwcm9ncmVzcyk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh1c2VEZWZhdWx0KSB7XG5cdFx0XHRcdFx0dXNlRGVmYXVsdCA9IGZhbHNlO1xuXHRcdFx0XHRcdHJhdGUgPSAxMDA7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGhhbmRsZXIpIHtcblx0XHRcdFx0XHRjb25zdCByZXQgPSBoYW5kbGVyKHByb2dyZXNzKTtcblx0XHRcdFx0XHRpZiAocmV0ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdGlmICh0eXBlb2YgcmV0ID09PSAnbnVtYmVyJyAmJiByZXQgPT09IHJldCkgcmF0ZSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDB4N2ZmZmZmZmYsIE1hdGgucm91bmQocmV0KSkpO1xuXHRcdFx0XHRcdFx0ZWxzZSB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBwcm9ncmVzcyBjYWxsYmFjayB0byByZXR1cm4gYSBudW1iZXIgb3IgdW5kZWZpbmVkJyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHNldEltbWVkaWF0ZShzdGVwKTtcblx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRiYWNrdXAuY2xvc2UoKTtcblx0XHRcdFx0cmVqZWN0KGVycik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xufTtcbiJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJwYXRoIiwicHJvbWlzaWZ5IiwiY3BwZGIiLCJmc0FjY2VzcyIsImFjY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJiYWNrdXAiLCJmaWxlbmFtZSIsIm9wdGlvbnMiLCJUeXBlRXJyb3IiLCJ0cmltIiwiYXR0YWNoZWROYW1lIiwiYXR0YWNoZWQiLCJoYW5kbGVyIiwicHJvZ3Jlc3MiLCJkaXJuYW1lIiwiY2F0Y2giLCJpc05ld0ZpbGUiLCJ0aGVuIiwicnVuQmFja3VwIiwicmF0ZSIsInVzZURlZmF1bHQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInNldEltbWVkaWF0ZSIsInN0ZXAiLCJ0cmFuc2ZlciIsInJlbWFpbmluZ1BhZ2VzIiwiY2xvc2UiLCJyZXQiLCJ1bmRlZmluZWQiLCJNYXRoIiwibWF4IiwibWluIiwicm91bmQiLCJlcnIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/backup.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/function.js":
/*!*********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/function.js ***!
  \*********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { getBooleanOption, cppdb } = __webpack_require__(/*! ../util */ \"(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/util.js\");\nmodule.exports = function defineFunction(name, options, fn) {\n    // Apply defaults\n    if (options == null) options = {};\n    if (typeof options === \"function\") {\n        fn = options;\n        options = {};\n    }\n    // Validate arguments\n    if (typeof name !== \"string\") throw new TypeError(\"Expected first argument to be a string\");\n    if (typeof fn !== \"function\") throw new TypeError(\"Expected last argument to be a function\");\n    if (typeof options !== \"object\") throw new TypeError(\"Expected second argument to be an options object\");\n    if (!name) throw new TypeError(\"User-defined function name cannot be an empty string\");\n    // Interpret options\n    const safeIntegers = \"safeIntegers\" in options ? +getBooleanOption(options, \"safeIntegers\") : 2;\n    const deterministic = getBooleanOption(options, \"deterministic\");\n    const directOnly = getBooleanOption(options, \"directOnly\");\n    const varargs = getBooleanOption(options, \"varargs\");\n    let argCount = -1;\n    // Determine argument count\n    if (!varargs) {\n        argCount = fn.length;\n        if (!Number.isInteger(argCount) || argCount < 0) throw new TypeError(\"Expected function.length to be a positive integer\");\n        if (argCount > 100) throw new RangeError(\"User-defined functions cannot have more than 100 arguments\");\n    }\n    this[cppdb].function(fn, name, argCount, safeIntegers, deterministic, directOnly);\n    return this;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JldHRlci1zcWxpdGUzQDguNy4wL25vZGVfbW9kdWxlcy9iZXR0ZXItc3FsaXRlMy9saWIvbWV0aG9kcy9mdW5jdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLE1BQU0sRUFBRUEsZ0JBQWdCLEVBQUVDLEtBQUssRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQztBQUU1Q0MsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLGVBQWVDLElBQUksRUFBRUMsT0FBTyxFQUFFQyxFQUFFO0lBQ3pELGlCQUFpQjtJQUNqQixJQUFJRCxXQUFXLE1BQU1BLFVBQVUsQ0FBQztJQUNoQyxJQUFJLE9BQU9BLFlBQVksWUFBWTtRQUFFQyxLQUFLRDtRQUFTQSxVQUFVLENBQUM7SUFBRztJQUVqRSxxQkFBcUI7SUFDckIsSUFBSSxPQUFPRCxTQUFTLFVBQVUsTUFBTSxJQUFJRyxVQUFVO0lBQ2xELElBQUksT0FBT0QsT0FBTyxZQUFZLE1BQU0sSUFBSUMsVUFBVTtJQUNsRCxJQUFJLE9BQU9GLFlBQVksVUFBVSxNQUFNLElBQUlFLFVBQVU7SUFDckQsSUFBSSxDQUFDSCxNQUFNLE1BQU0sSUFBSUcsVUFBVTtJQUUvQixvQkFBb0I7SUFDcEIsTUFBTUMsZUFBZSxrQkFBa0JILFVBQVUsQ0FBQ1AsaUJBQWlCTyxTQUFTLGtCQUFrQjtJQUM5RixNQUFNSSxnQkFBZ0JYLGlCQUFpQk8sU0FBUztJQUNoRCxNQUFNSyxhQUFhWixpQkFBaUJPLFNBQVM7SUFDN0MsTUFBTU0sVUFBVWIsaUJBQWlCTyxTQUFTO0lBQzFDLElBQUlPLFdBQVcsQ0FBQztJQUVoQiwyQkFBMkI7SUFDM0IsSUFBSSxDQUFDRCxTQUFTO1FBQ2JDLFdBQVdOLEdBQUdPLE1BQU07UUFDcEIsSUFBSSxDQUFDQyxPQUFPQyxTQUFTLENBQUNILGFBQWFBLFdBQVcsR0FBRyxNQUFNLElBQUlMLFVBQVU7UUFDckUsSUFBSUssV0FBVyxLQUFLLE1BQU0sSUFBSUksV0FBVztJQUMxQztJQUVBLElBQUksQ0FBQ2pCLE1BQU0sQ0FBQ2tCLFFBQVEsQ0FBQ1gsSUFBSUYsTUFBTVEsVUFBVUosY0FBY0MsZUFBZUM7SUFDdEUsT0FBTyxJQUFJO0FBQ1oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdG9rZW5zdHJlYW0vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9iZXR0ZXItc3FsaXRlM0A4LjcuMC9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL21ldGhvZHMvZnVuY3Rpb24uanM/YWM0OCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCB7IGdldEJvb2xlYW5PcHRpb24sIGNwcGRiIH0gPSByZXF1aXJlKCcuLi91dGlsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmaW5lRnVuY3Rpb24obmFtZSwgb3B0aW9ucywgZm4pIHtcblx0Ly8gQXBwbHkgZGVmYXVsdHNcblx0aWYgKG9wdGlvbnMgPT0gbnVsbCkgb3B0aW9ucyA9IHt9O1xuXHRpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHsgZm4gPSBvcHRpb25zOyBvcHRpb25zID0ge307IH1cblxuXHQvLyBWYWxpZGF0ZSBhcmd1bWVudHNcblx0aWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgZmlyc3QgYXJndW1lbnQgdG8gYmUgYSBzdHJpbmcnKTtcblx0aWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgbGFzdCBhcmd1bWVudCB0byBiZSBhIGZ1bmN0aW9uJyk7XG5cdGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHNlY29uZCBhcmd1bWVudCB0byBiZSBhbiBvcHRpb25zIG9iamVjdCcpO1xuXHRpZiAoIW5hbWUpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VzZXItZGVmaW5lZCBmdW5jdGlvbiBuYW1lIGNhbm5vdCBiZSBhbiBlbXB0eSBzdHJpbmcnKTtcblxuXHQvLyBJbnRlcnByZXQgb3B0aW9uc1xuXHRjb25zdCBzYWZlSW50ZWdlcnMgPSAnc2FmZUludGVnZXJzJyBpbiBvcHRpb25zID8gK2dldEJvb2xlYW5PcHRpb24ob3B0aW9ucywgJ3NhZmVJbnRlZ2VycycpIDogMjtcblx0Y29uc3QgZGV0ZXJtaW5pc3RpYyA9IGdldEJvb2xlYW5PcHRpb24ob3B0aW9ucywgJ2RldGVybWluaXN0aWMnKTtcblx0Y29uc3QgZGlyZWN0T25seSA9IGdldEJvb2xlYW5PcHRpb24ob3B0aW9ucywgJ2RpcmVjdE9ubHknKTtcblx0Y29uc3QgdmFyYXJncyA9IGdldEJvb2xlYW5PcHRpb24ob3B0aW9ucywgJ3ZhcmFyZ3MnKTtcblx0bGV0IGFyZ0NvdW50ID0gLTE7XG5cblx0Ly8gRGV0ZXJtaW5lIGFyZ3VtZW50IGNvdW50XG5cdGlmICghdmFyYXJncykge1xuXHRcdGFyZ0NvdW50ID0gZm4ubGVuZ3RoO1xuXHRcdGlmICghTnVtYmVyLmlzSW50ZWdlcihhcmdDb3VudCkgfHwgYXJnQ291bnQgPCAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBmdW5jdGlvbi5sZW5ndGggdG8gYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyJyk7XG5cdFx0aWYgKGFyZ0NvdW50ID4gMTAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVXNlci1kZWZpbmVkIGZ1bmN0aW9ucyBjYW5ub3QgaGF2ZSBtb3JlIHRoYW4gMTAwIGFyZ3VtZW50cycpO1xuXHR9XG5cblx0dGhpc1tjcHBkYl0uZnVuY3Rpb24oZm4sIG5hbWUsIGFyZ0NvdW50LCBzYWZlSW50ZWdlcnMsIGRldGVybWluaXN0aWMsIGRpcmVjdE9ubHkpO1xuXHRyZXR1cm4gdGhpcztcbn07XG4iXSwibmFtZXMiOlsiZ2V0Qm9vbGVhbk9wdGlvbiIsImNwcGRiIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZpbmVGdW5jdGlvbiIsIm5hbWUiLCJvcHRpb25zIiwiZm4iLCJUeXBlRXJyb3IiLCJzYWZlSW50ZWdlcnMiLCJkZXRlcm1pbmlzdGljIiwiZGlyZWN0T25seSIsInZhcmFyZ3MiLCJhcmdDb3VudCIsImxlbmd0aCIsIk51bWJlciIsImlzSW50ZWdlciIsIlJhbmdlRXJyb3IiLCJmdW5jdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/function.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/inspect.js":
/*!********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/inspect.js ***!
  \********************************************************************************************************/
/***/ ((module) => {

eval("\nconst DatabaseInspection = function Database() {};\nmodule.exports = function inspect(depth, opts) {\n    return Object.assign(new DatabaseInspection(), this);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JldHRlci1zcWxpdGUzQDguNy4wL25vZGVfbW9kdWxlcy9iZXR0ZXItc3FsaXRlMy9saWIvbWV0aG9kcy9pbnNwZWN0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsTUFBTUEscUJBQXFCLFNBQVNDLFlBQVk7QUFFaERDLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxRQUFRQyxLQUFLLEVBQUVDLElBQUk7SUFDNUMsT0FBT0MsT0FBT0MsTUFBTSxDQUFDLElBQUlSLHNCQUFzQixJQUFJO0FBQ3BEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHRva2Vuc3RyZWFtL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vYmV0dGVyLXNxbGl0ZTNAOC43LjAvbm9kZV9tb2R1bGVzL2JldHRlci1zcWxpdGUzL2xpYi9tZXRob2RzL2luc3BlY3QuanM/NDg1YiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBEYXRhYmFzZUluc3BlY3Rpb24gPSBmdW5jdGlvbiBEYXRhYmFzZSgpIHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluc3BlY3QoZGVwdGgsIG9wdHMpIHtcblx0cmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IERhdGFiYXNlSW5zcGVjdGlvbigpLCB0aGlzKTtcbn07XG5cbiJdLCJuYW1lcyI6WyJEYXRhYmFzZUluc3BlY3Rpb24iLCJEYXRhYmFzZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJpbnNwZWN0IiwiZGVwdGgiLCJvcHRzIiwiT2JqZWN0IiwiYXNzaWduIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/inspect.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/pragma.js":
/*!*******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/pragma.js ***!
  \*******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { getBooleanOption, cppdb } = __webpack_require__(/*! ../util */ \"(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/util.js\");\nmodule.exports = function pragma(source, options) {\n    if (options == null) options = {};\n    if (typeof source !== \"string\") throw new TypeError(\"Expected first argument to be a string\");\n    if (typeof options !== \"object\") throw new TypeError(\"Expected second argument to be an options object\");\n    const simple = getBooleanOption(options, \"simple\");\n    const stmt = this[cppdb].prepare(`PRAGMA ${source}`, this, true);\n    return simple ? stmt.pluck().get() : stmt.all();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JldHRlci1zcWxpdGUzQDguNy4wL25vZGVfbW9kdWxlcy9iZXR0ZXItc3FsaXRlMy9saWIvbWV0aG9kcy9wcmFnbWEuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxNQUFNLEVBQUVBLGdCQUFnQixFQUFFQyxLQUFLLEVBQUUsR0FBR0MsbUJBQU9BLENBQUM7QUFFNUNDLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxPQUFPQyxNQUFNLEVBQUVDLE9BQU87SUFDL0MsSUFBSUEsV0FBVyxNQUFNQSxVQUFVLENBQUM7SUFDaEMsSUFBSSxPQUFPRCxXQUFXLFVBQVUsTUFBTSxJQUFJRSxVQUFVO0lBQ3BELElBQUksT0FBT0QsWUFBWSxVQUFVLE1BQU0sSUFBSUMsVUFBVTtJQUNyRCxNQUFNQyxTQUFTVCxpQkFBaUJPLFNBQVM7SUFFekMsTUFBTUcsT0FBTyxJQUFJLENBQUNULE1BQU0sQ0FBQ1UsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFTCxPQUFPLENBQUMsRUFBRSxJQUFJLEVBQUU7SUFDM0QsT0FBT0csU0FBU0MsS0FBS0UsS0FBSyxHQUFHQyxHQUFHLEtBQUtILEtBQUtJLEdBQUc7QUFDOUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdG9rZW5zdHJlYW0vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9iZXR0ZXItc3FsaXRlM0A4LjcuMC9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL21ldGhvZHMvcHJhZ21hLmpzPzNkODQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgeyBnZXRCb29sZWFuT3B0aW9uLCBjcHBkYiB9ID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHByYWdtYShzb3VyY2UsIG9wdGlvbnMpIHtcblx0aWYgKG9wdGlvbnMgPT0gbnVsbCkgb3B0aW9ucyA9IHt9O1xuXHRpZiAodHlwZW9mIHNvdXJjZSAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGZpcnN0IGFyZ3VtZW50IHRvIGJlIGEgc3RyaW5nJyk7XG5cdGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHNlY29uZCBhcmd1bWVudCB0byBiZSBhbiBvcHRpb25zIG9iamVjdCcpO1xuXHRjb25zdCBzaW1wbGUgPSBnZXRCb29sZWFuT3B0aW9uKG9wdGlvbnMsICdzaW1wbGUnKTtcblxuXHRjb25zdCBzdG10ID0gdGhpc1tjcHBkYl0ucHJlcGFyZShgUFJBR01BICR7c291cmNlfWAsIHRoaXMsIHRydWUpO1xuXHRyZXR1cm4gc2ltcGxlID8gc3RtdC5wbHVjaygpLmdldCgpIDogc3RtdC5hbGwoKTtcbn07XG4iXSwibmFtZXMiOlsiZ2V0Qm9vbGVhbk9wdGlvbiIsImNwcGRiIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJwcmFnbWEiLCJzb3VyY2UiLCJvcHRpb25zIiwiVHlwZUVycm9yIiwic2ltcGxlIiwic3RtdCIsInByZXBhcmUiLCJwbHVjayIsImdldCIsImFsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/pragma.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/serialize.js":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/serialize.js ***!
  \**********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { cppdb } = __webpack_require__(/*! ../util */ \"(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/util.js\");\nmodule.exports = function serialize(options) {\n    if (options == null) options = {};\n    // Validate arguments\n    if (typeof options !== \"object\") throw new TypeError(\"Expected first argument to be an options object\");\n    // Interpret and validate options\n    const attachedName = \"attached\" in options ? options.attached : \"main\";\n    if (typeof attachedName !== \"string\") throw new TypeError('Expected the \"attached\" option to be a string');\n    if (!attachedName) throw new TypeError('The \"attached\" option cannot be an empty string');\n    return this[cppdb].serialize(attachedName);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JldHRlci1zcWxpdGUzQDguNy4wL25vZGVfbW9kdWxlcy9iZXR0ZXItc3FsaXRlMy9saWIvbWV0aG9kcy9zZXJpYWxpemUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxNQUFNLEVBQUVBLEtBQUssRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQztBQUUxQkMsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLFVBQVVDLE9BQU87SUFDMUMsSUFBSUEsV0FBVyxNQUFNQSxVQUFVLENBQUM7SUFFaEMscUJBQXFCO0lBQ3JCLElBQUksT0FBT0EsWUFBWSxVQUFVLE1BQU0sSUFBSUMsVUFBVTtJQUVyRCxpQ0FBaUM7SUFDakMsTUFBTUMsZUFBZSxjQUFjRixVQUFVQSxRQUFRRyxRQUFRLEdBQUc7SUFDaEUsSUFBSSxPQUFPRCxpQkFBaUIsVUFBVSxNQUFNLElBQUlELFVBQVU7SUFDMUQsSUFBSSxDQUFDQyxjQUFjLE1BQU0sSUFBSUQsVUFBVTtJQUV2QyxPQUFPLElBQUksQ0FBQ04sTUFBTSxDQUFDSSxTQUFTLENBQUNHO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHRva2Vuc3RyZWFtL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vYmV0dGVyLXNxbGl0ZTNAOC43LjAvbm9kZV9tb2R1bGVzL2JldHRlci1zcWxpdGUzL2xpYi9tZXRob2RzL3NlcmlhbGl6ZS5qcz9lZGQ0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IHsgY3BwZGIgfSA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXJpYWxpemUob3B0aW9ucykge1xuXHRpZiAob3B0aW9ucyA9PSBudWxsKSBvcHRpb25zID0ge307XG5cblx0Ly8gVmFsaWRhdGUgYXJndW1lbnRzXG5cdGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGZpcnN0IGFyZ3VtZW50IHRvIGJlIGFuIG9wdGlvbnMgb2JqZWN0Jyk7XG5cblx0Ly8gSW50ZXJwcmV0IGFuZCB2YWxpZGF0ZSBvcHRpb25zXG5cdGNvbnN0IGF0dGFjaGVkTmFtZSA9ICdhdHRhY2hlZCcgaW4gb3B0aW9ucyA/IG9wdGlvbnMuYXR0YWNoZWQgOiAnbWFpbic7XG5cdGlmICh0eXBlb2YgYXR0YWNoZWROYW1lICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgdGhlIFwiYXR0YWNoZWRcIiBvcHRpb24gdG8gYmUgYSBzdHJpbmcnKTtcblx0aWYgKCFhdHRhY2hlZE5hbWUpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImF0dGFjaGVkXCIgb3B0aW9uIGNhbm5vdCBiZSBhbiBlbXB0eSBzdHJpbmcnKTtcblxuXHRyZXR1cm4gdGhpc1tjcHBkYl0uc2VyaWFsaXplKGF0dGFjaGVkTmFtZSk7XG59O1xuIl0sIm5hbWVzIjpbImNwcGRiIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzZXJpYWxpemUiLCJvcHRpb25zIiwiVHlwZUVycm9yIiwiYXR0YWNoZWROYW1lIiwiYXR0YWNoZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/serialize.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/table.js":
/*!******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/table.js ***!
  \******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { cppdb } = __webpack_require__(/*! ../util */ \"(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/util.js\");\nmodule.exports = function defineTable(name, factory) {\n    // Validate arguments\n    if (typeof name !== \"string\") throw new TypeError(\"Expected first argument to be a string\");\n    if (!name) throw new TypeError(\"Virtual table module name cannot be an empty string\");\n    // Determine whether the module is eponymous-only or not\n    let eponymous = false;\n    if (typeof factory === \"object\" && factory !== null) {\n        eponymous = true;\n        factory = defer(parseTableDefinition(factory, \"used\", name));\n    } else {\n        if (typeof factory !== \"function\") throw new TypeError(\"Expected second argument to be a function or a table definition object\");\n        factory = wrapFactory(factory);\n    }\n    this[cppdb].table(factory, name, eponymous);\n    return this;\n};\nfunction wrapFactory(factory) {\n    return function virtualTableFactory(moduleName, databaseName, tableName, ...args) {\n        const thisObject = {\n            module: moduleName,\n            database: databaseName,\n            table: tableName\n        };\n        // Generate a new table definition by invoking the factory\n        const def = apply.call(factory, thisObject, args);\n        if (typeof def !== \"object\" || def === null) {\n            throw new TypeError(`Virtual table module \"${moduleName}\" did not return a table definition object`);\n        }\n        return parseTableDefinition(def, \"returned\", moduleName);\n    };\n}\nfunction parseTableDefinition(def, verb, moduleName) {\n    // Validate required properties\n    if (!hasOwnProperty.call(def, \"rows\")) {\n        throw new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition without a \"rows\" property`);\n    }\n    if (!hasOwnProperty.call(def, \"columns\")) {\n        throw new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition without a \"columns\" property`);\n    }\n    // Validate \"rows\" property\n    const rows = def.rows;\n    if (typeof rows !== \"function\" || Object.getPrototypeOf(rows) !== GeneratorFunctionPrototype) {\n        throw new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"rows\" property (should be a generator function)`);\n    }\n    // Validate \"columns\" property\n    let columns = def.columns;\n    if (!Array.isArray(columns) || !(columns = [\n        ...columns\n    ]).every((x)=>typeof x === \"string\")) {\n        throw new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"columns\" property (should be an array of strings)`);\n    }\n    if (columns.length !== new Set(columns).size) {\n        throw new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with duplicate column names`);\n    }\n    if (!columns.length) {\n        throw new RangeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with zero columns`);\n    }\n    // Validate \"parameters\" property\n    let parameters;\n    if (hasOwnProperty.call(def, \"parameters\")) {\n        parameters = def.parameters;\n        if (!Array.isArray(parameters) || !(parameters = [\n            ...parameters\n        ]).every((x)=>typeof x === \"string\")) {\n            throw new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"parameters\" property (should be an array of strings)`);\n        }\n    } else {\n        parameters = inferParameters(rows);\n    }\n    if (parameters.length !== new Set(parameters).size) {\n        throw new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with duplicate parameter names`);\n    }\n    if (parameters.length > 32) {\n        throw new RangeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with more than the maximum number of 32 parameters`);\n    }\n    for (const parameter of parameters){\n        if (columns.includes(parameter)) {\n            throw new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with column \"${parameter}\" which was ambiguously defined as both a column and parameter`);\n        }\n    }\n    // Validate \"safeIntegers\" option\n    let safeIntegers = 2;\n    if (hasOwnProperty.call(def, \"safeIntegers\")) {\n        const bool = def.safeIntegers;\n        if (typeof bool !== \"boolean\") {\n            throw new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"safeIntegers\" property (should be a boolean)`);\n        }\n        safeIntegers = +bool;\n    }\n    // Validate \"directOnly\" option\n    let directOnly = false;\n    if (hasOwnProperty.call(def, \"directOnly\")) {\n        directOnly = def.directOnly;\n        if (typeof directOnly !== \"boolean\") {\n            throw new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"directOnly\" property (should be a boolean)`);\n        }\n    }\n    // Generate SQL for the virtual table definition\n    const columnDefinitions = [\n        ...parameters.map(identifier).map((str)=>`${str} HIDDEN`),\n        ...columns.map(identifier)\n    ];\n    return [\n        `CREATE TABLE x(${columnDefinitions.join(\", \")});`,\n        wrapGenerator(rows, new Map(columns.map((x, i)=>[\n                x,\n                parameters.length + i\n            ])), moduleName),\n        parameters,\n        safeIntegers,\n        directOnly\n    ];\n}\nfunction wrapGenerator(generator, columnMap, moduleName) {\n    return function* virtualTable(...args) {\n        /*\n\t\t\tWe must defensively clone any buffers in the arguments, because\n\t\t\totherwise the generator could mutate one of them, which would cause\n\t\t\tus to return incorrect values for hidden columns, potentially\n\t\t\tcorrupting the database.\n\t\t */ const output = args.map((x)=>Buffer.isBuffer(x) ? Buffer.from(x) : x);\n        for(let i = 0; i < columnMap.size; ++i){\n            output.push(null); // Fill with nulls to prevent gaps in array (v8 optimization)\n        }\n        for (const row of generator(...args)){\n            if (Array.isArray(row)) {\n                extractRowArray(row, output, columnMap.size, moduleName);\n                yield output;\n            } else if (typeof row === \"object\" && row !== null) {\n                extractRowObject(row, output, columnMap, moduleName);\n                yield output;\n            } else {\n                throw new TypeError(`Virtual table module \"${moduleName}\" yielded something that isn't a valid row object`);\n            }\n        }\n    };\n}\nfunction extractRowArray(row, output, columnCount, moduleName) {\n    if (row.length !== columnCount) {\n        throw new TypeError(`Virtual table module \"${moduleName}\" yielded a row with an incorrect number of columns`);\n    }\n    const offset = output.length - columnCount;\n    for(let i = 0; i < columnCount; ++i){\n        output[i + offset] = row[i];\n    }\n}\nfunction extractRowObject(row, output, columnMap, moduleName) {\n    let count = 0;\n    for (const key of Object.keys(row)){\n        const index = columnMap.get(key);\n        if (index === undefined) {\n            throw new TypeError(`Virtual table module \"${moduleName}\" yielded a row with an undeclared column \"${key}\"`);\n        }\n        output[index] = row[key];\n        count += 1;\n    }\n    if (count !== columnMap.size) {\n        throw new TypeError(`Virtual table module \"${moduleName}\" yielded a row with missing columns`);\n    }\n}\nfunction inferParameters({ length }) {\n    if (!Number.isInteger(length) || length < 0) {\n        throw new TypeError(\"Expected function.length to be a positive integer\");\n    }\n    const params = [];\n    for(let i = 0; i < length; ++i){\n        params.push(`$${i + 1}`);\n    }\n    return params;\n}\nconst { hasOwnProperty } = Object.prototype;\nconst { apply } = Function.prototype;\nconst GeneratorFunctionPrototype = Object.getPrototypeOf(function*() {});\nconst identifier = (str)=>`\"${str.replace(/\"/g, '\"\"')}\"`;\nconst defer = (x)=>()=>x;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/table.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/transaction.js":
/*!************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/transaction.js ***!
  \************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { cppdb } = __webpack_require__(/*! ../util */ \"(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/util.js\");\nconst controllers = new WeakMap();\nmodule.exports = function transaction(fn) {\n    if (typeof fn !== \"function\") throw new TypeError(\"Expected first argument to be a function\");\n    const db = this[cppdb];\n    const controller = getController(db, this);\n    const { apply } = Function.prototype;\n    // Each version of the transaction function has these same properties\n    const properties = {\n        default: {\n            value: wrapTransaction(apply, fn, db, controller.default)\n        },\n        deferred: {\n            value: wrapTransaction(apply, fn, db, controller.deferred)\n        },\n        immediate: {\n            value: wrapTransaction(apply, fn, db, controller.immediate)\n        },\n        exclusive: {\n            value: wrapTransaction(apply, fn, db, controller.exclusive)\n        },\n        database: {\n            value: this,\n            enumerable: true\n        }\n    };\n    Object.defineProperties(properties.default.value, properties);\n    Object.defineProperties(properties.deferred.value, properties);\n    Object.defineProperties(properties.immediate.value, properties);\n    Object.defineProperties(properties.exclusive.value, properties);\n    // Return the default version of the transaction function\n    return properties.default.value;\n};\n// Return the database's cached transaction controller, or create a new one\nconst getController = (db, self)=>{\n    let controller = controllers.get(db);\n    if (!controller) {\n        const shared = {\n            commit: db.prepare(\"COMMIT\", self, false),\n            rollback: db.prepare(\"ROLLBACK\", self, false),\n            savepoint: db.prepare(\"SAVEPOINT `\t_bs3.\t`\", self, false),\n            release: db.prepare(\"RELEASE `\t_bs3.\t`\", self, false),\n            rollbackTo: db.prepare(\"ROLLBACK TO `\t_bs3.\t`\", self, false)\n        };\n        controllers.set(db, controller = {\n            default: Object.assign({\n                begin: db.prepare(\"BEGIN\", self, false)\n            }, shared),\n            deferred: Object.assign({\n                begin: db.prepare(\"BEGIN DEFERRED\", self, false)\n            }, shared),\n            immediate: Object.assign({\n                begin: db.prepare(\"BEGIN IMMEDIATE\", self, false)\n            }, shared),\n            exclusive: Object.assign({\n                begin: db.prepare(\"BEGIN EXCLUSIVE\", self, false)\n            }, shared)\n        });\n    }\n    return controller;\n};\n// Return a new transaction function by wrapping the given function\nconst wrapTransaction = (apply, fn, db, { begin, commit, rollback, savepoint, release, rollbackTo })=>function sqliteTransaction() {\n        let before, after, undo;\n        if (db.inTransaction) {\n            before = savepoint;\n            after = release;\n            undo = rollbackTo;\n        } else {\n            before = begin;\n            after = commit;\n            undo = rollback;\n        }\n        before.run();\n        try {\n            const result = apply.call(fn, this, arguments);\n            after.run();\n            return result;\n        } catch (ex) {\n            if (db.inTransaction) {\n                undo.run();\n                if (undo !== rollback) after.run();\n            }\n            throw ex;\n        }\n    };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JldHRlci1zcWxpdGUzQDguNy4wL25vZGVfbW9kdWxlcy9iZXR0ZXItc3FsaXRlMy9saWIvbWV0aG9kcy90cmFuc2FjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLE1BQU0sRUFBRUEsS0FBSyxFQUFFLEdBQUdDLG1CQUFPQSxDQUFDO0FBQzFCLE1BQU1DLGNBQWMsSUFBSUM7QUFFeEJDLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxZQUFZQyxFQUFFO0lBQ3ZDLElBQUksT0FBT0EsT0FBTyxZQUFZLE1BQU0sSUFBSUMsVUFBVTtJQUVsRCxNQUFNQyxLQUFLLElBQUksQ0FBQ1QsTUFBTTtJQUN0QixNQUFNVSxhQUFhQyxjQUFjRixJQUFJLElBQUk7SUFDekMsTUFBTSxFQUFFRyxLQUFLLEVBQUUsR0FBR0MsU0FBU0MsU0FBUztJQUVwQyxxRUFBcUU7SUFDckUsTUFBTUMsYUFBYTtRQUNsQkMsU0FBUztZQUFFQyxPQUFPQyxnQkFBZ0JOLE9BQU9MLElBQUlFLElBQUlDLFdBQVdNLE9BQU87UUFBRTtRQUNyRUcsVUFBVTtZQUFFRixPQUFPQyxnQkFBZ0JOLE9BQU9MLElBQUlFLElBQUlDLFdBQVdTLFFBQVE7UUFBRTtRQUN2RUMsV0FBVztZQUFFSCxPQUFPQyxnQkFBZ0JOLE9BQU9MLElBQUlFLElBQUlDLFdBQVdVLFNBQVM7UUFBRTtRQUN6RUMsV0FBVztZQUFFSixPQUFPQyxnQkFBZ0JOLE9BQU9MLElBQUlFLElBQUlDLFdBQVdXLFNBQVM7UUFBRTtRQUN6RUMsVUFBVTtZQUFFTCxPQUFPLElBQUk7WUFBRU0sWUFBWTtRQUFLO0lBQzNDO0lBRUFDLE9BQU9DLGdCQUFnQixDQUFDVixXQUFXQyxPQUFPLENBQUNDLEtBQUssRUFBRUY7SUFDbERTLE9BQU9DLGdCQUFnQixDQUFDVixXQUFXSSxRQUFRLENBQUNGLEtBQUssRUFBRUY7SUFDbkRTLE9BQU9DLGdCQUFnQixDQUFDVixXQUFXSyxTQUFTLENBQUNILEtBQUssRUFBRUY7SUFDcERTLE9BQU9DLGdCQUFnQixDQUFDVixXQUFXTSxTQUFTLENBQUNKLEtBQUssRUFBRUY7SUFFcEQseURBQXlEO0lBQ3pELE9BQU9BLFdBQVdDLE9BQU8sQ0FBQ0MsS0FBSztBQUNoQztBQUVBLDJFQUEyRTtBQUMzRSxNQUFNTixnQkFBZ0IsQ0FBQ0YsSUFBSWlCO0lBQzFCLElBQUloQixhQUFhUixZQUFZeUIsR0FBRyxDQUFDbEI7SUFDakMsSUFBSSxDQUFDQyxZQUFZO1FBQ2hCLE1BQU1rQixTQUFTO1lBQ2RDLFFBQVFwQixHQUFHcUIsT0FBTyxDQUFDLFVBQVVKLE1BQU07WUFDbkNLLFVBQVV0QixHQUFHcUIsT0FBTyxDQUFDLFlBQVlKLE1BQU07WUFDdkNNLFdBQVd2QixHQUFHcUIsT0FBTyxDQUFDLHVCQUF5QkosTUFBTTtZQUNyRE8sU0FBU3hCLEdBQUdxQixPQUFPLENBQUMscUJBQXVCSixNQUFNO1lBQ2pEUSxZQUFZekIsR0FBR3FCLE9BQU8sQ0FBQyx5QkFBMkJKLE1BQU07UUFDekQ7UUFDQXhCLFlBQVlpQyxHQUFHLENBQUMxQixJQUFJQyxhQUFhO1lBQ2hDTSxTQUFTUSxPQUFPWSxNQUFNLENBQUM7Z0JBQUVDLE9BQU81QixHQUFHcUIsT0FBTyxDQUFDLFNBQVNKLE1BQU07WUFBTyxHQUFHRTtZQUNwRVQsVUFBVUssT0FBT1ksTUFBTSxDQUFDO2dCQUFFQyxPQUFPNUIsR0FBR3FCLE9BQU8sQ0FBQyxrQkFBa0JKLE1BQU07WUFBTyxHQUFHRTtZQUM5RVIsV0FBV0ksT0FBT1ksTUFBTSxDQUFDO2dCQUFFQyxPQUFPNUIsR0FBR3FCLE9BQU8sQ0FBQyxtQkFBbUJKLE1BQU07WUFBTyxHQUFHRTtZQUNoRlAsV0FBV0csT0FBT1ksTUFBTSxDQUFDO2dCQUFFQyxPQUFPNUIsR0FBR3FCLE9BQU8sQ0FBQyxtQkFBbUJKLE1BQU07WUFBTyxHQUFHRTtRQUNqRjtJQUNEO0lBQ0EsT0FBT2xCO0FBQ1I7QUFFQSxtRUFBbUU7QUFDbkUsTUFBTVEsa0JBQWtCLENBQUNOLE9BQU9MLElBQUlFLElBQUksRUFBRTRCLEtBQUssRUFBRVIsTUFBTSxFQUFFRSxRQUFRLEVBQUVDLFNBQVMsRUFBRUMsT0FBTyxFQUFFQyxVQUFVLEVBQUUsR0FBSyxTQUFTSTtRQUNoSCxJQUFJQyxRQUFRQyxPQUFPQztRQUNuQixJQUFJaEMsR0FBR2lDLGFBQWEsRUFBRTtZQUNyQkgsU0FBU1A7WUFDVFEsUUFBUVA7WUFDUlEsT0FBT1A7UUFDUixPQUFPO1lBQ05LLFNBQVNGO1lBQ1RHLFFBQVFYO1lBQ1JZLE9BQU9WO1FBQ1I7UUFDQVEsT0FBT0ksR0FBRztRQUNWLElBQUk7WUFDSCxNQUFNQyxTQUFTaEMsTUFBTWlDLElBQUksQ0FBQ3RDLElBQUksSUFBSSxFQUFFdUM7WUFDcENOLE1BQU1HLEdBQUc7WUFDVCxPQUFPQztRQUNSLEVBQUUsT0FBT0csSUFBSTtZQUNaLElBQUl0QyxHQUFHaUMsYUFBYSxFQUFFO2dCQUNyQkQsS0FBS0UsR0FBRztnQkFDUixJQUFJRixTQUFTVixVQUFVUyxNQUFNRyxHQUFHO1lBQ2pDO1lBQ0EsTUFBTUk7UUFDUDtJQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHRva2Vuc3RyZWFtL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vYmV0dGVyLXNxbGl0ZTNAOC43LjAvbm9kZV9tb2R1bGVzL2JldHRlci1zcWxpdGUzL2xpYi9tZXRob2RzL3RyYW5zYWN0aW9uLmpzPzJlZGQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgeyBjcHBkYiB9ID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuY29uc3QgY29udHJvbGxlcnMgPSBuZXcgV2Vha01hcCgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zYWN0aW9uKGZuKSB7XG5cdGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGZpcnN0IGFyZ3VtZW50IHRvIGJlIGEgZnVuY3Rpb24nKTtcblxuXHRjb25zdCBkYiA9IHRoaXNbY3BwZGJdO1xuXHRjb25zdCBjb250cm9sbGVyID0gZ2V0Q29udHJvbGxlcihkYiwgdGhpcyk7XG5cdGNvbnN0IHsgYXBwbHkgfSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxuXHQvLyBFYWNoIHZlcnNpb24gb2YgdGhlIHRyYW5zYWN0aW9uIGZ1bmN0aW9uIGhhcyB0aGVzZSBzYW1lIHByb3BlcnRpZXNcblx0Y29uc3QgcHJvcGVydGllcyA9IHtcblx0XHRkZWZhdWx0OiB7IHZhbHVlOiB3cmFwVHJhbnNhY3Rpb24oYXBwbHksIGZuLCBkYiwgY29udHJvbGxlci5kZWZhdWx0KSB9LFxuXHRcdGRlZmVycmVkOiB7IHZhbHVlOiB3cmFwVHJhbnNhY3Rpb24oYXBwbHksIGZuLCBkYiwgY29udHJvbGxlci5kZWZlcnJlZCkgfSxcblx0XHRpbW1lZGlhdGU6IHsgdmFsdWU6IHdyYXBUcmFuc2FjdGlvbihhcHBseSwgZm4sIGRiLCBjb250cm9sbGVyLmltbWVkaWF0ZSkgfSxcblx0XHRleGNsdXNpdmU6IHsgdmFsdWU6IHdyYXBUcmFuc2FjdGlvbihhcHBseSwgZm4sIGRiLCBjb250cm9sbGVyLmV4Y2x1c2l2ZSkgfSxcblx0XHRkYXRhYmFzZTogeyB2YWx1ZTogdGhpcywgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHR9O1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHByb3BlcnRpZXMuZGVmYXVsdC52YWx1ZSwgcHJvcGVydGllcyk7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHByb3BlcnRpZXMuZGVmZXJyZWQudmFsdWUsIHByb3BlcnRpZXMpO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyhwcm9wZXJ0aWVzLmltbWVkaWF0ZS52YWx1ZSwgcHJvcGVydGllcyk7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHByb3BlcnRpZXMuZXhjbHVzaXZlLnZhbHVlLCBwcm9wZXJ0aWVzKTtcblxuXHQvLyBSZXR1cm4gdGhlIGRlZmF1bHQgdmVyc2lvbiBvZiB0aGUgdHJhbnNhY3Rpb24gZnVuY3Rpb25cblx0cmV0dXJuIHByb3BlcnRpZXMuZGVmYXVsdC52YWx1ZTtcbn07XG5cbi8vIFJldHVybiB0aGUgZGF0YWJhc2UncyBjYWNoZWQgdHJhbnNhY3Rpb24gY29udHJvbGxlciwgb3IgY3JlYXRlIGEgbmV3IG9uZVxuY29uc3QgZ2V0Q29udHJvbGxlciA9IChkYiwgc2VsZikgPT4ge1xuXHRsZXQgY29udHJvbGxlciA9IGNvbnRyb2xsZXJzLmdldChkYik7XG5cdGlmICghY29udHJvbGxlcikge1xuXHRcdGNvbnN0IHNoYXJlZCA9IHtcblx0XHRcdGNvbW1pdDogZGIucHJlcGFyZSgnQ09NTUlUJywgc2VsZiwgZmFsc2UpLFxuXHRcdFx0cm9sbGJhY2s6IGRiLnByZXBhcmUoJ1JPTExCQUNLJywgc2VsZiwgZmFsc2UpLFxuXHRcdFx0c2F2ZXBvaW50OiBkYi5wcmVwYXJlKCdTQVZFUE9JTlQgYFxcdF9iczMuXFx0YCcsIHNlbGYsIGZhbHNlKSxcblx0XHRcdHJlbGVhc2U6IGRiLnByZXBhcmUoJ1JFTEVBU0UgYFxcdF9iczMuXFx0YCcsIHNlbGYsIGZhbHNlKSxcblx0XHRcdHJvbGxiYWNrVG86IGRiLnByZXBhcmUoJ1JPTExCQUNLIFRPIGBcXHRfYnMzLlxcdGAnLCBzZWxmLCBmYWxzZSksXG5cdFx0fTtcblx0XHRjb250cm9sbGVycy5zZXQoZGIsIGNvbnRyb2xsZXIgPSB7XG5cdFx0XHRkZWZhdWx0OiBPYmplY3QuYXNzaWduKHsgYmVnaW46IGRiLnByZXBhcmUoJ0JFR0lOJywgc2VsZiwgZmFsc2UpIH0sIHNoYXJlZCksXG5cdFx0XHRkZWZlcnJlZDogT2JqZWN0LmFzc2lnbih7IGJlZ2luOiBkYi5wcmVwYXJlKCdCRUdJTiBERUZFUlJFRCcsIHNlbGYsIGZhbHNlKSB9LCBzaGFyZWQpLFxuXHRcdFx0aW1tZWRpYXRlOiBPYmplY3QuYXNzaWduKHsgYmVnaW46IGRiLnByZXBhcmUoJ0JFR0lOIElNTUVESUFURScsIHNlbGYsIGZhbHNlKSB9LCBzaGFyZWQpLFxuXHRcdFx0ZXhjbHVzaXZlOiBPYmplY3QuYXNzaWduKHsgYmVnaW46IGRiLnByZXBhcmUoJ0JFR0lOIEVYQ0xVU0lWRScsIHNlbGYsIGZhbHNlKSB9LCBzaGFyZWQpLFxuXHRcdH0pO1xuXHR9XG5cdHJldHVybiBjb250cm9sbGVyO1xufTtcblxuLy8gUmV0dXJuIGEgbmV3IHRyYW5zYWN0aW9uIGZ1bmN0aW9uIGJ5IHdyYXBwaW5nIHRoZSBnaXZlbiBmdW5jdGlvblxuY29uc3Qgd3JhcFRyYW5zYWN0aW9uID0gKGFwcGx5LCBmbiwgZGIsIHsgYmVnaW4sIGNvbW1pdCwgcm9sbGJhY2ssIHNhdmVwb2ludCwgcmVsZWFzZSwgcm9sbGJhY2tUbyB9KSA9PiBmdW5jdGlvbiBzcWxpdGVUcmFuc2FjdGlvbigpIHtcblx0bGV0IGJlZm9yZSwgYWZ0ZXIsIHVuZG87XG5cdGlmIChkYi5pblRyYW5zYWN0aW9uKSB7XG5cdFx0YmVmb3JlID0gc2F2ZXBvaW50O1xuXHRcdGFmdGVyID0gcmVsZWFzZTtcblx0XHR1bmRvID0gcm9sbGJhY2tUbztcblx0fSBlbHNlIHtcblx0XHRiZWZvcmUgPSBiZWdpbjtcblx0XHRhZnRlciA9IGNvbW1pdDtcblx0XHR1bmRvID0gcm9sbGJhY2s7XG5cdH1cblx0YmVmb3JlLnJ1bigpO1xuXHR0cnkge1xuXHRcdGNvbnN0IHJlc3VsdCA9IGFwcGx5LmNhbGwoZm4sIHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0YWZ0ZXIucnVuKCk7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fSBjYXRjaCAoZXgpIHtcblx0XHRpZiAoZGIuaW5UcmFuc2FjdGlvbikge1xuXHRcdFx0dW5kby5ydW4oKTtcblx0XHRcdGlmICh1bmRvICE9PSByb2xsYmFjaykgYWZ0ZXIucnVuKCk7XG5cdFx0fVxuXHRcdHRocm93IGV4O1xuXHR9XG59O1xuIl0sIm5hbWVzIjpbImNwcGRiIiwicmVxdWlyZSIsImNvbnRyb2xsZXJzIiwiV2Vha01hcCIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0cmFuc2FjdGlvbiIsImZuIiwiVHlwZUVycm9yIiwiZGIiLCJjb250cm9sbGVyIiwiZ2V0Q29udHJvbGxlciIsImFwcGx5IiwiRnVuY3Rpb24iLCJwcm90b3R5cGUiLCJwcm9wZXJ0aWVzIiwiZGVmYXVsdCIsInZhbHVlIiwid3JhcFRyYW5zYWN0aW9uIiwiZGVmZXJyZWQiLCJpbW1lZGlhdGUiLCJleGNsdXNpdmUiLCJkYXRhYmFzZSIsImVudW1lcmFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0aWVzIiwic2VsZiIsImdldCIsInNoYXJlZCIsImNvbW1pdCIsInByZXBhcmUiLCJyb2xsYmFjayIsInNhdmVwb2ludCIsInJlbGVhc2UiLCJyb2xsYmFja1RvIiwic2V0IiwiYXNzaWduIiwiYmVnaW4iLCJzcWxpdGVUcmFuc2FjdGlvbiIsImJlZm9yZSIsImFmdGVyIiwidW5kbyIsImluVHJhbnNhY3Rpb24iLCJydW4iLCJyZXN1bHQiLCJjYWxsIiwiYXJndW1lbnRzIiwiZXgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/transaction.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/wrappers.js":
/*!*********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/wrappers.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst { cppdb } = __webpack_require__(/*! ../util */ \"(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/util.js\");\nexports.prepare = function prepare(sql) {\n    return this[cppdb].prepare(sql, this, false);\n};\nexports.exec = function exec(sql) {\n    this[cppdb].exec(sql);\n    return this;\n};\nexports.close = function close() {\n    this[cppdb].close();\n    return this;\n};\nexports.loadExtension = function loadExtension(...args) {\n    this[cppdb].loadExtension(...args);\n    return this;\n};\nexports.defaultSafeIntegers = function defaultSafeIntegers(...args) {\n    this[cppdb].defaultSafeIntegers(...args);\n    return this;\n};\nexports.unsafeMode = function unsafeMode(...args) {\n    this[cppdb].unsafeMode(...args);\n    return this;\n};\nexports.getters = {\n    name: {\n        get: function name() {\n            return this[cppdb].name;\n        },\n        enumerable: true\n    },\n    open: {\n        get: function open() {\n            return this[cppdb].open;\n        },\n        enumerable: true\n    },\n    inTransaction: {\n        get: function inTransaction() {\n            return this[cppdb].inTransaction;\n        },\n        enumerable: true\n    },\n    readonly: {\n        get: function readonly() {\n            return this[cppdb].readonly;\n        },\n        enumerable: true\n    },\n    memory: {\n        get: function memory() {\n            return this[cppdb].memory;\n        },\n        enumerable: true\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JldHRlci1zcWxpdGUzQDguNy4wL25vZGVfbW9kdWxlcy9iZXR0ZXItc3FsaXRlMy9saWIvbWV0aG9kcy93cmFwcGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLE1BQU0sRUFBRUEsS0FBSyxFQUFFLEdBQUdDLG1CQUFPQSxDQUFDO0FBRTFCQyxlQUFlLEdBQUcsU0FBU0MsUUFBUUMsR0FBRztJQUNyQyxPQUFPLElBQUksQ0FBQ0osTUFBTSxDQUFDRyxPQUFPLENBQUNDLEtBQUssSUFBSSxFQUFFO0FBQ3ZDO0FBRUFGLFlBQVksR0FBRyxTQUFTRyxLQUFLRCxHQUFHO0lBQy9CLElBQUksQ0FBQ0osTUFBTSxDQUFDSyxJQUFJLENBQUNEO0lBQ2pCLE9BQU8sSUFBSTtBQUNaO0FBRUFGLGFBQWEsR0FBRyxTQUFTSTtJQUN4QixJQUFJLENBQUNOLE1BQU0sQ0FBQ00sS0FBSztJQUNqQixPQUFPLElBQUk7QUFDWjtBQUVBSixxQkFBcUIsR0FBRyxTQUFTSyxjQUFjLEdBQUdDLElBQUk7SUFDckQsSUFBSSxDQUFDUixNQUFNLENBQUNPLGFBQWEsSUFBSUM7SUFDN0IsT0FBTyxJQUFJO0FBQ1o7QUFFQU4sMkJBQTJCLEdBQUcsU0FBU08sb0JBQW9CLEdBQUdELElBQUk7SUFDakUsSUFBSSxDQUFDUixNQUFNLENBQUNTLG1CQUFtQixJQUFJRDtJQUNuQyxPQUFPLElBQUk7QUFDWjtBQUVBTixrQkFBa0IsR0FBRyxTQUFTUSxXQUFXLEdBQUdGLElBQUk7SUFDL0MsSUFBSSxDQUFDUixNQUFNLENBQUNVLFVBQVUsSUFBSUY7SUFDMUIsT0FBTyxJQUFJO0FBQ1o7QUFFQU4sZUFBZSxHQUFHO0lBQ2pCVSxNQUFNO1FBQ0xDLEtBQUssU0FBU0Q7WUFBUyxPQUFPLElBQUksQ0FBQ1osTUFBTSxDQUFDWSxJQUFJO1FBQUU7UUFDaERFLFlBQVk7SUFDYjtJQUNBQyxNQUFNO1FBQ0xGLEtBQUssU0FBU0U7WUFBUyxPQUFPLElBQUksQ0FBQ2YsTUFBTSxDQUFDZSxJQUFJO1FBQUU7UUFDaERELFlBQVk7SUFDYjtJQUNBRSxlQUFlO1FBQ2RILEtBQUssU0FBU0c7WUFBa0IsT0FBTyxJQUFJLENBQUNoQixNQUFNLENBQUNnQixhQUFhO1FBQUU7UUFDbEVGLFlBQVk7SUFDYjtJQUNBRyxVQUFVO1FBQ1RKLEtBQUssU0FBU0k7WUFBYSxPQUFPLElBQUksQ0FBQ2pCLE1BQU0sQ0FBQ2lCLFFBQVE7UUFBRTtRQUN4REgsWUFBWTtJQUNiO0lBQ0FJLFFBQVE7UUFDUEwsS0FBSyxTQUFTSztZQUFXLE9BQU8sSUFBSSxDQUFDbEIsTUFBTSxDQUFDa0IsTUFBTTtRQUFFO1FBQ3BESixZQUFZO0lBQ2I7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL0B0b2tlbnN0cmVhbS93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JldHRlci1zcWxpdGUzQDguNy4wL25vZGVfbW9kdWxlcy9iZXR0ZXItc3FsaXRlMy9saWIvbWV0aG9kcy93cmFwcGVycy5qcz9jMGNmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IHsgY3BwZGIgfSA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcblxuZXhwb3J0cy5wcmVwYXJlID0gZnVuY3Rpb24gcHJlcGFyZShzcWwpIHtcblx0cmV0dXJuIHRoaXNbY3BwZGJdLnByZXBhcmUoc3FsLCB0aGlzLCBmYWxzZSk7XG59O1xuXG5leHBvcnRzLmV4ZWMgPSBmdW5jdGlvbiBleGVjKHNxbCkge1xuXHR0aGlzW2NwcGRiXS5leGVjKHNxbCk7XG5cdHJldHVybiB0aGlzO1xufTtcblxuZXhwb3J0cy5jbG9zZSA9IGZ1bmN0aW9uIGNsb3NlKCkge1xuXHR0aGlzW2NwcGRiXS5jbG9zZSgpO1xuXHRyZXR1cm4gdGhpcztcbn07XG5cbmV4cG9ydHMubG9hZEV4dGVuc2lvbiA9IGZ1bmN0aW9uIGxvYWRFeHRlbnNpb24oLi4uYXJncykge1xuXHR0aGlzW2NwcGRiXS5sb2FkRXh0ZW5zaW9uKC4uLmFyZ3MpO1xuXHRyZXR1cm4gdGhpcztcbn07XG5cbmV4cG9ydHMuZGVmYXVsdFNhZmVJbnRlZ2VycyA9IGZ1bmN0aW9uIGRlZmF1bHRTYWZlSW50ZWdlcnMoLi4uYXJncykge1xuXHR0aGlzW2NwcGRiXS5kZWZhdWx0U2FmZUludGVnZXJzKC4uLmFyZ3MpO1xuXHRyZXR1cm4gdGhpcztcbn07XG5cbmV4cG9ydHMudW5zYWZlTW9kZSA9IGZ1bmN0aW9uIHVuc2FmZU1vZGUoLi4uYXJncykge1xuXHR0aGlzW2NwcGRiXS51bnNhZmVNb2RlKC4uLmFyZ3MpO1xuXHRyZXR1cm4gdGhpcztcbn07XG5cbmV4cG9ydHMuZ2V0dGVycyA9IHtcblx0bmFtZToge1xuXHRcdGdldDogZnVuY3Rpb24gbmFtZSgpIHsgcmV0dXJuIHRoaXNbY3BwZGJdLm5hbWU7IH0sXG5cdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0fSxcblx0b3Blbjoge1xuXHRcdGdldDogZnVuY3Rpb24gb3BlbigpIHsgcmV0dXJuIHRoaXNbY3BwZGJdLm9wZW47IH0sXG5cdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0fSxcblx0aW5UcmFuc2FjdGlvbjoge1xuXHRcdGdldDogZnVuY3Rpb24gaW5UcmFuc2FjdGlvbigpIHsgcmV0dXJuIHRoaXNbY3BwZGJdLmluVHJhbnNhY3Rpb247IH0sXG5cdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0fSxcblx0cmVhZG9ubHk6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uIHJlYWRvbmx5KCkgeyByZXR1cm4gdGhpc1tjcHBkYl0ucmVhZG9ubHk7IH0sXG5cdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0fSxcblx0bWVtb3J5OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiBtZW1vcnkoKSB7IHJldHVybiB0aGlzW2NwcGRiXS5tZW1vcnk7IH0sXG5cdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0fSxcbn07XG4iXSwibmFtZXMiOlsiY3BwZGIiLCJyZXF1aXJlIiwiZXhwb3J0cyIsInByZXBhcmUiLCJzcWwiLCJleGVjIiwiY2xvc2UiLCJsb2FkRXh0ZW5zaW9uIiwiYXJncyIsImRlZmF1bHRTYWZlSW50ZWdlcnMiLCJ1bnNhZmVNb2RlIiwiZ2V0dGVycyIsIm5hbWUiLCJnZXQiLCJlbnVtZXJhYmxlIiwib3BlbiIsImluVHJhbnNhY3Rpb24iLCJyZWFkb25seSIsIm1lbW9yeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/methods/wrappers.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/sqlite-error.js":
/*!*****************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/sqlite-error.js ***!
  \*****************************************************************************************************/
/***/ ((module) => {

eval("\nconst descriptor = {\n    value: \"SqliteError\",\n    writable: true,\n    enumerable: false,\n    configurable: true\n};\nfunction SqliteError(message, code) {\n    if (new.target !== SqliteError) {\n        return new SqliteError(message, code);\n    }\n    if (typeof code !== \"string\") {\n        throw new TypeError(\"Expected second argument to be a string\");\n    }\n    Error.call(this, message);\n    descriptor.value = \"\" + message;\n    Object.defineProperty(this, \"message\", descriptor);\n    Error.captureStackTrace(this, SqliteError);\n    this.code = code;\n}\nObject.setPrototypeOf(SqliteError, Error);\nObject.setPrototypeOf(SqliteError.prototype, Error.prototype);\nObject.defineProperty(SqliteError.prototype, \"name\", descriptor);\nmodule.exports = SqliteError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JldHRlci1zcWxpdGUzQDguNy4wL25vZGVfbW9kdWxlcy9iZXR0ZXItc3FsaXRlMy9saWIvc3FsaXRlLWVycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsTUFBTUEsYUFBYTtJQUFFQyxPQUFPO0lBQWVDLFVBQVU7SUFBTUMsWUFBWTtJQUFPQyxjQUFjO0FBQUs7QUFFakcsU0FBU0MsWUFBWUMsT0FBTyxFQUFFQyxJQUFJO0lBQ2pDLElBQUksZUFBZUYsYUFBYTtRQUMvQixPQUFPLElBQUlBLFlBQVlDLFNBQVNDO0lBQ2pDO0lBQ0EsSUFBSSxPQUFPQSxTQUFTLFVBQVU7UUFDN0IsTUFBTSxJQUFJQyxVQUFVO0lBQ3JCO0lBQ0FDLE1BQU1DLElBQUksQ0FBQyxJQUFJLEVBQUVKO0lBQ2pCTixXQUFXQyxLQUFLLEdBQUcsS0FBS0s7SUFDeEJLLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsV0FBV1o7SUFDdkNTLE1BQU1JLGlCQUFpQixDQUFDLElBQUksRUFBRVI7SUFDOUIsSUFBSSxDQUFDRSxJQUFJLEdBQUdBO0FBQ2I7QUFDQUksT0FBT0csY0FBYyxDQUFDVCxhQUFhSTtBQUNuQ0UsT0FBT0csY0FBYyxDQUFDVCxZQUFZVSxTQUFTLEVBQUVOLE1BQU1NLFNBQVM7QUFDNURKLE9BQU9DLGNBQWMsQ0FBQ1AsWUFBWVUsU0FBUyxFQUFFLFFBQVFmO0FBQ3JEZ0IsT0FBT0MsT0FBTyxHQUFHWiIsInNvdXJjZXMiOlsid2VicGFjazovL0B0b2tlbnN0cmVhbS93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JldHRlci1zcWxpdGUzQDguNy4wL25vZGVfbW9kdWxlcy9iZXR0ZXItc3FsaXRlMy9saWIvc3FsaXRlLWVycm9yLmpzPzQ0N2MiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgZGVzY3JpcHRvciA9IHsgdmFsdWU6ICdTcWxpdGVFcnJvcicsIHdyaXRhYmxlOiB0cnVlLCBlbnVtZXJhYmxlOiBmYWxzZSwgY29uZmlndXJhYmxlOiB0cnVlIH07XG5cbmZ1bmN0aW9uIFNxbGl0ZUVycm9yKG1lc3NhZ2UsIGNvZGUpIHtcblx0aWYgKG5ldy50YXJnZXQgIT09IFNxbGl0ZUVycm9yKSB7XG5cdFx0cmV0dXJuIG5ldyBTcWxpdGVFcnJvcihtZXNzYWdlLCBjb2RlKTtcblx0fVxuXHRpZiAodHlwZW9mIGNvZGUgIT09ICdzdHJpbmcnKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgc2Vjb25kIGFyZ3VtZW50IHRvIGJlIGEgc3RyaW5nJyk7XG5cdH1cblx0RXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlKTtcblx0ZGVzY3JpcHRvci52YWx1ZSA9ICcnICsgbWVzc2FnZTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdtZXNzYWdlJywgZGVzY3JpcHRvcik7XG5cdEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIFNxbGl0ZUVycm9yKTtcblx0dGhpcy5jb2RlID0gY29kZTtcbn1cbk9iamVjdC5zZXRQcm90b3R5cGVPZihTcWxpdGVFcnJvciwgRXJyb3IpO1xuT2JqZWN0LnNldFByb3RvdHlwZU9mKFNxbGl0ZUVycm9yLnByb3RvdHlwZSwgRXJyb3IucHJvdG90eXBlKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShTcWxpdGVFcnJvci5wcm90b3R5cGUsICduYW1lJywgZGVzY3JpcHRvcik7XG5tb2R1bGUuZXhwb3J0cyA9IFNxbGl0ZUVycm9yO1xuIl0sIm5hbWVzIjpbImRlc2NyaXB0b3IiLCJ2YWx1ZSIsIndyaXRhYmxlIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIlNxbGl0ZUVycm9yIiwibWVzc2FnZSIsImNvZGUiLCJUeXBlRXJyb3IiLCJFcnJvciIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNhcHR1cmVTdGFja1RyYWNlIiwic2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/sqlite-error.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/util.js":
/*!*********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/util.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nexports.getBooleanOption = (options, key)=>{\n    let value = false;\n    if (key in options && typeof (value = options[key]) !== \"boolean\") {\n        throw new TypeError(`Expected the \"${key}\" option to be a boolean`);\n    }\n    return value;\n};\nexports.cppdb = Symbol();\nexports.inspect = Symbol.for(\"nodejs.util.inspect.custom\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JldHRlci1zcWxpdGUzQDguNy4wL25vZGVfbW9kdWxlcy9iZXR0ZXItc3FsaXRlMy9saWIvdXRpbC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSx3QkFBd0IsR0FBRyxDQUFDRSxTQUFTQztJQUNwQyxJQUFJQyxRQUFRO0lBQ1osSUFBSUQsT0FBT0QsV0FBVyxPQUFRRSxDQUFBQSxRQUFRRixPQUFPLENBQUNDLElBQUksTUFBTSxXQUFXO1FBQ2xFLE1BQU0sSUFBSUUsVUFBVSxDQUFDLGNBQWMsRUFBRUYsSUFBSSx3QkFBd0IsQ0FBQztJQUNuRTtJQUNBLE9BQU9DO0FBQ1I7QUFFQUosYUFBYSxHQUFHTztBQUNoQlAsZUFBZSxHQUFHTyxPQUFPRSxHQUFHLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdG9rZW5zdHJlYW0vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9iZXR0ZXItc3FsaXRlM0A4LjcuMC9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL3V0aWwuanM/NzJmOCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuZ2V0Qm9vbGVhbk9wdGlvbiA9IChvcHRpb25zLCBrZXkpID0+IHtcblx0bGV0IHZhbHVlID0gZmFsc2U7XG5cdGlmIChrZXkgaW4gb3B0aW9ucyAmJiB0eXBlb2YgKHZhbHVlID0gb3B0aW9uc1trZXldKSAhPT0gJ2Jvb2xlYW4nKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgdGhlIFwiJHtrZXl9XCIgb3B0aW9uIHRvIGJlIGEgYm9vbGVhbmApO1xuXHR9XG5cdHJldHVybiB2YWx1ZTtcbn07XG5cbmV4cG9ydHMuY3BwZGIgPSBTeW1ib2woKTtcbmV4cG9ydHMuaW5zcGVjdCA9IFN5bWJvbC5mb3IoJ25vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tJyk7XG4iXSwibmFtZXMiOlsiZXhwb3J0cyIsImdldEJvb2xlYW5PcHRpb24iLCJvcHRpb25zIiwia2V5IiwidmFsdWUiLCJUeXBlRXJyb3IiLCJjcHBkYiIsIlN5bWJvbCIsImluc3BlY3QiLCJmb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/better-sqlite3@8.7.0/node_modules/better-sqlite3/lib/util.js\n");

/***/ })

};
;