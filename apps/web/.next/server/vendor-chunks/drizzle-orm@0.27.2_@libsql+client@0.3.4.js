"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/drizzle-orm@0.27.2_@libsql+client@0.3.4";
exports.ids = ["vendor-chunks/drizzle-orm@0.27.2_@libsql+client@0.3.4"];
exports.modules = {

/***/ "(rsc)/../../node_modules/.pnpm/drizzle-orm@0.27.2_@libsql+client@0.3.4/node_modules/drizzle-orm/alias-3e926a50.mjs":
/*!********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/drizzle-orm@0.27.2_@libsql+client@0.3.4/node_modules/drizzle-orm/alias-3e926a50.mjs ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $: () => (/* binding */ check),\n/* harmony export */   A: () => (/* binding */ mapColumnsInSQLToAlias),\n/* harmony export */   B: () => (/* binding */ orderByOperators),\n/* harmony export */   C: () => (/* binding */ Column),\n/* harmony export */   D: () => (/* binding */ normalizeRelation),\n/* harmony export */   E: () => (/* binding */ and),\n/* harmony export */   F: () => (/* binding */ or),\n/* harmony export */   G: () => (/* binding */ aliasedTable),\n/* harmony export */   H: () => (/* binding */ eq),\n/* harmony export */   I: () => (/* binding */ TypedQueryBuilder),\n/* harmony export */   J: () => (/* binding */ getTableLikeName),\n/* harmony export */   K: () => (/* binding */ applyMixins),\n/* harmony export */   L: () => (/* binding */ ColumnBuilder),\n/* harmony export */   M: () => (/* binding */ TableAliasProxyHandler),\n/* harmony export */   N: () => (/* binding */ PgColumnBuilder),\n/* harmony export */   O: () => (/* binding */ PgColumn),\n/* harmony export */   P: () => (/* binding */ PgDialect),\n/* harmony export */   Q: () => (/* binding */ QueryPromise),\n/* harmony export */   R: () => (/* binding */ Relation),\n/* harmony export */   S: () => (/* binding */ SQL),\n/* harmony export */   T: () => (/* binding */ Table),\n/* harmony export */   U: () => (/* binding */ pgTableWithSchema),\n/* harmony export */   V: () => (/* binding */ View),\n/* harmony export */   W: () => (/* binding */ WithSubquery),\n/* harmony export */   X: () => (/* binding */ pgViewWithSchema),\n/* harmony export */   Y: () => (/* binding */ pgMaterializedViewWithSchema),\n/* harmony export */   Z: () => (/* binding */ CheckBuilder),\n/* harmony export */   _: () => (/* binding */ Check),\n/* harmony export */   a: () => (/* binding */ extractTablesRelationalConfig),\n/* harmony export */   a$: () => (/* binding */ PgViewConfig),\n/* harmony export */   a0: () => (/* binding */ PgArrayBuilder),\n/* harmony export */   a1: () => (/* binding */ PgArray),\n/* harmony export */   a2: () => (/* binding */ PgDateBuilder),\n/* harmony export */   a3: () => (/* binding */ PgDate),\n/* harmony export */   a4: () => (/* binding */ PgDateStringBuilder),\n/* harmony export */   a5: () => (/* binding */ PgDateString),\n/* harmony export */   a6: () => (/* binding */ date),\n/* harmony export */   a7: () => (/* binding */ PgJsonBuilder),\n/* harmony export */   a8: () => (/* binding */ PgJson),\n/* harmony export */   a9: () => (/* binding */ json),\n/* harmony export */   aA: () => (/* binding */ primaryKey),\n/* harmony export */   aB: () => (/* binding */ PrimaryKeyBuilder),\n/* harmony export */   aC: () => (/* binding */ PrimaryKey),\n/* harmony export */   aD: () => (/* binding */ unique),\n/* harmony export */   aE: () => (/* binding */ uniqueKeyName),\n/* harmony export */   aF: () => (/* binding */ UniqueConstraintBuilder),\n/* harmony export */   aG: () => (/* binding */ UniqueOnConstraintBuilder),\n/* harmony export */   aH: () => (/* binding */ UniqueConstraint),\n/* harmony export */   aI: () => (/* binding */ PgSelectQueryBuilder),\n/* harmony export */   aJ: () => (/* binding */ PgSelect),\n/* harmony export */   aK: () => (/* binding */ InlineForeignKeys),\n/* harmony export */   aL: () => (/* binding */ PgTable),\n/* harmony export */   aM: () => (/* binding */ pgTable),\n/* harmony export */   aN: () => (/* binding */ pgTableCreator),\n/* harmony export */   aO: () => (/* binding */ getTableConfig),\n/* harmony export */   aP: () => (/* binding */ getViewConfig),\n/* harmony export */   aQ: () => (/* binding */ getMaterializedViewConfig),\n/* harmony export */   aR: () => (/* binding */ parsePgNestedArray),\n/* harmony export */   aS: () => (/* binding */ parsePgArray),\n/* harmony export */   aT: () => (/* binding */ makePgArray),\n/* harmony export */   aU: () => (/* binding */ DefaultViewBuilderCore),\n/* harmony export */   aV: () => (/* binding */ ViewBuilder),\n/* harmony export */   aW: () => (/* binding */ ManualViewBuilder),\n/* harmony export */   aX: () => (/* binding */ MaterializedViewBuilderCore),\n/* harmony export */   aY: () => (/* binding */ MaterializedViewBuilder),\n/* harmony export */   aZ: () => (/* binding */ ManualMaterializedViewBuilder),\n/* harmony export */   a_: () => (/* binding */ PgViewBase),\n/* harmony export */   aa: () => (/* binding */ PgJsonbBuilder),\n/* harmony export */   ab: () => (/* binding */ PgJsonb),\n/* harmony export */   ac: () => (/* binding */ jsonb),\n/* harmony export */   ad: () => (/* binding */ PgNumericBuilder),\n/* harmony export */   ae: () => (/* binding */ PgNumeric),\n/* harmony export */   af: () => (/* binding */ numeric),\n/* harmony export */   ag: () => (/* binding */ decimal),\n/* harmony export */   ah: () => (/* binding */ PgTimeBuilder),\n/* harmony export */   ai: () => (/* binding */ PgTime),\n/* harmony export */   aj: () => (/* binding */ time),\n/* harmony export */   ak: () => (/* binding */ PgTimestampBuilder),\n/* harmony export */   al: () => (/* binding */ PgTimestamp),\n/* harmony export */   am: () => (/* binding */ PgTimestampStringBuilder),\n/* harmony export */   an: () => (/* binding */ PgTimestampString),\n/* harmony export */   ao: () => (/* binding */ timestamp),\n/* harmony export */   ap: () => (/* binding */ PgUUIDBuilder),\n/* harmony export */   aq: () => (/* binding */ PgUUID),\n/* harmony export */   ar: () => (/* binding */ uuid),\n/* harmony export */   as: () => (/* binding */ ForeignKeyBuilder),\n/* harmony export */   at: () => (/* binding */ ForeignKey),\n/* harmony export */   au: () => (/* binding */ foreignKey),\n/* harmony export */   av: () => (/* binding */ IndexBuilderOn),\n/* harmony export */   aw: () => (/* binding */ IndexBuilder),\n/* harmony export */   ax: () => (/* binding */ Index),\n/* harmony export */   ay: () => (/* binding */ index),\n/* harmony export */   az: () => (/* binding */ uniqueIndex),\n/* harmony export */   b: () => (/* binding */ Param),\n/* harmony export */   b0: () => (/* binding */ PgView),\n/* harmony export */   b1: () => (/* binding */ PgMaterializedViewConfig),\n/* harmony export */   b2: () => (/* binding */ PgMaterializedView),\n/* harmony export */   b3: () => (/* binding */ pgView),\n/* harmony export */   b4: () => (/* binding */ pgMaterializedView),\n/* harmony export */   b5: () => (/* binding */ ColumnAliasProxyHandler),\n/* harmony export */   b6: () => (/* binding */ RelationTableAliasProxyHandler),\n/* harmony export */   b7: () => (/* binding */ hasOwnEntityKind),\n/* harmony export */   b8: () => (/* binding */ bindIfParam),\n/* harmony export */   b9: () => (/* binding */ ne),\n/* harmony export */   bA: () => (/* binding */ isSQLWrapper),\n/* harmony export */   bB: () => (/* binding */ StringChunk),\n/* harmony export */   bC: () => (/* binding */ Name),\n/* harmony export */   bD: () => (/* binding */ isDriverValueEncoder),\n/* harmony export */   bE: () => (/* binding */ noopDecoder),\n/* harmony export */   bF: () => (/* binding */ noopEncoder),\n/* harmony export */   bG: () => (/* binding */ noopMapper),\n/* harmony export */   bH: () => (/* binding */ Placeholder),\n/* harmony export */   bI: () => (/* binding */ placeholder),\n/* harmony export */   bJ: () => (/* binding */ TableName),\n/* harmony export */   bK: () => (/* binding */ Schema),\n/* harmony export */   bL: () => (/* binding */ Columns),\n/* harmony export */   bM: () => (/* binding */ OriginalName),\n/* harmony export */   bN: () => (/* binding */ BaseName),\n/* harmony export */   bO: () => (/* binding */ IsAlias),\n/* harmony export */   bP: () => (/* binding */ ExtraConfigBuilder),\n/* harmony export */   bQ: () => (/* binding */ isTable),\n/* harmony export */   bR: () => (/* binding */ iife),\n/* harmony export */   ba: () => (/* binding */ not),\n/* harmony export */   bb: () => (/* binding */ gt),\n/* harmony export */   bc: () => (/* binding */ gte),\n/* harmony export */   bd: () => (/* binding */ lt),\n/* harmony export */   be: () => (/* binding */ lte),\n/* harmony export */   bf: () => (/* binding */ inArray),\n/* harmony export */   bg: () => (/* binding */ notInArray),\n/* harmony export */   bh: () => (/* binding */ isNull),\n/* harmony export */   bi: () => (/* binding */ isNotNull),\n/* harmony export */   bj: () => (/* binding */ exists),\n/* harmony export */   bk: () => (/* binding */ notExists),\n/* harmony export */   bl: () => (/* binding */ between),\n/* harmony export */   bm: () => (/* binding */ notBetween),\n/* harmony export */   bn: () => (/* binding */ like),\n/* harmony export */   bo: () => (/* binding */ notLike),\n/* harmony export */   bp: () => (/* binding */ ilike),\n/* harmony export */   bq: () => (/* binding */ notIlike),\n/* harmony export */   br: () => (/* binding */ asc),\n/* harmony export */   bs: () => (/* binding */ desc),\n/* harmony export */   bt: () => (/* binding */ Relations),\n/* harmony export */   bu: () => (/* binding */ One),\n/* harmony export */   bv: () => (/* binding */ Many),\n/* harmony export */   bw: () => (/* binding */ relations),\n/* harmony export */   bx: () => (/* binding */ createOne),\n/* harmony export */   by: () => (/* binding */ createMany),\n/* harmony export */   bz: () => (/* binding */ FakePrimitiveParam),\n/* harmony export */   c: () => (/* binding */ createTableRelationsHelpers),\n/* harmony export */   d: () => (/* binding */ mapUpdateSet),\n/* harmony export */   e: () => (/* binding */ entityKind),\n/* harmony export */   f: () => (/* binding */ fillPlaceholders),\n/* harmony export */   g: () => (/* binding */ mapRelationalRow),\n/* harmony export */   h: () => (/* binding */ QueryBuilder),\n/* harmony export */   i: () => (/* binding */ is),\n/* harmony export */   j: () => (/* binding */ SelectionProxyHandler),\n/* harmony export */   k: () => (/* binding */ PgSelectBuilder),\n/* harmony export */   l: () => (/* binding */ getTableColumns),\n/* harmony export */   m: () => (/* binding */ mapResultRow),\n/* harmony export */   n: () => (/* binding */ name),\n/* harmony export */   o: () => (/* binding */ orderSelectedFields),\n/* harmony export */   p: () => (/* binding */ getTableName),\n/* harmony export */   q: () => (/* binding */ Subquery),\n/* harmony export */   r: () => (/* binding */ SubqueryConfig),\n/* harmony export */   s: () => (/* binding */ sql),\n/* harmony export */   t: () => (/* binding */ tracer),\n/* harmony export */   u: () => (/* binding */ ViewBaseConfig),\n/* harmony export */   v: () => (/* binding */ param),\n/* harmony export */   w: () => (/* binding */ aliasedTableColumn),\n/* harmony export */   x: () => (/* binding */ aliasedRelation),\n/* harmony export */   y: () => (/* binding */ mapColumnsInAliasedSQLToAlias),\n/* harmony export */   z: () => (/* binding */ operators)\n/* harmony export */ });\nconst entityKind = Symbol.for(\"drizzle:entityKind\");\nconst hasOwnEntityKind = Symbol.for(\"drizzle:hasOwnEntityKind\");\nfunction is(value, type) {\n    if (!value || typeof value !== \"object\") {\n        return false;\n    }\n    if (value instanceof type) {\n        return true;\n    }\n    if (!Object.prototype.hasOwnProperty.call(type, entityKind)) {\n        throw new Error(`Class \"${type.name ?? \"<unknown>\"}\" doesn't look like a Drizzle entity. If this is incorrect and the class is provided by Drizzle, please report this as a bug.`);\n    }\n    let cls = value.constructor;\n    if (cls) {\n        // Traverse the prototype chain to find the entityKind\n        while(cls){\n            if (entityKind in cls && cls[entityKind] === type[entityKind]) {\n                return true;\n            }\n            cls = Object.getPrototypeOf(cls);\n        }\n    }\n    return false;\n}\n/*\n    `Column` only accepts a full `ColumnConfig` as its generic.\n    To infer parts of the config, use `AnyColumn` that accepts a partial config.\n    See `GetColumnData` for example usage of inferring.\n*/ class Column {\n    static{\n        this[entityKind] = \"Column\";\n    }\n    constructor(table, config){\n        this.table = table;\n        this.config = config;\n        this.name = config.name;\n        this.notNull = config.notNull;\n        this.default = config.default;\n        this.hasDefault = config.hasDefault;\n        this.primary = config.primaryKey;\n        this.isUnique = config.isUnique;\n        this.uniqueName = config.uniqueName;\n        this.uniqueType = config.uniqueType;\n    }\n    mapFromDriverValue(value) {\n        return value;\n    }\n    mapToDriverValue(value) {\n        return value;\n    }\n}\n/** @internal */ const TableName = Symbol.for(\"drizzle:Name\");\n/** @internal */ const Schema = Symbol.for(\"drizzle:Schema\");\n/** @internal */ const Columns = Symbol.for(\"drizzle:Columns\");\n/** @internal */ const OriginalName = Symbol.for(\"drizzle:OriginalName\");\n/** @internal */ const BaseName = Symbol.for(\"drizzle:BaseName\");\n/** @internal */ const IsAlias = Symbol.for(\"drizzle:IsAlias\");\n/** @internal */ const ExtraConfigBuilder = Symbol.for(\"drizzle:ExtraConfigBuilder\");\nconst IsDrizzleTable = Symbol.for(\"drizzle:IsDrizzleTable\");\nclass Table {\n    static{\n        this[entityKind] = \"Table\";\n    }\n    static{\n        /** @internal */ this.Symbol = {\n            Name: TableName,\n            Schema: Schema,\n            OriginalName: OriginalName,\n            Columns: Columns,\n            BaseName: BaseName,\n            IsAlias: IsAlias,\n            ExtraConfigBuilder: ExtraConfigBuilder\n        };\n    }\n    constructor(name, schema, baseName){\n        /** @internal */ this[IsAlias] = false;\n        /** @internal */ this[ExtraConfigBuilder] = undefined;\n        this[IsDrizzleTable] = true;\n        this[TableName] = this[OriginalName] = name;\n        this[Schema] = schema;\n        this[BaseName] = baseName;\n    }\n}\nfunction isTable(table) {\n    return typeof table === \"object\" && table !== null && IsDrizzleTable in table;\n}\nfunction getTableName(table) {\n    return table[TableName];\n}\nclass CheckBuilder {\n    static{\n        this[entityKind] = \"PgCheckBuilder\";\n    }\n    constructor(name, value){\n        this.name = name;\n        this.value = value;\n    }\n    /** @internal */ build(table) {\n        return new Check(table, this);\n    }\n}\nclass Check {\n    static{\n        this[entityKind] = \"PgCheck\";\n    }\n    constructor(table, builder){\n        this.table = table;\n        this.name = builder.name;\n        this.value = builder.value;\n    }\n}\nfunction check(name, value) {\n    return new CheckBuilder(name, value);\n}\n/** @internal */ const InlineForeignKeys = Symbol.for(\"drizzle:PgInlineForeignKeys\");\nlet prop;\nclass PgTable extends Table {\n    static{\n        prop = Table.Symbol.ExtraConfigBuilder;\n    }\n    static{\n        this[entityKind] = \"PgTable\";\n    }\n    static{\n        /** @internal */ this.Symbol = Object.assign({}, Table.Symbol, {\n            InlineForeignKeys: InlineForeignKeys\n        });\n    }\n    constructor(...args){\n        super(...args);\n        /**@internal */ this[InlineForeignKeys] = [];\n        /** @internal */ this[prop] = undefined;\n    }\n}\n/** @internal */ function pgTableWithSchema(name, columns, extraConfig, schema, baseName = name) {\n    const rawTable = new PgTable(name, schema, baseName);\n    const builtColumns = Object.fromEntries(Object.entries(columns).map(([name, colBuilder])=>{\n        const column = colBuilder.build(rawTable);\n        rawTable[InlineForeignKeys].push(...colBuilder.buildForeignKeys(column, rawTable));\n        return [\n            name,\n            column\n        ];\n    }));\n    const table = Object.assign(rawTable, builtColumns);\n    table[Table.Symbol.Columns] = builtColumns;\n    if (extraConfig) {\n        table[PgTable.Symbol.ExtraConfigBuilder] = extraConfig;\n    }\n    return table;\n}\nconst pgTable = (name, columns, extraConfig)=>{\n    return pgTableWithSchema(name, columns, extraConfig, undefined);\n};\nfunction pgTableCreator(customizeTableName) {\n    return (name, columns, extraConfig)=>{\n        return pgTableWithSchema(customizeTableName(name), columns, extraConfig, undefined, name);\n    };\n}\nconst ViewBaseConfig = Symbol.for(\"drizzle:ViewBaseConfig\");\nclass View {\n    static{\n        this[entityKind] = \"View\";\n    }\n    constructor({ name, schema, selectedFields, query }){\n        this[ViewBaseConfig] = {\n            name,\n            originalName: name,\n            schema,\n            selectedFields,\n            query: query,\n            isExisting: !query,\n            isAlias: false\n        };\n    }\n}\nclass ForeignKeyBuilder {\n    static{\n        this[entityKind] = \"PgForeignKeyBuilder\";\n    }\n    constructor(config, actions){\n        /** @internal */ this._onUpdate = \"no action\";\n        /** @internal */ this._onDelete = \"no action\";\n        this.reference = ()=>{\n            const { columns, foreignColumns } = config();\n            return {\n                columns,\n                foreignTable: foreignColumns[0].table,\n                foreignColumns\n            };\n        };\n        if (actions) {\n            this._onUpdate = actions.onUpdate;\n            this._onDelete = actions.onDelete;\n        }\n    }\n    onUpdate(action) {\n        this._onUpdate = action === undefined ? \"no action\" : action;\n        return this;\n    }\n    onDelete(action) {\n        this._onDelete = action === undefined ? \"no action\" : action;\n        return this;\n    }\n    /** @internal */ build(table) {\n        return new ForeignKey(table, this);\n    }\n}\nclass ForeignKey {\n    static{\n        this[entityKind] = \"PgForeignKey\";\n    }\n    constructor(table, builder){\n        this.table = table;\n        this.reference = builder.reference;\n        this.onUpdate = builder._onUpdate;\n        this.onDelete = builder._onDelete;\n    }\n    getName() {\n        const { columns, foreignColumns } = this.reference();\n        const columnNames = columns.map((column)=>column.name);\n        const foreignColumnNames = foreignColumns.map((column)=>column.name);\n        const chunks = [\n            this.table[PgTable.Symbol.Name],\n            ...columnNames,\n            foreignColumns[0].table[PgTable.Symbol.Name],\n            ...foreignColumnNames\n        ];\n        return `${chunks.join(\"_\")}_fk`;\n    }\n}\nfunction foreignKey(config) {\n    function mappedConfig() {\n        const { columns, foreignColumns } = config;\n        return {\n            columns,\n            foreignColumns\n        };\n    }\n    return new ForeignKeyBuilder(mappedConfig);\n}\nclass IndexBuilderOn {\n    static{\n        this[entityKind] = \"PgIndexBuilderOn\";\n    }\n    constructor(unique, name){\n        this.unique = unique;\n        this.name = name;\n    }\n    on(...columns) {\n        return new IndexBuilder(columns, this.unique, false, this.name);\n    }\n    onOnly(...columns) {\n        return new IndexBuilder(columns, this.unique, true, this.name);\n    }\n}\nclass IndexBuilder {\n    static{\n        this[entityKind] = \"PgIndexBuilder\";\n    }\n    constructor(columns, unique, only, name){\n        this.config = {\n            name,\n            columns,\n            unique,\n            only\n        };\n    }\n    concurrently() {\n        this.config.concurrently = true;\n        return this;\n    }\n    using(method) {\n        this.config.using = method;\n        return this;\n    }\n    asc() {\n        this.config.order = \"asc\";\n        return this;\n    }\n    desc() {\n        this.config.order = \"desc\";\n        return this;\n    }\n    nullsFirst() {\n        this.config.nulls = \"first\";\n        return this;\n    }\n    nullsLast() {\n        this.config.nulls = \"last\";\n        return this;\n    }\n    where(condition) {\n        this.config.where = condition;\n        return this;\n    }\n    /** @internal */ build(table) {\n        return new Index(this.config, table);\n    }\n}\nclass Index {\n    static{\n        this[entityKind] = \"PgIndex\";\n    }\n    constructor(config, table){\n        this.config = {\n            ...config,\n            table\n        };\n    }\n}\nfunction index(name) {\n    return new IndexBuilderOn(false, name);\n}\nfunction uniqueIndex(name) {\n    return new IndexBuilderOn(true, name);\n}\nfunction primaryKey(...columns) {\n    return new PrimaryKeyBuilder(columns);\n}\nclass PrimaryKeyBuilder {\n    static{\n        this[entityKind] = \"PgPrimaryKeyBuilder\";\n    }\n    constructor(columns){\n        this.columns = columns;\n    }\n    /** @internal */ build(table) {\n        return new PrimaryKey(table, this.columns);\n    }\n}\nclass PrimaryKey {\n    static{\n        this[entityKind] = \"PgPrimaryKey\";\n    }\n    constructor(table, columns){\n        this.table = table;\n        this.columns = columns;\n    }\n    getName() {\n        return `${this.table[PgTable.Symbol.Name]}_${this.columns.map((column)=>column.name).join(\"_\")}_pk`;\n    }\n}\nfunction unique(name) {\n    return new UniqueOnConstraintBuilder(name);\n}\nfunction uniqueKeyName(table, columns) {\n    return `${table[PgTable.Symbol.Name]}_${columns.join(\"_\")}_unique`;\n}\nclass UniqueConstraintBuilder {\n    static{\n        this[entityKind] = \"PgUniqueConstraintBuilder\";\n    }\n    constructor(columns, name){\n        /** @internal */ this.nullsNotDistinctConfig = false;\n        this.name = name;\n        this.columns = columns;\n    }\n    nullsNotDistinct() {\n        this.nullsNotDistinctConfig = true;\n        return this;\n    }\n    /** @internal */ build(table) {\n        return new UniqueConstraint(table, this.columns, this.nullsNotDistinctConfig, this.name);\n    }\n}\nclass UniqueOnConstraintBuilder {\n    static{\n        this[entityKind] = \"PgUniqueOnConstraintBuilder\";\n    }\n    constructor(name){\n        this.name = name;\n    }\n    on(...columns) {\n        return new UniqueConstraintBuilder(columns, this.name);\n    }\n}\nclass UniqueConstraint {\n    static{\n        this[entityKind] = \"PgUniqueConstraint\";\n    }\n    constructor(table, columns, nullsNotDistinct, name){\n        this.nullsNotDistinct = false;\n        this.table = table;\n        this.columns = columns;\n        this.name = name ?? uniqueKeyName(this.table, this.columns.map((column)=>column.name));\n        this.nullsNotDistinct = nullsNotDistinct;\n    }\n    getName() {\n        return this.name;\n    }\n}\nconst SubqueryConfig = Symbol.for(\"drizzle:SubqueryConfig\");\nclass Subquery {\n    static{\n        this[entityKind] = \"Subquery\";\n    }\n    constructor(sql, selection, alias, isWith = false){\n        this[SubqueryConfig] = {\n            sql,\n            selection,\n            alias,\n            isWith\n        };\n    }\n}\nclass WithSubquery extends Subquery {\n    static{\n        this[entityKind] = \"WithSubquery\";\n    }\n}\nclass SelectionProxyHandler {\n    static{\n        this[entityKind] = \"SelectionProxyHandler\";\n    }\n    constructor(config){\n        this.config = {\n            ...config\n        };\n    }\n    get(subquery, prop) {\n        if (prop === SubqueryConfig) {\n            return {\n                ...subquery[SubqueryConfig],\n                selection: new Proxy(subquery[SubqueryConfig].selection, this)\n            };\n        }\n        if (prop === ViewBaseConfig) {\n            return {\n                ...subquery[ViewBaseConfig],\n                selectedFields: new Proxy(subquery[ViewBaseConfig].selectedFields, this)\n            };\n        }\n        if (typeof prop === \"symbol\") {\n            return subquery[prop];\n        }\n        const columns = is(subquery, Subquery) ? subquery[SubqueryConfig].selection : is(subquery, View) ? subquery[ViewBaseConfig].selectedFields : subquery;\n        const value = columns[prop];\n        if (is(value, SQL.Aliased)) {\n            // Never return the underlying SQL expression for a field previously selected in a subquery\n            if (this.config.sqlAliasedBehavior === \"sql\" && !value.isSelectionField) {\n                return value.sql;\n            }\n            const newValue = value.clone();\n            newValue.isSelectionField = true;\n            return newValue;\n        }\n        if (is(value, SQL)) {\n            if (this.config.sqlBehavior === \"sql\") {\n                return value;\n            }\n            throw new Error(`You tried to reference \"${prop}\" field from a subquery, which is a raw SQL field, but it doesn't have an alias declared. Please add an alias to the field using \".as('alias')\" method.`);\n        }\n        if (is(value, Column)) {\n            if (this.config.alias) {\n                return new Proxy(value, new ColumnAliasProxyHandler(new Proxy(value.table, new TableAliasProxyHandler(this.config.alias, this.config.replaceOriginalName ?? false))));\n            }\n            return value;\n        }\n        if (typeof value !== \"object\" || value === null) {\n            return value;\n        }\n        return new Proxy(value, new SelectionProxyHandler(this.config));\n    }\n}\n/** @internal */ function mapResultRow(columns, row, joinsNotNullableMap) {\n    // Key -> nested object key, value -> table name if all fields in the nested object are from the same table, false otherwise\n    const nullifyMap = {};\n    const result = columns.reduce((result, { path, field }, columnIndex)=>{\n        let decoder;\n        if (is(field, Column)) {\n            decoder = field;\n        } else if (is(field, SQL)) {\n            decoder = field.decoder;\n        } else {\n            decoder = field.sql.decoder;\n        }\n        let node = result;\n        for (const [pathChunkIndex, pathChunk] of path.entries()){\n            if (pathChunkIndex < path.length - 1) {\n                if (!(pathChunk in node)) {\n                    node[pathChunk] = {};\n                }\n                node = node[pathChunk];\n            } else {\n                const rawValue = row[columnIndex];\n                const value = node[pathChunk] = rawValue === null ? null : decoder.mapFromDriverValue(rawValue);\n                if (joinsNotNullableMap && is(field, Column) && path.length === 2) {\n                    const objectName = path[0];\n                    if (!(objectName in nullifyMap)) {\n                        nullifyMap[objectName] = value === null ? getTableName(field.table) : false;\n                    } else if (typeof nullifyMap[objectName] === \"string\" && nullifyMap[objectName] !== getTableName(field.table)) {\n                        nullifyMap[objectName] = false;\n                    }\n                }\n            }\n        }\n        return result;\n    }, {});\n    // Nullify all nested objects from nullifyMap that are nullable\n    if (joinsNotNullableMap && Object.keys(nullifyMap).length > 0) {\n        for (const [objectName, tableName] of Object.entries(nullifyMap)){\n            if (typeof tableName === \"string\" && !joinsNotNullableMap[tableName]) {\n                result[objectName] = null;\n            }\n        }\n    }\n    return result;\n}\n/** @internal */ function orderSelectedFields(fields, pathPrefix) {\n    return Object.entries(fields).reduce((result, [name, field])=>{\n        if (typeof name !== \"string\") {\n            return result;\n        }\n        const newPath = pathPrefix ? [\n            ...pathPrefix,\n            name\n        ] : [\n            name\n        ];\n        if (is(field, Column) || is(field, SQL) || is(field, SQL.Aliased)) {\n            result.push({\n                path: newPath,\n                field\n            });\n        } else if (is(field, Table)) {\n            result.push(...orderSelectedFields(field[Table.Symbol.Columns], newPath));\n        } else {\n            result.push(...orderSelectedFields(field, newPath));\n        }\n        return result;\n    }, []);\n}\n/** @internal */ function mapUpdateSet(table, values) {\n    const entries = Object.entries(values).filter(([, value])=>value !== undefined).map(([key, value])=>{\n        // eslint-disable-next-line unicorn/prefer-ternary\n        if (is(value, SQL)) {\n            return [\n                key,\n                value\n            ];\n        } else {\n            return [\n                key,\n                new Param(value, table[Table.Symbol.Columns][key])\n            ];\n        }\n    });\n    if (entries.length === 0) {\n        throw new Error(\"No values to set\");\n    }\n    return Object.fromEntries(entries);\n}\n/** @internal */ function applyMixins(baseClass, extendedClasses) {\n    for (const extendedClass of extendedClasses){\n        for (const name of Object.getOwnPropertyNames(extendedClass.prototype)){\n            Object.defineProperty(baseClass.prototype, name, Object.getOwnPropertyDescriptor(extendedClass.prototype, name) || Object.create(null));\n        }\n    }\n}\nfunction getTableColumns(table) {\n    return table[Table.Symbol.Columns];\n}\n/** @internal */ function getTableLikeName(table) {\n    return is(table, Subquery) ? table[SubqueryConfig].alias : is(table, View) ? table[ViewBaseConfig].name : is(table, SQL) ? undefined : table[Table.Symbol.IsAlias] ? table[Table.Symbol.Name] : table[Table.Symbol.BaseName];\n}\nfunction iife(fn, ...args) {\n    return fn(...args);\n}\nlet prop1;\nclass QueryPromise {\n    static{\n        prop1 = Symbol.toStringTag;\n    }\n    static{\n        this[entityKind] = \"QueryPromise\";\n    }\n    catch(onRejected) {\n        return this.then(undefined, onRejected);\n    }\n    finally(onFinally) {\n        return this.then((value)=>{\n            onFinally?.();\n            return value;\n        }, (reason)=>{\n            onFinally?.();\n            throw reason;\n        });\n    }\n    then(onFulfilled, onRejected) {\n        return this.execute().then(onFulfilled, onRejected);\n    }\n    constructor(){\n        this[prop1] = \"QueryPromise\";\n    }\n}\n/** @internal */ const tracer = {\n    startActiveSpan (name, fn) {\n        {\n            return fn();\n        }\n    }\n};\nclass PgDialect {\n    static{\n        this[entityKind] = \"PgDialect\";\n    }\n    async migrate(migrations, session) {\n        const migrationTableCreate = sql`\n\t\t\tCREATE TABLE IF NOT EXISTS \"drizzle\".\"__drizzle_migrations\" (\n\t\t\t\tid SERIAL PRIMARY KEY,\n\t\t\t\thash text NOT NULL,\n\t\t\t\tcreated_at bigint\n\t\t\t)\n\t\t`;\n        await session.execute(sql`CREATE SCHEMA IF NOT EXISTS \"drizzle\"`);\n        await session.execute(migrationTableCreate);\n        const dbMigrations = await session.all(sql`select id, hash, created_at from \"drizzle\".\"__drizzle_migrations\" order by created_at desc limit 1`);\n        const lastDbMigration = dbMigrations[0];\n        await session.transaction(async (tx)=>{\n            for await (const migration of migrations){\n                if (!lastDbMigration || Number(lastDbMigration.created_at) < migration.folderMillis) {\n                    for (const stmt of migration.sql){\n                        await tx.execute(sql.raw(stmt));\n                    }\n                    await tx.execute(sql`insert into \"drizzle\".\"__drizzle_migrations\" (\"hash\", \"created_at\") values(${migration.hash}, ${migration.folderMillis})`);\n                }\n            }\n        });\n    }\n    escapeName(name) {\n        return `\"${name}\"`;\n    }\n    escapeParam(num) {\n        return `$${num + 1}`;\n    }\n    escapeString(str) {\n        return `'${str.replace(/'/g, \"''\")}'`;\n    }\n    buildDeleteQuery({ table, where, returning }) {\n        const returningSql = returning ? sql` returning ${this.buildSelection(returning, {\n            isSingleTable: true\n        })}` : undefined;\n        const whereSql = where ? sql` where ${where}` : undefined;\n        return sql`delete from ${table}${whereSql}${returningSql}`;\n    }\n    buildUpdateSet(table, set) {\n        const setEntries = Object.entries(set);\n        const setSize = setEntries.length;\n        return sql.fromList(setEntries.flatMap(([colName, value], i)=>{\n            const col = table[Table.Symbol.Columns][colName];\n            const res = sql`${name(col.name)} = ${value}`;\n            if (i < setSize - 1) {\n                return [\n                    res,\n                    sql.raw(\", \")\n                ];\n            }\n            return [\n                res\n            ];\n        }));\n    }\n    buildUpdateQuery({ table, set, where, returning }) {\n        const setSql = this.buildUpdateSet(table, set);\n        const returningSql = returning ? sql` returning ${this.buildSelection(returning, {\n            isSingleTable: true\n        })}` : undefined;\n        const whereSql = where ? sql` where ${where}` : undefined;\n        return sql`update ${table} set ${setSql}${whereSql}${returningSql}`;\n    }\n    /**\n     * Builds selection SQL with provided fields/expressions\n     *\n     * Examples:\n     *\n     * `select <selection> from`\n     *\n     * `insert ... returning <selection>`\n     *\n     * If `isSingleTable` is true, then columns won't be prefixed with table name\n     */ buildSelection(fields, { isSingleTable = false } = {}) {\n        const columnsLen = fields.length;\n        const chunks = fields.flatMap(({ field }, i)=>{\n            const chunk = [];\n            if (is(field, SQL.Aliased) && field.isSelectionField) {\n                chunk.push(sql.identifier(field.fieldAlias));\n            } else if (is(field, SQL.Aliased) || is(field, SQL)) {\n                const query = is(field, SQL.Aliased) ? field.sql : field;\n                if (isSingleTable) {\n                    chunk.push(new SQL(query.queryChunks.map((c)=>{\n                        if (is(c, PgColumn)) {\n                            return name(c.name);\n                        }\n                        return c;\n                    })));\n                } else {\n                    chunk.push(query);\n                }\n                if (is(field, SQL.Aliased)) {\n                    chunk.push(sql` as ${sql.identifier(field.fieldAlias)}`);\n                }\n            } else if (is(field, Column)) {\n                if (isSingleTable) {\n                    chunk.push(sql.identifier(field.name));\n                } else {\n                    chunk.push(field);\n                }\n            }\n            if (i < columnsLen - 1) {\n                chunk.push(sql`, `);\n            }\n            return chunk;\n        });\n        return sql.fromList(chunks);\n    }\n    buildSelectQuery({ withList, fields, fieldsFlat, where, having, table, joins, orderBy, groupBy, limit, offset, lockingClauses, distinct }) {\n        const fieldsList = fieldsFlat ?? orderSelectedFields(fields);\n        for (const f of fieldsList){\n            if (is(f.field, Column) && getTableName(f.field.table) !== (is(table, Subquery) ? table[SubqueryConfig].alias : is(table, PgViewBase) ? table[ViewBaseConfig].name : is(table, SQL) ? undefined : getTableName(table)) && !((table)=>joins.some(({ alias })=>alias === (table[Table.Symbol.IsAlias] ? getTableName(table) : table[Table.Symbol.BaseName])))(f.field.table)) {\n                const tableName = getTableName(f.field.table);\n                throw new Error(`Your \"${f.path.join(\"->\")}\" field references a column \"${tableName}\".\"${f.field.name}\", but the table \"${tableName}\" is not part of the query! Did you forget to join it?`);\n            }\n        }\n        const isSingleTable = joins.length === 0;\n        let withSql;\n        if (withList?.length) {\n            const withSqlChunks = [\n                sql`with `\n            ];\n            for (const [i, w] of withList.entries()){\n                withSqlChunks.push(sql`${name(w[SubqueryConfig].alias)} as (${w[SubqueryConfig].sql})`);\n                if (i < withList.length - 1) {\n                    withSqlChunks.push(sql`, `);\n                }\n            }\n            withSqlChunks.push(sql` `);\n            withSql = sql.fromList(withSqlChunks);\n        }\n        let distinctSql;\n        if (distinct) {\n            distinctSql = distinct === true ? sql` distinct` : sql` distinct on (${sql.join(distinct.on, \", \")})`;\n        }\n        const selection = this.buildSelection(fieldsList, {\n            isSingleTable\n        });\n        const tableSql = (()=>{\n            if (is(table, Table) && table[Table.Symbol.OriginalName] !== table[Table.Symbol.Name]) {\n                let fullName = sql`${sql.identifier(table[Table.Symbol.OriginalName])}`;\n                if (table[Table.Symbol.Schema]) {\n                    fullName = sql`${sql.identifier(table[Table.Symbol.Schema])}.${fullName}`;\n                }\n                return sql`${fullName} ${sql.identifier(table[Table.Symbol.Name])}`;\n            }\n            return table;\n        })();\n        const joinsArray = [];\n        for (const [index, joinMeta] of joins.entries()){\n            if (index === 0) {\n                joinsArray.push(sql` `);\n            }\n            const table = joinMeta.table;\n            if (is(table, PgTable)) {\n                const tableName = table[PgTable.Symbol.Name];\n                const tableSchema = table[PgTable.Symbol.Schema];\n                const origTableName = table[PgTable.Symbol.OriginalName];\n                const alias = tableName === origTableName ? undefined : joinMeta.alias;\n                joinsArray.push(sql`${sql.raw(joinMeta.joinType)} join ${tableSchema ? sql`${name(tableSchema)}.` : undefined}${sql.identifier(origTableName)}${alias && sql` ${name(alias)}`} on ${joinMeta.on}`);\n            } else {\n                joinsArray.push(sql`${sql.raw(joinMeta.joinType)} join ${table} on ${joinMeta.on}`);\n            }\n            if (index < joins.length - 1) {\n                joinsArray.push(sql` `);\n            }\n        }\n        const joinsSql = sql.fromList(joinsArray);\n        const whereSql = where ? sql` where ${where}` : undefined;\n        const havingSql = having ? sql` having ${having}` : undefined;\n        const orderByList = [];\n        for (const [index, orderByValue] of orderBy.entries()){\n            orderByList.push(orderByValue);\n            if (index < orderBy.length - 1) {\n                orderByList.push(sql`, `);\n            }\n        }\n        const orderBySql = orderByList.length > 0 ? sql` order by ${sql.fromList(orderByList)}` : undefined;\n        const groupByList = [];\n        for (const [index, groupByValue] of groupBy.entries()){\n            groupByList.push(groupByValue);\n            if (index < groupBy.length - 1) {\n                groupByList.push(sql`, `);\n            }\n        }\n        const groupBySql = groupByList.length > 0 ? sql` group by ${sql.fromList(groupByList)}` : undefined;\n        const limitSql = limit ? sql` limit ${limit}` : undefined;\n        const offsetSql = offset ? sql` offset ${offset}` : undefined;\n        const lockingClausesSql = sql.empty();\n        for (const { strength, config } of lockingClauses){\n            const clauseSql = sql` for ${sql.raw(strength)}`;\n            if (config.of) {\n                clauseSql.append(sql` of ${config.of}`);\n            }\n            if (config.noWait) {\n                clauseSql.append(sql` no wait`);\n            } else if (config.skipLocked) {\n                clauseSql.append(sql` skip locked`);\n            }\n            lockingClausesSql.append(clauseSql);\n        }\n        return sql`${withSql}select${distinctSql} ${selection} from ${tableSql}${joinsSql}${whereSql}${groupBySql}${havingSql}${orderBySql}${limitSql}${offsetSql}${lockingClausesSql}`;\n    }\n    buildInsertQuery({ table, values, onConflict, returning }) {\n        const isSingleValue = values.length === 1;\n        const valuesSqlList = [];\n        const columns = table[Table.Symbol.Columns];\n        const colEntries = isSingleValue ? Object.keys(values[0]).map((fieldName)=>[\n                fieldName,\n                columns[fieldName]\n            ]) : Object.entries(columns);\n        const insertOrder = colEntries.map(([, column])=>name(column.name));\n        for (const [valueIndex, value] of values.entries()){\n            const valueList = [];\n            for (const [fieldName] of colEntries){\n                const colValue = value[fieldName];\n                if (colValue === undefined || is(colValue, Param) && colValue.value === undefined) {\n                    valueList.push(sql`default`);\n                } else {\n                    valueList.push(colValue);\n                }\n            }\n            valuesSqlList.push(valueList);\n            if (valueIndex < values.length - 1) {\n                valuesSqlList.push(sql`, `);\n            }\n        }\n        const valuesSql = sql.fromList(valuesSqlList);\n        const returningSql = returning ? sql` returning ${this.buildSelection(returning, {\n            isSingleTable: true\n        })}` : undefined;\n        const onConflictSql = onConflict ? sql` on conflict ${onConflict}` : undefined;\n        return sql`insert into ${table} ${insertOrder} values ${valuesSql}${onConflictSql}${returningSql}`;\n    }\n    buildRefreshMaterializedViewQuery({ view, concurrently, withNoData }) {\n        const concurrentlySql = concurrently ? sql` concurrently` : undefined;\n        const withNoDataSql = withNoData ? sql` with no data` : undefined;\n        return sql`refresh materialized view${concurrentlySql} ${view}${withNoDataSql}`;\n    }\n    prepareTyping(encoder) {\n        if (is(encoder, PgJsonb) || is(encoder, PgJson)) {\n            return \"json\";\n        } else if (is(encoder, PgNumeric)) {\n            return \"decimal\";\n        } else if (is(encoder, PgTime)) {\n            return \"time\";\n        } else if (is(encoder, PgTimestamp)) {\n            return \"timestamp\";\n        } else if (is(encoder, PgDate)) {\n            return \"date\";\n        } else if (is(encoder, PgUUID)) {\n            return \"uuid\";\n        } else {\n            return \"none\";\n        }\n    }\n    sqlToQuery(sql) {\n        return sql.toQuery({\n            escapeName: this.escapeName,\n            escapeParam: this.escapeParam,\n            escapeString: this.escapeString,\n            prepareTyping: this.prepareTyping\n        });\n    }\n    buildRelationalQuery(fullSchema, schema, tableNamesMap, table, tableConfig, config, tableAlias, relationColumns, isRoot = false) {\n        if (config === true) {\n            const selectionEntries = Object.entries(tableConfig.columns);\n            const selection = selectionEntries.map(([key, value])=>({\n                    dbKey: value.name,\n                    tsKey: key,\n                    field: value,\n                    tableTsKey: undefined,\n                    isJson: false,\n                    selection: []\n                }));\n            return {\n                tableTsKey: tableConfig.tsName,\n                sql: table,\n                selection\n            };\n        }\n        const aliasedColumns = Object.fromEntries(Object.entries(tableConfig.columns).map(([key, value])=>[\n                key,\n                aliasedTableColumn(value, tableAlias)\n            ]));\n        const aliasedRelations = Object.fromEntries(Object.entries(tableConfig.relations).map(([key, value])=>[\n                key,\n                aliasedRelation(value, tableAlias)\n            ]));\n        const aliasedFields = Object.assign({}, aliasedColumns, aliasedRelations);\n        const fieldsSelection = {};\n        let selectedColumns = [];\n        let selectedExtras = [];\n        let selectedRelations = [];\n        if (config.columns) {\n            let isIncludeMode = false;\n            for (const [field, value] of Object.entries(config.columns)){\n                if (value === undefined) {\n                    continue;\n                }\n                if (field in tableConfig.columns) {\n                    if (!isIncludeMode && value === true) {\n                        isIncludeMode = true;\n                    }\n                    selectedColumns.push(field);\n                }\n            }\n            if (selectedColumns.length > 0) {\n                selectedColumns = isIncludeMode ? selectedColumns.filter((c)=>config.columns?.[c] === true) : Object.keys(tableConfig.columns).filter((key)=>!selectedColumns.includes(key));\n            }\n        }\n        if (config.with) {\n            selectedRelations = Object.entries(config.with).filter((entry)=>!!entry[1]).map(([key, value])=>({\n                    key,\n                    value\n                }));\n        }\n        if (!config.columns) {\n            selectedColumns = Object.keys(tableConfig.columns);\n        }\n        if (config.extras) {\n            const extrasOrig = typeof config.extras === \"function\" ? config.extras(aliasedFields, {\n                sql\n            }) : config.extras;\n            selectedExtras = Object.entries(extrasOrig).map(([key, value])=>({\n                    key,\n                    value: mapColumnsInAliasedSQLToAlias(value, tableAlias)\n                }));\n        }\n        for (const field of selectedColumns){\n            const column = tableConfig.columns[field];\n            fieldsSelection[field] = column;\n        }\n        for (const { key, value } of selectedExtras){\n            fieldsSelection[key] = value;\n        }\n        let where;\n        if (config.where) {\n            const whereSql = typeof config.where === \"function\" ? config.where(aliasedFields, operators) : config.where;\n            where = whereSql && mapColumnsInSQLToAlias(whereSql, tableAlias);\n        }\n        const groupBy = (tableConfig.primaryKey.length > 0 && selectedRelations.length < 2 ? tableConfig.primaryKey : Object.values(tableConfig.columns)).map((c)=>aliasedTableColumn(c, tableAlias));\n        let orderByOrig = typeof config.orderBy === \"function\" ? config.orderBy(aliasedFields, orderByOperators) : config.orderBy ?? [];\n        if (!Array.isArray(orderByOrig)) {\n            orderByOrig = [\n                orderByOrig\n            ];\n        }\n        const orderBy = orderByOrig.map((orderByValue)=>{\n            if (is(orderByValue, Column)) {\n                return aliasedTableColumn(orderByValue, tableAlias);\n            }\n            return mapColumnsInSQLToAlias(orderByValue, tableAlias);\n        });\n        const builtRelations = [];\n        const builtRelationFields = [];\n        let result;\n        let selectedRelationIndex = 0;\n        for (const { key: selectedRelationKey, value: selectedRelationValue } of selectedRelations){\n            let relation;\n            for (const [relationKey, relationValue] of Object.entries(tableConfig.relations)){\n                if (is(relationValue, Relation) && relationKey === selectedRelationKey) {\n                    relation = relationValue;\n                    break;\n                }\n            }\n            if (!relation) {\n                throw new Error(`Relation ${selectedRelationKey} not found`);\n            }\n            const normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n            const relationAlias = `${tableAlias}_${selectedRelationKey}`;\n            const relationConfig = schema[tableNamesMap[relation.referencedTable[Table.Symbol.Name]]];\n            const builtRelation = this.buildRelationalQuery(fullSchema, schema, tableNamesMap, fullSchema[tableNamesMap[relation.referencedTable[Table.Symbol.Name]]], schema[tableNamesMap[relation.referencedTable[Table.Symbol.Name]]], selectedRelationValue, relationAlias, normalizedRelation.references);\n            builtRelations.push({\n                key: selectedRelationKey,\n                value: builtRelation\n            });\n            let relationWhere;\n            if (typeof selectedRelationValue === \"object\" && selectedRelationValue.limit) {\n                const field = sql`${sql.identifier(relationAlias)}.${sql.identifier(\"__drizzle_row_number\")}`;\n                relationWhere = and(relationWhere, or(and(sql`${field} <= ${selectedRelationValue.limit}`), sql`(${field} is null)`));\n            }\n            const join = {\n                table: is(builtRelation.sql, Table) ? aliasedTable(builtRelation.sql, relationAlias) : new Subquery(builtRelation.sql, {}, relationAlias),\n                alias: relationAlias,\n                on: and(...normalizedRelation.fields.map((field, i)=>eq(aliasedTableColumn(field, tableAlias), aliasedTableColumn(normalizedRelation.references[i], relationAlias)))),\n                joinType: \"left\"\n            };\n            const relationAliasedColumns = Object.fromEntries(Object.entries(relationConfig.columns).map(([key, value])=>[\n                    key,\n                    aliasedTableColumn(value, tableAlias)\n                ]));\n            const relationAliasedRelations = Object.fromEntries(Object.entries(relationConfig.relations).map(([key, value])=>[\n                    key,\n                    aliasedRelation(value, tableAlias)\n                ]));\n            const relationAliasedFields = Object.assign({}, relationAliasedColumns, relationAliasedRelations);\n            let relationOrderBy;\n            if (typeof selectedRelationValue === \"object\") {\n                let orderByOrig = typeof selectedRelationValue.orderBy === \"function\" ? selectedRelationValue.orderBy(relationAliasedFields, orderByOperators) : selectedRelationValue.orderBy ?? [];\n                if (!Array.isArray(orderByOrig)) {\n                    orderByOrig = [\n                        orderByOrig\n                    ];\n                }\n                relationOrderBy = orderByOrig.map((orderByValue)=>{\n                    if (is(orderByValue, Column)) {\n                        return aliasedTableColumn(orderByValue, relationAlias);\n                    }\n                    return mapColumnsInSQLToAlias(orderByValue, relationAlias);\n                });\n            }\n            const relationOrderBySql = relationOrderBy?.length ? sql` order by ${sql.join(relationOrderBy, sql`, `)}` : undefined;\n            const elseField = sql`json_agg(json_build_array(${sql.join(builtRelation.selection.map(({ dbKey: key, isJson })=>{\n                let field = sql`${sql.identifier(relationAlias)}.${sql.identifier(key)}`;\n                if (isJson) {\n                    field = sql`${field}::json`;\n                }\n                return field;\n            }), sql`, `)})${relationOrderBySql})`;\n            if (selectedRelations.length > 1) {\n                elseField.append(sql.raw(\"::text\"));\n            }\n            const countSql = normalizedRelation.references.length === 1 ? aliasedTableColumn(normalizedRelation.references[0], relationAlias) : sql.fromList([\n                sql`coalesce(`,\n                sql.join(normalizedRelation.references.map((c)=>aliasedTableColumn(c, relationAlias)), sql.raw(\", \")),\n                sql.raw(\")\")\n            ]);\n            const field = sql`case when count(${countSql}) = 0 then '[]' else ${elseField} end`.as(selectedRelationKey);\n            const builtRelationField = {\n                path: [\n                    selectedRelationKey\n                ],\n                field\n            };\n            result = this.buildSelectQuery({\n                table: result ? new Subquery(result, {}, tableAlias) : aliasedTable(table, tableAlias),\n                fields: {},\n                fieldsFlat: [\n                    {\n                        path: [],\n                        field: sql`${sql.identifier(tableAlias)}.*`\n                    },\n                    ...selectedRelationIndex === selectedRelations.length - 1 ? selectedExtras.map(({ key, value })=>({\n                            path: [\n                                key\n                            ],\n                            field: value\n                        })) : [],\n                    builtRelationField\n                ],\n                where: relationWhere,\n                groupBy: [\n                    ...groupBy,\n                    ...builtRelationFields.map(({ field })=>sql`${sql.identifier(tableAlias)}.${sql.identifier(field.fieldAlias)}`)\n                ],\n                orderBy: selectedRelationIndex === selectedRelations.length - 1 ? orderBy : [],\n                joins: [\n                    join\n                ],\n                lockingClauses: []\n            });\n            builtRelationFields.push(builtRelationField);\n            selectedRelationIndex++;\n        }\n        const finalFieldsSelection = Object.entries(fieldsSelection).map(([key, value])=>{\n            return {\n                path: [\n                    key\n                ],\n                field: is(value, Column) ? aliasedTableColumn(value, tableAlias) : value\n            };\n        });\n        const finalFieldsFlat = isRoot ? [\n            ...finalFieldsSelection.map(({ path, field })=>({\n                    path,\n                    field: is(field, SQL.Aliased) ? sql`${sql.identifier(field.fieldAlias)}` : field\n                })),\n            ...builtRelationFields.map(({ path, field })=>({\n                    path,\n                    field: sql`${sql.identifier(field.fieldAlias)}${selectedRelations.length > 1 ? sql.raw(\"::json\") : undefined}`\n                }))\n        ] : [\n            {\n                path: [],\n                field: sql`${sql.identifier(tableAlias)}.*`\n            },\n            ...builtRelationFields.length === 0 ? selectedExtras.map(({ key, value })=>({\n                    path: [\n                        key\n                    ],\n                    field: value\n                })) : []\n        ];\n        let limit, offset;\n        if (config.limit !== undefined || config.offset !== undefined) {\n            if (isRoot) {\n                limit = config.limit;\n                offset = config.offset;\n            } else {\n                finalFieldsFlat.push({\n                    path: [\n                        \"__drizzle_row_number\"\n                    ],\n                    field: sql`row_number() over(partition by ${relationColumns.map((c)=>aliasedTableColumn(c, tableAlias))}${orderBy.length ? sql` order by ${sql.join(orderBy, sql`, `)}` : undefined})`.as(\"__drizzle_row_number\")\n                });\n            }\n        }\n        result = this.buildSelectQuery({\n            table: result ? new Subquery(result, {}, tableAlias) : aliasedTable(table, tableAlias),\n            fields: {},\n            fieldsFlat: finalFieldsFlat,\n            where,\n            groupBy: [],\n            orderBy: orderBy ?? [],\n            joins: [],\n            lockingClauses: [],\n            limit,\n            offset: offset\n        });\n        return {\n            tableTsKey: tableConfig.tsName,\n            sql: result,\n            selection: [\n                ...finalFieldsSelection.map(({ path, field })=>({\n                        dbKey: is(field, SQL.Aliased) ? field.fieldAlias : tableConfig.columns[path[0]].name,\n                        tsKey: path[0],\n                        field,\n                        tableTsKey: undefined,\n                        isJson: false,\n                        selection: []\n                    })),\n                ...builtRelations.map(({ key, value })=>({\n                        dbKey: key,\n                        tsKey: key,\n                        field: undefined,\n                        tableTsKey: value.tableTsKey,\n                        isJson: true,\n                        selection: value.selection\n                    }))\n            ]\n        };\n    }\n}\nclass TypedQueryBuilder {\n    static{\n        this[entityKind] = \"TypedQueryBuilder\";\n    }\n    /** @internal */ getSelectedFields() {\n        return this._.selectedFields;\n    }\n}\nclass PgSelectBuilder {\n    static{\n        this[entityKind] = \"PgSelectBuilder\";\n    }\n    constructor(config){\n        this.withList = [];\n        this.fields = config.fields;\n        this.session = config.session;\n        this.dialect = config.dialect;\n        if (config.withList) {\n            this.withList = config.withList;\n        }\n        this.distinct = config.distinct;\n    }\n    /**\n     * Specify the table, subquery, or other target that you're\n     * building a select query against.\n     *\n     * {@link https://www.postgresql.org/docs/current/sql-select.html#SQL-FROM|Postgres from documentation}\n     */ from(source) {\n        const isPartialSelect = !!this.fields;\n        let fields;\n        if (this.fields) {\n            fields = this.fields;\n        } else if (is(source, Subquery)) {\n            // This is required to use the proxy handler to get the correct field values from the subquery\n            fields = Object.fromEntries(Object.keys(source[SubqueryConfig].selection).map((key)=>[\n                    key,\n                    source[key]\n                ]));\n        } else if (is(source, PgViewBase)) {\n            fields = source[ViewBaseConfig].selectedFields;\n        } else if (is(source, SQL)) {\n            fields = {};\n        } else {\n            fields = getTableColumns(source);\n        }\n        return new PgSelect({\n            table: source,\n            fields,\n            isPartialSelect,\n            session: this.session,\n            dialect: this.dialect,\n            withList: this.withList,\n            distinct: this.distinct\n        });\n    }\n}\nclass PgSelectQueryBuilder extends TypedQueryBuilder {\n    static{\n        this[entityKind] = \"PgSelectQueryBuilder\";\n    }\n    constructor({ table, fields, isPartialSelect, session, dialect, withList, distinct }){\n        super();\n        /**\n     * For each row of the table, include\n     * values from a matching row of the joined\n     * table, if there is a matching row. If not,\n     * all of the columns of the joined table\n     * will be set to null.\n     */ this.leftJoin = this.createJoin(\"left\");\n        /**\n     * Includes all of the rows of the joined table.\n     * If there is no matching row in the main table,\n     * all the columns of the main table will be\n     * set to null.\n     */ this.rightJoin = this.createJoin(\"right\");\n        /**\n     * This is the default type of join.\n     *\n     * For each row of the table, the joined table\n     * needs to have a matching row, or it will\n     * be excluded from results.\n     */ this.innerJoin = this.createJoin(\"inner\");\n        /**\n     * Rows from both the main & joined are included,\n     * regardless of whether or not they have matching\n     * rows in the other table.\n     */ this.fullJoin = this.createJoin(\"full\");\n        this.config = {\n            withList,\n            table,\n            fields: {\n                ...fields\n            },\n            joins: [],\n            orderBy: [],\n            groupBy: [],\n            lockingClauses: [],\n            distinct\n        };\n        this.isPartialSelect = isPartialSelect;\n        this.session = session;\n        this.dialect = dialect;\n        this._ = {\n            selectedFields: fields\n        };\n        this.tableName = getTableLikeName(table);\n        this.joinsNotNullableMap = typeof this.tableName === \"string\" ? {\n            [this.tableName]: true\n        } : {};\n    }\n    createJoin(joinType) {\n        return (table, on)=>{\n            const baseTableName = this.tableName;\n            const tableName = getTableLikeName(table);\n            if (typeof tableName === \"string\" && this.config.joins.some((join)=>join.alias === tableName)) {\n                throw new Error(`Alias \"${tableName}\" is already used in this query`);\n            }\n            if (!this.isPartialSelect) {\n                // If this is the first join and this is not a partial select and we're not selecting from raw SQL, \"move\" the fields from the main table to the nested object\n                if (Object.keys(this.joinsNotNullableMap).length === 1 && typeof baseTableName === \"string\") {\n                    this.config.fields = {\n                        [baseTableName]: this.config.fields\n                    };\n                }\n                if (typeof tableName === \"string\" && !is(table, SQL)) {\n                    const selection = is(table, Subquery) ? table[SubqueryConfig].selection : is(table, View) ? table[ViewBaseConfig].selectedFields : table[Table.Symbol.Columns];\n                    this.config.fields[tableName] = selection;\n                }\n            }\n            if (typeof on === \"function\") {\n                on = on(new Proxy(this.config.fields, new SelectionProxyHandler({\n                    sqlAliasedBehavior: \"sql\",\n                    sqlBehavior: \"sql\"\n                })));\n            }\n            this.config.joins.push({\n                on,\n                table,\n                joinType,\n                alias: tableName\n            });\n            if (typeof tableName === \"string\") {\n                switch(joinType){\n                    case \"left\":\n                        {\n                            this.joinsNotNullableMap[tableName] = false;\n                            break;\n                        }\n                    case \"right\":\n                        {\n                            this.joinsNotNullableMap = Object.fromEntries(Object.entries(this.joinsNotNullableMap).map(([key])=>[\n                                    key,\n                                    false\n                                ]));\n                            this.joinsNotNullableMap[tableName] = true;\n                            break;\n                        }\n                    case \"inner\":\n                        {\n                            this.joinsNotNullableMap[tableName] = true;\n                            break;\n                        }\n                    case \"full\":\n                        {\n                            this.joinsNotNullableMap = Object.fromEntries(Object.entries(this.joinsNotNullableMap).map(([key])=>[\n                                    key,\n                                    false\n                                ]));\n                            this.joinsNotNullableMap[tableName] = false;\n                            break;\n                        }\n                }\n            }\n            return this;\n        };\n    }\n    /**\n     * Specify a condition to narrow the result set. Multiple\n     * conditions can be combined with the `and` and `or`\n     * functions.\n     *\n     * ## Examples\n     *\n     * ```ts\n     * // Find cars made in the year 2000\n     * db.select().from(cars).where(eq(cars.year, 2000));\n     * ```\n     */ where(where) {\n        if (typeof where === \"function\") {\n            where = where(new Proxy(this.config.fields, new SelectionProxyHandler({\n                sqlAliasedBehavior: \"sql\",\n                sqlBehavior: \"sql\"\n            })));\n        }\n        this.config.where = where;\n        return this;\n    }\n    /**\n     * Sets the HAVING clause of this query, which often\n     * used with GROUP BY and filters rows after they've been\n     * grouped together and combined.\n     *\n     * {@link https://www.postgresql.org/docs/current/sql-select.html#SQL-HAVING|Postgres having clause documentation}\n     */ having(having) {\n        if (typeof having === \"function\") {\n            having = having(new Proxy(this.config.fields, new SelectionProxyHandler({\n                sqlAliasedBehavior: \"sql\",\n                sqlBehavior: \"sql\"\n            })));\n        }\n        this.config.having = having;\n        return this;\n    }\n    groupBy(...columns) {\n        if (typeof columns[0] === \"function\") {\n            const groupBy = columns[0](new Proxy(this.config.fields, new SelectionProxyHandler({\n                sqlAliasedBehavior: \"alias\",\n                sqlBehavior: \"sql\"\n            })));\n            this.config.groupBy = Array.isArray(groupBy) ? groupBy : [\n                groupBy\n            ];\n        } else {\n            this.config.groupBy = columns;\n        }\n        return this;\n    }\n    orderBy(...columns) {\n        if (typeof columns[0] === \"function\") {\n            const orderBy = columns[0](new Proxy(this.config.fields, new SelectionProxyHandler({\n                sqlAliasedBehavior: \"alias\",\n                sqlBehavior: \"sql\"\n            })));\n            this.config.orderBy = Array.isArray(orderBy) ? orderBy : [\n                orderBy\n            ];\n        } else {\n            this.config.orderBy = columns;\n        }\n        return this;\n    }\n    /**\n     * Set the maximum number of rows that will be\n     * returned by this query.\n     *\n     * ## Examples\n     *\n     * ```ts\n     * // Get the first 10 people from this query.\n     * db.select().from(people).limit(10);\n     * ```\n     *\n     * {@link https://www.postgresql.org/docs/current/sql-select.html#SQL-LIMIT|Postgres LIMIT documentation}\n     */ limit(limit) {\n        this.config.limit = limit;\n        return this;\n    }\n    /**\n     * Skip a number of rows when returning results\n     * from this query.\n     *\n     * ## Examples\n     *\n     * ```ts\n     * // Get the 10th-20th people from this query.\n     * db.select().from(people).offset(10).limit(10);\n     * ```\n     */ offset(offset) {\n        this.config.offset = offset;\n        return this;\n    }\n    /**\n     * The FOR clause specifies a lock strength for this query\n     * that controls how strictly it acquires exclusive access to\n     * the rows being queried.\n     *\n     * {@link https://www.postgresql.org/docs/current/sql-select.html#SQL-FOR-UPDATE-SHARE|Postgres locking clause documentation}\n     */ for(strength, config = {}) {\n        this.config.lockingClauses.push({\n            strength,\n            config\n        });\n        return this;\n    }\n    /** @internal */ getSQL() {\n        return this.dialect.buildSelectQuery(this.config);\n    }\n    toSQL() {\n        const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n        return rest;\n    }\n    as(alias) {\n        return new Proxy(new Subquery(this.getSQL(), this.config.fields, alias), new SelectionProxyHandler({\n            alias,\n            sqlAliasedBehavior: \"alias\",\n            sqlBehavior: \"error\"\n        }));\n    }\n}\nclass PgSelect extends PgSelectQueryBuilder {\n    static{\n        this[entityKind] = \"PgSelect\";\n    }\n    _prepare(name) {\n        const { session, config, dialect, joinsNotNullableMap } = this;\n        if (!session) {\n            throw new Error(\"Cannot execute a query on a query builder. Please use a database instance instead.\");\n        }\n        return tracer.startActiveSpan(\"drizzle.prepareQuery\", ()=>{\n            const fieldsList = orderSelectedFields(config.fields);\n            const query = session.prepareQuery(dialect.sqlToQuery(this.getSQL()), fieldsList, name);\n            query.joinsNotNullableMap = joinsNotNullableMap;\n            return query;\n        });\n    }\n    /**\n     * Create a prepared statement for this query. This allows\n     * the database to remember this query for the given session\n     * and call it by name, rather than specifying the full query.\n     *\n     * {@link https://www.postgresql.org/docs/current/sql-prepare.html|Postgres prepare documentation}\n     */ prepare(name) {\n        return this._prepare(name);\n    }\n    constructor(...args){\n        super(...args);\n        this.execute = (placeholderValues)=>{\n            return tracer.startActiveSpan(\"drizzle.operation\", ()=>{\n                return this._prepare().execute(placeholderValues);\n            });\n        };\n    }\n}\napplyMixins(PgSelect, [\n    QueryPromise\n]);\nclass QueryBuilder {\n    static{\n        this[entityKind] = \"PgQueryBuilder\";\n    }\n    $with(alias) {\n        const queryBuilder = this;\n        return {\n            as (qb) {\n                if (typeof qb === \"function\") {\n                    qb = qb(queryBuilder);\n                }\n                return new Proxy(new WithSubquery(qb.getSQL(), qb.getSelectedFields(), alias, true), new SelectionProxyHandler({\n                    alias,\n                    sqlAliasedBehavior: \"alias\",\n                    sqlBehavior: \"error\"\n                }));\n            }\n        };\n    }\n    with(...queries) {\n        const self = this;\n        function select(fields) {\n            return new PgSelectBuilder({\n                fields: fields ?? undefined,\n                session: undefined,\n                dialect: self.getDialect(),\n                withList: queries\n            });\n        }\n        function selectDistinct(fields) {\n            return new PgSelectBuilder({\n                fields: fields ?? undefined,\n                session: undefined,\n                dialect: self.getDialect(),\n                distinct: true\n            });\n        }\n        function selectDistinctOn(on, fields) {\n            return new PgSelectBuilder({\n                fields: fields ?? undefined,\n                session: undefined,\n                dialect: self.getDialect(),\n                distinct: {\n                    on\n                }\n            });\n        }\n        return {\n            select,\n            selectDistinct,\n            selectDistinctOn\n        };\n    }\n    select(fields) {\n        return new PgSelectBuilder({\n            fields: fields ?? undefined,\n            session: undefined,\n            dialect: this.getDialect()\n        });\n    }\n    selectDistinct(fields) {\n        return new PgSelectBuilder({\n            fields: fields ?? undefined,\n            session: undefined,\n            dialect: this.getDialect(),\n            distinct: true\n        });\n    }\n    selectDistinctOn(on, fields) {\n        return new PgSelectBuilder({\n            fields: fields ?? undefined,\n            session: undefined,\n            dialect: this.getDialect(),\n            distinct: {\n                on\n            }\n        });\n    }\n    // Lazy load dialect to avoid circular dependency\n    getDialect() {\n        if (!this.dialect) {\n            this.dialect = new PgDialect();\n        }\n        return this.dialect;\n    }\n}\nclass DefaultViewBuilderCore {\n    static{\n        this[entityKind] = \"PgDefaultViewBuilderCore\";\n    }\n    constructor(name, schema){\n        this.config = {};\n        this.name = name;\n        this.schema = schema;\n    }\n    with(config) {\n        this.config.with = config;\n        return this;\n    }\n}\nclass ViewBuilder extends DefaultViewBuilderCore {\n    static{\n        this[entityKind] = \"PgViewBuilder\";\n    }\n    as(qb) {\n        if (typeof qb === \"function\") {\n            qb = qb(new QueryBuilder());\n        }\n        const selectionProxy = new SelectionProxyHandler({\n            alias: this.name,\n            sqlBehavior: \"error\",\n            sqlAliasedBehavior: \"alias\",\n            replaceOriginalName: true\n        });\n        const aliasedSelection = new Proxy(qb.getSelectedFields(), selectionProxy);\n        return new Proxy(new PgView({\n            pgConfig: this.config,\n            config: {\n                name: this.name,\n                schema: this.schema,\n                selectedFields: aliasedSelection,\n                query: qb.getSQL().inlineParams()\n            }\n        }), selectionProxy);\n    }\n}\nclass ManualViewBuilder extends DefaultViewBuilderCore {\n    static{\n        this[entityKind] = \"PgManualViewBuilder\";\n    }\n    constructor(name, columns, schema){\n        super(name, schema);\n        this.columns = getTableColumns(pgTable(name, columns));\n    }\n    existing() {\n        return new Proxy(new PgView({\n            pgConfig: undefined,\n            config: {\n                name: this.name,\n                schema: this.schema,\n                selectedFields: this.columns,\n                query: undefined\n            }\n        }), new SelectionProxyHandler({\n            alias: this.name,\n            sqlBehavior: \"error\",\n            sqlAliasedBehavior: \"alias\",\n            replaceOriginalName: true\n        }));\n    }\n    as(query) {\n        return new Proxy(new PgView({\n            pgConfig: this.config,\n            config: {\n                name: this.name,\n                schema: this.schema,\n                selectedFields: this.columns,\n                query: query.inlineParams()\n            }\n        }), new SelectionProxyHandler({\n            alias: this.name,\n            sqlBehavior: \"error\",\n            sqlAliasedBehavior: \"alias\",\n            replaceOriginalName: true\n        }));\n    }\n}\nclass MaterializedViewBuilderCore {\n    static{\n        this[entityKind] = \"PgMaterializedViewBuilderCore\";\n    }\n    constructor(name, schema){\n        this.config = {};\n        this.name = name;\n        this.schema = schema;\n    }\n    using(using) {\n        this.config.using = using;\n        return this;\n    }\n    with(config) {\n        this.config.with = config;\n        return this;\n    }\n    tablespace(tablespace) {\n        this.config.tablespace = tablespace;\n        return this;\n    }\n    withNoData() {\n        this.config.withNoData = true;\n        return this;\n    }\n}\nclass MaterializedViewBuilder extends MaterializedViewBuilderCore {\n    static{\n        this[entityKind] = \"PgMaterializedViewBuilder\";\n    }\n    as(qb) {\n        if (typeof qb === \"function\") {\n            qb = qb(new QueryBuilder());\n        }\n        const selectionProxy = new SelectionProxyHandler({\n            alias: this.name,\n            sqlBehavior: \"error\",\n            sqlAliasedBehavior: \"alias\",\n            replaceOriginalName: true\n        });\n        const aliasedSelection = new Proxy(qb.getSelectedFields(), selectionProxy);\n        return new Proxy(new PgMaterializedView({\n            pgConfig: {\n                with: this.config.with,\n                using: this.config.using,\n                tablespace: this.config.tablespace,\n                withNoData: this.config.withNoData\n            },\n            config: {\n                name: this.name,\n                schema: this.schema,\n                selectedFields: aliasedSelection,\n                query: qb.getSQL().inlineParams()\n            }\n        }), selectionProxy);\n    }\n}\nclass ManualMaterializedViewBuilder extends MaterializedViewBuilderCore {\n    static{\n        this[entityKind] = \"PgManualMaterializedViewBuilder\";\n    }\n    constructor(name, columns, schema){\n        super(name, schema);\n        this.columns = getTableColumns(pgTable(name, columns));\n    }\n    existing() {\n        return new Proxy(new PgMaterializedView({\n            pgConfig: undefined,\n            config: {\n                name: this.name,\n                schema: this.schema,\n                selectedFields: this.columns,\n                query: undefined\n            }\n        }), new SelectionProxyHandler({\n            alias: this.name,\n            sqlBehavior: \"error\",\n            sqlAliasedBehavior: \"alias\",\n            replaceOriginalName: true\n        }));\n    }\n    as(query) {\n        return new Proxy(new PgMaterializedView({\n            pgConfig: undefined,\n            config: {\n                name: this.name,\n                schema: this.schema,\n                selectedFields: this.columns,\n                query: query.inlineParams()\n            }\n        }), new SelectionProxyHandler({\n            alias: this.name,\n            sqlBehavior: \"error\",\n            sqlAliasedBehavior: \"alias\",\n            replaceOriginalName: true\n        }));\n    }\n}\nclass PgViewBase extends View {\n    static{\n        this[entityKind] = \"PgViewBase\";\n    }\n}\nconst PgViewConfig = Symbol.for(\"drizzle:PgViewConfig\");\nclass PgView extends PgViewBase {\n    static{\n        this[entityKind] = \"PgView\";\n    }\n    constructor({ pgConfig, config }){\n        super(config);\n        if (pgConfig) {\n            this[PgViewConfig] = {\n                with: pgConfig.with\n            };\n        }\n    }\n}\nconst PgMaterializedViewConfig = Symbol.for(\"drizzle:PgMaterializedViewConfig\");\nclass PgMaterializedView extends PgViewBase {\n    static{\n        this[entityKind] = \"PgMaterializedView\";\n    }\n    constructor({ pgConfig, config }){\n        super(config);\n        this[PgMaterializedViewConfig] = {\n            with: pgConfig?.with,\n            using: pgConfig?.using,\n            tablespace: pgConfig?.tablespace,\n            withNoData: pgConfig?.withNoData\n        };\n    }\n}\n/** @internal */ function pgViewWithSchema(name, selection, schema) {\n    if (selection) {\n        return new ManualViewBuilder(name, selection, schema);\n    }\n    return new ViewBuilder(name, schema);\n}\n/** @internal */ function pgMaterializedViewWithSchema(name, selection, schema) {\n    if (selection) {\n        return new ManualMaterializedViewBuilder(name, selection, schema);\n    }\n    return new MaterializedViewBuilder(name, schema);\n}\nfunction pgView(name, columns) {\n    return pgViewWithSchema(name, columns, undefined);\n}\nfunction pgMaterializedView(name, columns) {\n    return pgMaterializedViewWithSchema(name, columns, undefined);\n}\nfunction getTableConfig(table) {\n    const columns = Object.values(table[Table.Symbol.Columns]);\n    const indexes = [];\n    const checks = [];\n    const primaryKeys = [];\n    const foreignKeys = Object.values(table[PgTable.Symbol.InlineForeignKeys]);\n    const uniqueConstraints = [];\n    const name = table[Table.Symbol.Name];\n    const schema = table[Table.Symbol.Schema];\n    const extraConfigBuilder = table[PgTable.Symbol.ExtraConfigBuilder];\n    if (extraConfigBuilder !== undefined) {\n        const extraConfig = extraConfigBuilder(table[Table.Symbol.Columns]);\n        for (const builder of Object.values(extraConfig)){\n            if (is(builder, IndexBuilder)) {\n                indexes.push(builder.build(table));\n            } else if (is(builder, CheckBuilder)) {\n                checks.push(builder.build(table));\n            } else if (is(builder, UniqueConstraintBuilder)) {\n                uniqueConstraints.push(builder.build(table));\n            } else if (is(builder, PrimaryKeyBuilder)) {\n                primaryKeys.push(builder.build(table));\n            } else if (is(builder, ForeignKeyBuilder)) {\n                foreignKeys.push(builder.build(table));\n            }\n        }\n    }\n    return {\n        columns,\n        indexes,\n        foreignKeys,\n        checks,\n        primaryKeys,\n        uniqueConstraints,\n        name,\n        schema\n    };\n}\nfunction getViewConfig(view) {\n    return {\n        ...view[ViewBaseConfig],\n        ...view[PgViewConfig]\n    };\n}\nfunction getMaterializedViewConfig(view) {\n    return {\n        ...view[ViewBaseConfig],\n        ...view[PgMaterializedViewConfig]\n    };\n}\nfunction parsePgArrayValue(arrayString, startFrom, inQuotes) {\n    for(let i = startFrom; i < arrayString.length; i++){\n        const char = arrayString[i];\n        if (char === \"\\\\\") {\n            i++;\n            continue;\n        }\n        if (char === '\"') {\n            return [\n                arrayString.slice(startFrom, i).replace(/\\\\/g, \"\"),\n                i + 1\n            ];\n        }\n        if (inQuotes) {\n            continue;\n        }\n        if (char === \",\" || char === \"}\") {\n            return [\n                arrayString.slice(startFrom, i).replace(/\\\\/g, \"\"),\n                i\n            ];\n        }\n    }\n    return [\n        arrayString.slice(startFrom).replace(/\\\\/g, \"\"),\n        arrayString.length\n    ];\n}\nfunction parsePgNestedArray(arrayString, startFrom = 0) {\n    const result = [];\n    let i = startFrom;\n    let lastCharIsComma = false;\n    while(i < arrayString.length){\n        const char = arrayString[i];\n        if (char === \",\") {\n            if (lastCharIsComma || i === startFrom) {\n                result.push(\"\");\n            }\n            lastCharIsComma = true;\n            i++;\n            continue;\n        }\n        lastCharIsComma = false;\n        if (char === \"\\\\\") {\n            i += 2;\n            continue;\n        }\n        if (char === '\"') {\n            const [value, startFrom] = parsePgArrayValue(arrayString, i + 1, true);\n            result.push(value);\n            i = startFrom;\n            continue;\n        }\n        if (char === \"}\") {\n            return [\n                result,\n                i + 1\n            ];\n        }\n        if (char === \"{\") {\n            const [value, startFrom] = parsePgNestedArray(arrayString, i + 1);\n            result.push(value);\n            i = startFrom;\n            continue;\n        }\n        const [value, newStartFrom] = parsePgArrayValue(arrayString, i, false);\n        result.push(value);\n        i = newStartFrom;\n    }\n    return [\n        result,\n        i\n    ];\n}\nfunction parsePgArray(arrayString) {\n    const [result] = parsePgNestedArray(arrayString, 1);\n    return result;\n}\nfunction makePgArray(array) {\n    return `{${array.map((item)=>{\n        if (Array.isArray(item)) {\n            return makePgArray(item);\n        }\n        if (typeof item === \"string\" && item.includes(\",\")) {\n            return `\"${item.replace(/\"/g, '\\\\\"')}\"`;\n        }\n        return `${item}`;\n    }).join(\",\")}}`;\n}\n// To understand how to use `ColumnBuilder` and `AnyColumnBuilder`, see `Column` and `AnyColumn` documentation.\nclass ColumnBuilder {\n    static{\n        this[entityKind] = \"ColumnBuilder\";\n    }\n    constructor(name){\n        this.config = {\n            name,\n            notNull: false,\n            default: undefined,\n            primaryKey: false\n        };\n    }\n    $type() {\n        return this;\n    }\n    notNull() {\n        this.config.notNull = true;\n        return this;\n    }\n    default(value) {\n        this.config.default = value;\n        this.config.hasDefault = true;\n        return this;\n    }\n    primaryKey() {\n        this.config.primaryKey = true;\n        this.config.notNull = true;\n        return this;\n    }\n}\nclass PgColumnBuilder extends ColumnBuilder {\n    static{\n        this[entityKind] = \"PgColumnBuilder\";\n    }\n    array(size) {\n        return new PgArrayBuilder(this.config.name, this, size);\n    }\n    references(ref, actions = {}) {\n        this.foreignKeyConfigs.push({\n            ref,\n            actions\n        });\n        return this;\n    }\n    unique(name, config) {\n        this.config.isUnique = true;\n        this.config.uniqueName = name;\n        this.config.uniqueType = config?.nulls;\n        return this;\n    }\n    /** @internal */ buildForeignKeys(column, table) {\n        return this.foreignKeyConfigs.map(({ ref, actions })=>{\n            return ((ref, actions)=>{\n                const builder = new ForeignKeyBuilder(()=>{\n                    const foreignColumn = ref();\n                    return {\n                        columns: [\n                            column\n                        ],\n                        foreignColumns: [\n                            foreignColumn\n                        ]\n                    };\n                });\n                if (actions.onUpdate) {\n                    builder.onUpdate(actions.onUpdate);\n                }\n                if (actions.onDelete) {\n                    builder.onDelete(actions.onDelete);\n                }\n                return builder.build(table);\n            })(ref, actions);\n        });\n    }\n    constructor(...args){\n        super(...args);\n        this.foreignKeyConfigs = [];\n    }\n}\n// To understand how to use `PgColumn` and `AnyPgColumn`, see `Column` and `AnyColumn` documentation.\nclass PgColumn extends Column {\n    static{\n        this[entityKind] = \"PgColumn\";\n    }\n    constructor(table, config){\n        if (!config.uniqueName) {\n            config.uniqueName = uniqueKeyName(table, [\n                config.name\n            ]);\n        }\n        super(table, config);\n        this.table = table;\n    }\n}\nclass PgArrayBuilder extends PgColumnBuilder {\n    static{\n        this[entityKind] = \"PgArrayBuilder\";\n    }\n    constructor(name, baseBuilder, size){\n        super(name);\n        this.config.baseBuilder = baseBuilder;\n        this.config.size = size;\n    }\n    /** @internal */ build(table) {\n        const baseColumn = this.config.baseBuilder.build(table);\n        return new PgArray(table, this.config, baseColumn);\n    }\n}\nclass PgArray extends PgColumn {\n    static{\n        this[entityKind] = \"PgArray\";\n    }\n    constructor(table, config, baseColumn, range){\n        super(table, config);\n        this.baseColumn = baseColumn;\n        this.range = range;\n        this.size = config.size;\n    }\n    getSQLType() {\n        return `${this.baseColumn.getSQLType()}[${typeof this.size === \"number\" ? this.size : \"\"}]`;\n    }\n    mapFromDriverValue(value) {\n        if (typeof value === \"string\") {\n            // Thank you node-postgres for not parsing enum arrays\n            value = parsePgArray(value);\n        }\n        return value.map((v)=>this.baseColumn.mapFromDriverValue(v));\n    }\n    mapToDriverValue(value, isNestedArray = false) {\n        const a = value.map((v)=>v === null ? null : is(this.baseColumn, PgArray) ? this.baseColumn.mapToDriverValue(v, true) : this.baseColumn.mapToDriverValue(v));\n        if (isNestedArray) return a;\n        return makePgArray(a);\n    }\n}\nclass PgDateColumnBaseBuilder extends PgColumnBuilder {\n    static{\n        this[entityKind] = \"PgDateColumnBaseBuilder\";\n    }\n    defaultNow() {\n        return this.default(sql`now()`);\n    }\n}\nclass PgDateBuilder extends PgDateColumnBaseBuilder {\n    static{\n        this[entityKind] = \"PgDateBuilder\";\n    }\n    /** @internal */ build(table) {\n        return new PgDate(table, this.config);\n    }\n}\nclass PgDate extends PgColumn {\n    static{\n        this[entityKind] = \"PgDate\";\n    }\n    getSQLType() {\n        return \"date\";\n    }\n    mapFromDriverValue(value) {\n        return new Date(value);\n    }\n    mapToDriverValue(value) {\n        return value.toISOString();\n    }\n}\nclass PgDateStringBuilder extends PgDateColumnBaseBuilder {\n    static{\n        this[entityKind] = \"PgDateStringBuilder\";\n    }\n    /** @internal */ build(table) {\n        return new PgDateString(table, this.config);\n    }\n}\nclass PgDateString extends PgColumn {\n    static{\n        this[entityKind] = \"PgDateString\";\n    }\n    getSQLType() {\n        return \"date\";\n    }\n}\nfunction date(name, config) {\n    if (config?.mode === \"date\") {\n        return new PgDateBuilder(name);\n    }\n    return new PgDateStringBuilder(name);\n}\nclass PgJsonBuilder extends PgColumnBuilder {\n    static{\n        this[entityKind] = \"PgJsonBuilder\";\n    }\n    /** @internal */ build(table) {\n        return new PgJson(table, this.config);\n    }\n}\nclass PgJson extends PgColumn {\n    static{\n        this[entityKind] = \"PgJson\";\n    }\n    constructor(table, config){\n        super(table, config);\n    }\n    getSQLType() {\n        return \"json\";\n    }\n    mapToDriverValue(value) {\n        return JSON.stringify(value);\n    }\n    mapFromDriverValue(value) {\n        if (typeof value === \"string\") {\n            try {\n                return JSON.parse(value);\n            } catch  {\n                return value;\n            }\n        }\n        return value;\n    }\n}\nfunction json(name) {\n    return new PgJsonBuilder(name);\n}\nclass PgJsonbBuilder extends PgColumnBuilder {\n    static{\n        this[entityKind] = \"PgJsonbBuilder\";\n    }\n    /** @internal */ build(table) {\n        return new PgJsonb(table, this.config);\n    }\n}\nclass PgJsonb extends PgColumn {\n    static{\n        this[entityKind] = \"PgJsonb\";\n    }\n    constructor(table, config){\n        super(table, config);\n    }\n    getSQLType() {\n        return \"jsonb\";\n    }\n    mapToDriverValue(value) {\n        return JSON.stringify(value);\n    }\n    mapFromDriverValue(value) {\n        if (typeof value === \"string\") {\n            try {\n                return JSON.parse(value);\n            } catch  {\n                return value;\n            }\n        }\n        return value;\n    }\n}\nfunction jsonb(name) {\n    return new PgJsonbBuilder(name);\n}\nclass PgNumericBuilder extends PgColumnBuilder {\n    static{\n        this[entityKind] = \"PgNumericBuilder\";\n    }\n    constructor(name, precision, scale){\n        super(name);\n        this.config.precision = precision;\n        this.config.scale = scale;\n    }\n    /** @internal */ build(table) {\n        return new PgNumeric(table, this.config);\n    }\n}\nclass PgNumeric extends PgColumn {\n    static{\n        this[entityKind] = \"PgNumeric\";\n    }\n    constructor(table, config){\n        super(table, config);\n        this.precision = config.precision;\n        this.scale = config.scale;\n    }\n    getSQLType() {\n        if (this.precision !== undefined && this.scale !== undefined) {\n            return `numeric(${this.precision}, ${this.scale})`;\n        } else if (this.precision === undefined) {\n            return \"numeric\";\n        } else {\n            return `numeric(${this.precision})`;\n        }\n    }\n}\nfunction numeric(name, config) {\n    return new PgNumericBuilder(name, config?.precision, config?.scale);\n}\nconst decimal = numeric;\nclass PgTimeBuilder extends PgDateColumnBaseBuilder {\n    static{\n        this[entityKind] = \"PgTimeBuilder\";\n    }\n    constructor(name, withTimezone, precision){\n        super(name);\n        this.withTimezone = withTimezone;\n        this.precision = precision;\n        this.config.withTimezone = withTimezone;\n        this.config.precision = precision;\n    }\n    /** @internal */ build(table) {\n        return new PgTime(table, this.config);\n    }\n}\nclass PgTime extends PgColumn {\n    static{\n        this[entityKind] = \"PgTime\";\n    }\n    constructor(table, config){\n        super(table, config);\n        this.withTimezone = config.withTimezone;\n        this.precision = config.precision;\n    }\n    getSQLType() {\n        const precision = this.precision === undefined ? \"\" : `(${this.precision})`;\n        return `time${precision}${this.withTimezone ? \" with time zone\" : \"\"}`;\n    }\n}\nfunction time(name, config = {}) {\n    return new PgTimeBuilder(name, config.withTimezone ?? false, config.precision);\n}\nclass PgTimestampBuilder extends PgDateColumnBaseBuilder {\n    static{\n        this[entityKind] = \"PgTimestampBuilder\";\n    }\n    constructor(name, withTimezone, precision){\n        super(name);\n        this.config.withTimezone = withTimezone;\n        this.config.precision = precision;\n    }\n    /** @internal */ build(table) {\n        return new PgTimestamp(table, this.config);\n    }\n}\nclass PgTimestamp extends PgColumn {\n    static{\n        this[entityKind] = \"PgTimestamp\";\n    }\n    constructor(table, config){\n        super(table, config);\n        this.mapFromDriverValue = (value)=>{\n            return new Date(this.withTimezone ? value : value + \"+0000\");\n        };\n        this.mapToDriverValue = (value)=>{\n            return this.withTimezone ? value.toUTCString() : value.toISOString();\n        };\n        this.withTimezone = config.withTimezone;\n        this.precision = config.precision;\n    }\n    getSQLType() {\n        const precision = this.precision === undefined ? \"\" : ` (${this.precision})`;\n        return `timestamp${precision}${this.withTimezone ? \" with time zone\" : \"\"}`;\n    }\n}\nclass PgTimestampStringBuilder extends PgDateColumnBaseBuilder {\n    static{\n        this[entityKind] = \"PgTimestampStringBuilder\";\n    }\n    constructor(name, withTimezone, precision){\n        super(name);\n        this.config.withTimezone = withTimezone;\n        this.config.precision = precision;\n    }\n    /** @internal */ build(table) {\n        return new PgTimestampString(table, this.config);\n    }\n}\nclass PgTimestampString extends PgColumn {\n    static{\n        this[entityKind] = \"PgTimestampString\";\n    }\n    constructor(table, config){\n        super(table, config);\n        this.withTimezone = config.withTimezone;\n        this.precision = config.precision;\n    }\n    getSQLType() {\n        const precision = this.precision === undefined ? \"\" : `(${this.precision})`;\n        return `timestamp${precision}${this.withTimezone ? \" with time zone\" : \"\"}`;\n    }\n}\nfunction timestamp(name, config = {}) {\n    if (config.mode === \"string\") {\n        return new PgTimestampStringBuilder(name, config.withTimezone ?? false, config.precision);\n    }\n    return new PgTimestampBuilder(name, config.withTimezone ?? false, config.precision);\n}\nclass PgUUIDBuilder extends PgColumnBuilder {\n    static{\n        this[entityKind] = \"PgUUIDBuilder\";\n    }\n    /**\n     * Adds `default gen_random_uuid()` to the column definition.\n     */ defaultRandom() {\n        return this.default(sql`gen_random_uuid()`);\n    }\n    /** @internal */ build(table) {\n        return new PgUUID(table, this.config);\n    }\n}\nclass PgUUID extends PgColumn {\n    static{\n        this[entityKind] = \"PgUUID\";\n    }\n    getSQLType() {\n        return \"uuid\";\n    }\n}\nfunction uuid(name) {\n    return new PgUUIDBuilder(name);\n}\nclass Relation {\n    static{\n        this[entityKind] = \"Relation\";\n    }\n    constructor(sourceTable, referencedTable, relationName){\n        this.sourceTable = sourceTable;\n        this.referencedTable = referencedTable;\n        this.relationName = relationName;\n        this.referencedTableName = referencedTable[Table.Symbol.Name];\n    }\n}\nclass Relations {\n    static{\n        this[entityKind] = \"Relations\";\n    }\n    constructor(table, config){\n        this.table = table;\n        this.config = config;\n    }\n}\nclass One extends Relation {\n    static{\n        this[entityKind] = \"One\";\n    }\n    constructor(sourceTable, referencedTable, config, isNullable){\n        super(sourceTable, referencedTable, config?.relationName);\n        this.config = config;\n        this.isNullable = isNullable;\n    }\n    withFieldName(fieldName) {\n        const relation = new One(this.sourceTable, this.referencedTable, this.config, this.isNullable);\n        relation.fieldName = fieldName;\n        return relation;\n    }\n}\nclass Many extends Relation {\n    static{\n        this[entityKind] = \"Many\";\n    }\n    constructor(sourceTable, referencedTable, config){\n        super(sourceTable, referencedTable, config?.relationName);\n        this.config = config;\n    }\n    withFieldName(fieldName) {\n        const relation = new Many(this.sourceTable, this.referencedTable, this.config);\n        relation.fieldName = fieldName;\n        return relation;\n    }\n}\nconst operators = {\n    sql,\n    eq,\n    and,\n    or\n};\nconst orderByOperators = {\n    sql,\n    asc,\n    desc\n};\nfunction extractTablesRelationalConfig(schema, configHelpers) {\n    if (Object.keys(schema).length === 1 && \"default\" in schema && !is(schema[\"default\"], Table)) {\n        schema = schema[\"default\"];\n    }\n    // table DB name -> schema table key\n    const tableNamesMap = {};\n    // Table relations found before their tables - need to buffer them until we know the schema table key\n    const relationsBuffer = {};\n    const tablesConfig = {};\n    for (const [key, value] of Object.entries(schema)){\n        if (isTable(value)) {\n            const dbName = value[Table.Symbol.Name];\n            const bufferedRelations = relationsBuffer[dbName];\n            tableNamesMap[dbName] = key;\n            tablesConfig[key] = {\n                tsName: key,\n                dbName: value[Table.Symbol.Name],\n                columns: value[Table.Symbol.Columns],\n                relations: bufferedRelations?.relations ?? {},\n                primaryKey: bufferedRelations?.primaryKey ?? []\n            };\n            // Fill in primary keys\n            for (const column of Object.values(value[Table.Symbol.Columns])){\n                if (column.primary) {\n                    tablesConfig[key].primaryKey.push(column);\n                }\n            }\n            const extraConfig = value[Table.Symbol.ExtraConfigBuilder]?.(value);\n            if (extraConfig) {\n                for (const configEntry of Object.values(extraConfig)){\n                    if (is(configEntry, PrimaryKeyBuilder)) {\n                        tablesConfig[key].primaryKey.push(...configEntry.columns);\n                    }\n                }\n            }\n        } else if (is(value, Relations)) {\n            const dbName = value.table[Table.Symbol.Name];\n            const tableName = tableNamesMap[dbName];\n            const relations = value.config(configHelpers(value.table));\n            let primaryKey;\n            for (const [relationName, relation] of Object.entries(relations)){\n                if (tableName) {\n                    const tableConfig = tablesConfig[tableName];\n                    tableConfig.relations[relationName] = relation;\n                } else {\n                    if (!(dbName in relationsBuffer)) {\n                        relationsBuffer[dbName] = {\n                            relations: {},\n                            primaryKey\n                        };\n                    }\n                    relationsBuffer[dbName].relations[relationName] = relation;\n                }\n            }\n        }\n    }\n    return {\n        tables: tablesConfig,\n        tableNamesMap\n    };\n}\nfunction relations(table, relations) {\n    return new Relations(table, (helpers)=>Object.fromEntries(Object.entries(relations(helpers)).map(([key, value])=>[\n                key,\n                value.withFieldName(key)\n            ])));\n}\nfunction createOne(sourceTable) {\n    return function one(table, config) {\n        return new One(sourceTable, table, config, config?.fields.reduce((res, f)=>res && f.notNull, true) ?? false);\n    };\n}\nfunction createMany(sourceTable) {\n    return function many(referencedTable, config) {\n        return new Many(sourceTable, referencedTable, config);\n    };\n}\nfunction normalizeRelation(schema, tableNamesMap, relation) {\n    if (is(relation, One) && relation.config) {\n        return {\n            fields: relation.config.fields,\n            references: relation.config.references\n        };\n    }\n    const referencedTableTsName = tableNamesMap[relation.referencedTable[Table.Symbol.Name]];\n    if (!referencedTableTsName) {\n        throw new Error(`Table \"${relation.referencedTable[Table.Symbol.Name]}\" not found in schema`);\n    }\n    const referencedTableFields = schema[referencedTableTsName];\n    if (!referencedTableFields) {\n        throw new Error(`Table \"${referencedTableTsName}\" not found in schema`);\n    }\n    const sourceTable = relation.sourceTable;\n    const sourceTableTsName = tableNamesMap[sourceTable[Table.Symbol.Name]];\n    if (!sourceTableTsName) {\n        throw new Error(`Table \"${sourceTable[Table.Symbol.Name]}\" not found in schema`);\n    }\n    const reverseRelations = [];\n    for (const referencedTableRelation of Object.values(referencedTableFields.relations)){\n        if (relation.relationName && relation !== referencedTableRelation && referencedTableRelation.relationName === relation.relationName || !relation.relationName && referencedTableRelation.referencedTable === relation.sourceTable) {\n            reverseRelations.push(referencedTableRelation);\n        }\n    }\n    if (reverseRelations.length > 1) {\n        throw relation.relationName ? new Error(`There are multiple relations with name \"${relation.relationName}\" in table \"${referencedTableTsName}\"`) : new Error(`There are multiple relations between \"${referencedTableTsName}\" and \"${relation.sourceTable[Table.Symbol.Name]}\". Please specify relation name`);\n    }\n    if (reverseRelations[0] && is(reverseRelations[0], One) && reverseRelations[0].config) {\n        return {\n            fields: reverseRelations[0].config.references,\n            references: reverseRelations[0].config.fields\n        };\n    }\n    throw new Error(`There is not enough information to infer relation \"${sourceTableTsName}.${relation.fieldName}\"`);\n}\nfunction createTableRelationsHelpers(sourceTable) {\n    return {\n        one: createOne(sourceTable),\n        many: createMany(sourceTable)\n    };\n}\nfunction mapRelationalRow(tablesConfig, tableConfig, row, buildQueryResultSelection, mapColumnValue = (value)=>value) {\n    const result = {};\n    for (const [selectionItemIndex, selectionItem] of buildQueryResultSelection.entries()){\n        if (selectionItem.isJson) {\n            const relation = tableConfig.relations[selectionItem.tsKey];\n            const rawSubRows = row[selectionItemIndex];\n            const subRows = typeof rawSubRows === \"string\" ? JSON.parse(rawSubRows) : rawSubRows;\n            if (is(relation, One)) {\n                result[selectionItem.tsKey] = subRows[0] ? mapRelationalRow(tablesConfig, tablesConfig[selectionItem.tableTsKey], subRows[0], selectionItem.selection, mapColumnValue) : null;\n            } else {\n                result[selectionItem.tsKey] = subRows.map((subRow)=>mapRelationalRow(tablesConfig, tablesConfig[selectionItem.tableTsKey], subRow, selectionItem.selection, mapColumnValue));\n            }\n        } else {\n            const value = mapColumnValue(row[selectionItemIndex]);\n            const field = selectionItem.field;\n            let decoder;\n            if (is(field, Column)) {\n                decoder = field;\n            } else if (is(field, SQL)) {\n                decoder = field.decoder;\n            } else {\n                decoder = field.sql.decoder;\n            }\n            result[selectionItem.tsKey] = value === null ? null : decoder.mapFromDriverValue(value);\n        }\n    }\n    return result;\n}\nfunction bindIfParam(value, column) {\n    if (isDriverValueEncoder(column) && !isSQLWrapper(value) && !is(value, Param) && !is(value, Placeholder) && !is(value, Column) && !is(value, Table) && !is(value, View)) {\n        return new Param(value, column);\n    }\n    return value;\n}\nfunction eq(left, right) {\n    return sql`${left} = ${bindIfParam(right, left)}`;\n}\nfunction ne(left, right) {\n    return sql`${left} <> ${bindIfParam(right, left)}`;\n}\nfunction and(...unfilteredConditions) {\n    const conditions = unfilteredConditions.filter((c)=>c !== undefined);\n    if (conditions.length === 0) {\n        return undefined;\n    }\n    if (conditions.length === 1) {\n        return conditions[0];\n    }\n    const chunks = [\n        sql.raw(\"(\")\n    ];\n    for (const [index, condition] of conditions.entries()){\n        if (index === 0) {\n            chunks.push(condition);\n        } else {\n            chunks.push(sql` and `, condition);\n        }\n    }\n    chunks.push(sql`)`);\n    return sql.fromList(chunks);\n}\nfunction or(...unfilteredConditions) {\n    const conditions = unfilteredConditions.filter((c)=>c !== undefined);\n    if (conditions.length === 0) {\n        return undefined;\n    }\n    if (conditions.length === 1) {\n        return conditions[0];\n    }\n    const chunks = [\n        sql.raw(\"(\")\n    ];\n    for (const [index, condition] of conditions.entries()){\n        if (index === 0) {\n            chunks.push(condition);\n        } else {\n            chunks.push(sql` or `, condition);\n        }\n    }\n    chunks.push(sql`)`);\n    return sql.fromList(chunks);\n}\n/**\n * Negate the meaning of an expression using the `not` keyword.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars _not_ made by GM or Ford.\n * db.select().from(cars)\n *   .where(not(inArray(cars.make, ['GM', 'Ford'])))\n * ```\n */ function not(condition) {\n    return sql`not ${condition}`;\n}\nfunction gt(left, right) {\n    return sql`${left} > ${bindIfParam(right, left)}`;\n}\nfunction gte(left, right) {\n    return sql`${left} >= ${bindIfParam(right, left)}`;\n}\nfunction lt(left, right) {\n    return sql`${left} < ${bindIfParam(right, left)}`;\n}\nfunction lte(left, right) {\n    return sql`${left} <= ${bindIfParam(right, left)}`;\n}\nfunction inArray(column, values) {\n    if (Array.isArray(values)) {\n        if (values.length === 0) {\n            throw new Error(\"inArray requires at least one value\");\n        }\n        return sql`${column} in ${values.map((v)=>bindIfParam(v, column))}`;\n    }\n    return sql`${column} in ${bindIfParam(values, column)}`;\n}\nfunction notInArray(column, values) {\n    if (isSQLWrapper(values)) {\n        return sql`${column} not in ${values}`;\n    }\n    if (Array.isArray(values)) {\n        if (values.length === 0) {\n            throw new Error(\"inArray requires at least one value\");\n        }\n        return sql`${column} not in ${values.map((v)=>bindIfParam(v, column))}`;\n    }\n    return sql`${column} not in ${bindIfParam(values, column)}`;\n}\n/**\n * Test whether an expression is NULL. By the SQL standard,\n * NULL is neither equal nor not equal to itself, so\n * it's recommended to use `isNull` and `notIsNull` for\n * comparisons to NULL.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars that have no discontinuedAt date.\n * db.select().from(cars)\n *   .where(isNull(cars.discontinuedAt))\n * ```\n *\n * @see isNotNull for the inverse of this test\n */ function isNull(column) {\n    return sql`${column} is null`;\n}\n/**\n * Test whether an expression is not NULL. By the SQL standard,\n * NULL is neither equal nor not equal to itself, so\n * it's recommended to use `isNull` and `notIsNull` for\n * comparisons to NULL.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars that have been discontinued.\n * db.select().from(cars)\n *   .where(isNotNull(cars.discontinuedAt))\n * ```\n *\n * @see isNull for the inverse of this test\n */ function isNotNull(column) {\n    return sql`${column} is not null`;\n}\n/**\n * Test whether a subquery evaluates to have any rows.\n *\n * ## Examples\n *\n * ```ts\n * // Users whose `homeCity` column has a match in a cities\n * // table.\n * db\n *   .select()\n *   .from(users)\n *   .where(\n *     exists(db.select()\n *       .from(cities)\n *       .where(eq(users.homeCity, cities.id))),\n *   );\n * ```\n *\n * @see notExists for the inverse of this test\n */ function exists(subquery) {\n    return sql`exists (${subquery})`;\n}\n/**\n * Test whether a subquery doesn't include any result\n * rows.\n *\n * ## Examples\n *\n * ```ts\n * // Users whose `homeCity` column doesn't match\n * // a row in the cities table.\n * db\n *   .select()\n *   .from(users)\n *   .where(\n *     notExists(db.select()\n *       .from(cities)\n *       .where(eq(users.homeCity, cities.id))),\n *   );\n * ```\n *\n * @see exists for the inverse of this test\n */ function notExists(subquery) {\n    return sql`not exists (${subquery})`;\n}\nfunction between(column, min, max) {\n    return sql`${column} between ${bindIfParam(min, column)} and ${bindIfParam(max, column)}`;\n}\nfunction notBetween(column, min, max) {\n    return sql`${column} not between ${bindIfParam(min, column)} and ${bindIfParam(max, column)}`;\n}\n/**\n * Compare a column to a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars with 'Turbo' in their names.\n * db.select().from(cars)\n *   .where(like(cars.name, '%Turbo%'))\n * ```\n *\n * @see ilike for a case-insensitive version of this condition\n */ function like(column, value) {\n    return sql`${column} like ${value}`;\n}\n/**\n * The inverse of like - this tests that a given column\n * does not match a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars that don't have \"ROver\" in their name.\n * db.select().from(cars)\n *   .where(notLike(cars.name, '%Rover%'))\n * ```\n *\n * @see like for the inverse condition\n * @see notIlike for a case-insensitive version of this condition\n */ function notLike(column, value) {\n    return sql`${column} not like ${value}`;\n}\n/**\n * Case-insensitively compare a column to a pattern,\n * which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * Unlike like, this performs a case-insensitive comparison.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars with 'Turbo' in their names.\n * db.select().from(cars)\n *   .where(ilike(cars.name, '%Turbo%'))\n * ```\n *\n * @see like for a case-sensitive version of this condition\n */ function ilike(column, value) {\n    return sql`${column} ilike ${value}`;\n}\n/**\n * The inverse of ilike - this case-insensitively tests that a given column\n * does not match a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars that don't have \"Rover\" in their name.\n * db.select().from(cars)\n *   .where(notLike(cars.name, '%Rover%'))\n * ```\n *\n * @see ilike for the inverse condition\n * @see notLike for a case-sensitive version of this condition\n */ function notIlike(column, value) {\n    return sql`${column} not ilike ${value}`;\n}\n/**\n * Used in sorting, this specifies that the given\n * column or expression should be sorted in ascending\n * order. By the SQL standard, ascending order is the\n * default, so it is not usually necessary to specify\n * ascending sort order.\n *\n * ## Examples\n *\n * ```ts\n * // Return cars, starting with the oldest models\n * // and going in ascending order to the newest.\n * db.select().from(cars)\n *   .orderBy(asc(cars.year));\n * ```\n *\n * @see desc to sort in descending order\n */ function asc(column) {\n    return sql`${column} asc`;\n}\n/**\n * Used in sorting, this specifies that the given\n * column or expression should be sorted in descending\n * order.\n *\n * ## Examples\n *\n * ```ts\n * // Select users, with the most recently created\n * // records coming first.\n * db.select().from(users)\n *   .orderBy(desc(users.createdAt));\n * ```\n *\n * @see asc to sort in ascending order\n */ function desc(column) {\n    return sql`${column} desc`;\n}\n/**\n * This class is used to indicate a primitive param value that is used in `sql` tag.\n * It is only used on type level and is never instantiated at runtime.\n * If you see a value of this type in the code, its runtime value is actually the primitive param value.\n */ class FakePrimitiveParam {\n    static{\n        this[entityKind] = \"FakePrimitiveParam\";\n    }\n}\nfunction isSQLWrapper(value) {\n    return typeof value === \"object\" && value !== null && \"getSQL\" in value && typeof value.getSQL === \"function\";\n}\nfunction mergeQueries(queries) {\n    const result = {\n        sql: \"\",\n        params: []\n    };\n    for (const query of queries){\n        result.sql += query.sql;\n        result.params.push(...query.params);\n        if (query.typings?.length) {\n            result.typings = result.typings || [];\n            result.typings.push(...query.typings);\n        }\n    }\n    return result;\n}\nclass StringChunk {\n    static{\n        this[entityKind] = \"StringChunk\";\n    }\n    constructor(value){\n        this.value = Array.isArray(value) ? value : [\n            value\n        ];\n    }\n}\nclass SQL {\n    static{\n        this[entityKind] = \"SQL\";\n    }\n    constructor(queryChunks){\n        /** @internal */ this.decoder = noopDecoder;\n        this.shouldInlineParams = false;\n        this.queryChunks = queryChunks;\n    }\n    append(query) {\n        this.queryChunks.push(...query.queryChunks);\n        return this;\n    }\n    toQuery(config) {\n        return tracer.startActiveSpan(\"drizzle.buildSQL\", (span)=>{\n            const query = this.buildQueryFromSourceParams(this.queryChunks, config);\n            span?.setAttributes({\n                \"drizzle.query.text\": query.sql,\n                \"drizzle.query.params\": JSON.stringify(query.params)\n            });\n            return query;\n        });\n    }\n    buildQueryFromSourceParams(chunks, _config) {\n        const config = Object.assign({}, _config, {\n            inlineParams: _config.inlineParams || this.shouldInlineParams,\n            paramStartIndex: _config.paramStartIndex || {\n                value: 0\n            }\n        });\n        const { escapeName, escapeParam, prepareTyping, inlineParams, paramStartIndex } = config;\n        return mergeQueries(chunks.map((chunk)=>{\n            if (is(chunk, StringChunk)) {\n                return {\n                    sql: chunk.value.join(\"\"),\n                    params: []\n                };\n            }\n            if (is(chunk, Name)) {\n                return {\n                    sql: escapeName(chunk.value),\n                    params: []\n                };\n            }\n            if (chunk === undefined) {\n                return {\n                    sql: \"\",\n                    params: []\n                };\n            }\n            if (Array.isArray(chunk)) {\n                const result = [\n                    new StringChunk(\"(\")\n                ];\n                for (const [i, p] of chunk.entries()){\n                    result.push(p);\n                    if (i < chunk.length - 1) {\n                        result.push(new StringChunk(\", \"));\n                    }\n                }\n                result.push(new StringChunk(\")\"));\n                return this.buildQueryFromSourceParams(result, config);\n            }\n            if (is(chunk, SQL)) {\n                return this.buildQueryFromSourceParams(chunk.queryChunks, {\n                    ...config,\n                    inlineParams: inlineParams || chunk.shouldInlineParams\n                });\n            }\n            if (is(chunk, Table)) {\n                const schemaName = chunk[Table.Symbol.Schema];\n                const tableName = chunk[Table.Symbol.Name];\n                return {\n                    sql: schemaName === undefined ? escapeName(tableName) : escapeName(schemaName) + \".\" + escapeName(tableName),\n                    params: []\n                };\n            }\n            if (is(chunk, Column)) {\n                return {\n                    sql: escapeName(chunk.table[Table.Symbol.Name]) + \".\" + escapeName(chunk.name),\n                    params: []\n                };\n            }\n            if (is(chunk, View)) {\n                const schemaName = chunk[ViewBaseConfig].schema;\n                const viewName = chunk[ViewBaseConfig].name;\n                return {\n                    sql: schemaName === undefined ? escapeName(viewName) : escapeName(schemaName) + \".\" + escapeName(viewName),\n                    params: []\n                };\n            }\n            if (is(chunk, Param)) {\n                const mappedValue = chunk.value === null ? null : chunk.encoder.mapToDriverValue(chunk.value);\n                if (is(mappedValue, SQL)) {\n                    return this.buildQueryFromSourceParams([\n                        mappedValue\n                    ], config);\n                }\n                if (inlineParams) {\n                    return {\n                        sql: this.mapInlineParam(mappedValue, config),\n                        params: []\n                    };\n                }\n                let typings;\n                if (prepareTyping !== undefined) {\n                    typings = [\n                        prepareTyping(chunk.encoder)\n                    ];\n                }\n                return {\n                    sql: escapeParam(paramStartIndex.value++, mappedValue),\n                    params: [\n                        mappedValue\n                    ],\n                    typings\n                };\n            }\n            if (is(chunk, SQL.Aliased) && chunk.fieldAlias !== undefined) {\n                return {\n                    sql: escapeName(chunk.fieldAlias),\n                    params: []\n                };\n            }\n            if (is(chunk, Subquery)) {\n                if (chunk[SubqueryConfig].isWith) {\n                    return {\n                        sql: escapeName(chunk[SubqueryConfig].alias),\n                        params: []\n                    };\n                }\n                return this.buildQueryFromSourceParams([\n                    new StringChunk(\"(\"),\n                    chunk[SubqueryConfig].sql,\n                    new StringChunk(\") \"),\n                    new Name(chunk[SubqueryConfig].alias)\n                ], config);\n            }\n            if (isSQLWrapper(chunk)) {\n                return this.buildQueryFromSourceParams([\n                    new StringChunk(\"(\"),\n                    chunk.getSQL(),\n                    new StringChunk(\")\")\n                ], config);\n            }\n            if (is(chunk, Relation)) {\n                return this.buildQueryFromSourceParams([\n                    chunk.sourceTable,\n                    new StringChunk(\".\"),\n                    sql.identifier(chunk.fieldName)\n                ], config);\n            }\n            if (inlineParams) {\n                return {\n                    sql: this.mapInlineParam(chunk, config),\n                    params: []\n                };\n            }\n            return {\n                sql: escapeParam(paramStartIndex.value++, chunk),\n                params: [\n                    chunk\n                ]\n            };\n        }));\n    }\n    mapInlineParam(chunk, { escapeString }) {\n        if (chunk === null) {\n            return \"null\";\n        }\n        if (typeof chunk === \"number\" || typeof chunk === \"boolean\") {\n            return chunk.toString();\n        }\n        if (typeof chunk === \"string\") {\n            return escapeString(chunk);\n        }\n        if (typeof chunk === \"object\") {\n            const mappedValueAsString = chunk.toString();\n            if (mappedValueAsString === \"[object Object]\") {\n                return escapeString(JSON.stringify(chunk));\n            }\n            return escapeString(mappedValueAsString);\n        }\n        throw new Error(\"Unexpected param value: \" + chunk);\n    }\n    getSQL() {\n        return this;\n    }\n    as(alias) {\n        // TODO: remove with deprecated overloads\n        if (alias === undefined) {\n            return this;\n        }\n        return new SQL.Aliased(this, alias);\n    }\n    mapWith(decoder) {\n        this.decoder = typeof decoder === \"function\" ? {\n            mapFromDriverValue: decoder\n        } : decoder;\n        return this;\n    }\n    inlineParams() {\n        this.shouldInlineParams = true;\n        return this;\n    }\n}\n/**\n * Any DB name (table, column, index etc.)\n */ class Name {\n    static{\n        this[entityKind] = \"Name\";\n    }\n    constructor(value){\n        this.value = value;\n    }\n}\n/**\n * Any DB name (table, column, index etc.)\n * @deprecated Use `sql.identifier` instead.\n */ function name(value) {\n    return new Name(value);\n}\nfunction isDriverValueEncoder(value) {\n    return typeof value === \"object\" && value !== null && \"mapToDriverValue\" in value && typeof value.mapToDriverValue === \"function\";\n}\nconst noopDecoder = {\n    mapFromDriverValue: (value)=>value\n};\nconst noopEncoder = {\n    mapToDriverValue: (value)=>value\n};\nconst noopMapper = {\n    ...noopDecoder,\n    ...noopEncoder\n};\n/** Parameter value that is optionally bound to an encoder (for example, a column). */ class Param {\n    static{\n        this[entityKind] = \"Param\";\n    }\n    /**\n     * @param value - Parameter value\n     * @param encoder - Encoder to convert the value to a driver parameter\n     */ constructor(value, encoder = noopEncoder){\n        this.value = value;\n        this.encoder = encoder;\n    }\n}\nfunction param(value, encoder) {\n    return new Param(value, encoder);\n}\n/*\n    The type of `params` is specified as `SQLSourceParam[]`, but that's slightly incorrect -\n    in runtime, users won't pass `FakePrimitiveParam` instances as `params` - they will pass primitive values\n    which will be wrapped in `Param` using `buildChunksFromParam(...)`. That's why the overload\n    specify `params` as `any[]` and not as `SQLSourceParam[]`. This type is used to make our lives easier and\n    the type checker happy.\n*/ function sql(strings, ...params) {\n    const queryChunks = [];\n    if (params.length > 0 || strings.length > 0 && strings[0] !== \"\") {\n        queryChunks.push(new StringChunk(strings[0]));\n    }\n    for (const [paramIndex, param] of params.entries()){\n        queryChunks.push(param, new StringChunk(strings[paramIndex + 1]));\n    }\n    return new SQL(queryChunks);\n}\n(function(sql) {\n    function empty() {\n        return new SQL([]);\n    }\n    sql.empty = empty;\n    function fromList(list) {\n        return new SQL(list);\n    }\n    sql.fromList = fromList;\n    /**\n     * Convenience function to create an SQL query from a raw string.\n     * @param str The raw SQL query string.\n     */ function raw(str) {\n        return new SQL([\n            new StringChunk(str)\n        ]);\n    }\n    sql.raw = raw;\n    /**\n     * Convenience function to join a list of SQL chunks with a separator.\n     */ function join(chunks, separator) {\n        const result = [];\n        for (const [i, chunk] of chunks.entries()){\n            if (i > 0) {\n                result.push(separator);\n            }\n            result.push(chunk);\n        }\n        return sql.fromList(result);\n    }\n    sql.join = join;\n    /**\n     *  Any DB identifier (table name, column name, index name etc.)\n     */ function identifier(value) {\n        return name(value);\n    }\n    sql.identifier = identifier;\n})(sql || (sql = {}));\n(function(SQL) {\n    class Aliased {\n        static{\n            this[entityKind] = \"SQL.Aliased\";\n        }\n        constructor(sql, fieldAlias){\n            /** @internal */ this.isSelectionField = false;\n            this.sql = sql;\n            this.fieldAlias = fieldAlias;\n        }\n        getSQL() {\n            return this.sql;\n        }\n        /** @internal */ clone() {\n            return new Aliased(this.sql, this.fieldAlias);\n        }\n    }\n    SQL.Aliased = Aliased;\n})(SQL || (SQL = {}));\nclass Placeholder {\n    static{\n        this[entityKind] = \"Placeholder\";\n    }\n    constructor(name){\n        this.name = name;\n    }\n}\nfunction placeholder(name) {\n    return new Placeholder(name);\n}\nfunction fillPlaceholders(params, values) {\n    return params.map((p)=>{\n        if (is(p, Placeholder)) {\n            if (!(p.name in values)) {\n                throw new Error(`No value for placeholder \"${p.name}\" was provided`);\n            }\n            return values[p.name];\n        }\n        return p;\n    });\n}\nclass ColumnAliasProxyHandler {\n    static{\n        this[entityKind] = \"ColumnAliasProxyHandler\";\n    }\n    constructor(table){\n        this.table = table;\n    }\n    get(columnObj, prop) {\n        if (prop === \"table\") {\n            return this.table;\n        }\n        return columnObj[prop];\n    }\n}\nclass TableAliasProxyHandler {\n    static{\n        this[entityKind] = \"TableAliasProxyHandler\";\n    }\n    constructor(alias, replaceOriginalName){\n        this.alias = alias;\n        this.replaceOriginalName = replaceOriginalName;\n    }\n    get(target, prop) {\n        if (prop === Table.Symbol.IsAlias) {\n            return true;\n        }\n        if (prop === Table.Symbol.Name) {\n            return this.alias;\n        }\n        if (this.replaceOriginalName && prop === Table.Symbol.OriginalName) {\n            return this.alias;\n        }\n        if (prop === ViewBaseConfig) {\n            return {\n                ...target[ViewBaseConfig],\n                name: this.alias,\n                isAlias: true\n            };\n        }\n        if (prop === Table.Symbol.Columns) {\n            const columns = target[Table.Symbol.Columns];\n            if (!columns) {\n                return columns;\n            }\n            const proxiedColumns = {};\n            Object.keys(columns).map((key)=>{\n                proxiedColumns[key] = new Proxy(columns[key], new ColumnAliasProxyHandler(new Proxy(target, this)));\n            });\n            return proxiedColumns;\n        }\n        const value = target[prop];\n        if (is(value, Column)) {\n            return new Proxy(value, new ColumnAliasProxyHandler(new Proxy(target, this)));\n        }\n        return value;\n    }\n}\nclass RelationTableAliasProxyHandler {\n    static{\n        this[entityKind] = \"RelationTableAliasProxyHandler\";\n    }\n    constructor(alias){\n        this.alias = alias;\n    }\n    get(target, prop) {\n        if (prop === \"sourceTable\") {\n            return aliasedTable(target.sourceTable, this.alias);\n        }\n        return target[prop];\n    }\n}\nfunction aliasedTable(table, tableAlias) {\n    return new Proxy(table, new TableAliasProxyHandler(tableAlias, false));\n}\nfunction aliasedRelation(relation, tableAlias) {\n    return new Proxy(relation, new RelationTableAliasProxyHandler(tableAlias));\n}\nfunction aliasedTableColumn(column, tableAlias) {\n    return new Proxy(column, new ColumnAliasProxyHandler(new Proxy(column.table, new TableAliasProxyHandler(tableAlias, false))));\n}\nfunction mapColumnsInAliasedSQLToAlias(query, alias) {\n    return new SQL.Aliased(mapColumnsInSQLToAlias(query.sql, alias), query.fieldAlias);\n}\nfunction mapColumnsInSQLToAlias(query, alias) {\n    return sql.fromList(query.queryChunks.map((c)=>{\n        if (is(c, Column)) {\n            return aliasedTableColumn(c, alias);\n        }\n        if (is(c, SQL)) {\n            return mapColumnsInSQLToAlias(c, alias);\n        }\n        if (is(c, SQL.Aliased)) {\n            return mapColumnsInAliasedSQLToAlias(c, alias);\n        }\n        return c;\n    }));\n}\n //# sourceMappingURL=alias-3e926a50.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/drizzle-orm@0.27.2_@libsql+client@0.3.4/node_modules/drizzle-orm/alias-3e926a50.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/drizzle-orm@0.27.2_@libsql+client@0.3.4/node_modules/drizzle-orm/errors-fed11085.mjs":
/*!*********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/drizzle-orm@0.27.2_@libsql+client@0.3.4/node_modules/drizzle-orm/errors-fed11085.mjs ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   D: () => (/* binding */ DrizzleError),\n/* harmony export */   T: () => (/* binding */ TransactionRollbackError)\n/* harmony export */ });\n/* harmony import */ var _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./alias-3e926a50.mjs */ \"(rsc)/../../node_modules/.pnpm/drizzle-orm@0.27.2_@libsql+client@0.3.4/node_modules/drizzle-orm/alias-3e926a50.mjs\");\n\nclass DrizzleError extends Error {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"DrizzleError\";\n    }\n    constructor(message){\n        super(message);\n        this.name = \"DrizzleError\";\n    }\n    static wrap(error, message) {\n        return error instanceof Error // eslint-disable-line no-instanceof/no-instanceof\n         ? new DrizzleError(message ? `${message}: ${error.message}` : error.message) : new DrizzleError(message ?? String(error));\n    }\n}\nclass TransactionRollbackError extends DrizzleError {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"TransactionRollbackError\";\n    }\n    constructor(){\n        super(\"Rollback\");\n    }\n}\n //# sourceMappingURL=errors-fed11085.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2RyaXp6bGUtb3JtQDAuMjcuMl9AbGlic3FsK2NsaWVudEAwLjMuNC9ub2RlX21vZHVsZXMvZHJpenpsZS1vcm0vZXJyb3JzLWZlZDExMDg1Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBdUQ7QUFFdkQsTUFBTUUscUJBQXFCQzs7WUFDaEIsQ0FBQ0Ysa0RBQVVBLENBQUMsR0FBRzs7SUFDdEJHLFlBQVlDLE9BQU8sQ0FBRTtRQUNqQixLQUFLLENBQUNBO1FBQ04sSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDaEI7SUFDQSxPQUFPQyxLQUFLQyxLQUFLLEVBQUVILE9BQU8sRUFBRTtRQUN4QixPQUFPRyxpQkFBaUJMLE1BQU0sa0RBQWtEO1dBQzFFLElBQUlELGFBQWFHLFVBQVUsQ0FBQyxFQUFFQSxRQUFRLEVBQUUsRUFBRUcsTUFBTUgsT0FBTyxDQUFDLENBQUMsR0FBR0csTUFBTUgsT0FBTyxJQUN6RSxJQUFJSCxhQUFhRyxXQUFXSSxPQUFPRDtJQUM3QztBQUNKO0FBQ0EsTUFBTUUsaUNBQWlDUjs7WUFDNUIsQ0FBQ0Qsa0RBQVVBLENBQUMsR0FBRzs7SUFDdEJHLGFBQWM7UUFDVixLQUFLLENBQUM7SUFDVjtBQUNKO0FBRTRELENBQzVELDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL0B0b2tlbnN0cmVhbS93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2RyaXp6bGUtb3JtQDAuMjcuMl9AbGlic3FsK2NsaWVudEAwLjMuNC9ub2RlX21vZHVsZXMvZHJpenpsZS1vcm0vZXJyb3JzLWZlZDExMDg1Lm1qcz8wNzA4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGUgYXMgZW50aXR5S2luZCB9IGZyb20gJy4vYWxpYXMtM2U5MjZhNTAubWpzJztcblxuY2xhc3MgRHJpenpsZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIHN0YXRpYyBbZW50aXR5S2luZF0gPSAnRHJpenpsZUVycm9yJztcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnRHJpenpsZUVycm9yJztcbiAgICB9XG4gICAgc3RhdGljIHdyYXAoZXJyb3IsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yIGluc3RhbmNlb2YgRXJyb3IgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1pbnN0YW5jZW9mL25vLWluc3RhbmNlb2ZcbiAgICAgICAgICAgID8gbmV3IERyaXp6bGVFcnJvcihtZXNzYWdlID8gYCR7bWVzc2FnZX06ICR7ZXJyb3IubWVzc2FnZX1gIDogZXJyb3IubWVzc2FnZSlcbiAgICAgICAgICAgIDogbmV3IERyaXp6bGVFcnJvcihtZXNzYWdlID8/IFN0cmluZyhlcnJvcikpO1xuICAgIH1cbn1cbmNsYXNzIFRyYW5zYWN0aW9uUm9sbGJhY2tFcnJvciBleHRlbmRzIERyaXp6bGVFcnJvciB7XG4gICAgc3RhdGljIFtlbnRpdHlLaW5kXSA9ICdUcmFuc2FjdGlvblJvbGxiYWNrRXJyb3InO1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignUm9sbGJhY2snKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IERyaXp6bGVFcnJvciBhcyBELCBUcmFuc2FjdGlvblJvbGxiYWNrRXJyb3IgYXMgVCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JzLWZlZDExMDg1Lm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJlIiwiZW50aXR5S2luZCIsIkRyaXp6bGVFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJtZXNzYWdlIiwibmFtZSIsIndyYXAiLCJlcnJvciIsIlN0cmluZyIsIlRyYW5zYWN0aW9uUm9sbGJhY2tFcnJvciIsIkQiLCJUIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/drizzle-orm@0.27.2_@libsql+client@0.3.4/node_modules/drizzle-orm/errors-fed11085.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/drizzle-orm@0.27.2_@libsql+client@0.3.4/node_modules/drizzle-orm/index.mjs":
/*!***********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/drizzle-orm@0.27.2_@libsql+client@0.3.4/node_modules/drizzle-orm/index.mjs ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseName: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bN),\n/* harmony export */   Column: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.C),\n/* harmony export */   ColumnAliasProxyHandler: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.b5),\n/* harmony export */   ColumnBuilder: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.L),\n/* harmony export */   Columns: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bL),\n/* harmony export */   ConsoleLogWriter: () => (/* binding */ ConsoleLogWriter),\n/* harmony export */   DefaultLogger: () => (/* binding */ DefaultLogger),\n/* harmony export */   DrizzleError: () => (/* reexport safe */ _errors_fed11085_mjs__WEBPACK_IMPORTED_MODULE_1__.D),\n/* harmony export */   ExtraConfigBuilder: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bP),\n/* harmony export */   FakePrimitiveParam: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bz),\n/* harmony export */   IsAlias: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bO),\n/* harmony export */   Many: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bv),\n/* harmony export */   Name: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bC),\n/* harmony export */   NoopLogger: () => (/* binding */ NoopLogger),\n/* harmony export */   One: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bu),\n/* harmony export */   OriginalName: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bM),\n/* harmony export */   Param: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   Placeholder: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bH),\n/* harmony export */   QueryPromise: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.Q),\n/* harmony export */   Relation: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.R),\n/* harmony export */   RelationTableAliasProxyHandler: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.b6),\n/* harmony export */   Relations: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bt),\n/* harmony export */   SQL: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.S),\n/* harmony export */   Schema: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bK),\n/* harmony export */   SelectionProxyHandler: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.j),\n/* harmony export */   StringChunk: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bB),\n/* harmony export */   Subquery: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.q),\n/* harmony export */   SubqueryConfig: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.r),\n/* harmony export */   Table: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.T),\n/* harmony export */   TableAliasProxyHandler: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.M),\n/* harmony export */   TableName: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bJ),\n/* harmony export */   TransactionRollbackError: () => (/* reexport safe */ _errors_fed11085_mjs__WEBPACK_IMPORTED_MODULE_1__.T),\n/* harmony export */   View: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.V),\n/* harmony export */   ViewBaseConfig: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.u),\n/* harmony export */   WithSubquery: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.W),\n/* harmony export */   aliasedRelation: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.x),\n/* harmony export */   aliasedTable: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.G),\n/* harmony export */   aliasedTableColumn: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.w),\n/* harmony export */   and: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.E),\n/* harmony export */   applyMixins: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.K),\n/* harmony export */   asc: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.br),\n/* harmony export */   between: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bl),\n/* harmony export */   bindIfParam: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.b8),\n/* harmony export */   createMany: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.by),\n/* harmony export */   createOne: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bx),\n/* harmony export */   createTableRelationsHelpers: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   desc: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bs),\n/* harmony export */   entityKind: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.e),\n/* harmony export */   eq: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.H),\n/* harmony export */   exists: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bj),\n/* harmony export */   extractTablesRelationalConfig: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   fillPlaceholders: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.f),\n/* harmony export */   getTableColumns: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.l),\n/* harmony export */   getTableLikeName: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.J),\n/* harmony export */   getTableName: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.p),\n/* harmony export */   gt: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bb),\n/* harmony export */   gte: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bc),\n/* harmony export */   hasOwnEntityKind: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.b7),\n/* harmony export */   iife: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bR),\n/* harmony export */   ilike: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bp),\n/* harmony export */   inArray: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bf),\n/* harmony export */   is: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.i),\n/* harmony export */   isDriverValueEncoder: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bD),\n/* harmony export */   isNotNull: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bi),\n/* harmony export */   isNull: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bh),\n/* harmony export */   isSQLWrapper: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bA),\n/* harmony export */   isTable: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bQ),\n/* harmony export */   like: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bn),\n/* harmony export */   lt: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bd),\n/* harmony export */   lte: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.be),\n/* harmony export */   mapColumnsInAliasedSQLToAlias: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.y),\n/* harmony export */   mapColumnsInSQLToAlias: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.A),\n/* harmony export */   mapRelationalRow: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.g),\n/* harmony export */   mapResultRow: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.m),\n/* harmony export */   mapUpdateSet: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.d),\n/* harmony export */   name: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.n),\n/* harmony export */   ne: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.b9),\n/* harmony export */   noopDecoder: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bE),\n/* harmony export */   noopEncoder: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bF),\n/* harmony export */   noopMapper: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bG),\n/* harmony export */   normalizeRelation: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.D),\n/* harmony export */   not: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.ba),\n/* harmony export */   notBetween: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bm),\n/* harmony export */   notExists: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bk),\n/* harmony export */   notIlike: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bq),\n/* harmony export */   notInArray: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bg),\n/* harmony export */   notLike: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bo),\n/* harmony export */   operators: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.z),\n/* harmony export */   or: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.F),\n/* harmony export */   orderByOperators: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.B),\n/* harmony export */   orderSelectedFields: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.o),\n/* harmony export */   param: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.v),\n/* harmony export */   placeholder: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bI),\n/* harmony export */   relations: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.bw),\n/* harmony export */   sql: () => (/* reexport safe */ _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s)\n/* harmony export */ });\n/* harmony import */ var _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./alias-3e926a50.mjs */ \"(rsc)/../../node_modules/.pnpm/drizzle-orm@0.27.2_@libsql+client@0.3.4/node_modules/drizzle-orm/alias-3e926a50.mjs\");\n/* harmony import */ var _errors_fed11085_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors-fed11085.mjs */ \"(rsc)/../../node_modules/.pnpm/drizzle-orm@0.27.2_@libsql+client@0.3.4/node_modules/drizzle-orm/errors-fed11085.mjs\");\n\n\n\nclass ConsoleLogWriter {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"ConsoleLogWriter\";\n    }\n    write(message) {\n        console.log(message);\n    }\n}\nclass DefaultLogger {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"DefaultLogger\";\n    }\n    constructor(config){\n        this.writer = config?.writer ?? new ConsoleLogWriter();\n    }\n    logQuery(query, params) {\n        const stringifiedParams = params.map((p)=>{\n            try {\n                return JSON.stringify(p);\n            } catch  {\n                return String(p);\n            }\n        });\n        const paramsStr = stringifiedParams.length ? ` -- params: [${stringifiedParams.join(\", \")}]` : \"\";\n        this.writer.write(`Query: ${query}${paramsStr}`);\n    }\n}\nclass NoopLogger {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"NoopLogger\";\n    }\n    logQuery() {\n    // noop\n    }\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2RyaXp6bGUtb3JtQDAuMjcuMl9AbGlic3FsK2NsaWVudEAwLjMuNC9ub2RlX21vZHVsZXMvZHJpenpsZS1vcm0vaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBdUQ7QUFDeWlEO0FBQ3ZnRDtBQUV6RixNQUFNc0w7O1lBQ0ssQ0FBQ3JMLGtEQUFVQSxDQUFDLEdBQUc7O0lBQ3RCc0wsTUFBTUMsT0FBTyxFQUFFO1FBQ1hDLFFBQVFDLEdBQUcsQ0FBQ0Y7SUFDaEI7QUFDSjtBQUNBLE1BQU1HOztZQUNLLENBQUMxTCxrREFBVUEsQ0FBQyxHQUFHOztJQUV0QjJMLFlBQVlDLE1BQU0sQ0FBRTtRQUNoQixJQUFJLENBQUNDLE1BQU0sR0FBR0QsUUFBUUMsVUFBVSxJQUFJUjtJQUN4QztJQUNBUyxTQUFTQyxLQUFLLEVBQUVDLE1BQU0sRUFBRTtRQUNwQixNQUFNQyxvQkFBb0JELE9BQU9FLEdBQUcsQ0FBQyxDQUFDakc7WUFDbEMsSUFBSTtnQkFDQSxPQUFPa0csS0FBS0MsU0FBUyxDQUFDbkc7WUFDMUIsRUFDQSxPQUFNO2dCQUNGLE9BQU9vRyxPQUFPcEc7WUFDbEI7UUFDSjtRQUNBLE1BQU1xRyxZQUFZTCxrQkFBa0JNLE1BQU0sR0FBRyxDQUFDLGFBQWEsRUFBRU4sa0JBQWtCTyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRztRQUMvRixJQUFJLENBQUNYLE1BQU0sQ0FBQ1AsS0FBSyxDQUFDLENBQUMsT0FBTyxFQUFFUyxNQUFNLEVBQUVPLFVBQVUsQ0FBQztJQUNuRDtBQUNKO0FBQ0EsTUFBTUc7O1lBQ0ssQ0FBQ3pNLGtEQUFVQSxDQUFDLEdBQUc7O0lBQ3RCOEwsV0FBVztJQUNQLE9BQU87SUFDWDtBQUNKO0FBRW1FLENBQ25FLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL0B0b2tlbnN0cmVhbS93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2RyaXp6bGUtb3JtQDAuMjcuMl9AbGlic3FsK2NsaWVudEAwLjMuNC9ub2RlX21vZHVsZXMvZHJpenpsZS1vcm0vaW5kZXgubWpzPzJkMDkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZSBhcyBlbnRpdHlLaW5kIH0gZnJvbSAnLi9hbGlhcy0zZTkyNmE1MC5tanMnO1xuZXhwb3J0IHsgYk4gYXMgQmFzZU5hbWUsIEMgYXMgQ29sdW1uLCBiNSBhcyBDb2x1bW5BbGlhc1Byb3h5SGFuZGxlciwgTCBhcyBDb2x1bW5CdWlsZGVyLCBiTCBhcyBDb2x1bW5zLCBiUCBhcyBFeHRyYUNvbmZpZ0J1aWxkZXIsIGJ6IGFzIEZha2VQcmltaXRpdmVQYXJhbSwgYk8gYXMgSXNBbGlhcywgYnYgYXMgTWFueSwgYkMgYXMgTmFtZSwgYnUgYXMgT25lLCBiTSBhcyBPcmlnaW5hbE5hbWUsIGIgYXMgUGFyYW0sIGJIIGFzIFBsYWNlaG9sZGVyLCBRIGFzIFF1ZXJ5UHJvbWlzZSwgUiBhcyBSZWxhdGlvbiwgYjYgYXMgUmVsYXRpb25UYWJsZUFsaWFzUHJveHlIYW5kbGVyLCBidCBhcyBSZWxhdGlvbnMsIFMgYXMgU1FMLCBiSyBhcyBTY2hlbWEsIGogYXMgU2VsZWN0aW9uUHJveHlIYW5kbGVyLCBiQiBhcyBTdHJpbmdDaHVuaywgcSBhcyBTdWJxdWVyeSwgciBhcyBTdWJxdWVyeUNvbmZpZywgVCBhcyBUYWJsZSwgTSBhcyBUYWJsZUFsaWFzUHJveHlIYW5kbGVyLCBiSiBhcyBUYWJsZU5hbWUsIFYgYXMgVmlldywgdSBhcyBWaWV3QmFzZUNvbmZpZywgVyBhcyBXaXRoU3VicXVlcnksIHggYXMgYWxpYXNlZFJlbGF0aW9uLCBHIGFzIGFsaWFzZWRUYWJsZSwgdyBhcyBhbGlhc2VkVGFibGVDb2x1bW4sIEUgYXMgYW5kLCBLIGFzIGFwcGx5TWl4aW5zLCBiciBhcyBhc2MsIGJsIGFzIGJldHdlZW4sIGI4IGFzIGJpbmRJZlBhcmFtLCBieSBhcyBjcmVhdGVNYW55LCBieCBhcyBjcmVhdGVPbmUsIGMgYXMgY3JlYXRlVGFibGVSZWxhdGlvbnNIZWxwZXJzLCBicyBhcyBkZXNjLCBIIGFzIGVxLCBiaiBhcyBleGlzdHMsIGEgYXMgZXh0cmFjdFRhYmxlc1JlbGF0aW9uYWxDb25maWcsIGYgYXMgZmlsbFBsYWNlaG9sZGVycywgbCBhcyBnZXRUYWJsZUNvbHVtbnMsIEogYXMgZ2V0VGFibGVMaWtlTmFtZSwgcCBhcyBnZXRUYWJsZU5hbWUsIGJiIGFzIGd0LCBiYyBhcyBndGUsIGI3IGFzIGhhc093bkVudGl0eUtpbmQsIGJSIGFzIGlpZmUsIGJwIGFzIGlsaWtlLCBiZiBhcyBpbkFycmF5LCBpIGFzIGlzLCBiRCBhcyBpc0RyaXZlclZhbHVlRW5jb2RlciwgYmkgYXMgaXNOb3ROdWxsLCBiaCBhcyBpc051bGwsIGJBIGFzIGlzU1FMV3JhcHBlciwgYlEgYXMgaXNUYWJsZSwgYm4gYXMgbGlrZSwgYmQgYXMgbHQsIGJlIGFzIGx0ZSwgeSBhcyBtYXBDb2x1bW5zSW5BbGlhc2VkU1FMVG9BbGlhcywgQSBhcyBtYXBDb2x1bW5zSW5TUUxUb0FsaWFzLCBnIGFzIG1hcFJlbGF0aW9uYWxSb3csIG0gYXMgbWFwUmVzdWx0Um93LCBkIGFzIG1hcFVwZGF0ZVNldCwgbiBhcyBuYW1lLCBiOSBhcyBuZSwgYkUgYXMgbm9vcERlY29kZXIsIGJGIGFzIG5vb3BFbmNvZGVyLCBiRyBhcyBub29wTWFwcGVyLCBEIGFzIG5vcm1hbGl6ZVJlbGF0aW9uLCBiYSBhcyBub3QsIGJtIGFzIG5vdEJldHdlZW4sIGJrIGFzIG5vdEV4aXN0cywgYnEgYXMgbm90SWxpa2UsIGJnIGFzIG5vdEluQXJyYXksIGJvIGFzIG5vdExpa2UsIHogYXMgb3BlcmF0b3JzLCBGIGFzIG9yLCBCIGFzIG9yZGVyQnlPcGVyYXRvcnMsIG8gYXMgb3JkZXJTZWxlY3RlZEZpZWxkcywgdiBhcyBwYXJhbSwgYkkgYXMgcGxhY2Vob2xkZXIsIGJ3IGFzIHJlbGF0aW9ucywgcyBhcyBzcWwgfSBmcm9tICcuL2FsaWFzLTNlOTI2YTUwLm1qcyc7XG5leHBvcnQgeyBEIGFzIERyaXp6bGVFcnJvciwgVCBhcyBUcmFuc2FjdGlvblJvbGxiYWNrRXJyb3IgfSBmcm9tICcuL2Vycm9ycy1mZWQxMTA4NS5tanMnO1xuXG5jbGFzcyBDb25zb2xlTG9nV3JpdGVyIHtcbiAgICBzdGF0aWMgW2VudGl0eUtpbmRdID0gJ0NvbnNvbGVMb2dXcml0ZXInO1xuICAgIHdyaXRlKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc29sZS5sb2cobWVzc2FnZSk7XG4gICAgfVxufVxuY2xhc3MgRGVmYXVsdExvZ2dlciB7XG4gICAgc3RhdGljIFtlbnRpdHlLaW5kXSA9ICdEZWZhdWx0TG9nZ2VyJztcbiAgICB3cml0ZXI7XG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgICAgIHRoaXMud3JpdGVyID0gY29uZmlnPy53cml0ZXIgPz8gbmV3IENvbnNvbGVMb2dXcml0ZXIoKTtcbiAgICB9XG4gICAgbG9nUXVlcnkocXVlcnksIHBhcmFtcykge1xuICAgICAgICBjb25zdCBzdHJpbmdpZmllZFBhcmFtcyA9IHBhcmFtcy5tYXAoKHApID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2gge1xuICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcocCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBwYXJhbXNTdHIgPSBzdHJpbmdpZmllZFBhcmFtcy5sZW5ndGggPyBgIC0tIHBhcmFtczogWyR7c3RyaW5naWZpZWRQYXJhbXMuam9pbignLCAnKX1dYCA6ICcnO1xuICAgICAgICB0aGlzLndyaXRlci53cml0ZShgUXVlcnk6ICR7cXVlcnl9JHtwYXJhbXNTdHJ9YCk7XG4gICAgfVxufVxuY2xhc3MgTm9vcExvZ2dlciB7XG4gICAgc3RhdGljIFtlbnRpdHlLaW5kXSA9ICdOb29wTG9nZ2VyJztcbiAgICBsb2dRdWVyeSgpIHtcbiAgICAgICAgLy8gbm9vcFxuICAgIH1cbn1cblxuZXhwb3J0IHsgQ29uc29sZUxvZ1dyaXRlciwgRGVmYXVsdExvZ2dlciwgTm9vcExvZ2dlciwgZW50aXR5S2luZCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIl0sIm5hbWVzIjpbImUiLCJlbnRpdHlLaW5kIiwiYk4iLCJCYXNlTmFtZSIsIkMiLCJDb2x1bW4iLCJiNSIsIkNvbHVtbkFsaWFzUHJveHlIYW5kbGVyIiwiTCIsIkNvbHVtbkJ1aWxkZXIiLCJiTCIsIkNvbHVtbnMiLCJiUCIsIkV4dHJhQ29uZmlnQnVpbGRlciIsImJ6IiwiRmFrZVByaW1pdGl2ZVBhcmFtIiwiYk8iLCJJc0FsaWFzIiwiYnYiLCJNYW55IiwiYkMiLCJOYW1lIiwiYnUiLCJPbmUiLCJiTSIsIk9yaWdpbmFsTmFtZSIsImIiLCJQYXJhbSIsImJIIiwiUGxhY2Vob2xkZXIiLCJRIiwiUXVlcnlQcm9taXNlIiwiUiIsIlJlbGF0aW9uIiwiYjYiLCJSZWxhdGlvblRhYmxlQWxpYXNQcm94eUhhbmRsZXIiLCJidCIsIlJlbGF0aW9ucyIsIlMiLCJTUUwiLCJiSyIsIlNjaGVtYSIsImoiLCJTZWxlY3Rpb25Qcm94eUhhbmRsZXIiLCJiQiIsIlN0cmluZ0NodW5rIiwicSIsIlN1YnF1ZXJ5IiwiciIsIlN1YnF1ZXJ5Q29uZmlnIiwiVCIsIlRhYmxlIiwiTSIsIlRhYmxlQWxpYXNQcm94eUhhbmRsZXIiLCJiSiIsIlRhYmxlTmFtZSIsIlYiLCJWaWV3IiwidSIsIlZpZXdCYXNlQ29uZmlnIiwiVyIsIldpdGhTdWJxdWVyeSIsIngiLCJhbGlhc2VkUmVsYXRpb24iLCJHIiwiYWxpYXNlZFRhYmxlIiwidyIsImFsaWFzZWRUYWJsZUNvbHVtbiIsIkUiLCJhbmQiLCJLIiwiYXBwbHlNaXhpbnMiLCJiciIsImFzYyIsImJsIiwiYmV0d2VlbiIsImI4IiwiYmluZElmUGFyYW0iLCJieSIsImNyZWF0ZU1hbnkiLCJieCIsImNyZWF0ZU9uZSIsImMiLCJjcmVhdGVUYWJsZVJlbGF0aW9uc0hlbHBlcnMiLCJicyIsImRlc2MiLCJIIiwiZXEiLCJiaiIsImV4aXN0cyIsImEiLCJleHRyYWN0VGFibGVzUmVsYXRpb25hbENvbmZpZyIsImYiLCJmaWxsUGxhY2Vob2xkZXJzIiwibCIsImdldFRhYmxlQ29sdW1ucyIsIkoiLCJnZXRUYWJsZUxpa2VOYW1lIiwicCIsImdldFRhYmxlTmFtZSIsImJiIiwiZ3QiLCJiYyIsImd0ZSIsImI3IiwiaGFzT3duRW50aXR5S2luZCIsImJSIiwiaWlmZSIsImJwIiwiaWxpa2UiLCJiZiIsImluQXJyYXkiLCJpIiwiaXMiLCJiRCIsImlzRHJpdmVyVmFsdWVFbmNvZGVyIiwiYmkiLCJpc05vdE51bGwiLCJiaCIsImlzTnVsbCIsImJBIiwiaXNTUUxXcmFwcGVyIiwiYlEiLCJpc1RhYmxlIiwiYm4iLCJsaWtlIiwiYmQiLCJsdCIsImJlIiwibHRlIiwieSIsIm1hcENvbHVtbnNJbkFsaWFzZWRTUUxUb0FsaWFzIiwiQSIsIm1hcENvbHVtbnNJblNRTFRvQWxpYXMiLCJnIiwibWFwUmVsYXRpb25hbFJvdyIsIm0iLCJtYXBSZXN1bHRSb3ciLCJkIiwibWFwVXBkYXRlU2V0IiwibiIsIm5hbWUiLCJiOSIsIm5lIiwiYkUiLCJub29wRGVjb2RlciIsImJGIiwibm9vcEVuY29kZXIiLCJiRyIsIm5vb3BNYXBwZXIiLCJEIiwibm9ybWFsaXplUmVsYXRpb24iLCJiYSIsIm5vdCIsImJtIiwibm90QmV0d2VlbiIsImJrIiwibm90RXhpc3RzIiwiYnEiLCJub3RJbGlrZSIsImJnIiwibm90SW5BcnJheSIsImJvIiwibm90TGlrZSIsInoiLCJvcGVyYXRvcnMiLCJGIiwib3IiLCJCIiwib3JkZXJCeU9wZXJhdG9ycyIsIm8iLCJvcmRlclNlbGVjdGVkRmllbGRzIiwidiIsInBhcmFtIiwiYkkiLCJwbGFjZWhvbGRlciIsImJ3IiwicmVsYXRpb25zIiwicyIsInNxbCIsIkRyaXp6bGVFcnJvciIsIlRyYW5zYWN0aW9uUm9sbGJhY2tFcnJvciIsIkNvbnNvbGVMb2dXcml0ZXIiLCJ3cml0ZSIsIm1lc3NhZ2UiLCJjb25zb2xlIiwibG9nIiwiRGVmYXVsdExvZ2dlciIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwid3JpdGVyIiwibG9nUXVlcnkiLCJxdWVyeSIsInBhcmFtcyIsInN0cmluZ2lmaWVkUGFyYW1zIiwibWFwIiwiSlNPTiIsInN0cmluZ2lmeSIsIlN0cmluZyIsInBhcmFtc1N0ciIsImxlbmd0aCIsImpvaW4iLCJOb29wTG9nZ2VyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/drizzle-orm@0.27.2_@libsql+client@0.3.4/node_modules/drizzle-orm/index.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/drizzle-orm@0.27.2_@libsql+client@0.3.4/node_modules/drizzle-orm/libsql/index.mjs":
/*!******************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/drizzle-orm@0.27.2_@libsql+client@0.3.4/node_modules/drizzle-orm/libsql/index.mjs ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LibSQLSession: () => (/* binding */ LibSQLSession),\n/* harmony export */   LibSQLTransaction: () => (/* binding */ LibSQLTransaction),\n/* harmony export */   PreparedQuery: () => (/* binding */ PreparedQuery),\n/* harmony export */   drizzle: () => (/* binding */ drizzle)\n/* harmony export */ });\n/* harmony import */ var _index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../index.mjs */ \"(rsc)/../../node_modules/.pnpm/drizzle-orm@0.27.2_@libsql+client@0.3.4/node_modules/drizzle-orm/index.mjs\");\n/* harmony import */ var _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../alias-3e926a50.mjs */ \"(rsc)/../../node_modules/.pnpm/drizzle-orm@0.27.2_@libsql+client@0.3.4/node_modules/drizzle-orm/alias-3e926a50.mjs\");\n/* harmony import */ var _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../session-8302855c.mjs */ \"(rsc)/../../node_modules/.pnpm/drizzle-orm@0.27.2_@libsql+client@0.3.4/node_modules/drizzle-orm/session-8302855c.mjs\");\n\n\n\n\nclass LibSQLSession extends _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.S {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"LibSQLSession\";\n    }\n    constructor(client, dialect, schema, options, tx){\n        super(dialect);\n        this.client = client;\n        this.schema = schema;\n        this.options = options;\n        this.tx = tx;\n        this.logger = options.logger ?? new _index_mjs__WEBPACK_IMPORTED_MODULE_2__.NoopLogger();\n    }\n    prepareQuery(query, fields, customResultMapper) {\n        return new PreparedQuery(this.client, query.sql, query.params, this.logger, fields, this.tx, customResultMapper);\n    }\n    /*override */ batch(queries) {\n        const builtQueries = queries.map((query)=>{\n            const builtQuery = this.dialect.sqlToQuery(query);\n            return {\n                sql: builtQuery.sql,\n                args: builtQuery.params\n            };\n        });\n        return this.client.batch(builtQueries);\n    }\n    async transaction(transaction, _config) {\n        // TODO: support transaction behavior\n        const libsqlTx = await this.client.transaction();\n        const session = new LibSQLSession(this.client, this.dialect, this.schema, this.options, libsqlTx);\n        const tx = new LibSQLTransaction(\"async\", this.dialect, session, this.schema);\n        try {\n            const result = await transaction(tx);\n            await libsqlTx.commit();\n            return result;\n        } catch (err) {\n            await libsqlTx.rollback();\n            throw err;\n        }\n    }\n}\nclass LibSQLTransaction extends _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.a {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"LibSQLTransaction\";\n    }\n    async transaction(transaction) {\n        const savepointName = `sp${this.nestedIndex}`;\n        const tx = new LibSQLTransaction(\"async\", this.dialect, this.session, this.schema, this.nestedIndex + 1);\n        await this.session.run(_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.s.raw(`savepoint ${savepointName}`));\n        try {\n            const result = await transaction(tx);\n            await this.session.run(_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.s.raw(`release savepoint ${savepointName}`));\n            return result;\n        } catch (err) {\n            await this.session.run(_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.s.raw(`rollback to savepoint ${savepointName}`));\n            throw err;\n        }\n    }\n}\nclass PreparedQuery extends _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.P {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"LibSQLPreparedQuery\";\n    }\n    constructor(client, queryString, params, logger, fields, tx, customResultMapper){\n        super();\n        this.client = client;\n        this.queryString = queryString;\n        this.params = params;\n        this.logger = logger;\n        this.fields = fields;\n        this.tx = tx;\n        this.customResultMapper = customResultMapper;\n    }\n    run(placeholderValues) {\n        const params = (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.f)(this.params, placeholderValues ?? {});\n        this.logger.logQuery(this.queryString, params);\n        const stmt = {\n            sql: this.queryString,\n            args: params\n        };\n        return this.tx ? this.tx.execute(stmt) : this.client.execute(stmt);\n    }\n    async all(placeholderValues) {\n        const { fields, joinsNotNullableMap, logger, queryString, tx, client, customResultMapper } = this;\n        if (!fields && !customResultMapper) {\n            const params = (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.f)(this.params, placeholderValues ?? {});\n            logger.logQuery(queryString, params);\n            const stmt = {\n                sql: queryString,\n                args: params\n            };\n            return (tx ? tx.execute(stmt) : client.execute(stmt)).then(({ rows })=>rows.map((row)=>normalizeRow(row)));\n        }\n        const rows = await this.values(placeholderValues);\n        if (customResultMapper) {\n            return customResultMapper(rows, normalizeFieldValue);\n        }\n        return rows.map((row)=>{\n            return (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(fields, Array.prototype.slice.call(row).map((v)=>normalizeFieldValue(v)), joinsNotNullableMap);\n        });\n    }\n    async get(placeholderValues) {\n        const { fields, joinsNotNullableMap, logger, queryString, tx, client, customResultMapper } = this;\n        if (!fields && !customResultMapper) {\n            const params = (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.f)(this.params, placeholderValues ?? {});\n            logger.logQuery(queryString, params);\n            const stmt = {\n                sql: queryString,\n                args: params\n            };\n            return (tx ? tx.execute(stmt) : client.execute(stmt)).then(({ rows })=>normalizeRow(rows[0]));\n        }\n        const rows = await this.values(placeholderValues);\n        if (!rows[0]) {\n            return undefined;\n        }\n        if (customResultMapper) {\n            return customResultMapper(rows, normalizeFieldValue);\n        }\n        return (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(fields, Array.prototype.slice.call(rows[0]).map((v)=>normalizeFieldValue(v)), joinsNotNullableMap);\n    }\n    values(placeholderValues) {\n        const params = (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.f)(this.params, placeholderValues ?? {});\n        this.logger.logQuery(this.queryString, params);\n        const stmt = {\n            sql: this.queryString,\n            args: params\n        };\n        return (this.tx ? this.tx.execute(stmt) : this.client.execute(stmt)).then(({ rows })=>rows);\n    }\n}\nfunction normalizeRow(obj) {\n    // The libSQL node-sqlite3 compatibility wrapper returns rows\n    // that can be accessed both as objects and arrays. Let's\n    // turn them into objects what's what other SQLite drivers\n    // do.\n    return Object.keys(obj).reduce((acc, key)=>{\n        if (Object.prototype.propertyIsEnumerable.call(obj, key)) {\n            acc[key] = obj[key];\n        }\n        return acc;\n    }, {});\n}\nfunction normalizeFieldValue(value) {\n    if (value instanceof ArrayBuffer) {\n        if (typeof Buffer !== \"undefined\") {\n            if (!(value instanceof Buffer)) {\n                return Buffer.from(value);\n            }\n            return value;\n        }\n        if (typeof TextDecoder !== \"undefined\") {\n            return new TextDecoder().decode(value);\n        }\n        throw new Error(\"TextDecoder is not available. Please provide either Buffer or TextDecoder polyfill.\");\n    }\n    return value;\n}\nfunction drizzle(client, config = {}) {\n    const dialect = new _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.c();\n    let logger;\n    if (config.logger === true) {\n        logger = new _index_mjs__WEBPACK_IMPORTED_MODULE_2__.DefaultLogger();\n    } else if (config.logger !== false) {\n        logger = config.logger;\n    }\n    let schema;\n    if (config.schema) {\n        const tablesConfig = (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(config.schema, _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.c);\n        schema = {\n            fullSchema: config.schema,\n            schema: tablesConfig.tables,\n            tableNamesMap: tablesConfig.tableNamesMap\n        };\n    }\n    const session = new LibSQLSession(client, dialect, schema, {\n        logger\n    }, undefined);\n    return new _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\"async\", dialect, session, schema);\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/drizzle-orm@0.27.2_@libsql+client@0.3.4/node_modules/drizzle-orm/libsql/index.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/drizzle-orm@0.27.2_@libsql+client@0.3.4/node_modules/drizzle-orm/session-8302855c.mjs":
/*!**********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/drizzle-orm@0.27.2_@libsql+client@0.3.4/node_modules/drizzle-orm/session-8302855c.mjs ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   B: () => (/* binding */ BaseSQLiteDatabase),\n/* harmony export */   I: () => (/* binding */ InlineForeignKeys),\n/* harmony export */   M: () => (/* binding */ ManualViewBuilder),\n/* harmony export */   P: () => (/* binding */ PreparedQuery$1),\n/* harmony export */   Q: () => (/* binding */ QueryBuilder),\n/* harmony export */   S: () => (/* binding */ SQLiteSession),\n/* harmony export */   V: () => (/* binding */ ViewBuilderCore),\n/* harmony export */   a: () => (/* binding */ SQLiteTransaction),\n/* harmony export */   b: () => (/* binding */ SQLiteSyncDialect),\n/* harmony export */   c: () => (/* binding */ SQLiteAsyncDialect),\n/* harmony export */   d: () => (/* binding */ SQLiteTable),\n/* harmony export */   e: () => (/* binding */ SQLiteViewConfig),\n/* harmony export */   f: () => (/* binding */ SQLiteDialect),\n/* harmony export */   g: () => (/* binding */ SQLiteDelete),\n/* harmony export */   h: () => (/* binding */ SQLiteInsertBuilder),\n/* harmony export */   i: () => (/* binding */ SQLiteInsert),\n/* harmony export */   j: () => (/* binding */ SQLiteSelectBuilder),\n/* harmony export */   k: () => (/* binding */ SQLiteSelectQueryBuilder),\n/* harmony export */   l: () => (/* binding */ SQLiteSelect),\n/* harmony export */   m: () => (/* binding */ SQLiteUpdateBuilder),\n/* harmony export */   n: () => (/* binding */ SQLiteUpdate),\n/* harmony export */   o: () => (/* binding */ sqliteTableCreator),\n/* harmony export */   p: () => (/* binding */ ViewBuilder),\n/* harmony export */   q: () => (/* binding */ SQLiteViewBase),\n/* harmony export */   r: () => (/* binding */ SQLiteView),\n/* harmony export */   s: () => (/* binding */ sqliteTable),\n/* harmony export */   t: () => (/* binding */ sqliteView),\n/* harmony export */   v: () => (/* binding */ view)\n/* harmony export */ });\n/* harmony import */ var _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./alias-3e926a50.mjs */ \"(rsc)/../../node_modules/.pnpm/drizzle-orm@0.27.2_@libsql+client@0.3.4/node_modules/drizzle-orm/alias-3e926a50.mjs\");\n/* harmony import */ var _errors_fed11085_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors-fed11085.mjs */ \"(rsc)/../../node_modules/.pnpm/drizzle-orm@0.27.2_@libsql+client@0.3.4/node_modules/drizzle-orm/errors-fed11085.mjs\");\n\n\n/** @internal */ const InlineForeignKeys = Symbol.for(\"drizzle:SQLiteInlineForeignKeys\");\nlet prop, prop1;\nclass SQLiteTable extends _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.T {\n    static{\n        prop = _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Columns;\n        prop1 = _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.ExtraConfigBuilder;\n    }\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"SQLiteTable\";\n    }\n    static{\n        /** @internal */ this.Symbol = Object.assign({}, _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol, {\n            InlineForeignKeys: InlineForeignKeys\n        });\n    }\n    constructor(...args){\n        super(...args);\n        /** @internal */ this[InlineForeignKeys] = [];\n        /** @internal */ this[prop1] = undefined;\n    }\n}\nfunction sqliteTableBase(name, columns, extraConfig, schema, baseName = name) {\n    const rawTable = new SQLiteTable(name, schema, baseName);\n    const builtColumns = Object.fromEntries(Object.entries(columns).map(([name, colBuilder])=>{\n        const column = colBuilder.build(rawTable);\n        rawTable[InlineForeignKeys].push(...colBuilder.buildForeignKeys(column, rawTable));\n        return [\n            name,\n            column\n        ];\n    }));\n    const table = Object.assign(rawTable, builtColumns);\n    table[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Columns] = builtColumns;\n    if (extraConfig) {\n        table[SQLiteTable.Symbol.ExtraConfigBuilder] = extraConfig;\n    }\n    return table;\n}\nconst sqliteTable = (name, columns, extraConfig)=>{\n    return sqliteTableBase(name, columns, extraConfig);\n};\nfunction sqliteTableCreator(customizeTableName) {\n    return (name, columns, extraConfig)=>{\n        return sqliteTableBase(customizeTableName(name), columns, extraConfig, undefined, name);\n    };\n}\nclass SQLiteDelete {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"SQLiteDelete\";\n    }\n    constructor(table, session, dialect){\n        this.run = (placeholderValues)=>{\n            return this.prepare(true).run(placeholderValues);\n        };\n        this.all = (placeholderValues)=>{\n            return this.prepare(true).all(placeholderValues);\n        };\n        this.get = (placeholderValues)=>{\n            return this.prepare(true).get(placeholderValues);\n        };\n        this.values = (placeholderValues)=>{\n            return this.prepare(true).values(placeholderValues);\n        };\n        this.table = table;\n        this.session = session;\n        this.dialect = dialect;\n        this.config = {\n            table\n        };\n    }\n    where(where) {\n        this.config.where = where;\n        return this;\n    }\n    returning(fields = this.table[SQLiteTable.Symbol.Columns]) {\n        this.config.returning = (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(fields);\n        return this;\n    }\n    /** @internal */ getSQL() {\n        return this.dialect.buildDeleteQuery(this.config);\n    }\n    toSQL() {\n        const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n        return rest;\n    }\n    prepare(isOneTimeQuery) {\n        return this.session[isOneTimeQuery ? \"prepareOneTimeQuery\" : \"prepareQuery\"](this.dialect.sqlToQuery(this.getSQL()), this.config.returning);\n    }\n}\nclass SQLiteInsertBuilder {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"SQLiteInsertBuilder\";\n    }\n    constructor(table, session, dialect){\n        this.table = table;\n        this.session = session;\n        this.dialect = dialect;\n    }\n    values(values) {\n        values = Array.isArray(values) ? values : [\n            values\n        ];\n        if (values.length === 0) {\n            throw new Error(\"values() must be called with at least one value\");\n        }\n        const mappedValues = values.map((entry)=>{\n            const result = {};\n            const cols = this.table[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Columns];\n            for (const colKey of Object.keys(entry)){\n                const colValue = entry[colKey];\n                result[colKey] = (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(colValue, _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.S) ? colValue : new _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.b(colValue, cols[colKey]);\n            }\n            return result;\n        });\n        return new SQLiteInsert(this.table, mappedValues, this.session, this.dialect);\n    }\n}\nclass SQLiteInsert {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"SQLiteInsert\";\n    }\n    constructor(table, values, session, dialect){\n        this.run = (placeholderValues)=>{\n            return this.prepare(true).run(placeholderValues);\n        };\n        this.all = (placeholderValues)=>{\n            return this.prepare(true).all(placeholderValues);\n        };\n        this.get = (placeholderValues)=>{\n            return this.prepare(true).get(placeholderValues);\n        };\n        this.values = (placeholderValues)=>{\n            return this.prepare(true).values(placeholderValues);\n        };\n        this.session = session;\n        this.dialect = dialect;\n        this.config = {\n            table,\n            values\n        };\n    }\n    returning(fields = this.config.table[SQLiteTable.Symbol.Columns]) {\n        this.config.returning = (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(fields);\n        return this;\n    }\n    onConflictDoNothing(config = {}) {\n        if (config.target === undefined) {\n            this.config.onConflict = _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`do nothing`;\n        } else {\n            const targetSql = Array.isArray(config.target) ? _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`${config.target}` : _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`${[\n                config.target\n            ]}`;\n            const whereSql = config.where ? _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s` where ${config.where}` : _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s``;\n            this.config.onConflict = _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`${targetSql}${whereSql} do nothing`;\n        }\n        return this;\n    }\n    onConflictDoUpdate(config) {\n        const targetSql = Array.isArray(config.target) ? _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`${config.target}` : _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`${[\n            config.target\n        ]}`;\n        const whereSql = config.where ? _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s` where ${config.where}` : _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s``;\n        const setSql = this.dialect.buildUpdateSet(this.config.table, (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.d)(this.config.table, config.set));\n        this.config.onConflict = _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`${targetSql}${whereSql} do update set ${setSql}`;\n        return this;\n    }\n    /** @internal */ getSQL() {\n        return this.dialect.buildInsertQuery(this.config);\n    }\n    toSQL() {\n        const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n        return rest;\n    }\n    prepare(isOneTimeQuery) {\n        return this.session[isOneTimeQuery ? \"prepareOneTimeQuery\" : \"prepareQuery\"](this.dialect.sqlToQuery(this.getSQL()), this.config.returning);\n    }\n}\nclass ViewBuilderCore {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"SQLiteViewBuilderCore\";\n    }\n    constructor(name){\n        this.config = {};\n        this.name = name;\n    }\n}\nclass ViewBuilder extends ViewBuilderCore {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"SQLiteViewBuilder\";\n    }\n    as(qb) {\n        if (typeof qb === \"function\") {\n            qb = qb(new QueryBuilder());\n        }\n        const selectionProxy = new _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.j({\n            alias: this.name,\n            sqlBehavior: \"error\",\n            sqlAliasedBehavior: \"alias\",\n            replaceOriginalName: true\n        });\n        // const aliasedSelectedFields = new Proxy(qb.getSelectedFields(), selectionProxy);\n        const aliasedSelectedFields = qb.getSelectedFields();\n        return new Proxy(new SQLiteView({\n            sqliteConfig: this.config,\n            config: {\n                name: this.name,\n                schema: undefined,\n                selectedFields: aliasedSelectedFields,\n                query: qb.getSQL().inlineParams()\n            }\n        }), selectionProxy);\n    }\n}\nclass ManualViewBuilder extends ViewBuilderCore {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"SQLiteManualViewBuilder\";\n    }\n    constructor(name, columns){\n        super(name);\n        this.columns = (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.l)(sqliteTable(name, columns));\n    }\n    existing() {\n        return new Proxy(new SQLiteView({\n            sqliteConfig: undefined,\n            config: {\n                name: this.name,\n                schema: undefined,\n                selectedFields: this.columns,\n                query: undefined\n            }\n        }), new _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.j({\n            alias: this.name,\n            sqlBehavior: \"error\",\n            sqlAliasedBehavior: \"alias\",\n            replaceOriginalName: true\n        }));\n    }\n    as(query) {\n        return new Proxy(new SQLiteView({\n            sqliteConfig: this.config,\n            config: {\n                name: this.name,\n                schema: undefined,\n                selectedFields: this.columns,\n                query: query.inlineParams()\n            }\n        }), new _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.j({\n            alias: this.name,\n            sqlBehavior: \"error\",\n            sqlAliasedBehavior: \"alias\",\n            replaceOriginalName: true\n        }));\n    }\n}\nclass SQLiteViewBase extends _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.V {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"SQLiteViewBase\";\n    }\n}\nconst SQLiteViewConfig = Symbol.for(\"drizzle:SQLiteViewConfig\");\nclass SQLiteView extends SQLiteViewBase {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"SQLiteView\";\n    }\n    constructor({ sqliteConfig, config }){\n        super(config);\n        this[SQLiteViewConfig] = sqliteConfig;\n    }\n}\nfunction sqliteView(name, selection) {\n    if (selection) {\n        return new ManualViewBuilder(name, selection);\n    }\n    return new ViewBuilder(name);\n}\nconst view = sqliteView;\nclass SQLiteDialect {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"SQLiteDialect\";\n    }\n    escapeName(name) {\n        return `\"${name}\"`;\n    }\n    escapeParam(_num) {\n        return \"?\";\n    }\n    escapeString(str) {\n        return `'${str.replace(/'/g, \"''\")}'`;\n    }\n    buildDeleteQuery({ table, where, returning }) {\n        const returningSql = returning ? _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s` returning ${this.buildSelection(returning, {\n            isSingleTable: true\n        })}` : undefined;\n        const whereSql = where ? _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s` where ${where}` : undefined;\n        return _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`delete from ${table}${whereSql}${returningSql}`;\n    }\n    buildUpdateSet(table, set) {\n        const setEntries = Object.entries(set);\n        const setSize = setEntries.length;\n        return _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s.fromList(setEntries.flatMap(([colName, value], i)=>{\n            const col = table[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Columns][colName];\n            const res = _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`${(0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(col.name)} = ${value}`;\n            if (i < setSize - 1) {\n                return [\n                    res,\n                    _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s.raw(\", \")\n                ];\n            }\n            return [\n                res\n            ];\n        }));\n    }\n    buildUpdateQuery({ table, set, where, returning }) {\n        const setSql = this.buildUpdateSet(table, set);\n        const returningSql = returning ? _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s` returning ${this.buildSelection(returning, {\n            isSingleTable: true\n        })}` : undefined;\n        const whereSql = where ? _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s` where ${where}` : undefined;\n        return _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`update ${table} set ${setSql}${whereSql}${returningSql}`;\n    }\n    /**\n     * Builds selection SQL with provided fields/expressions\n     *\n     * Examples:\n     *\n     * `select <selection> from`\n     *\n     * `insert ... returning <selection>`\n     *\n     * If `isSingleTable` is true, then columns won't be prefixed with table name\n     */ buildSelection(fields, { isSingleTable = false } = {}) {\n        const columnsLen = fields.length;\n        const chunks = fields.flatMap(({ field }, i)=>{\n            const chunk = [];\n            if ((0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.S.Aliased) && field.isSelectionField) {\n                chunk.push(_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(field.fieldAlias));\n            } else if ((0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.S.Aliased) || (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.S)) {\n                const query = (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.S.Aliased) ? field.sql : field;\n                if (isSingleTable) {\n                    chunk.push(new _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.S(query.queryChunks.map((c)=>{\n                        if ((0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(c, _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.C)) {\n                            return (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(c.name);\n                        }\n                        return c;\n                    })));\n                } else {\n                    chunk.push(query);\n                }\n                if ((0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.S.Aliased)) {\n                    chunk.push(_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s` as ${(0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(field.fieldAlias)}`);\n                }\n            } else if ((0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.C)) {\n                const tableName = field.table[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Name];\n                const columnName = field.name;\n                if (isSingleTable) {\n                    chunk.push((0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(columnName));\n                } else {\n                    chunk.push(_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`${(0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(tableName)}.${(0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(columnName)}`);\n                }\n            }\n            if (i < columnsLen - 1) {\n                chunk.push(_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`, `);\n            }\n            return chunk;\n        });\n        return _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s.fromList(chunks);\n    }\n    buildSelectQuery({ withList, fields, fieldsFlat, where, having, table, joins, orderBy, groupBy, limit, offset, distinct }) {\n        const fieldsList = fieldsFlat ?? (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(fields);\n        for (const f of fieldsList){\n            if ((0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(f.field, _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.C) && (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.p)(f.field.table) !== ((0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(table, _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.q) ? table[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.r].alias : (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(table, SQLiteViewBase) ? table[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.u].name : (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(table, _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.S) ? undefined : (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.p)(table)) && !((table)=>joins.some(({ alias })=>alias === (table[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.IsAlias] ? (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.p)(table) : table[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.BaseName])))(f.field.table)) {\n                const tableName = (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.p)(f.field.table);\n                throw new Error(`Your \"${f.path.join(\"->\")}\" field references a column \"${tableName}\".\"${f.field.name}\", but the table \"${tableName}\" is not part of the query! Did you forget to join it?`);\n            }\n        }\n        const isSingleTable = joins.length === 0;\n        let withSql;\n        if (withList?.length) {\n            const withSqlChunks = [\n                _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`with `\n            ];\n            for (const [i, w] of withList.entries()){\n                withSqlChunks.push(_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`${(0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(w[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.r].alias)} as (${w[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.r].sql})`);\n                if (i < withList.length - 1) {\n                    withSqlChunks.push(_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`, `);\n                }\n            }\n            withSqlChunks.push(_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s` `);\n            withSql = _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s.fromList(withSqlChunks);\n        }\n        const distinctSql = distinct ? _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s` distinct` : undefined;\n        const selection = this.buildSelection(fieldsList, {\n            isSingleTable\n        });\n        const tableSql = (()=>{\n            if ((0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(table, _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.T) && table[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.OriginalName] !== table[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Name]) {\n                return _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`${(0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(table[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.OriginalName])} ${(0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(table[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Name])}`;\n            }\n            return table;\n        })();\n        const joinsArray = [];\n        for (const [index, joinMeta] of joins.entries()){\n            if (index === 0) {\n                joinsArray.push(_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s` `);\n            }\n            const table = joinMeta.table;\n            if ((0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(table, SQLiteTable)) {\n                const tableName = table[SQLiteTable.Symbol.Name];\n                const tableSchema = table[SQLiteTable.Symbol.Schema];\n                const origTableName = table[SQLiteTable.Symbol.OriginalName];\n                const alias = tableName === origTableName ? undefined : joinMeta.alias;\n                joinsArray.push(_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`${_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s.raw(joinMeta.joinType)} join ${tableSchema ? _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`${_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(tableSchema)}.` : undefined}${(0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(origTableName)}${alias && _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s` ${(0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(alias)}`} on ${joinMeta.on}`);\n            } else {\n                joinsArray.push(_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`${_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s.raw(joinMeta.joinType)} join ${table} on ${joinMeta.on}`);\n            }\n            if (index < joins.length - 1) {\n                joinsArray.push(_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s` `);\n            }\n        }\n        const joinsSql = _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s.fromList(joinsArray);\n        const whereSql = where ? _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s` where ${where}` : undefined;\n        const havingSql = having ? _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s` having ${having}` : undefined;\n        const orderByList = [];\n        for (const [index, orderByValue] of orderBy.entries()){\n            orderByList.push(orderByValue);\n            if (index < orderBy.length - 1) {\n                orderByList.push(_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`, `);\n            }\n        }\n        const groupByList = [];\n        for (const [index, groupByValue] of groupBy.entries()){\n            groupByList.push(groupByValue);\n            if (index < groupBy.length - 1) {\n                groupByList.push(_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`, `);\n            }\n        }\n        const groupBySql = groupByList.length > 0 ? _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s` group by ${_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s.fromList(groupByList)}` : undefined;\n        const orderBySql = orderByList.length > 0 ? _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s` order by ${_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s.fromList(orderByList)}` : undefined;\n        const limitSql = limit ? _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s` limit ${limit}` : undefined;\n        const offsetSql = offset ? _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s` offset ${offset}` : undefined;\n        return _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`${withSql}select${distinctSql} ${selection} from ${tableSql}${joinsSql}${whereSql}${groupBySql}${havingSql}${orderBySql}${limitSql}${offsetSql}`;\n    }\n    buildInsertQuery({ table, values, onConflict, returning }) {\n        const isSingleValue = values.length === 1;\n        const valuesSqlList = [];\n        const columns = table[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Columns];\n        const colEntries = isSingleValue ? Object.keys(values[0]).map((fieldName)=>[\n                fieldName,\n                columns[fieldName]\n            ]) : Object.entries(columns);\n        const insertOrder = colEntries.map(([, column])=>(0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(column.name));\n        for (const [valueIndex, value] of values.entries()){\n            const valueList = [];\n            for (const [fieldName, col] of colEntries){\n                const colValue = value[fieldName];\n                if (colValue === undefined || (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(colValue, _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.b) && colValue.value === undefined) {\n                    let defaultValue;\n                    if (col.default !== null && col.default !== undefined) {\n                        defaultValue = (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(col.default, _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.S) ? col.default : (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(col.default, col);\n                    } else {\n                        defaultValue = _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`null`;\n                    }\n                    valueList.push(defaultValue);\n                } else {\n                    valueList.push(colValue);\n                }\n            }\n            valuesSqlList.push(valueList);\n            if (valueIndex < values.length - 1) {\n                valuesSqlList.push(_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`, `);\n            }\n        }\n        const valuesSql = _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s.fromList(valuesSqlList);\n        const returningSql = returning ? _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s` returning ${this.buildSelection(returning, {\n            isSingleTable: true\n        })}` : undefined;\n        const onConflictSql = onConflict ? _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s` on conflict ${onConflict}` : undefined;\n        return _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`insert into ${table} ${insertOrder} values ${valuesSql}${onConflictSql}${returningSql}`;\n    }\n    sqlToQuery(sql) {\n        return sql.toQuery({\n            escapeName: this.escapeName,\n            escapeParam: this.escapeParam,\n            escapeString: this.escapeString\n        });\n    }\n    buildRelationalQuery(fullSchema, schema, tableNamesMap, table, tableConfig, config, tableAlias, relationColumns, isRoot = false) {\n        if (config === true) {\n            const selectionEntries = Object.entries(tableConfig.columns);\n            const selection = selectionEntries.map(([key, value])=>({\n                    dbKey: value.name,\n                    tsKey: key,\n                    field: value,\n                    tableTsKey: undefined,\n                    isJson: false,\n                    selection: []\n                }));\n            return {\n                tableTsKey: tableConfig.tsName,\n                sql: table,\n                selection\n            };\n        }\n        const aliasedColumns = Object.fromEntries(Object.entries(tableConfig.columns).map(([key, value])=>[\n                key,\n                (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(value, tableAlias)\n            ]));\n        const aliasedRelations = Object.fromEntries(Object.entries(tableConfig.relations).map(([key, value])=>[\n                key,\n                (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.x)(value, tableAlias)\n            ]));\n        const aliasedFields = Object.assign({}, aliasedColumns, aliasedRelations);\n        const fieldsSelection = {};\n        let selectedColumns = [];\n        let selectedExtras = [];\n        let selectedRelations = [];\n        if (config.columns) {\n            let isIncludeMode = false;\n            for (const [field, value] of Object.entries(config.columns)){\n                if (value === undefined) {\n                    continue;\n                }\n                if (field in tableConfig.columns) {\n                    if (!isIncludeMode && value === true) {\n                        isIncludeMode = true;\n                    }\n                    selectedColumns.push(field);\n                }\n            }\n            if (selectedColumns.length > 0) {\n                selectedColumns = isIncludeMode ? selectedColumns.filter((c)=>config.columns?.[c] === true) : Object.keys(tableConfig.columns).filter((key)=>!selectedColumns.includes(key));\n            }\n        }\n        if (config.with) {\n            selectedRelations = Object.entries(config.with).filter((entry)=>!!entry[1]).map(([key, value])=>({\n                    key,\n                    value\n                }));\n        }\n        if (!config.columns) {\n            selectedColumns = Object.keys(tableConfig.columns);\n        }\n        if (config.extras) {\n            const extrasOrig = typeof config.extras === \"function\" ? config.extras(aliasedFields, {\n                sql: _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s\n            }) : config.extras;\n            selectedExtras = Object.entries(extrasOrig).map(([key, value])=>({\n                    key,\n                    value: (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.y)(value, tableAlias)\n                }));\n        }\n        for (const field of selectedColumns){\n            const column = tableConfig.columns[field];\n            fieldsSelection[field] = column;\n        }\n        for (const { key, value } of selectedExtras){\n            fieldsSelection[key] = value;\n        }\n        let where;\n        if (config.where) {\n            const whereSql = typeof config.where === \"function\" ? config.where(aliasedFields, _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.z) : config.where;\n            where = whereSql && (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.A)(whereSql, tableAlias);\n        }\n        const groupBy = (tableConfig.primaryKey.length ? tableConfig.primaryKey : Object.values(tableConfig.columns)).map((c)=>(0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(c, tableAlias));\n        let orderByOrig = typeof config.orderBy === \"function\" ? config.orderBy(aliasedFields, _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.B) : config.orderBy ?? [];\n        if (!Array.isArray(orderByOrig)) {\n            orderByOrig = [\n                orderByOrig\n            ];\n        }\n        const orderBy = orderByOrig.map((orderByValue)=>{\n            if ((0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(orderByValue, _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.C)) {\n                return (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(orderByValue, tableAlias);\n            }\n            return (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.A)(orderByValue, tableAlias);\n        });\n        const builtRelations = [];\n        const builtRelationFields = [];\n        let result;\n        let selectedRelationIndex = 0;\n        for (const { key: selectedRelationKey, value: selectedRelationValue } of selectedRelations){\n            let relation;\n            for (const [relationKey, relationValue] of Object.entries(tableConfig.relations)){\n                if ((0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(relationValue, _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.R) && relationKey === selectedRelationKey) {\n                    relation = relationValue;\n                    break;\n                }\n            }\n            if (!relation) {\n                throw new Error(`Relation ${selectedRelationKey} not found`);\n            }\n            const normalizedRelation = (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.D)(schema, tableNamesMap, relation);\n            const relationAlias = `${tableAlias}_${selectedRelationKey}`;\n            const builtRelation = this.buildRelationalQuery(fullSchema, schema, tableNamesMap, fullSchema[tableNamesMap[relation.referencedTable[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Name]]], schema[tableNamesMap[relation.referencedTable[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Name]]], selectedRelationValue, relationAlias, normalizedRelation.references);\n            builtRelations.push({\n                key: selectedRelationKey,\n                value: builtRelation\n            });\n            let relationWhere;\n            if (typeof selectedRelationValue === \"object\" && selectedRelationValue.limit) {\n                const field = _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`${_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(relationAlias)}.${_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(\"__drizzle_row_number\")}`;\n                relationWhere = (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(relationWhere, (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.F)((0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`${field} <= ${selectedRelationValue.limit}`), _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`(${field} is null)`));\n            }\n            const join = {\n                table: (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(builtRelation.sql, _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.T) ? (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.G)(builtRelation.sql, relationAlias) : new _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.q(builtRelation.sql, {}, relationAlias),\n                alias: relationAlias,\n                on: (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(...normalizedRelation.fields.map((field, i)=>(0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.H)((0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(field, tableAlias), (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(normalizedRelation.references[i], relationAlias)))),\n                joinType: \"left\"\n            };\n            const elseField = _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`json_group_array(json_array(${_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s.join(builtRelation.selection.map(({ dbKey: key, isJson })=>{\n                const field = _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`${_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(relationAlias)}.${_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(key)}`;\n                return isJson ? _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`json(${field})` : field;\n            }), _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`, `)}))`;\n            const countSql = normalizedRelation.references.length === 1 ? (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(normalizedRelation.references[0], relationAlias) : _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s.fromList([\n                _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`coalesce(`,\n                _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s.join(normalizedRelation.references.map((c)=>(0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(c, relationAlias)), _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s.raw(\", \")),\n                _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s.raw(\")\")\n            ]);\n            const field = _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`case when count(${countSql}) = 0 then '[]' else ${elseField} end`.as(selectedRelationKey);\n            const builtRelationField = {\n                path: [\n                    selectedRelationKey\n                ],\n                field\n            };\n            result = this.buildSelectQuery({\n                table: result ? new _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.q(result, {}, tableAlias) : (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.G)(table, tableAlias),\n                fields: {},\n                fieldsFlat: [\n                    {\n                        path: [],\n                        field: _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`${_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(tableAlias)}.*`\n                    },\n                    ...selectedRelationIndex === selectedRelations.length - 1 ? selectedExtras.map(({ key, value })=>({\n                            path: [\n                                key\n                            ],\n                            field: value\n                        })) : [],\n                    builtRelationField\n                ],\n                where: relationWhere,\n                groupBy,\n                orderBy: selectedRelationIndex === selectedRelations.length - 1 ? orderBy : [],\n                joins: [\n                    join\n                ]\n            });\n            builtRelationFields.push(builtRelationField);\n            selectedRelationIndex++;\n        }\n        const finalFieldsSelection = Object.entries(fieldsSelection).map(([key, value])=>{\n            return {\n                path: [\n                    key\n                ],\n                field: (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(value, _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.C) ? (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(value, tableAlias) : value\n            };\n        });\n        const finalFieldsFlat = isRoot ? [\n            ...finalFieldsSelection.map(({ path, field })=>({\n                    path,\n                    field: (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.S.Aliased) ? _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`${_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(field.fieldAlias)}` : field\n                })),\n            ...builtRelationFields.map(({ path, field })=>({\n                    path,\n                    field: _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`json(${_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(field.fieldAlias)})`\n                }))\n        ] : [\n            ...Object.entries(tableConfig.columns).map(([tsKey, column])=>({\n                    path: [\n                        tsKey\n                    ],\n                    field: (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(column, tableAlias)\n                })),\n            ...selectedExtras.map(({ key, value })=>({\n                    path: [\n                        key\n                    ],\n                    field: value\n                })),\n            ...builtRelationFields.map(({ path, field })=>({\n                    path,\n                    field: _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`${_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(tableAlias)}.${_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(field.fieldAlias)}`\n                }))\n        ];\n        if (finalFieldsFlat.length === 0) {\n            finalFieldsFlat.push({\n                path: [],\n                field: _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s.raw(\"1\")\n            });\n        }\n        if (!isRoot && !config.limit && orderBy.length > 0) {\n            finalFieldsFlat.push({\n                path: [\n                    \"__drizzle_row_number\"\n                ],\n                field: _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`row_number() over(order by ${_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s.join(orderBy, _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`, `)})`\n            });\n        }\n        let limit, offset;\n        if (config.limit !== undefined || config.offset !== undefined) {\n            if (isRoot) {\n                limit = config.limit;\n                offset = config.offset;\n            } else {\n                finalFieldsFlat.push({\n                    path: [\n                        \"__drizzle_row_number\"\n                    ],\n                    field: _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`row_number() over(partition by ${relationColumns.map((c)=>(0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(c, tableAlias))}${orderBy.length > 0 && !isRoot ? _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s` order by ${_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s.join(orderBy, _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`, `)}` : undefined})`.as(\"__drizzle_row_number\")\n                });\n            }\n        }\n        result = this.buildSelectQuery({\n            table: result ? new _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.q(result, {}, tableAlias) : (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.G)(table, tableAlias),\n            fields: {},\n            fieldsFlat: finalFieldsFlat,\n            where,\n            groupBy: [],\n            orderBy: isRoot ? orderBy : [],\n            joins: [],\n            limit,\n            offset: offset\n        });\n        return {\n            tableTsKey: tableConfig.tsName,\n            sql: result,\n            selection: [\n                ...finalFieldsSelection.map(({ path, field })=>({\n                        dbKey: (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.S.Aliased) ? field.fieldAlias : tableConfig.columns[path[0]].name,\n                        tsKey: path[0],\n                        field,\n                        tableTsKey: undefined,\n                        isJson: false,\n                        selection: []\n                    })),\n                ...builtRelations.map(({ key, value })=>({\n                        dbKey: key,\n                        tsKey: key,\n                        field: undefined,\n                        tableTsKey: value.tableTsKey,\n                        isJson: true,\n                        selection: value.selection\n                    }))\n            ]\n        };\n    }\n}\nclass SQLiteSyncDialect extends SQLiteDialect {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"SQLiteSyncDialect\";\n    }\n    migrate(migrations, session) {\n        const migrationTableCreate = _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`\n\t\t\tCREATE TABLE IF NOT EXISTS \"__drizzle_migrations\" (\n\t\t\t\tid SERIAL PRIMARY KEY,\n\t\t\t\thash text NOT NULL,\n\t\t\t\tcreated_at numeric\n\t\t\t)\n\t\t`;\n        session.run(migrationTableCreate);\n        const dbMigrations = session.values(_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`SELECT id, hash, created_at FROM \"__drizzle_migrations\" ORDER BY created_at DESC LIMIT 1`);\n        const lastDbMigration = dbMigrations[0] ?? undefined;\n        session.run(_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`BEGIN`);\n        try {\n            for (const migration of migrations){\n                if (!lastDbMigration || Number(lastDbMigration[2]) < migration.folderMillis) {\n                    for (const stmt of migration.sql){\n                        session.run(_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s.raw(stmt));\n                    }\n                    session.run(_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`INSERT INTO \"__drizzle_migrations\" (\"hash\", \"created_at\") VALUES(${migration.hash}, ${migration.folderMillis})`);\n                }\n            }\n            session.run(_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`COMMIT`);\n        } catch (e) {\n            session.run(_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`ROLLBACK`);\n            throw e;\n        }\n    }\n}\nclass SQLiteAsyncDialect extends SQLiteDialect {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"SQLiteAsyncDialect\";\n    }\n    async migrate(migrations, session) {\n        const migrationTableCreate = _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`\n\t\t\tCREATE TABLE IF NOT EXISTS \"__drizzle_migrations\" (\n\t\t\t\tid SERIAL PRIMARY KEY,\n\t\t\t\thash text NOT NULL,\n\t\t\t\tcreated_at numeric\n\t\t\t)\n\t\t`;\n        await session.run(migrationTableCreate);\n        const dbMigrations = await session.values(_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`SELECT id, hash, created_at FROM \"__drizzle_migrations\" ORDER BY created_at DESC LIMIT 1`);\n        const lastDbMigration = dbMigrations[0] ?? undefined;\n        await session.transaction(async (tx)=>{\n            for (const migration of migrations){\n                if (!lastDbMigration || Number(lastDbMigration[2]) < migration.folderMillis) {\n                    for (const stmt of migration.sql){\n                        await tx.run(_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s.raw(stmt));\n                    }\n                    await tx.run(_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.s`INSERT INTO \"__drizzle_migrations\" (\"hash\", \"created_at\") VALUES(${migration.hash}, ${migration.folderMillis})`);\n                }\n            }\n        });\n    }\n}\nclass SQLiteSelectBuilder {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"SQLiteSelectBuilder\";\n    }\n    constructor(config){\n        this.fields = config.fields;\n        this.session = config.session;\n        this.dialect = config.dialect;\n        this.withList = config.withList;\n        this.distinct = config.distinct;\n    }\n    from(source) {\n        const isPartialSelect = !!this.fields;\n        let fields;\n        if (this.fields) {\n            fields = this.fields;\n        } else if ((0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(source, _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.q)) {\n            // This is required to use the proxy handler to get the correct field values from the subquery\n            fields = Object.fromEntries(Object.keys(source[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.r].selection).map((key)=>[\n                    key,\n                    source[key]\n                ]));\n        } else if ((0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(source, SQLiteViewBase)) {\n            fields = source[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.u].selectedFields;\n        } else if ((0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(source, _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.S)) {\n            fields = {};\n        } else {\n            fields = (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.l)(source);\n        }\n        return new SQLiteSelect({\n            table: source,\n            fields,\n            isPartialSelect,\n            session: this.session,\n            dialect: this.dialect,\n            withList: this.withList,\n            distinct: this.distinct\n        });\n    }\n}\nclass SQLiteSelectQueryBuilder extends _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.I {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"SQLiteSelectQueryBuilder\";\n    }\n    constructor({ table, fields, isPartialSelect, session, dialect, withList, distinct }){\n        super();\n        this.leftJoin = this.createJoin(\"left\");\n        this.rightJoin = this.createJoin(\"right\");\n        this.innerJoin = this.createJoin(\"inner\");\n        this.fullJoin = this.createJoin(\"full\");\n        this.config = {\n            withList,\n            table,\n            fields: {\n                ...fields\n            },\n            joins: [],\n            orderBy: [],\n            groupBy: [],\n            distinct\n        };\n        this.isPartialSelect = isPartialSelect;\n        this.session = session;\n        this.dialect = dialect;\n        this._ = {\n            selectedFields: fields\n        };\n        this.tableName = (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.J)(table);\n        this.joinsNotNullableMap = typeof this.tableName === \"string\" ? {\n            [this.tableName]: true\n        } : {};\n    }\n    createJoin(joinType) {\n        return (table, on)=>{\n            const baseTableName = this.tableName;\n            const tableName = (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.J)(table);\n            if (typeof tableName === \"string\" && this.config.joins.some((join)=>join.alias === tableName)) {\n                throw new Error(`Alias \"${tableName}\" is already used in this query`);\n            }\n            if (!this.isPartialSelect) {\n                // If this is the first join and this is not a partial select and we're not selecting from raw SQL, \"move\" the fields from the main table to the nested object\n                if (Object.keys(this.joinsNotNullableMap).length === 1 && typeof baseTableName === \"string\") {\n                    this.config.fields = {\n                        [baseTableName]: this.config.fields\n                    };\n                }\n                if (typeof tableName === \"string\" && !(0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(table, _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.S)) {\n                    const selection = (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(table, _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.q) ? table[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.r].selection : (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(table, _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.V) ? table[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.u].selectedFields : table[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Columns];\n                    this.config.fields[tableName] = selection;\n                }\n            }\n            if (typeof on === \"function\") {\n                on = on(new Proxy(this.config.fields, new _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.j({\n                    sqlAliasedBehavior: \"sql\",\n                    sqlBehavior: \"sql\"\n                })));\n            }\n            this.config.joins.push({\n                on,\n                table,\n                joinType,\n                alias: tableName\n            });\n            if (typeof tableName === \"string\") {\n                switch(joinType){\n                    case \"left\":\n                        {\n                            this.joinsNotNullableMap[tableName] = false;\n                            break;\n                        }\n                    case \"right\":\n                        {\n                            this.joinsNotNullableMap = Object.fromEntries(Object.entries(this.joinsNotNullableMap).map(([key])=>[\n                                    key,\n                                    false\n                                ]));\n                            this.joinsNotNullableMap[tableName] = true;\n                            break;\n                        }\n                    case \"inner\":\n                        {\n                            this.joinsNotNullableMap[tableName] = true;\n                            break;\n                        }\n                    case \"full\":\n                        {\n                            this.joinsNotNullableMap = Object.fromEntries(Object.entries(this.joinsNotNullableMap).map(([key])=>[\n                                    key,\n                                    false\n                                ]));\n                            this.joinsNotNullableMap[tableName] = false;\n                            break;\n                        }\n                }\n            }\n            return this;\n        };\n    }\n    where(where) {\n        if (typeof where === \"function\") {\n            where = where(new Proxy(this.config.fields, new _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.j({\n                sqlAliasedBehavior: \"sql\",\n                sqlBehavior: \"sql\"\n            })));\n        }\n        this.config.where = where;\n        return this;\n    }\n    having(having) {\n        if (typeof having === \"function\") {\n            having = having(new Proxy(this.config.fields, new _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.j({\n                sqlAliasedBehavior: \"sql\",\n                sqlBehavior: \"sql\"\n            })));\n        }\n        this.config.having = having;\n        return this;\n    }\n    groupBy(...columns) {\n        if (typeof columns[0] === \"function\") {\n            const groupBy = columns[0](new Proxy(this.config.fields, new _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.j({\n                sqlAliasedBehavior: \"alias\",\n                sqlBehavior: \"sql\"\n            })));\n            this.config.groupBy = Array.isArray(groupBy) ? groupBy : [\n                groupBy\n            ];\n        } else {\n            this.config.groupBy = columns;\n        }\n        return this;\n    }\n    orderBy(...columns) {\n        if (typeof columns[0] === \"function\") {\n            const orderBy = columns[0](new Proxy(this.config.fields, new _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.j({\n                sqlAliasedBehavior: \"alias\",\n                sqlBehavior: \"sql\"\n            })));\n            this.config.orderBy = Array.isArray(orderBy) ? orderBy : [\n                orderBy\n            ];\n        } else {\n            this.config.orderBy = columns;\n        }\n        return this;\n    }\n    limit(limit) {\n        this.config.limit = limit;\n        return this;\n    }\n    offset(offset) {\n        this.config.offset = offset;\n        return this;\n    }\n    /** @internal */ getSQL() {\n        return this.dialect.buildSelectQuery(this.config);\n    }\n    toSQL() {\n        const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n        return rest;\n    }\n    as(alias) {\n        return new Proxy(new _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.q(this.getSQL(), this.config.fields, alias), new _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.j({\n            alias,\n            sqlAliasedBehavior: \"alias\",\n            sqlBehavior: \"error\"\n        }));\n    }\n    getSelectedFields() {\n        return new Proxy(this.config.fields, new _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.j({\n            alias: this.tableName,\n            sqlAliasedBehavior: \"alias\",\n            sqlBehavior: \"error\"\n        }));\n    }\n}\nclass SQLiteSelect extends SQLiteSelectQueryBuilder {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"SQLiteSelect\";\n    }\n    prepare(isOneTimeQuery) {\n        if (!this.session) {\n            throw new Error(\"Cannot execute a query on a query builder. Please use a database instance instead.\");\n        }\n        const fieldsList = (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this.config.fields);\n        const query = this.session[isOneTimeQuery ? \"prepareOneTimeQuery\" : \"prepareQuery\"](this.dialect.sqlToQuery(this.getSQL()), fieldsList);\n        query.joinsNotNullableMap = this.joinsNotNullableMap;\n        return query;\n    }\n    constructor(...args){\n        super(...args);\n        this.run = (placeholderValues)=>{\n            return this.prepare(true).run(placeholderValues);\n        };\n        this.all = (placeholderValues)=>{\n            return this.prepare(true).all(placeholderValues);\n        };\n        this.get = (placeholderValues)=>{\n            return this.prepare(true).get(placeholderValues);\n        };\n        this.values = (placeholderValues)=>{\n            return this.prepare(true).values(placeholderValues);\n        };\n    }\n}\nclass QueryBuilder {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"SQLiteQueryBuilder\";\n    }\n    $with(alias) {\n        const queryBuilder = this;\n        return {\n            as (qb) {\n                if (typeof qb === \"function\") {\n                    qb = qb(queryBuilder);\n                }\n                return new Proxy(new _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.W(qb.getSQL(), qb.getSelectedFields(), alias, true), new _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.j({\n                    alias,\n                    sqlAliasedBehavior: \"alias\",\n                    sqlBehavior: \"error\"\n                }));\n            }\n        };\n    }\n    with(...queries) {\n        const self = this;\n        function select(fields) {\n            return new SQLiteSelectBuilder({\n                fields: fields ?? undefined,\n                session: undefined,\n                dialect: self.getDialect(),\n                withList: queries\n            });\n        }\n        function selectDistinct(fields) {\n            return new SQLiteSelectBuilder({\n                fields: fields ?? undefined,\n                session: undefined,\n                dialect: self.getDialect(),\n                withList: queries,\n                distinct: true\n            });\n        }\n        return {\n            select,\n            selectDistinct\n        };\n    }\n    select(fields) {\n        return new SQLiteSelectBuilder({\n            fields: fields ?? undefined,\n            session: undefined,\n            dialect: this.getDialect()\n        });\n    }\n    selectDistinct(fields) {\n        return new SQLiteSelectBuilder({\n            fields: fields ?? undefined,\n            session: undefined,\n            dialect: this.getDialect(),\n            distinct: true\n        });\n    }\n    // Lazy load dialect to avoid circular dependency\n    getDialect() {\n        if (!this.dialect) {\n            this.dialect = new SQLiteSyncDialect();\n        }\n        return this.dialect;\n    }\n}\nclass SQLiteUpdateBuilder {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"SQLiteUpdateBuilder\";\n    }\n    constructor(table, session, dialect){\n        this.table = table;\n        this.session = session;\n        this.dialect = dialect;\n    }\n    set(values) {\n        return new SQLiteUpdate(this.table, (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.d)(this.table, values), this.session, this.dialect);\n    }\n}\nclass SQLiteUpdate {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"SQLiteUpdate\";\n    }\n    constructor(table, set, session, dialect){\n        this.run = (placeholderValues)=>{\n            return this.prepare(true).run(placeholderValues);\n        };\n        this.all = (placeholderValues)=>{\n            return this.prepare(true).all(placeholderValues);\n        };\n        this.get = (placeholderValues)=>{\n            return this.prepare(true).get(placeholderValues);\n        };\n        this.values = (placeholderValues)=>{\n            return this.prepare(true).values(placeholderValues);\n        };\n        this.session = session;\n        this.dialect = dialect;\n        this.config = {\n            set,\n            table\n        };\n    }\n    where(where) {\n        this.config.where = where;\n        return this;\n    }\n    returning(fields = this.config.table[SQLiteTable.Symbol.Columns]) {\n        this.config.returning = (0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(fields);\n        return this;\n    }\n    /** @internal */ getSQL() {\n        return this.dialect.buildUpdateQuery(this.config);\n    }\n    toSQL() {\n        const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n        return rest;\n    }\n    prepare(isOneTimeQuery) {\n        return this.session[isOneTimeQuery ? \"prepareOneTimeQuery\" : \"prepareQuery\"](this.dialect.sqlToQuery(this.getSQL()), this.config.returning);\n    }\n}\nclass AsyncRelationalQueryBuilder {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"SQLiteAsyncRelationalQueryBuilder\";\n    }\n    constructor(fullSchema, schema, tableNamesMap, table, tableConfig, dialect, session){\n        this.fullSchema = fullSchema;\n        this.schema = schema;\n        this.tableNamesMap = tableNamesMap;\n        this.table = table;\n        this.tableConfig = tableConfig;\n        this.dialect = dialect;\n        this.session = session;\n    }\n    findMany(config) {\n        return new SQLiteRelationalQuery(this.fullSchema, this.schema, this.tableNamesMap, this.table, this.tableConfig, this.dialect, this.session, config ? config : {}, \"many\");\n    }\n    findFirst(config) {\n        return new SQLiteRelationalQuery(this.fullSchema, this.schema, this.tableNamesMap, this.table, this.tableConfig, this.dialect, this.session, config ? {\n            ...config,\n            limit: 1\n        } : {\n            limit: 1\n        }, \"first\");\n    }\n}\nclass SyncRelationalQueryBuilder {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"SQLiteSyncRelationalQueryBuilder\";\n    }\n    constructor(fullSchema, schema, tableNamesMap, table, tableConfig, dialect, session){\n        this.fullSchema = fullSchema;\n        this.schema = schema;\n        this.tableNamesMap = tableNamesMap;\n        this.table = table;\n        this.tableConfig = tableConfig;\n        this.dialect = dialect;\n        this.session = session;\n    }\n    prepareFindMany(config) {\n        const query = new SQLiteRelationalQuery(this.fullSchema, this.schema, this.tableNamesMap, this.table, this.tableConfig, this.dialect, this.session, config ? config : {}, \"many\").prepare();\n        return {\n            execute: query.all.bind(query)\n        };\n    }\n    findMany(config) {\n        return this.prepareFindMany(config).execute();\n    }\n    prepareFindFirst(config) {\n        const query = new SQLiteRelationalQuery(this.fullSchema, this.schema, this.tableNamesMap, this.table, this.tableConfig, this.dialect, this.session, config ? {\n            ...config,\n            limit: 1\n        } : {\n            limit: 1\n        }, \"first\").prepare();\n        return {\n            execute: query.get.bind(query)\n        };\n    }\n    findFirst(config) {\n        return this.prepareFindFirst(config).execute();\n    }\n}\nclass SQLiteRelationalQuery {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"SQLiteRelationalQuery\";\n    }\n    constructor(fullSchema, schema, tableNamesMap, table, tableConfig, dialect, session, config, mode){\n        this.fullSchema = fullSchema;\n        this.schema = schema;\n        this.tableNamesMap = tableNamesMap;\n        this.table = table;\n        this.tableConfig = tableConfig;\n        this.dialect = dialect;\n        this.session = session;\n        this.config = config;\n        this.mode = mode;\n    }\n    prepare() {\n        const query = this.dialect.buildRelationalQuery(this.fullSchema, this.schema, this.tableNamesMap, this.table, this.tableConfig, this.config, this.tableConfig.tsName, [], true);\n        const builtQuery = this.dialect.sqlToQuery(query.sql);\n        return this.session.prepareQuery(builtQuery, undefined, (rawRows, mapColumnValue)=>{\n            const rows = rawRows.map((row)=>(0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(this.schema, this.tableConfig, row, query.selection, mapColumnValue));\n            if (this.mode === \"first\") {\n                return rows[0];\n            }\n            return rows;\n        });\n    }\n    execute() {\n        if (this.mode === \"first\") {\n            return this.prepare().get();\n        }\n        return this.prepare().all();\n    }\n}\n(0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(SQLiteRelationalQuery, [\n    _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.Q\n]);\nclass BaseSQLiteDatabase {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"BaseSQLiteDatabase\";\n    }\n    constructor(resultKind, /** @internal */ dialect, /** @internal */ session, schema){\n        this.dialect = dialect;\n        this.session = session;\n        this._ = schema ? {\n            schema: schema.schema,\n            tableNamesMap: schema.tableNamesMap\n        } : {\n            schema: undefined,\n            tableNamesMap: {}\n        };\n        this.query = {};\n        if (this._.schema) {\n            for (const [tableName, columns] of Object.entries(this._.schema)){\n                this.query[tableName] = new (resultKind === \"async\" ? AsyncRelationalQueryBuilder : SyncRelationalQueryBuilder)(schema.fullSchema, this._.schema, this._.tableNamesMap, schema.fullSchema[tableName], columns, dialect, session);\n            }\n        }\n    }\n    $with(alias) {\n        return {\n            as (qb) {\n                if (typeof qb === \"function\") {\n                    qb = qb(new QueryBuilder());\n                }\n                return new Proxy(new _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.W(qb.getSQL(), qb.getSelectedFields(), alias, true), new _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.j({\n                    alias,\n                    sqlAliasedBehavior: \"alias\",\n                    sqlBehavior: \"error\"\n                }));\n            }\n        };\n    }\n    with(...queries) {\n        const self = this;\n        function select(fields) {\n            return new SQLiteSelectBuilder({\n                fields: fields ?? undefined,\n                session: self.session,\n                dialect: self.dialect,\n                withList: queries\n            });\n        }\n        function selectDistinct(fields) {\n            return new SQLiteSelectBuilder({\n                fields: fields ?? undefined,\n                session: self.session,\n                dialect: self.dialect,\n                withList: queries,\n                distinct: true\n            });\n        }\n        return {\n            select,\n            selectDistinct\n        };\n    }\n    select(fields) {\n        return new SQLiteSelectBuilder({\n            fields: fields ?? undefined,\n            session: this.session,\n            dialect: this.dialect\n        });\n    }\n    selectDistinct(fields) {\n        return new SQLiteSelectBuilder({\n            fields: fields ?? undefined,\n            session: this.session,\n            dialect: this.dialect,\n            distinct: true\n        });\n    }\n    update(table) {\n        return new SQLiteUpdateBuilder(table, this.session, this.dialect);\n    }\n    insert(into) {\n        return new SQLiteInsertBuilder(into, this.session, this.dialect);\n    }\n    delete(from) {\n        return new SQLiteDelete(from, this.session, this.dialect);\n    }\n    run(query) {\n        return this.session.run(query.getSQL());\n    }\n    all(query) {\n        return this.session.all(query.getSQL());\n    }\n    get(query) {\n        return this.session.get(query.getSQL());\n    }\n    values(query) {\n        return this.session.values(query.getSQL());\n    }\n    transaction(transaction, config) {\n        return this.session.transaction(transaction, config);\n    }\n}\nlet PreparedQuery$1 = class PreparedQuery {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"PreparedQuery\";\n    }\n};\nclass SQLiteSession {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"SQLiteSession\";\n    }\n    constructor(/** @internal */ dialect){\n        this.dialect = dialect;\n    }\n    prepareOneTimeQuery(query, fields) {\n        return this.prepareQuery(query, fields);\n    }\n    run(query) {\n        const staticQuery = this.dialect.sqlToQuery(query);\n        try {\n            return this.prepareOneTimeQuery(staticQuery, undefined).run();\n        } catch (err) {\n            throw _errors_fed11085_mjs__WEBPACK_IMPORTED_MODULE_1__.D.wrap(err, `Failed to run the query '${staticQuery.sql}'`);\n        }\n    }\n    all(query) {\n        return this.prepareOneTimeQuery(this.dialect.sqlToQuery(query), undefined).all();\n    }\n    get(query) {\n        return this.prepareOneTimeQuery(this.dialect.sqlToQuery(query), undefined).get();\n    }\n    values(query) {\n        return this.prepareOneTimeQuery(this.dialect.sqlToQuery(query), undefined).values();\n    }\n}\nclass SQLiteTransaction extends BaseSQLiteDatabase {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = \"SQLiteTransaction\";\n    }\n    constructor(resultType, dialect, session, schema, nestedIndex = 0){\n        super(resultType, dialect, session, schema);\n        this.schema = schema;\n        this.nestedIndex = nestedIndex;\n    }\n    rollback() {\n        throw new _errors_fed11085_mjs__WEBPACK_IMPORTED_MODULE_1__.T();\n    }\n}\n //# sourceMappingURL=session-8302855c.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/drizzle-orm@0.27.2_@libsql+client@0.3.4/node_modules/drizzle-orm/session-8302855c.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/drizzle-orm@0.27.2_@libsql+client@0.3.4/node_modules/drizzle-orm/sqlite-core/index.mjs":
/*!***********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/drizzle-orm@0.27.2_@libsql+client@0.3.4/node_modules/drizzle-orm/sqlite-core/index.mjs ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseSQLiteDatabase: () => (/* reexport safe */ _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.B),\n/* harmony export */   Check: () => (/* binding */ Check),\n/* harmony export */   CheckBuilder: () => (/* binding */ CheckBuilder),\n/* harmony export */   ForeignKey: () => (/* binding */ ForeignKey),\n/* harmony export */   ForeignKeyBuilder: () => (/* binding */ ForeignKeyBuilder),\n/* harmony export */   Index: () => (/* binding */ Index),\n/* harmony export */   IndexBuilder: () => (/* binding */ IndexBuilder),\n/* harmony export */   IndexBuilderOn: () => (/* binding */ IndexBuilderOn),\n/* harmony export */   InlineForeignKeys: () => (/* reexport safe */ _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.I),\n/* harmony export */   ManualViewBuilder: () => (/* reexport safe */ _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.M),\n/* harmony export */   PreparedQuery: () => (/* reexport safe */ _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.P),\n/* harmony export */   PrimaryKey: () => (/* binding */ PrimaryKey),\n/* harmony export */   PrimaryKeyBuilder: () => (/* binding */ PrimaryKeyBuilder),\n/* harmony export */   QueryBuilder: () => (/* reexport safe */ _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.Q),\n/* harmony export */   SQLiteAsyncDialect: () => (/* reexport safe */ _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   SQLiteBaseInteger: () => (/* binding */ SQLiteBaseInteger),\n/* harmony export */   SQLiteBaseIntegerBuilder: () => (/* binding */ SQLiteBaseIntegerBuilder),\n/* harmony export */   SQLiteBigInt: () => (/* binding */ SQLiteBigInt),\n/* harmony export */   SQLiteBigIntBuilder: () => (/* binding */ SQLiteBigIntBuilder),\n/* harmony export */   SQLiteBlobBuffer: () => (/* binding */ SQLiteBlobBuffer),\n/* harmony export */   SQLiteBlobBufferBuilder: () => (/* binding */ SQLiteBlobBufferBuilder),\n/* harmony export */   SQLiteBlobJson: () => (/* binding */ SQLiteBlobJson),\n/* harmony export */   SQLiteBlobJsonBuilder: () => (/* binding */ SQLiteBlobJsonBuilder),\n/* harmony export */   SQLiteBoolean: () => (/* binding */ SQLiteBoolean),\n/* harmony export */   SQLiteBooleanBuilder: () => (/* binding */ SQLiteBooleanBuilder),\n/* harmony export */   SQLiteColumn: () => (/* binding */ SQLiteColumn),\n/* harmony export */   SQLiteColumnBuilder: () => (/* binding */ SQLiteColumnBuilder),\n/* harmony export */   SQLiteCustomColumn: () => (/* binding */ SQLiteCustomColumn),\n/* harmony export */   SQLiteCustomColumnBuilder: () => (/* binding */ SQLiteCustomColumnBuilder),\n/* harmony export */   SQLiteDelete: () => (/* reexport safe */ _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.g),\n/* harmony export */   SQLiteDialect: () => (/* reexport safe */ _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.f),\n/* harmony export */   SQLiteInsert: () => (/* reexport safe */ _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.i),\n/* harmony export */   SQLiteInsertBuilder: () => (/* reexport safe */ _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.h),\n/* harmony export */   SQLiteInteger: () => (/* binding */ SQLiteInteger),\n/* harmony export */   SQLiteIntegerBuilder: () => (/* binding */ SQLiteIntegerBuilder),\n/* harmony export */   SQLiteNumeric: () => (/* binding */ SQLiteNumeric),\n/* harmony export */   SQLiteNumericBuilder: () => (/* binding */ SQLiteNumericBuilder),\n/* harmony export */   SQLiteReal: () => (/* binding */ SQLiteReal),\n/* harmony export */   SQLiteRealBuilder: () => (/* binding */ SQLiteRealBuilder),\n/* harmony export */   SQLiteSelect: () => (/* reexport safe */ _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.l),\n/* harmony export */   SQLiteSelectBuilder: () => (/* reexport safe */ _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.j),\n/* harmony export */   SQLiteSelectQueryBuilder: () => (/* reexport safe */ _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.k),\n/* harmony export */   SQLiteSession: () => (/* reexport safe */ _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.S),\n/* harmony export */   SQLiteSyncDialect: () => (/* reexport safe */ _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   SQLiteTable: () => (/* reexport safe */ _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.d),\n/* harmony export */   SQLiteText: () => (/* binding */ SQLiteText),\n/* harmony export */   SQLiteTextBuilder: () => (/* binding */ SQLiteTextBuilder),\n/* harmony export */   SQLiteTimestamp: () => (/* binding */ SQLiteTimestamp),\n/* harmony export */   SQLiteTimestampBuilder: () => (/* binding */ SQLiteTimestampBuilder),\n/* harmony export */   SQLiteTransaction: () => (/* reexport safe */ _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   SQLiteUpdate: () => (/* reexport safe */ _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.n),\n/* harmony export */   SQLiteUpdateBuilder: () => (/* reexport safe */ _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.m),\n/* harmony export */   SQLiteView: () => (/* reexport safe */ _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.r),\n/* harmony export */   SQLiteViewBase: () => (/* reexport safe */ _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.q),\n/* harmony export */   SQLiteViewConfig: () => (/* reexport safe */ _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.e),\n/* harmony export */   UniqueConstraint: () => (/* binding */ UniqueConstraint),\n/* harmony export */   UniqueConstraintBuilder: () => (/* binding */ UniqueConstraintBuilder),\n/* harmony export */   UniqueOnConstraintBuilder: () => (/* binding */ UniqueOnConstraintBuilder),\n/* harmony export */   ViewBuilder: () => (/* reexport safe */ _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.p),\n/* harmony export */   ViewBuilderCore: () => (/* reexport safe */ _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.V),\n/* harmony export */   alias: () => (/* binding */ alias),\n/* harmony export */   blob: () => (/* binding */ blob),\n/* harmony export */   check: () => (/* binding */ check),\n/* harmony export */   customType: () => (/* binding */ customType),\n/* harmony export */   foreignKey: () => (/* binding */ foreignKey),\n/* harmony export */   getTableConfig: () => (/* binding */ getTableConfig),\n/* harmony export */   getViewConfig: () => (/* binding */ getViewConfig),\n/* harmony export */   index: () => (/* binding */ index),\n/* harmony export */   int: () => (/* binding */ int),\n/* harmony export */   integer: () => (/* binding */ integer),\n/* harmony export */   numeric: () => (/* binding */ numeric),\n/* harmony export */   primaryKey: () => (/* binding */ primaryKey),\n/* harmony export */   real: () => (/* binding */ real),\n/* harmony export */   sqliteTable: () => (/* reexport safe */ _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.s),\n/* harmony export */   sqliteTableCreator: () => (/* reexport safe */ _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.o),\n/* harmony export */   sqliteView: () => (/* reexport safe */ _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.t),\n/* harmony export */   text: () => (/* binding */ text),\n/* harmony export */   unique: () => (/* binding */ unique),\n/* harmony export */   uniqueIndex: () => (/* binding */ uniqueIndex),\n/* harmony export */   uniqueKeyName: () => (/* binding */ uniqueKeyName),\n/* harmony export */   view: () => (/* reexport safe */ _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.v)\n/* harmony export */ });\n/* harmony import */ var _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../alias-3e926a50.mjs */ \"(rsc)/../../node_modules/.pnpm/drizzle-orm@0.27.2_@libsql+client@0.3.4/node_modules/drizzle-orm/alias-3e926a50.mjs\");\n/* harmony import */ var _session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../session-8302855c.mjs */ \"(rsc)/../../node_modules/.pnpm/drizzle-orm@0.27.2_@libsql+client@0.3.4/node_modules/drizzle-orm/session-8302855c.mjs\");\n\n\n\n\nfunction alias(table, alias) {\n    return new Proxy(table, new _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.M(alias, false));\n}\nclass CheckBuilder {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteCheckBuilder\";\n    }\n    constructor(name, value){\n        this.name = name;\n        this.value = value;\n    }\n    build(table) {\n        return new Check(table, this);\n    }\n}\nclass Check {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteCheck\";\n    }\n    constructor(table, builder){\n        this.table = table;\n        this.name = builder.name;\n        this.value = builder.value;\n    }\n}\nfunction check(name, value) {\n    return new CheckBuilder(name, value);\n}\nclass ForeignKeyBuilder {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteForeignKeyBuilder\";\n    }\n    constructor(config, actions){\n        this.reference = ()=>{\n            const { columns, foreignColumns } = config();\n            return {\n                columns,\n                foreignTable: foreignColumns[0].table,\n                foreignColumns\n            };\n        };\n        if (actions) {\n            this._onUpdate = actions.onUpdate;\n            this._onDelete = actions.onDelete;\n        }\n    }\n    onUpdate(action) {\n        this._onUpdate = action;\n        return this;\n    }\n    onDelete(action) {\n        this._onDelete = action;\n        return this;\n    }\n    /** @internal */ build(table) {\n        return new ForeignKey(table, this);\n    }\n}\nclass ForeignKey {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteForeignKey\";\n    }\n    constructor(table, builder){\n        this.table = table;\n        this.reference = builder.reference;\n        this.onUpdate = builder._onUpdate;\n        this.onDelete = builder._onDelete;\n    }\n    getName() {\n        const { columns, foreignColumns } = this.reference();\n        const columnNames = columns.map((column)=>column.name);\n        const foreignColumnNames = foreignColumns.map((column)=>column.name);\n        const chunks = [\n            this.table[_session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.d.Symbol.Name],\n            ...columnNames,\n            foreignColumns[0].table[_session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.d.Symbol.Name],\n            ...foreignColumnNames\n        ];\n        return `${chunks.join(\"_\")}_fk`;\n    }\n}\nfunction foreignKey(config) {\n    function mappedConfig() {\n        const { columns, foreignColumns } = config();\n        return {\n            columns,\n            foreignColumns\n        };\n    }\n    return new ForeignKeyBuilder(mappedConfig);\n}\nfunction uniqueKeyName(table, columns) {\n    return `${table[_session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.d.Symbol.Name]}_${columns.join(\"_\")}_unique`;\n}\nfunction unique(name) {\n    return new UniqueOnConstraintBuilder(name);\n}\nclass UniqueConstraintBuilder {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteUniqueConstraintBuilder\";\n    }\n    constructor(columns, name){\n        this.name = name;\n        this.columns = columns;\n    }\n    /** @internal */ build(table) {\n        return new UniqueConstraint(table, this.columns, this.name);\n    }\n}\nclass UniqueOnConstraintBuilder {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteUniqueOnConstraintBuilder\";\n    }\n    constructor(name){\n        this.name = name;\n    }\n    on(...columns) {\n        return new UniqueConstraintBuilder(columns, this.name);\n    }\n}\nclass UniqueConstraint {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteUniqueConstraint\";\n    }\n    constructor(table, columns, name){\n        this.table = table;\n        this.columns = columns;\n        this.name = name ?? uniqueKeyName(this.table, this.columns.map((column)=>column.name));\n    }\n    getName() {\n        return this.name;\n    }\n}\nclass SQLiteColumnBuilder extends _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.L {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteColumnBuilder\";\n    }\n    references(ref, actions = {}) {\n        this.foreignKeyConfigs.push({\n            ref,\n            actions\n        });\n        return this;\n    }\n    unique(name) {\n        this.config.isUnique = true;\n        this.config.uniqueName = name;\n        return this;\n    }\n    /** @internal */ buildForeignKeys(column, table) {\n        return this.foreignKeyConfigs.map(({ ref, actions })=>{\n            return ((ref, actions)=>{\n                const builder = new ForeignKeyBuilder(()=>{\n                    const foreignColumn = ref();\n                    return {\n                        columns: [\n                            column\n                        ],\n                        foreignColumns: [\n                            foreignColumn\n                        ]\n                    };\n                });\n                if (actions.onUpdate) {\n                    builder.onUpdate(actions.onUpdate);\n                }\n                if (actions.onDelete) {\n                    builder.onDelete(actions.onDelete);\n                }\n                return builder.build(table);\n            })(ref, actions);\n        });\n    }\n    constructor(...args){\n        super(...args);\n        this.foreignKeyConfigs = [];\n    }\n}\n// To understand how to use `SQLiteColumn` and `AnySQLiteColumn`, see `Column` and `AnyColumn` documentation.\nclass SQLiteColumn extends _alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.C {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteColumn\";\n    }\n    constructor(table, config){\n        if (!config.uniqueName) {\n            config.uniqueName = uniqueKeyName(table, [\n                config.name\n            ]);\n        }\n        super(table, config);\n        this.table = table;\n    }\n}\nclass SQLiteBigIntBuilder extends SQLiteColumnBuilder {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteBigIntBuilder\";\n    }\n    /** @internal */ build(table) {\n        return new SQLiteBigInt(table, this.config);\n    }\n}\nclass SQLiteBigInt extends SQLiteColumn {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteBigInt\";\n    }\n    getSQLType() {\n        return \"blob\";\n    }\n    mapFromDriverValue(value) {\n        return BigInt(value.toString());\n    }\n    mapToDriverValue(value) {\n        return Buffer.from(value.toString());\n    }\n}\nclass SQLiteBlobJsonBuilder extends SQLiteColumnBuilder {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteBlobJsonBuilder\";\n    }\n    /** @internal */ build(table) {\n        return new SQLiteBlobJson(table, this.config);\n    }\n}\nclass SQLiteBlobJson extends SQLiteColumn {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteBlobJson\";\n    }\n    getSQLType() {\n        return \"blob\";\n    }\n    mapFromDriverValue(value) {\n        return JSON.parse(value.toString());\n    }\n    mapToDriverValue(value) {\n        return Buffer.from(JSON.stringify(value));\n    }\n}\nclass SQLiteBlobBufferBuilder extends SQLiteColumnBuilder {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteBlobBufferBuilder\";\n    }\n    /** @internal */ build(table) {\n        return new SQLiteBlobBuffer(table, this.config);\n    }\n}\nclass SQLiteBlobBuffer extends SQLiteColumn {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteBlobBuffer\";\n    }\n    getSQLType() {\n        return \"blob\";\n    }\n}\nfunction blob(name, config) {\n    if (config?.mode === \"json\") {\n        return new SQLiteBlobJsonBuilder(name);\n    }\n    if (config?.mode === \"bigint\") {\n        return new SQLiteBigIntBuilder(name);\n    }\n    return new SQLiteBlobBufferBuilder(name);\n}\nclass SQLiteCustomColumnBuilder extends SQLiteColumnBuilder {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteCustomColumnBuilder\";\n    }\n    constructor(name, fieldConfig, customTypeParams){\n        super(name);\n        this.config.fieldConfig = fieldConfig;\n        this.config.customTypeParams = customTypeParams;\n    }\n    /** @internal */ build(table) {\n        return new SQLiteCustomColumn(table, this.config);\n    }\n}\nclass SQLiteCustomColumn extends SQLiteColumn {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteCustomColumn\";\n    }\n    constructor(table, config){\n        super(table, config);\n        this.sqlName = config.customTypeParams.dataType(config.fieldConfig);\n        this.mapTo = config.customTypeParams.toDriver;\n        this.mapFrom = config.customTypeParams.fromDriver;\n    }\n    getSQLType() {\n        return this.sqlName;\n    }\n    mapFromDriverValue(value) {\n        return typeof this.mapFrom === \"function\" ? this.mapFrom(value) : value;\n    }\n    mapToDriverValue(value) {\n        return typeof this.mapTo === \"function\" ? this.mapTo(value) : value;\n    }\n}\n/**\n * Custom sqlite database data type generator\n */ function customType(customTypeParams) {\n    return (dbName, fieldConfig)=>{\n        return new SQLiteCustomColumnBuilder(dbName, fieldConfig, customTypeParams);\n    };\n}\nclass SQLiteBaseIntegerBuilder extends SQLiteColumnBuilder {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteBaseIntegerBuilder\";\n    }\n    constructor(name){\n        super(name);\n        this.config.autoIncrement = false;\n    }\n    primaryKey(config) {\n        if (config?.autoIncrement) {\n            this.config.autoIncrement = true;\n        }\n        this.config.hasDefault = true;\n        return super.primaryKey();\n    }\n}\nclass SQLiteBaseInteger extends SQLiteColumn {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteBaseInteger\";\n    }\n    getSQLType() {\n        return \"integer\";\n    }\n    constructor(...args){\n        super(...args);\n        this.autoIncrement = this.config.autoIncrement;\n    }\n}\nclass SQLiteIntegerBuilder extends SQLiteBaseIntegerBuilder {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteIntegerBuilder\";\n    }\n    build(table) {\n        return new SQLiteInteger(table, this.config);\n    }\n}\nclass SQLiteInteger extends SQLiteBaseInteger {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteInteger\";\n    }\n}\nclass SQLiteTimestampBuilder extends SQLiteBaseIntegerBuilder {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteTimestampBuilder\";\n    }\n    constructor(name, mode){\n        super(name);\n        this.config.mode = mode;\n    }\n    /**\n     * @deprecated Use `default()` with your own expression instead.\n     *\n     * Adds `DEFAULT (cast((julianday('now') - 2440587.5)*86400000 as integer))` to the column, which is the current epoch timestamp in milliseconds.\n     */ defaultNow() {\n        return this.default(_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.s`(cast((julianday('now') - 2440587.5)*86400000 as integer))`);\n    }\n    build(table) {\n        return new SQLiteTimestamp(table, this.config);\n    }\n}\nclass SQLiteTimestamp extends SQLiteBaseInteger {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteTimestamp\";\n    }\n    mapFromDriverValue(value) {\n        if (this.config.mode === \"timestamp\") {\n            return new Date(value * 1000);\n        }\n        return new Date(value);\n    }\n    mapToDriverValue(value) {\n        const unix = value.getTime();\n        if (this.config.mode === \"timestamp\") {\n            return Math.floor(unix / 1000);\n        }\n        return unix;\n    }\n    constructor(...args){\n        super(...args);\n        this.mode = this.config.mode;\n    }\n}\nclass SQLiteBooleanBuilder extends SQLiteBaseIntegerBuilder {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteBooleanBuilder\";\n    }\n    constructor(name, mode){\n        super(name);\n        this.config.mode = mode;\n    }\n    build(table) {\n        return new SQLiteBoolean(table, this.config);\n    }\n}\nclass SQLiteBoolean extends SQLiteBaseInteger {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteBoolean\";\n    }\n    mapFromDriverValue(value) {\n        return Number(value) === 1;\n    }\n    mapToDriverValue(value) {\n        return value ? 1 : 0;\n    }\n    constructor(...args){\n        super(...args);\n        this.mode = this.config.mode;\n    }\n}\nfunction integer(name, config) {\n    if (config?.mode === \"timestamp\" || config?.mode === \"timestamp_ms\") {\n        return new SQLiteTimestampBuilder(name, config.mode);\n    }\n    if (config?.mode === \"boolean\") {\n        return new SQLiteBooleanBuilder(name, config.mode);\n    }\n    return new SQLiteIntegerBuilder(name);\n}\nconst int = integer;\nclass SQLiteNumericBuilder extends SQLiteColumnBuilder {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteNumericBuilder\";\n    }\n    /** @internal */ build(table) {\n        return new SQLiteNumeric(table, this.config);\n    }\n}\nclass SQLiteNumeric extends SQLiteColumn {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteNumeric\";\n    }\n    getSQLType() {\n        return \"numeric\";\n    }\n}\nfunction numeric(name) {\n    return new SQLiteNumericBuilder(name);\n}\nclass SQLiteRealBuilder extends SQLiteColumnBuilder {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteRealBuilder\";\n    }\n    /** @internal */ build(table) {\n        return new SQLiteReal(table, this.config);\n    }\n}\nclass SQLiteReal extends SQLiteColumn {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteReal\";\n    }\n    getSQLType() {\n        return \"real\";\n    }\n}\nfunction real(name) {\n    return new SQLiteRealBuilder(name);\n}\nclass SQLiteTextBuilder extends SQLiteColumnBuilder {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteTextBuilder\";\n    }\n    constructor(name, config){\n        super(name);\n        this.config.enumValues = config.enum ?? [];\n        this.config.length = config.length;\n    }\n    /** @internal */ build(table) {\n        return new SQLiteText(table, this.config);\n    }\n}\nclass SQLiteText extends SQLiteColumn {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteText\";\n    }\n    constructor(table, config){\n        super(table, config);\n        this.enumValues = this.config.enumValues;\n        this.length = this.config.length;\n    }\n    getSQLType() {\n        return `text${this.config.length ? `(${this.config.length})` : \"\"}`;\n    }\n}\nfunction text(name, config = {}) {\n    return new SQLiteTextBuilder(name, config);\n}\nclass IndexBuilderOn {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteIndexBuilderOn\";\n    }\n    constructor(name, unique){\n        this.name = name;\n        this.unique = unique;\n    }\n    on(...columns) {\n        return new IndexBuilder(this.name, columns, this.unique);\n    }\n}\nclass IndexBuilder {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteIndexBuilder\";\n    }\n    constructor(name, columns, unique){\n        this.config = {\n            name,\n            columns,\n            unique,\n            where: undefined\n        };\n    }\n    /**\n     * Condition for partial index.\n     */ where(condition) {\n        this.config.where = condition;\n        return this;\n    }\n    /** @internal */ build(table) {\n        return new Index(this.config, table);\n    }\n}\nclass Index {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLiteIndex\";\n    }\n    constructor(config, table){\n        this.config = {\n            ...config,\n            table\n        };\n    }\n}\nfunction index(name) {\n    return new IndexBuilderOn(name, false);\n}\nfunction uniqueIndex(name) {\n    return new IndexBuilderOn(name, true);\n}\nfunction primaryKey(...columns) {\n    return new PrimaryKeyBuilder(columns);\n}\nclass PrimaryKeyBuilder {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLitePrimaryKeyBuilder\";\n    }\n    constructor(columns){\n        this.columns = columns;\n    }\n    /** @internal */ build(table) {\n        return new PrimaryKey(table, this.columns);\n    }\n}\nclass PrimaryKey {\n    static{\n        this[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = \"SQLitePrimaryKey\";\n    }\n    constructor(table, columns){\n        this.table = table;\n        this.columns = columns;\n    }\n    getName() {\n        return `${this.table[_session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.d.Symbol.Name]}_${this.columns.map((column)=>column.name).join(\"_\")}_pk`;\n    }\n}\nfunction getTableConfig(table) {\n    const columns = Object.values(table[_session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.d.Symbol.Columns]);\n    const indexes = [];\n    const checks = [];\n    const primaryKeys = [];\n    const uniqueConstraints = [];\n    const foreignKeys = Object.values(table[_session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.d.Symbol.InlineForeignKeys]);\n    const name = table[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.T.Symbol.Name];\n    const extraConfigBuilder = table[_session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.d.Symbol.ExtraConfigBuilder];\n    if (extraConfigBuilder !== undefined) {\n        const extraConfig = extraConfigBuilder(table[_session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.d.Symbol.Columns]);\n        for (const builder of Object.values(extraConfig)){\n            if ((0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(builder, IndexBuilder)) {\n                indexes.push(builder.build(table));\n            } else if ((0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(builder, CheckBuilder)) {\n                checks.push(builder.build(table));\n            } else if ((0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(builder, UniqueConstraintBuilder)) {\n                uniqueConstraints.push(builder.build(table));\n            } else if ((0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(builder, PrimaryKeyBuilder)) {\n                primaryKeys.push(builder.build(table));\n            } else if ((0,_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(builder, ForeignKeyBuilder)) {\n                foreignKeys.push(builder.build(table));\n            }\n        }\n    }\n    return {\n        columns,\n        indexes,\n        foreignKeys,\n        checks,\n        primaryKeys,\n        uniqueConstraints,\n        name\n    };\n}\nfunction getViewConfig(view) {\n    return {\n        ...view[_alias_3e926a50_mjs__WEBPACK_IMPORTED_MODULE_1__.u],\n        ...view[_session_8302855c_mjs__WEBPACK_IMPORTED_MODULE_0__.e]\n    };\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/drizzle-orm@0.27.2_@libsql+client@0.3.4/node_modules/drizzle-orm/sqlite-core/index.mjs\n");

/***/ })

};
;